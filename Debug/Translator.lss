
Translator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000066e  00800100  00001d4a  00001dde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000070  0080076e  0080076e  0000244c  2**0
                  ALLOC
  3 .stab         00003e70  00000000  00000000  0000244c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016e8  00000000  00000000  000062bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__ctors_end>
       4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
       8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
       c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      10:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      14:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      18:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      1c:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__vector_7>
      20:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_8>
      24:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      28:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      2c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      30:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      34:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      38:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      3c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      40:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      44:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      48:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_18>
      4c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      50:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      54:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      58:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      5c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      60:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      64:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      68:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      6c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      70:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      74:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      78:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>

0000007c <progmem_Befehl>:
      7c:	49 6e 69 74 0a 00 00 00 00 00 00 00 00 00 00 00     Init............
      8c:	00 00 00 40 30 31 00 00 00 00 00 00 00 00 00 00     ...@01..........
	...
      b4:	00 00 00 30 0d 0a 00 00 00 00 00 00 00 00 00 00     ...0............
	...
      dc:	00 00 00 48 6f 6d 65 0a 00 00 00 00 00 00 00 00     ...Home.........
      ec:	00 00 00 00 00 00 40 30 31 00 00 00 00 00 00 00     ......@01.......
	...
     118:	00 00 30 0d 0a 00 00 00 00 00 00 00 00 00 00 00     ..0.............
	...

00000142 <__ctors_end>:
     142:	11 24       	eor	r1, r1
     144:	1f be       	out	0x3f, r1	; 63
     146:	cf ef       	ldi	r28, 0xFF	; 255
     148:	d8 e0       	ldi	r29, 0x08	; 8
     14a:	de bf       	out	0x3e, r29	; 62
     14c:	cd bf       	out	0x3d, r28	; 61

0000014e <__do_copy_data>:
     14e:	17 e0       	ldi	r17, 0x07	; 7
     150:	a0 e0       	ldi	r26, 0x00	; 0
     152:	b1 e0       	ldi	r27, 0x01	; 1
     154:	ea e4       	ldi	r30, 0x4A	; 74
     156:	fd e1       	ldi	r31, 0x1D	; 29
     158:	02 c0       	rjmp	.+4      	; 0x15e <.do_copy_data_start>

0000015a <.do_copy_data_loop>:
     15a:	05 90       	lpm	r0, Z+
     15c:	0d 92       	st	X+, r0

0000015e <.do_copy_data_start>:
     15e:	ae 36       	cpi	r26, 0x6E	; 110
     160:	b1 07       	cpc	r27, r17
     162:	d9 f7       	brne	.-10     	; 0x15a <.do_copy_data_loop>

00000164 <__do_clear_bss>:
     164:	17 e0       	ldi	r17, 0x07	; 7
     166:	ae e6       	ldi	r26, 0x6E	; 110
     168:	b7 e0       	ldi	r27, 0x07	; 7
     16a:	01 c0       	rjmp	.+2      	; 0x16e <.do_clear_bss_start>

0000016c <.do_clear_bss_loop>:
     16c:	1d 92       	st	X+, r1

0000016e <.do_clear_bss_start>:
     16e:	ae 3d       	cpi	r26, 0xDE	; 222
     170:	b1 07       	cpc	r27, r17
     172:	e1 f7       	brne	.-8      	; 0x16c <.do_clear_bss_loop>
     174:	0e 94 32 0a 	call	0x1464	; 0x1464 <main>
     178:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <_exit>

0000017c <__bad_interrupt>:
     17c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000180 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
     180:	28 2f       	mov	r18, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     182:	66 23       	and	r22, r22
     184:	11 f0       	breq	.+4      	; 0x18a <lcd_write+0xa>
       lcd_rs_high();
     186:	46 9a       	sbi	0x08, 6	; 8
     188:	01 c0       	rjmp	.+2      	; 0x18c <lcd_write+0xc>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     18a:	46 98       	cbi	0x08, 6	; 8
    }
    lcd_rw_low();
     18c:	45 98       	cbi	0x08, 5	; 8

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
     18e:	87 b1       	in	r24, 0x07	; 7
     190:	8f 60       	ori	r24, 0x0F	; 15
     192:	87 b9       	out	0x07, r24	; 7

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
     194:	98 b1       	in	r25, 0x08	; 8
     196:	90 7f       	andi	r25, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
     198:	82 2f       	mov	r24, r18
     19a:	82 95       	swap	r24
     19c:	8f 70       	andi	r24, 0x0F	; 15
     19e:	89 2b       	or	r24, r25
     1a0:	88 b9       	out	0x08, r24	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     1a2:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_write+0x26>
    lcd_e_low();
     1a6:	44 98       	cbi	0x08, 4	; 8
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
     1a8:	2f 70       	andi	r18, 0x0F	; 15
     1aa:	29 2b       	or	r18, r25
     1ac:	28 b9       	out	0x08, r18	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     1ae:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_write+0x32>
    lcd_e_low();
     1b2:	44 98       	cbi	0x08, 4	; 8
        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
     1b4:	9f 60       	ori	r25, 0x0F	; 15
     1b6:	98 b9       	out	0x08, r25	; 8
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
     1b8:	08 95       	ret

000001ba <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
     1ba:	88 23       	and	r24, r24
     1bc:	11 f0       	breq	.+4      	; 0x1c2 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
     1be:	46 9a       	sbi	0x08, 6	; 8
     1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     1c2:	46 98       	cbi	0x08, 6	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
     1c4:	45 9a       	sbi	0x08, 5	; 8
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
     1c6:	87 b1       	in	r24, 0x07	; 7
     1c8:	80 7f       	andi	r24, 0xF0	; 240
     1ca:	87 b9       	out	0x07, r24	; 7
        
        lcd_e_high();
     1cc:	44 9a       	sbi	0x08, 4	; 8
        lcd_e_delay();        
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_read+0x16>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
     1d0:	96 b1       	in	r25, 0x06	; 6
        lcd_e_low();
     1d2:	44 98       	cbi	0x08, 4	; 8
        
        lcd_e_delay();                       /* Enable 500ns low       */
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_read+0x1c>
        
        lcd_e_high();
     1d6:	44 9a       	sbi	0x08, 4	; 8
        lcd_e_delay();
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_read+0x20>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
     1da:	86 b1       	in	r24, 0x06	; 6
     1dc:	8f 70       	andi	r24, 0x0F	; 15
     1de:	92 95       	swap	r25
     1e0:	90 7f       	andi	r25, 0xF0	; 240
        lcd_e_low();
     1e2:	44 98       	cbi	0x08, 4	; 8
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
     1e4:	89 2b       	or	r24, r25
     1e6:	08 95       	ret

000001e8 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_read>
     1ee:	87 fd       	sbrc	r24, 7
     1f0:	fb cf       	rjmp	.-10     	; 0x1e8 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_read>
    
}/* lcd_waitbusy */
     200:	08 95       	ret

00000202 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     202:	1f 93       	push	r17
     204:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     206:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_waitbusy>
    lcd_write(cmd,0);
     20a:	81 2f       	mov	r24, r17
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_write>
}
     212:	1f 91       	pop	r17
     214:	08 95       	ret

00000216 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     216:	1f 93       	push	r17
     218:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     21a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_waitbusy>
    lcd_write(data,1);
     21e:	81 2f       	mov	r24, r17
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_write>
}
     226:	1f 91       	pop	r17
     228:	08 95       	ret

0000022a <lcd_gotoxy>:
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
     22a:	66 23       	and	r22, r22
     22c:	11 f4       	brne	.+4      	; 0x232 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     22e:	80 58       	subi	r24, 0x80	; 128
     230:	09 c0       	rjmp	.+18     	; 0x244 <lcd_gotoxy+0x1a>
    else if ( y==1)
     232:	61 30       	cpi	r22, 0x01	; 1
     234:	11 f4       	brne	.+4      	; 0x23a <lcd_gotoxy+0x10>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     236:	80 54       	subi	r24, 0x40	; 64
     238:	05 c0       	rjmp	.+10     	; 0x244 <lcd_gotoxy+0x1a>
    else if ( y==2)
     23a:	62 30       	cpi	r22, 0x02	; 2
     23c:	11 f4       	brne	.+4      	; 0x242 <lcd_gotoxy+0x18>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
     23e:	8c 56       	subi	r24, 0x6C	; 108
     240:	01 c0       	rjmp	.+2      	; 0x244 <lcd_gotoxy+0x1a>
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
     242:	8c 52       	subi	r24, 0x2C	; 44
     244:	0e 94 01 01 	call	0x202	; 0x202 <lcd_command>
     248:	08 95       	ret

0000024a <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     24a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_waitbusy>
}
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	08 95       	ret

00000252 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 01 01 	call	0x202	; 0x202 <lcd_command>
}
     258:	08 95       	ret

0000025a <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	0e 94 01 01 	call	0x202	; 0x202 <lcd_command>
}
     260:	08 95       	ret

00000262 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     262:	1f 93       	push	r17
     264:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     266:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_waitbusy>
     26a:	98 2f       	mov	r25, r24
    if (c=='\n')
     26c:	1a 30       	cpi	r17, 0x0A	; 10
     26e:	99 f4       	brne	.+38     	; 0x296 <lcd_putc+0x34>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
     270:	84 31       	cpi	r24, 0x14	; 20
     272:	10 f4       	brcc	.+4      	; 0x278 <lcd_putc+0x16>
     274:	80 e4       	ldi	r24, 0x40	; 64
     276:	0b c0       	rjmp	.+22     	; 0x28e <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
     278:	80 54       	subi	r24, 0x40	; 64
     27a:	84 31       	cpi	r24, 0x14	; 20
     27c:	10 f4       	brcc	.+4      	; 0x282 <lcd_putc+0x20>
     27e:	84 e1       	ldi	r24, 0x14	; 20
     280:	06 c0       	rjmp	.+12     	; 0x28e <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
     282:	94 51       	subi	r25, 0x14	; 20
     284:	9c 32       	cpi	r25, 0x2C	; 44
     286:	10 f0       	brcs	.+4      	; 0x28c <lcd_putc+0x2a>
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	01 c0       	rjmp	.+2      	; 0x28e <lcd_putc+0x2c>
     28c:	84 e5       	ldi	r24, 0x54	; 84
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     28e:	80 58       	subi	r24, 0x80	; 128
     290:	0e 94 01 01 	call	0x202	; 0x202 <lcd_command>
     294:	18 c0       	rjmp	.+48     	; 0x2c6 <lcd_putc+0x64>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==4
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
     296:	83 31       	cpi	r24, 0x13	; 19
     298:	11 f4       	brne	.+4      	; 0x29e <lcd_putc+0x3c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
     29a:	80 ec       	ldi	r24, 0xC0	; 192
     29c:	0b c0       	rjmp	.+22     	; 0x2b4 <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
     29e:	83 35       	cpi	r24, 0x53	; 83
     2a0:	11 f4       	brne	.+4      	; 0x2a6 <lcd_putc+0x44>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
     2a2:	84 e9       	ldi	r24, 0x94	; 148
     2a4:	07 c0       	rjmp	.+14     	; 0x2b4 <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
     2a6:	87 32       	cpi	r24, 0x27	; 39
     2a8:	11 f4       	brne	.+4      	; 0x2ae <lcd_putc+0x4c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
     2aa:	84 ed       	ldi	r24, 0xD4	; 212
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
     2ae:	87 36       	cpi	r24, 0x67	; 103
     2b0:	21 f4       	brne	.+8      	; 0x2ba <lcd_putc+0x58>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
     2b2:	80 e8       	ldi	r24, 0x80	; 128
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_write>
        }
#endif
        lcd_waitbusy();
     2ba:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_waitbusy>
#endif
        lcd_write(c, 1);
     2be:	81 2f       	mov	r24, r17
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_write>
    }

}/* lcd_putc */
     2c6:	1f 91       	pop	r17
     2c8:	08 95       	ret

000002ca <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	ec 01       	movw	r28, r24
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
     2d2:	0e 94 31 01 	call	0x262	; 0x262 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     2d6:	89 91       	ld	r24, Y+
     2d8:	88 23       	and	r24, r24
     2da:	d9 f7       	brne	.-10     	; 0x2d2 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	ec 01       	movw	r28, r24
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
     2ea:	0e 94 31 01 	call	0x262	; 0x262 <lcd_putc>
     2ee:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     2f0:	21 96       	adiw	r28, 0x01	; 1
     2f2:	84 91       	lpm	r24, Z+
     2f4:	88 23       	and	r24, r24
     2f6:	c9 f7       	brne	.-14     	; 0x2ea <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     2fe:	1f 93       	push	r17
     300:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
     302:	87 b1       	in	r24, 0x07	; 7
     304:	8f 60       	ori	r24, 0x0F	; 15
     306:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     308:	3e 9a       	sbi	0x07, 6	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     30a:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     30c:	3c 9a       	sbi	0x07, 4	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     30e:	80 e8       	ldi	r24, 0x80	; 128
     310:	9e e3       	ldi	r25, 0x3E	; 62
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <lcd_init+0x14>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     316:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     318:	40 9a       	sbi	0x08, 0	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     31a:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     31c:	00 c0       	rjmp	.+0      	; 0x31e <lcd_init+0x20>
    lcd_e_low();
     31e:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     320:	80 e8       	ldi	r24, 0x80	; 128
     322:	93 e1       	ldi	r25, 0x13	; 19
     324:	01 97       	sbiw	r24, 0x01	; 1
     326:	f1 f7       	brne	.-4      	; 0x324 <lcd_init+0x26>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     328:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     32a:	00 c0       	rjmp	.+0      	; 0x32c <lcd_init+0x2e>
    lcd_e_low();
     32c:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     32e:	80 e4       	ldi	r24, 0x40	; 64
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	fc 01       	movw	r30, r24
     334:	31 97       	sbiw	r30, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <lcd_init+0x36>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     338:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     33a:	00 c0       	rjmp	.+0      	; 0x33c <lcd_init+0x3e>
    lcd_e_low();
     33c:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     33e:	fc 01       	movw	r30, r24
     340:	31 97       	sbiw	r30, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     344:	40 98       	cbi	0x08, 0	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     346:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     348:	00 c0       	rjmp	.+0      	; 0x34a <lcd_init+0x4c>
    lcd_e_low();
     34a:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <lcd_init+0x4e>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     350:	88 e2       	ldi	r24, 0x28	; 40
     352:	0e 94 01 01 	call	0x202	; 0x202 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     356:	88 e0       	ldi	r24, 0x08	; 8
     358:	0e 94 01 01 	call	0x202	; 0x202 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     35c:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     360:	86 e0       	ldi	r24, 0x06	; 6
     362:	0e 94 01 01 	call	0x202	; 0x202 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     366:	81 2f       	mov	r24, r17
     368:	0e 94 01 01 	call	0x202	; 0x202 <lcd_command>

}/* lcd_init */
     36c:	1f 91       	pop	r17
     36e:	08 95       	ret

00000370 <__vector_18>:
 
volatile uint8_t key_rpt;                                  // key long press and repeat
 
 
ISR( TIMER0_OVF_vect )                            // every 10ms
{
     370:	1f 92       	push	r1
     372:	0f 92       	push	r0
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	0f 92       	push	r0
     378:	11 24       	eor	r1, r1
     37a:	2f 93       	push	r18
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
  static uint8_t ct0, ct1, rpt;
  uint8_t i;
 
  TCNT0 = (uint8_t)(int16_t)-(F_CPU / 1024 * 10e-3 + 0.5);  // preload for 10ms
     380:	82 eb       	ldi	r24, 0xB2	; 178
     382:	86 bd       	out	0x26, r24	; 38
 
  i = key_state ^ ~KEY_PIN;                       // key changed ?
     384:	80 91 dd 07 	lds	r24, 0x07DD
     388:	20 b1       	in	r18, 0x00	; 0
     38a:	20 95       	com	r18
     38c:	28 27       	eor	r18, r24
  ct0 = ~( ct0 & i );                             // reset or count ct0
     38e:	80 91 76 07 	lds	r24, 0x0776
     392:	82 23       	and	r24, r18
     394:	80 95       	com	r24
     396:	80 93 76 07 	sts	0x0776, r24
  ct1 = ct0 ^ (ct1 & i);                          // reset or count ct1
     39a:	90 91 75 07 	lds	r25, 0x0775
     39e:	92 23       	and	r25, r18
     3a0:	98 27       	eor	r25, r24
     3a2:	90 93 75 07 	sts	0x0775, r25
  i &= ct0 & ct1;                                 // count until roll over ?
     3a6:	82 23       	and	r24, r18
     3a8:	89 23       	and	r24, r25
  key_state ^= i;                                 // then toggle debounced state
     3aa:	90 91 dd 07 	lds	r25, 0x07DD
     3ae:	98 27       	eor	r25, r24
     3b0:	90 93 dd 07 	sts	0x07DD, r25
  key_press |= key_state & i;                     // 0->1: key press detect
     3b4:	20 91 dc 07 	lds	r18, 0x07DC
     3b8:	90 91 dd 07 	lds	r25, 0x07DD
     3bc:	89 23       	and	r24, r25
     3be:	82 2b       	or	r24, r18
     3c0:	80 93 dc 07 	sts	0x07DC, r24
 
  if( (key_state & REPEAT_MASK) == 0 )            // check repeat function
     3c4:	80 91 dd 07 	lds	r24, 0x07DD
     3c8:	87 78       	andi	r24, 0x87	; 135
     3ca:	19 f4       	brne	.+6      	; 0x3d2 <__vector_18+0x62>
     rpt = REPEAT_START;                          // start delay
     3cc:	82 e3       	ldi	r24, 0x32	; 50
     3ce:	80 93 74 07 	sts	0x0774, r24
  if( --rpt == 0 ){
     3d2:	80 91 74 07 	lds	r24, 0x0774
     3d6:	81 50       	subi	r24, 0x01	; 1
     3d8:	80 93 74 07 	sts	0x0774, r24
     3dc:	88 23       	and	r24, r24
     3de:	59 f4       	brne	.+22     	; 0x3f6 <__vector_18+0x86>
    rpt = REPEAT_NEXT;                            // repeat delay
     3e0:	84 e1       	ldi	r24, 0x14	; 20
     3e2:	80 93 74 07 	sts	0x0774, r24
    key_rpt |= key_state & REPEAT_MASK;
     3e6:	90 91 77 07 	lds	r25, 0x0777
     3ea:	80 91 dd 07 	lds	r24, 0x07DD
     3ee:	87 78       	andi	r24, 0x87	; 135
     3f0:	89 2b       	or	r24, r25
     3f2:	80 93 77 07 	sts	0x0777, r24
  }
}
     3f6:	9f 91       	pop	r25
     3f8:	8f 91       	pop	r24
     3fa:	2f 91       	pop	r18
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <get_key_press>:
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     406:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     408:	90 91 dc 07 	lds	r25, 0x07DC
     40c:	89 23       	and	r24, r25
  key_press ^= key_mask;                          // clear key(s)
     40e:	90 91 dc 07 	lds	r25, 0x07DC
     412:	98 27       	eor	r25, r24
     414:	90 93 dc 07 	sts	0x07DC, r25
  sei();
     418:	78 94       	sei
  return key_mask;
}
     41a:	08 95       	ret

0000041c <get_key_rpt>:
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     41c:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
     41e:	90 91 77 07 	lds	r25, 0x0777
     422:	89 23       	and	r24, r25
  key_rpt ^= key_mask;                            // clear key(s)
     424:	90 91 77 07 	lds	r25, 0x0777
     428:	98 27       	eor	r25, r24
     42a:	90 93 77 07 	sts	0x0777, r25
  sei();
     42e:	78 94       	sei
  return key_mask;
}
     430:	08 95       	ret

00000432 <get_key_short>:
 
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_short( uint8_t key_mask )
{
  cli();                                          // read key state and key press atomic !
     432:	f8 94       	cli
  return get_key_press( ~key_state & key_mask );
     434:	90 91 dd 07 	lds	r25, 0x07DD
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     438:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     43a:	20 91 dc 07 	lds	r18, 0x07DC
     43e:	90 95       	com	r25
     440:	89 23       	and	r24, r25
     442:	82 23       	and	r24, r18
  key_press ^= key_mask;                          // clear key(s)
     444:	90 91 dc 07 	lds	r25, 0x07DC
     448:	98 27       	eor	r25, r24
     44a:	90 93 dc 07 	sts	0x07DC, r25
  sei();
     44e:	78 94       	sei
//
uint8_t get_key_short( uint8_t key_mask )
{
  cli();                                          // read key state and key press atomic !
  return get_key_press( ~key_state & key_mask );
}
     450:	08 95       	ret

00000452 <get_key_long>:
 
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_long( uint8_t key_mask )
{
     452:	98 2f       	mov	r25, r24
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     454:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
     456:	80 91 77 07 	lds	r24, 0x0777
     45a:	98 23       	and	r25, r24
  key_rpt ^= key_mask;                            // clear key(s)
     45c:	80 91 77 07 	lds	r24, 0x0777
     460:	89 27       	eor	r24, r25
     462:	80 93 77 07 	sts	0x0777, r24
  sei();
     466:	78 94       	sei
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     468:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     46a:	80 91 dc 07 	lds	r24, 0x07DC
     46e:	89 23       	and	r24, r25
  key_press ^= key_mask;                          // clear key(s)
     470:	90 91 dc 07 	lds	r25, 0x07DC
     474:	98 27       	eor	r25, r24
     476:	90 93 dc 07 	sts	0x07DC, r25
  sei();
     47a:	78 94       	sei
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_long( uint8_t key_mask )
{
  return get_key_press( get_key_rpt( key_mask ));
}
     47c:	08 95       	ret

0000047e <led_spielerein>:
	_delay_ms(500);
	lcd_my_type("Be a Honey Bee!\n");
	_delay_ms(600);
	lcd_clrscr();
}
void 	led_spielerein		(void) {
     47e:	41 e0       	ldi	r20, 0x01	; 1
     480:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     482:	a8 ec       	ldi	r26, 0xC8	; 200
     484:	b0 e0       	ldi	r27, 0x00	; 0

	for (int i = 1; i < 9; i++) // LEDs durchlaufen
	{
		_delay_ms(80); // Eine Sekunde +/-1/10000 Sekunde warten...
		LED_PORT &= ~((1 << i)); // l�scht Bit an PortB - LED an
     486:	61 e0       	ldi	r22, 0x01	; 1
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	21 c0       	rjmp	.+66     	; 0x4ce <led_spielerein+0x50>
     48c:	fd 01       	movw	r30, r26
     48e:	31 97       	sbiw	r30, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <led_spielerein+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     492:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     494:	d9 f7       	brne	.-10     	; 0x48c <led_spielerein+0xe>
     496:	25 b1       	in	r18, 0x05	; 5
     498:	cb 01       	movw	r24, r22
     49a:	04 2e       	mov	r0, r20
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <led_spielerein+0x24>
     49e:	88 0f       	add	r24, r24
     4a0:	99 1f       	adc	r25, r25
     4a2:	0a 94       	dec	r0
     4a4:	e2 f7       	brpl	.-8      	; 0x49e <led_spielerein+0x20>
     4a6:	80 95       	com	r24
     4a8:	82 23       	and	r24, r18
     4aa:	85 b9       	out	0x05, r24	; 5
		LED_PORT |= ((1 << (i - 1))); // setzt  Bit an PortB - LED aus
     4ac:	25 b1       	in	r18, 0x05	; 5
     4ae:	41 50       	subi	r20, 0x01	; 1
     4b0:	50 40       	sbci	r21, 0x00	; 0
     4b2:	cb 01       	movw	r24, r22
     4b4:	04 2e       	mov	r0, r20
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <led_spielerein+0x3e>
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	0a 94       	dec	r0
     4be:	e2 f7       	brpl	.-8      	; 0x4b8 <led_spielerein+0x3a>
     4c0:	28 2b       	or	r18, r24
     4c2:	25 b9       	out	0x05, r18	; 5
	_delay_ms(600);
	lcd_clrscr();
}
void 	led_spielerein		(void) {

	for (int i = 1; i < 9; i++) // LEDs durchlaufen
     4c4:	4e 5f       	subi	r20, 0xFE	; 254
     4c6:	5f 4f       	sbci	r21, 0xFF	; 255
     4c8:	49 30       	cpi	r20, 0x09	; 9
     4ca:	51 05       	cpc	r21, r1
     4cc:	19 f0       	breq	.+6      	; 0x4d4 <led_spielerein+0x56>
     4ce:	80 e2       	ldi	r24, 0x20	; 32
     4d0:	93 e0       	ldi	r25, 0x03	; 3
     4d2:	dc cf       	rjmp	.-72     	; 0x48c <led_spielerein+0xe>
     4d4:	08 95       	ret

000004d6 <debounce_init>:
}
void 	debounce_init		(void) {
	///////////////// Debounce Stuff ////////////////////

	// Configure debouncing routines
	KEY_DDR &= ~ALL_KEYS; // configure key port for input
     4d6:	81 b1       	in	r24, 0x01	; 1
     4d8:	11 b8       	out	0x01, r1	; 1
	KEY_PORT |= ALL_KEYS; // and turn on pull up resistors
     4da:	82 b1       	in	r24, 0x02	; 2
     4dc:	8f ef       	ldi	r24, 0xFF	; 255
     4de:	82 b9       	out	0x02, r24	; 2

	TCCR0B = (1 << CS02) | (1 << CS00); // divide by 1024
     4e0:	85 e0       	ldi	r24, 0x05	; 5
     4e2:	85 bd       	out	0x25, r24	; 37
	TCNT0 = (uint8_t) (int16_t) -(F_CPU / 1024 * 10 * 10e-3 + 0.5); // preload for 10ms
     4e4:	83 ef       	ldi	r24, 0xF3	; 243
     4e6:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= 1 << TOIE0; // enable timer interrupt
     4e8:	ee e6       	ldi	r30, 0x6E	; 110
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	80 81       	ld	r24, Z
     4ee:	81 60       	ori	r24, 0x01	; 1
     4f0:	80 83       	st	Z, r24

	sei();
     4f2:	78 94       	sei
	///////////////// Debounce Stuff ////////////////////
}
     4f4:	08 95       	ret

000004f6 <led_lauflicht>:
void 	led_lauflicht		(void) {
	uint8_t i = LED_PORT;
     4f6:	85 b1       	in	r24, 0x05	; 5
	i = (i & 0x07) | ((i << 1) & 0xF0);
     4f8:	98 2f       	mov	r25, r24
     4fa:	99 0f       	add	r25, r25
     4fc:	90 7f       	andi	r25, 0xF0	; 240
     4fe:	87 70       	andi	r24, 0x07	; 7
     500:	98 2b       	or	r25, r24
	if (i < 0xF0)
     502:	90 3f       	cpi	r25, 0xF0	; 240
     504:	08 f4       	brcc	.+2      	; 0x508 <led_lauflicht+0x12>
		i |= 0x08;
     506:	98 60       	ori	r25, 0x08	; 8
	LED_PORT = i;
     508:	95 b9       	out	0x05, r25	; 5
}
     50a:	08 95       	ret

0000050c <init_WDT>:
}
#include "mymenu.h"

// Init Stuff
void init_WDT(void) {
	cli();
     50c:	f8 94       	cli
	wdt_reset();
     50e:	a8 95       	wdr
	WDTCSR |= (1 << WDCE) | (1 << WDE);
     510:	e0 e6       	ldi	r30, 0x60	; 96
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	80 81       	ld	r24, Z
     516:	88 61       	ori	r24, 0x18	; 24
     518:	80 83       	st	Z, r24
	WDTCSR = (1 << WDE) | (1 << WDIE) | (1 << WDP3) | (1 << WDP0); //Watchdog 8s
     51a:	89 e6       	ldi	r24, 0x69	; 105
     51c:	80 83       	st	Z, r24
	//WDTCSR = 0x0F; //Watchdog Off
	sei();
     51e:	78 94       	sei
}
     520:	08 95       	ret

00000522 <__vector_8>:
//////////////////////////////

// Interrupt Stuff
ISR(WDT_vect)
//Interrupt Service Routine
{
     522:	1f 92       	push	r1
     524:	0f 92       	push	r0
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	0f 92       	push	r0
     52a:	11 24       	eor	r1, r1
     52c:	8f 93       	push	r24
     52e:	9f 93       	push	r25
		LED_PORT ^= (1 << LED0);
     530:	85 b1       	in	r24, 0x05	; 5
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	89 27       	eor	r24, r25
     536:	85 b9       	out	0x05, r24	; 5
}
     538:	9f 91       	pop	r25
     53a:	8f 91       	pop	r24
     53c:	0f 90       	pop	r0
     53e:	0f be       	out	0x3f, r0	; 63
     540:	0f 90       	pop	r0
     542:	1f 90       	pop	r1
     544:	18 95       	reti

00000546 <uart_init>:
	LED_PORT ^= (1 << LED0);
}
// UART Stuff
void 	uart_init			() {
	// UART 0 - IN (Rapidform Software/Terminal)
	UBRR0H = UBRRH_VALUE;
     546:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
     54a:	23 e3       	ldi	r18, 0x33	; 51
     54c:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0C = (3 << UCSZ00);
     550:	96 e0       	ldi	r25, 0x06	; 6
     552:	90 93 c2 00 	sts	0x00C2, r25
	UCSR0B |= (1 << TXEN0); //Transmitter Enabled
     556:	e1 ec       	ldi	r30, 0xC1	; 193
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	88 60       	ori	r24, 0x08	; 8
     55e:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXEN0); // UART RX einschalten
     560:	80 81       	ld	r24, Z
     562:	80 61       	ori	r24, 0x10	; 16
     564:	80 83       	st	Z, r24

	// UART 1 - OUT (Stepper Karte/Drehtisch)
	UBRR1H = UBRRH_VALUE;
     566:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = UBRRL_VALUE;
     56a:	20 93 cc 00 	sts	0x00CC, r18
	UCSR1C = (3 << UCSZ00);
     56e:	90 93 ca 00 	sts	0x00CA, r25
	UCSR1B |= (1 << TXEN1); //Transmitter Enabled
     572:	e9 ec       	ldi	r30, 0xC9	; 201
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	88 60       	ori	r24, 0x08	; 8
     57a:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXEN1); // UART RX einschalten
     57c:	80 81       	ld	r24, Z
     57e:	80 61       	ori	r24, 0x10	; 16
     580:	80 83       	st	Z, r24

}
     582:	08 95       	ret

00000584 <uart_put_charater>:
void 	uart_put_charater	(unsigned char c, int dir) {
     584:	98 2f       	mov	r25, r24
	// To Rapidform
	if (dir == D_RapidForm) {
     586:	67 2b       	or	r22, r23
     588:	39 f4       	brne	.+14     	; 0x598 <uart_put_charater+0x14>
		while (!(UCSR0A & (1 << UDRE0))) //warten bis Senden moeglich
     58a:	80 91 c0 00 	lds	r24, 0x00C0
     58e:	85 ff       	sbrs	r24, 5
     590:	fc cf       	rjmp	.-8      	; 0x58a <uart_put_charater+0x6>
		{
		}
		UDR0 = c; // sende Zeichen
     592:	90 93 c6 00 	sts	0x00C6, r25
     596:	08 95       	ret
	}
	// To Stepper
	else {
		while (!(UCSR1A & (1 << UDRE1))) //warten bis Senden moeglich
     598:	80 91 c8 00 	lds	r24, 0x00C8
     59c:	85 ff       	sbrs	r24, 5
     59e:	fc cf       	rjmp	.-8      	; 0x598 <uart_put_charater+0x14>
		{
		}
		UDR1 = c; // sende Zeichen
     5a0:	90 93 ce 00 	sts	0x00CE, r25
     5a4:	08 95       	ret

000005a6 <uart_put_string>:
	}
	//return 0;
}
void 	uart_put_string		(char *s, int dir) {
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	ec 01       	movw	r28, r24
     5b0:	8b 01       	movw	r16, r22
     5b2:	04 c0       	rjmp	.+8      	; 0x5bc <uart_put_string+0x16>
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		uart_put_charater(*s, dir);
     5b4:	b8 01       	movw	r22, r16
     5b6:	0e 94 c2 02 	call	0x584	; 0x584 <uart_put_charater>
		s++;
     5ba:	21 96       	adiw	r28, 0x01	; 1
		UDR1 = c; // sende Zeichen
	}
	//return 0;
}
void 	uart_put_string		(char *s, int dir) {
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
     5bc:	88 81       	ld	r24, Y
     5be:	88 23       	and	r24, r24
     5c0:	c9 f7       	brne	.-14     	; 0x5b4 <uart_put_string+0xe>
	{
		uart_put_charater(*s, dir);
		s++;
	}
}
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	08 95       	ret

000005cc <__vector_7>:
{
		LED_PORT ^= (1 << LED0);
}
ISR(PCINT3_vect)
//Interrupt Service Routine
{
     5cc:	1f 92       	push	r1
     5ce:	0f 92       	push	r0
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	0f 92       	push	r0
     5d4:	11 24       	eor	r1, r1
     5d6:	2f 93       	push	r18
     5d8:	3f 93       	push	r19
     5da:	4f 93       	push	r20
     5dc:	5f 93       	push	r21
     5de:	6f 93       	push	r22
     5e0:	7f 93       	push	r23
     5e2:	8f 93       	push	r24
     5e4:	9f 93       	push	r25
     5e6:	af 93       	push	r26
     5e8:	bf 93       	push	r27
     5ea:	ef 93       	push	r30
     5ec:	ff 93       	push	r31
	//led_lauflicht();
	//uart_put_string("2H\n", D_Stepper);
	uart_put_string("1H\n", D_Stepper);
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
	LED_PORT ^= (1 << LED0);
     5fa:	85 b1       	in	r24, 0x05	; 5
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	89 27       	eor	r24, r25
     600:	85 b9       	out	0x05, r24	; 5
}
     602:	ff 91       	pop	r31
     604:	ef 91       	pop	r30
     606:	bf 91       	pop	r27
     608:	af 91       	pop	r26
     60a:	9f 91       	pop	r25
     60c:	8f 91       	pop	r24
     60e:	7f 91       	pop	r23
     610:	6f 91       	pop	r22
     612:	5f 91       	pop	r21
     614:	4f 91       	pop	r20
     616:	3f 91       	pop	r19
     618:	2f 91       	pop	r18
     61a:	0f 90       	pop	r0
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	0f 90       	pop	r0
     620:	1f 90       	pop	r1
     622:	18 95       	reti

00000624 <uart_get_character>:
		uart_put_charater(*s, dir);
		s++;
	}
}
int 	uart_get_character	(int dir) {
	if (dir == D_RapidForm) {
     624:	00 97       	sbiw	r24, 0x00	; 0
     626:	39 f4       	brne	.+14     	; 0x636 <uart_get_character+0x12>
		while (!(UCSR0A & (1 << RXC0)))
     628:	80 91 c0 00 	lds	r24, 0x00C0
     62c:	87 ff       	sbrs	r24, 7
     62e:	fc cf       	rjmp	.-8      	; 0x628 <uart_get_character+0x4>
			// warten bis Zeichen verfuegbar
			;
		return UDR0; // Zeichen aus UDR an Aufrufer zurueckgeben
     630:	80 91 c6 00 	lds	r24, 0x00C6
     634:	0b c0       	rjmp	.+22     	; 0x64c <uart_get_character+0x28>
	}
	if (dir == D_Stepper) {
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	19 f0       	breq	.+6      	; 0x640 <uart_get_character+0x1c>
     63a:	2f ef       	ldi	r18, 0xFF	; 255
     63c:	3f ef       	ldi	r19, 0xFF	; 255
     63e:	08 c0       	rjmp	.+16     	; 0x650 <uart_get_character+0x2c>
		while (!(UCSR1A & (1 << RXC1)))
     640:	80 91 c8 00 	lds	r24, 0x00C8
     644:	87 ff       	sbrs	r24, 7
     646:	fc cf       	rjmp	.-8      	; 0x640 <uart_get_character+0x1c>
			// warten bis Zeichen verfuegbar
			;
		return UDR1; // Zeichen aus UDR an Aufrufer zurueckgeben
     648:	80 91 ce 00 	lds	r24, 0x00CE
     64c:	28 2f       	mov	r18, r24
     64e:	30 e0       	ldi	r19, 0x00	; 0
	}
	return -1;
}
     650:	c9 01       	movw	r24, r18
     652:	08 95       	ret

00000654 <uart_get_string>:
void 	uart_get_string		(char * string_in, int dir) {
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	8c 01       	movw	r16, r24
     662:	7b 01       	movw	r14, r22
     664:	c0 e0       	ldi	r28, 0x00	; 0
     666:	d0 e0       	ldi	r29, 0x00	; 0
	char c;
	int i = 0;
	do {
		c = uart_get_character(dir);
     668:	c7 01       	movw	r24, r14
     66a:	0e 94 12 03 	call	0x624	; 0x624 <uart_get_character>
		if (c != '\r') {
     66e:	8d 30       	cpi	r24, 0x0D	; 13
     670:	21 f0       	breq	.+8      	; 0x67a <uart_get_string+0x26>
			*string_in = c;
     672:	f8 01       	movw	r30, r16
     674:	81 93       	st	Z+, r24
     676:	8f 01       	movw	r16, r30
			string_in += 1;
			i++;
     678:	21 96       	adiw	r28, 0x01	; 1
		}
	} while (i < 100 && c != '\r' && c != '\n');
     67a:	c4 36       	cpi	r28, 0x64	; 100
     67c:	d1 05       	cpc	r29, r1
     67e:	24 f4       	brge	.+8      	; 0x688 <uart_get_string+0x34>
     680:	8d 30       	cpi	r24, 0x0D	; 13
     682:	11 f0       	breq	.+4      	; 0x688 <uart_get_string+0x34>
     684:	8a 30       	cpi	r24, 0x0A	; 10
     686:	81 f7       	brne	.-32     	; 0x668 <uart_get_string+0x14>
	*string_in = '\0';
     688:	f8 01       	movw	r30, r16
     68a:	10 82       	st	Z, r1
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	08 95       	ret

0000069a <init>:



void init() {
	// Watchdog Initialisieren oder Abschalten
	init_WDT();
     69a:	0e 94 86 02 	call	0x50c	; 0x50c <init_WDT>
	// LED Port definieren
	LED_DDR = 0xFF;
     69e:	8f ef       	ldi	r24, 0xFF	; 255
     6a0:	84 b9       	out	0x04, r24	; 4
	LED_PORT = 0xFF;
     6a2:	85 b9       	out	0x05, r24	; 5
	// Interrupts definieren
	PCMSK3 |= (1 << PCINT28); // PD4 als Interrupt zulassen
     6a4:	e3 e7       	ldi	r30, 0x73	; 115
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	80 81       	ld	r24, Z
     6aa:	80 61       	ori	r24, 0x10	; 16
     6ac:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE3); //Pin Change Interrupt Control Register - PCIE3 setzen f�r PCINT30
     6ae:	e8 e6       	ldi	r30, 0x68	; 104
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	80 81       	ld	r24, Z
     6b4:	88 60       	ori	r24, 0x08	; 8
     6b6:	80 83       	st	Z, r24
	// Startup kennzeichnen
	led_spielerein();
     6b8:	0e 94 3f 02 	call	0x47e	; 0x47e <led_spielerein>
	// LC Display initialisieren
	lcd_init(LCD_DISP_ON_CURSOR);
     6bc:	8e e0       	ldi	r24, 0x0E	; 14
     6be:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_init>
	lcd_clrscr();
     6c2:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
	lcd_home();
     6c6:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_home>
	//lcd_spielereien();
	// Taster entprellen
	debounce_init();
     6ca:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <debounce_init>
	// RS-232 Verbindung initialisieren
	uart_init();
     6ce:	0e 94 a3 02 	call	0x546	; 0x546 <uart_init>
	//menu_enter(&menu_context, &menu_main);
}
     6d2:	08 95       	ret

000006d4 <csg_Status_melden>:
// Hilfs Funktionen
void 	csg_Status_melden	() {
	int k = 0;
	if (blub < 100000)
		k = 5;
	if (blub < 10000)
     6d4:	20 91 6e 07 	lds	r18, 0x076E
     6d8:	30 91 6f 07 	lds	r19, 0x076F
     6dc:	87 e2       	ldi	r24, 0x27	; 39
     6de:	20 31       	cpi	r18, 0x10	; 16
     6e0:	38 07       	cpc	r19, r24
     6e2:	0c f0       	brlt	.+2      	; 0x6e6 <csg_Status_melden+0x12>
     6e4:	47 c0       	rjmp	.+142    	; 0x774 <csg_Status_melden+0xa0>
		k = 4;
	if (blub < 1000)
     6e6:	83 e0       	ldi	r24, 0x03	; 3
     6e8:	28 3e       	cpi	r18, 0xE8	; 232
     6ea:	38 07       	cpc	r19, r24
     6ec:	1c f0       	brlt	.+6      	; 0x6f4 <csg_Status_melden+0x20>
     6ee:	84 e0       	ldi	r24, 0x04	; 4
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	14 c0       	rjmp	.+40     	; 0x71c <csg_Status_melden+0x48>
		k = 3;
	if (blub < 100)
     6f4:	24 36       	cpi	r18, 0x64	; 100
     6f6:	31 05       	cpc	r19, r1
     6f8:	1c f0       	brlt	.+6      	; 0x700 <csg_Status_melden+0x2c>
     6fa:	83 e0       	ldi	r24, 0x03	; 3
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e c0       	rjmp	.+28     	; 0x71c <csg_Status_melden+0x48>
		k = 2;
	if (blub < 10)
     700:	2a 30       	cpi	r18, 0x0A	; 10
     702:	31 05       	cpc	r19, r1
     704:	1c f0       	brlt	.+6      	; 0x70c <csg_Status_melden+0x38>
     706:	82 e0       	ldi	r24, 0x02	; 2
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	08 c0       	rjmp	.+16     	; 0x71c <csg_Status_melden+0x48>
		k = 1;
	if (blub == 0)
     70c:	21 15       	cp	r18, r1
     70e:	31 05       	cpc	r19, r1
     710:	19 f4       	brne	.+6      	; 0x718 <csg_Status_melden+0x44>
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	02 c0       	rjmp	.+4      	; 0x71c <csg_Status_melden+0x48>
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	90 e0       	ldi	r25, 0x00	; 0
		k = 0;
	blub++;
     71c:	2f 5f       	subi	r18, 0xFF	; 255
     71e:	3f 4f       	sbci	r19, 0xFF	; 255
     720:	30 93 6f 07 	sts	0x076F, r19
     724:	20 93 6e 07 	sts	0x076E, r18
	switch (k) {
     728:	81 30       	cpi	r24, 0x01	; 1
     72a:	91 05       	cpc	r25, r1
     72c:	99 f0       	breq	.+38     	; 0x754 <csg_Status_melden+0x80>
     72e:	82 30       	cpi	r24, 0x02	; 2
     730:	91 05       	cpc	r25, r1
     732:	1c f4       	brge	.+6      	; 0x73a <csg_Status_melden+0x66>
     734:	89 2b       	or	r24, r25
     736:	39 f0       	breq	.+14     	; 0x746 <csg_Status_melden+0x72>
     738:	1a c0       	rjmp	.+52     	; 0x76e <csg_Status_melden+0x9a>
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	91 05       	cpc	r25, r1
     73e:	69 f0       	breq	.+26     	; 0x75a <csg_Status_melden+0x86>
     740:	03 97       	sbiw	r24, 0x03	; 3
     742:	a9 f4       	brne	.+42     	; 0x76e <csg_Status_melden+0x9a>
     744:	0d c0       	rjmp	.+26     	; 0x760 <csg_Status_melden+0x8c>
	case 0:
		lcd_puts("Status gemeldet!");
     746:	84 e0       	ldi	r24, 0x04	; 4
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("         0,         0,K,K,R\r\n", D_RapidForm);			// Status an RapidForm zur�ckmelden
     74e:	85 e1       	ldi	r24, 0x15	; 21
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	08 c0       	rjmp	.+16     	; 0x764 <csg_Status_melden+0x90>
		break;
	case 1:
		uart_put_string("         9,         0,K,K,R\r\n", D_RapidForm);			// Status an RapidForm zur�ckmelden
     754:	83 e3       	ldi	r24, 0x33	; 51
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	05 c0       	rjmp	.+10     	; 0x764 <csg_Status_melden+0x90>
		break;
	case 2:
		uart_put_string("        99,         0,K,K,R\r\n", D_RapidForm);			// Status an RapidForm zur�ckmelden
     75a:	81 e5       	ldi	r24, 0x51	; 81
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	02 c0       	rjmp	.+4      	; 0x764 <csg_Status_melden+0x90>
		break;
	case 3:
		uart_put_string("       999,         0,K,K,R\r\n", D_RapidForm);			// Status an RapidForm zur�ckmelden
     760:	8f e6       	ldi	r24, 0x6F	; 111
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
     76c:	08 95       	ret
		break;
	default:
		uart_put_string(" 999999999,         0,K,K,R\r\n", D_RapidForm); // Status an RapidForm zur�ckmelden
     76e:	8d e8       	ldi	r24, 0x8D	; 141
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	f8 cf       	rjmp	.-16     	; 0x764 <csg_Status_melden+0x90>
	}
}
     774:	85 e0       	ldi	r24, 0x05	; 5
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	d1 cf       	rjmp	.-94     	; 0x71c <csg_Status_melden+0x48>

0000077a <String_zerlegen_csg>:
	ltoa(z,Position,10);
	//lcd_puts("Position: ");
	//lcd_puts(Position);
	//lcd_puts("\n");
}
void 	String_zerlegen_csg	(char * str_rx) {
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	df 93       	push	r29
     788:	cf 93       	push	r28
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	61 97       	sbiw	r28, 0x11	; 17
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	6c 01       	movw	r12, r24
	int i = 4; // Index Input String | Bei 4. Zeichen Beginnen. Die ersten 3 Zeichen sind Fix.
	int j = 0; // Index Variable
	char c; // Zu kopierendes Zeichen
	// Variablen Deklaration und Initialisierung mit Defaultwerten
	char Speed_Range[2] = "2";
	char ONE_Min_Speed[6] = "200";
     79c:	82 e3       	ldi	r24, 0x32	; 50
     79e:	90 e3       	ldi	r25, 0x30	; 48
     7a0:	a0 e3       	ldi	r26, 0x30	; 48
     7a2:	b0 e0       	ldi	r27, 0x00	; 0
     7a4:	8e 83       	std	Y+6, r24	; 0x06
     7a6:	9f 83       	std	Y+7, r25	; 0x07
     7a8:	a8 87       	std	Y+8, r26	; 0x08
     7aa:	b9 87       	std	Y+9, r27	; 0x09
     7ac:	1b 86       	std	Y+11, r1	; 0x0b
     7ae:	1a 86       	std	Y+10, r1	; 0x0a
	char ONE_Max_Speed[6] = "2000";
     7b0:	de 01       	movw	r26, r28
     7b2:	1c 96       	adiw	r26, 0x0c	; 12
     7b4:	e8 ed       	ldi	r30, 0xD8	; 216
     7b6:	f1 e0       	ldi	r31, 0x01	; 1
     7b8:	85 e0       	ldi	r24, 0x05	; 5
     7ba:	01 90       	ld	r0, Z+
     7bc:	0d 92       	st	X+, r0
     7be:	81 50       	subi	r24, 0x01	; 1
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <String_zerlegen_csg+0x40>
     7c2:	19 8a       	std	Y+17, r1	; 0x11
	char ONE_Acc_Speed[5] = "200";
     7c4:	82 e3       	ldi	r24, 0x32	; 50
     7c6:	90 e3       	ldi	r25, 0x30	; 48
     7c8:	a0 e3       	ldi	r26, 0x30	; 48
     7ca:	b0 e0       	ldi	r27, 0x00	; 0
     7cc:	89 83       	std	Y+1, r24	; 0x01
     7ce:	9a 83       	std	Y+2, r25	; 0x02
     7d0:	ab 83       	std	Y+3, r26	; 0x03
     7d2:	bc 83       	std	Y+4, r27	; 0x04
     7d4:	1d 82       	std	Y+5, r1	; 0x05
     7d6:	84 e0       	ldi	r24, 0x04	; 4
     7d8:	e8 2e       	mov	r14, r24
     7da:	f1 2c       	mov	r15, r1
     7dc:	a0 e0       	ldi	r26, 0x00	; 0
     7de:	b0 e0       	ldi	r27, 0x00	; 0
	//
	////////////////////////
	do {
		c = str_rx[i];
		if (c != 'F') {
			ONE_Min_Speed[j] = c;
     7e0:	9e 01       	movw	r18, r28
     7e2:	2a 5f       	subi	r18, 0xFA	; 250
     7e4:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	//  Min Speed (50 - 20000)
	//
	////////////////////////
	do {
		c = str_rx[i];
     7e6:	f6 01       	movw	r30, r12
     7e8:	ee 0d       	add	r30, r14
     7ea:	ff 1d       	adc	r31, r15
     7ec:	80 81       	ld	r24, Z
		if (c != 'F') {
     7ee:	86 34       	cpi	r24, 0x46	; 70
     7f0:	41 f0       	breq	.+16     	; 0x802 <String_zerlegen_csg+0x88>
			ONE_Min_Speed[j] = c;
     7f2:	f9 01       	movw	r30, r18
     7f4:	ea 0f       	add	r30, r26
     7f6:	fb 1f       	adc	r31, r27
     7f8:	80 83       	st	Z, r24
			j++;
     7fa:	11 96       	adiw	r26, 0x01	; 1
			i++;
     7fc:	08 94       	sec
     7fe:	e1 1c       	adc	r14, r1
     800:	f1 1c       	adc	r15, r1
		}
	} while (j < 6 && c != '\0' && c != 'F');
     802:	a6 30       	cpi	r26, 0x06	; 6
     804:	b1 05       	cpc	r27, r1
     806:	24 f4       	brge	.+8      	; 0x810 <String_zerlegen_csg+0x96>
     808:	88 23       	and	r24, r24
     80a:	11 f0       	breq	.+4      	; 0x810 <String_zerlegen_csg+0x96>
     80c:	86 34       	cpi	r24, 0x46	; 70
     80e:	59 f7       	brne	.-42     	; 0x7e6 <String_zerlegen_csg+0x6c>
	ONE_Min_Speed[j] = '\0';
     810:	8e 01       	movw	r16, r28
     812:	0a 5f       	subi	r16, 0xFA	; 250
     814:	1f 4f       	sbci	r17, 0xFF	; 255
     816:	a0 0f       	add	r26, r16
     818:	b1 1f       	adc	r27, r17
     81a:	1c 92       	st	X, r1

	lcd_puts("1_MIN_SPEED:");
     81c:	8b ea       	ldi	r24, 0xAB	; 171
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts(ONE_Min_Speed);
     824:	c8 01       	movw	r24, r16
     826:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts("\n");
     82a:	88 eb       	ldi	r24, 0xB8	; 184
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	////////////////////////
	//
	//  Max Speed (50 - 20000)
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
     832:	08 94       	sec
     834:	e1 1c       	adc	r14, r1
     836:	f1 1c       	adc	r15, r1
     838:	a0 e0       	ldi	r26, 0x00	; 0
     83a:	b0 e0       	ldi	r27, 0x00	; 0
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
		if (c != 'R') {
			ONE_Max_Speed[j] = c;
     83c:	9e 01       	movw	r18, r28
     83e:	24 5f       	subi	r18, 0xF4	; 244
     840:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
     842:	f6 01       	movw	r30, r12
     844:	ee 0d       	add	r30, r14
     846:	ff 1d       	adc	r31, r15
     848:	80 81       	ld	r24, Z
		if (c != 'R') {
     84a:	82 35       	cpi	r24, 0x52	; 82
     84c:	41 f0       	breq	.+16     	; 0x85e <String_zerlegen_csg+0xe4>
			ONE_Max_Speed[j] = c;
     84e:	f9 01       	movw	r30, r18
     850:	ea 0f       	add	r30, r26
     852:	fb 1f       	adc	r31, r27
     854:	80 83       	st	Z, r24
			i++;
     856:	08 94       	sec
     858:	e1 1c       	adc	r14, r1
     85a:	f1 1c       	adc	r15, r1
			j++;
     85c:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (j < 6 && c != '\0' && c != 'R');
     85e:	a6 30       	cpi	r26, 0x06	; 6
     860:	b1 05       	cpc	r27, r1
     862:	24 f4       	brge	.+8      	; 0x86c <String_zerlegen_csg+0xf2>
     864:	88 23       	and	r24, r24
     866:	11 f0       	breq	.+4      	; 0x86c <String_zerlegen_csg+0xf2>
     868:	82 35       	cpi	r24, 0x52	; 82
     86a:	59 f7       	brne	.-42     	; 0x842 <String_zerlegen_csg+0xc8>
	ONE_Max_Speed[j] = '\0';
     86c:	8e 01       	movw	r16, r28
     86e:	04 5f       	subi	r16, 0xF4	; 244
     870:	1f 4f       	sbci	r17, 0xFF	; 255
     872:	a0 0f       	add	r26, r16
     874:	b1 1f       	adc	r27, r17
     876:	1c 92       	st	X, r1

	lcd_puts("1_MAX_SPEED:");
     878:	8a eb       	ldi	r24, 0xBA	; 186
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts(ONE_Max_Speed);
     880:	c8 01       	movw	r24, r16
     882:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts("\n");
     886:	88 eb       	ldi	r24, 0xB8	; 184
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	////////////////////////
	//
	//  Acceleration (0 - 1000)
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
     88e:	c7 01       	movw	r24, r14
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	a0 e0       	ldi	r26, 0x00	; 0
     894:	b0 e0       	ldi	r27, 0x00	; 0
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
		if (c != 'S') {
			ONE_Acc_Speed[j] = c;
     896:	ae 01       	movw	r20, r28
     898:	4f 5f       	subi	r20, 0xFF	; 255
     89a:	5f 4f       	sbci	r21, 0xFF	; 255
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
     89c:	f6 01       	movw	r30, r12
     89e:	e8 0f       	add	r30, r24
     8a0:	f9 1f       	adc	r31, r25
     8a2:	20 81       	ld	r18, Z
		if (c != 'S') {
     8a4:	23 35       	cpi	r18, 0x53	; 83
     8a6:	31 f0       	breq	.+12     	; 0x8b4 <String_zerlegen_csg+0x13a>
			ONE_Acc_Speed[j] = c;
     8a8:	fa 01       	movw	r30, r20
     8aa:	ea 0f       	add	r30, r26
     8ac:	fb 1f       	adc	r31, r27
     8ae:	20 83       	st	Z, r18
			i++;
     8b0:	01 96       	adiw	r24, 0x01	; 1
			j++;
     8b2:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (j < 4 && c != '\0' && c != 'S');
     8b4:	a4 30       	cpi	r26, 0x04	; 4
     8b6:	b1 05       	cpc	r27, r1
     8b8:	24 f4       	brge	.+8      	; 0x8c2 <String_zerlegen_csg+0x148>
     8ba:	22 23       	and	r18, r18
     8bc:	11 f0       	breq	.+4      	; 0x8c2 <String_zerlegen_csg+0x148>
     8be:	23 35       	cpi	r18, 0x53	; 83
     8c0:	69 f7       	brne	.-38     	; 0x89c <String_zerlegen_csg+0x122>
	ONE_Acc_Speed[j] = '\0';
     8c2:	8e 01       	movw	r16, r28
     8c4:	0f 5f       	subi	r16, 0xFF	; 255
     8c6:	1f 4f       	sbci	r17, 0xFF	; 255
     8c8:	a0 0f       	add	r26, r16
     8ca:	b1 1f       	adc	r27, r17
     8cc:	1c 92       	st	X, r1

	lcd_puts("1_ACC_SPEED:");
     8ce:	87 ec       	ldi	r24, 0xC7	; 199
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts(ONE_Acc_Speed);
     8d6:	c8 01       	movw	r24, r16
     8d8:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts("\n");
     8dc:	88 eb       	ldi	r24, 0xB8	; 184
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	//////////////////////////
	//
	//  Blub um eins hochz�hlen
	//
	//////////////////////////
	blub++;
     8e4:	80 91 6e 07 	lds	r24, 0x076E
     8e8:	90 91 6f 07 	lds	r25, 0x076F
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	90 93 6f 07 	sts	0x076F, r25
     8f2:	80 93 6e 07 	sts	0x076E, r24
	//uart_put_string("0\n", D_Stepper);
	uart_put_string(B_OK, D_RapidForm);
     8f6:	84 ed       	ldi	r24, 0xD4	; 212
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
}
     902:	61 96       	adiw	r28, 0x11	; 17
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
     90e:	cf 91       	pop	r28
     910:	df 91       	pop	r29
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	ff 90       	pop	r15
     918:	ef 90       	pop	r14
     91a:	df 90       	pop	r13
     91c:	cf 90       	pop	r12
     91e:	08 95       	ret

00000920 <my_select>:
	lcd_puts("Aufnahme starten\n");
	lcd_puts("Nach Aufnahme SW3 dr�cken!\n");
	if (get_key_press(1 << KEY3))
		uart_put_string("M 16000\r", D_Stepper);
}
void 	my_select			(void *arg, char *name) {
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	8b 01       	movw	r16, r22
	lcd_clrscr();
     926:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
	lcd_puts("Selected: ");
     92a:	8e ed       	ldi	r24, 0xDE	; 222
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts(name);
     932:	c8 01       	movw	r24, r16
     934:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
 */


static inline void ms_spin(unsigned short ms) {
	if (ms) {
		__asm__ __volatile__ (
     938:	8e ee       	ldi	r24, 0xEE	; 238
     93a:	92 e0       	ldi	r25, 0x02	; 2

0000093c <outer_854>:
     93c:	a0 ed       	ldi	r26, 0xD0	; 208
     93e:	b7 e0       	ldi	r27, 0x07	; 7

00000940 <inner_854>:
     940:	11 97       	sbiw	r26, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <inner_854>
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	d1 f7       	brne	.-12     	; 0x93c <outer_854>

	ms_spin(750);
}
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	08 95       	ret

0000094e <mod_manual>:
	LED_PORT = i;
}
// Menu Stuff

void 	mod_manual			(void *arg, void *name) {
	lcd_puts("Manueller Modus\n");
     94e:	89 ee       	ldi	r24, 0xE9	; 233
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts("Aufnahme starten\n");
     956:	8a ef       	ldi	r24, 0xFA	; 250
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts("Nach Aufnahme SW3 dr�cken!\n");
     95e:	8c e0       	ldi	r24, 0x0C	; 12
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     966:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     968:	90 91 dc 07 	lds	r25, 0x07DC
     96c:	98 70       	andi	r25, 0x08	; 8
  key_press ^= key_mask;                          // clear key(s)
     96e:	80 91 dc 07 	lds	r24, 0x07DC
     972:	89 27       	eor	r24, r25
     974:	80 93 dc 07 	sts	0x07DC, r24
  sei();
     978:	78 94       	sei
	if (get_key_press(1 << KEY3))
     97a:	99 23       	and	r25, r25
     97c:	31 f0       	breq	.+12     	; 0x98a <mod_manual+0x3c>
		uart_put_string("M 16000\r", D_Stepper);
     97e:	8a e2       	ldi	r24, 0x2A	; 42
     980:	92 e0       	ldi	r25, 0x02	; 2
     982:	61 e0       	ldi	r22, 0x01	; 1
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
     98a:	08 95       	ret

0000098c <Position_Zeta>:
		break;
	default:
		uart_put_string(" 999999999,         0,K,K,R\r\n", D_RapidForm); // Status an RapidForm zur�ckmelden
	}
}
void 	Position_Zeta		(char * Position) {
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	8c 01       	movw	r16, r24
     996:	c0 e0       	ldi	r28, 0x00	; 0
     998:	d0 e0       	ldi	r29, 0x00	; 0
    char c;
    int i = 0;
    do{
        c = str_rx[i + 1];
     99a:	de 01       	movw	r26, r28
     99c:	11 96       	adiw	r26, 0x01	; 1
     99e:	fd 01       	movw	r30, r26
     9a0:	e8 58       	subi	r30, 0x88	; 136
     9a2:	f8 4f       	sbci	r31, 0xF8	; 248
     9a4:	e0 81       	ld	r30, Z
        if(c != ','){
     9a6:	ec 32       	cpi	r30, 0x2C	; 44
     9a8:	11 f4       	brne	.+4      	; 0x9ae <Position_Zeta+0x22>
     9aa:	de 01       	movw	r26, r28
     9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <Position_Zeta+0x28>
            Position[i] = c;
     9ae:	c0 0f       	add	r28, r16
     9b0:	d1 1f       	adc	r29, r17
     9b2:	e8 83       	st	Y, r30
            i++;
        }
    }
     while(i < 20 && c != '\0' && c != ',');
     9b4:	a4 31       	cpi	r26, 0x14	; 20
     9b6:	b1 05       	cpc	r27, r1
     9b8:	34 f4       	brge	.+12     	; 0x9c6 <Position_Zeta+0x3a>
     9ba:	ee 23       	and	r30, r30
     9bc:	21 f0       	breq	.+8      	; 0x9c6 <Position_Zeta+0x3a>
     9be:	ec 32       	cpi	r30, 0x2C	; 44
     9c0:	11 f0       	breq	.+4      	; 0x9c6 <Position_Zeta+0x3a>
     9c2:	ed 01       	movw	r28, r26
     9c4:	ea cf       	rjmp	.-44     	; 0x99a <Position_Zeta+0xe>
    Position[i] = '\0';
     9c6:	a0 0f       	add	r26, r16
     9c8:	b1 1f       	adc	r27, r17
     9ca:	1c 92       	st	X, r1
	int32_t z;
	z = atol(Position);
     9cc:	c8 01       	movw	r24, r16
     9ce:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <atol>
	z = z/9;
	ltoa(z,Position,10);
     9d2:	29 e0       	ldi	r18, 0x09	; 9
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	40 e0       	ldi	r20, 0x00	; 0
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__divmodsi4>
     9de:	ca 01       	movw	r24, r20
     9e0:	b9 01       	movw	r22, r18
     9e2:	a8 01       	movw	r20, r16
     9e4:	2a e0       	ldi	r18, 0x0A	; 10
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <ltoa>
}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	08 95       	ret

000009f6 <String_zerlegen_Isel>:
			return n;
		}
	}
	return 99;
}
void 	String_zerlegen_Isel(char * str_rx, char * Position) {
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	8c 01       	movw	r16, r24
     a00:	eb 01       	movw	r28, r22
	//0M5200, +600
	//Achse M Position, +Geschwindigkeit
	char * Achse="0";
	Achse[0] = str_rx[1];
	Achse[1] = '\0';
	if(atoi(Achse)==0){
     a02:	83 e3       	ldi	r24, 0x33	; 51
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <atoi>
     a0a:	89 2b       	or	r24, r25
     a0c:	61 f4       	brne	.+24     	; 0xa26 <String_zerlegen_Isel+0x30>
		lcd_puts("Achse: ");
     a0e:	85 e3       	ldi	r24, 0x35	; 53
     a10:	92 e0       	ldi	r25, 0x02	; 2
     a12:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(Achse);
     a16:	83 e3       	ldi	r24, 0x33	; 51
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(" (Rotation)\n");
     a1e:	8d e3       	ldi	r24, 0x3D	; 61
     a20:	92 e0       	ldi	r25, 0x02	; 2
     a22:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	}
	if(atoi(Achse)==1){
     a26:	83 e3       	ldi	r24, 0x33	; 51
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <atoi>
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	61 f4       	brne	.+24     	; 0xa4a <String_zerlegen_Isel+0x54>
		lcd_puts("Achse: ");
     a32:	85 e3       	ldi	r24, 0x35	; 53
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(Achse);
     a3a:	83 e3       	ldi	r24, 0x33	; 51
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(" (Hoehe)   \n");
     a42:	8a e4       	ldi	r24, 0x4A	; 74
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	}
	lcd_puts("Test: ");
     a4a:	87 e5       	ldi	r24, 0x57	; 87
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts(Position);
     a52:	ce 01       	movw	r24, r28
     a54:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
     a58:	a0 e0       	ldi	r26, 0x00	; 0
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
	char c;
	int i = 0;
	do {
		c = str_rx[i + 3];
     a5c:	f8 01       	movw	r30, r16
     a5e:	ea 0f       	add	r30, r26
     a60:	fb 1f       	adc	r31, r27
     a62:	83 81       	ldd	r24, Z+3	; 0x03
		if (c != ',') {
     a64:	8c 32       	cpi	r24, 0x2C	; 44
     a66:	29 f0       	breq	.+10     	; 0xa72 <String_zerlegen_Isel+0x7c>
			Position[i] = c;
     a68:	fe 01       	movw	r30, r28
     a6a:	ea 0f       	add	r30, r26
     a6c:	fb 1f       	adc	r31, r27
     a6e:	80 83       	st	Z, r24
			i++;
     a70:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (i < 20 && c != '\0' && c != ',');
     a72:	a4 31       	cpi	r26, 0x14	; 20
     a74:	b1 05       	cpc	r27, r1
     a76:	24 f4       	brge	.+8      	; 0xa80 <String_zerlegen_Isel+0x8a>
     a78:	88 23       	and	r24, r24
     a7a:	11 f0       	breq	.+4      	; 0xa80 <String_zerlegen_Isel+0x8a>
     a7c:	8c 32       	cpi	r24, 0x2C	; 44
     a7e:	71 f7       	brne	.-36     	; 0xa5c <String_zerlegen_Isel+0x66>
	Position[i] = '\0';
     a80:	ac 0f       	add	r26, r28
     a82:	bd 1f       	adc	r27, r29
     a84:	1c 92       	st	X, r1
	int32_t z;
	z = atoi(Position);
     a86:	ce 01       	movw	r24, r28
     a88:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <atoi>
	z = (z * 71111)  /4096;
     a8c:	aa 27       	eor	r26, r26
     a8e:	97 fd       	sbrc	r25, 7
     a90:	a0 95       	com	r26
     a92:	ba 2f       	mov	r27, r26
     a94:	bc 01       	movw	r22, r24
     a96:	cd 01       	movw	r24, r26
     a98:	27 ec       	ldi	r18, 0xC7	; 199
     a9a:	35 e1       	ldi	r19, 0x15	; 21
     a9c:	41 e0       	ldi	r20, 0x01	; 1
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	0e 94 9f 0c 	call	0x193e	; 0x193e <__mulsi3>
	ltoa(z,Position,10);
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e1       	ldi	r19, 0x10	; 16
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__divmodsi4>
     ab0:	ca 01       	movw	r24, r20
     ab2:	b9 01       	movw	r22, r18
     ab4:	ae 01       	movw	r20, r28
     ab6:	2a e0       	ldi	r18, 0x0A	; 10
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <ltoa>
	//lcd_puts("Position: ");
	//lcd_puts(Position);
	//lcd_puts("\n");
}
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	08 95       	ret

00000ac8 <FindStringInArray>:
			.Befehl = progmem_Befehl,
	}
};


int 	FindStringInArray	(const char* pInput, const char* pOptions[], int cmp_length) {
     ac8:	cf 92       	push	r12
     aca:	df 92       	push	r13
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	6c 01       	movw	r12, r24
     ada:	7a 01       	movw	r14, r20
     adc:	8b 01       	movw	r16, r22
     ade:	cf ef       	ldi	r28, 0xFF	; 255
     ae0:	df ef       	ldi	r29, 0xFF	; 255
     ae2:	08 c0       	rjmp	.+16     	; 0xaf4 <FindStringInArray+0x2c>
	int n = -1;
	while (pOptions[++n]) {
		//lcd_puts(pOptions[n]);
		//lcd_puts("\n");
		if (!strncmp(pInput, pOptions[n], cmp_length)){
     ae4:	c6 01       	movw	r24, r12
     ae6:	a7 01       	movw	r20, r14
     ae8:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <strncmp>
     aec:	0e 5f       	subi	r16, 0xFE	; 254
     aee:	1f 4f       	sbci	r17, 0xFF	; 255
     af0:	00 97       	sbiw	r24, 0x00	; 0
     af2:	49 f0       	breq	.+18     	; 0xb06 <FindStringInArray+0x3e>
};


int 	FindStringInArray	(const char* pInput, const char* pOptions[], int cmp_length) {
	int n = -1;
	while (pOptions[++n]) {
     af4:	21 96       	adiw	r28, 0x01	; 1
     af6:	f8 01       	movw	r30, r16
     af8:	60 81       	ld	r22, Z
     afa:	71 81       	ldd	r23, Z+1	; 0x01
     afc:	61 15       	cp	r22, r1
     afe:	71 05       	cpc	r23, r1
     b00:	89 f7       	brne	.-30     	; 0xae4 <FindStringInArray+0x1c>
     b02:	c3 e6       	ldi	r28, 0x63	; 99
     b04:	d0 e0       	ldi	r29, 0x00	; 0
		if (!strncmp(pInput, pOptions[n], cmp_length)){
			return n;
		}
	}
	return 99;
}
     b06:	ce 01       	movw	r24, r28
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	ff 90       	pop	r15
     b12:	ef 90       	pop	r14
     b14:	df 90       	pop	r13
     b16:	cf 90       	pop	r12
     b18:	08 95       	ret

00000b1a <switch_Motor>:
		uart_put_string(str_rx,D_Stepper);
		uart_put_string("\n",D_Stepper);
	}
}

int 	switch_Motor		(char * str_rx) {
     b1a:	df 93       	push	r29
     b1c:	cf 93       	push	r28
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
     b22:	2a 97       	sbiw	r28, 0x0a	; 10
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	cd bf       	out	0x3d, r28	; 61
	const char* pOptions[] = {
			"@01", 		// 0 - Isel
			"Q:",    	// 1 - CSG
			"ECHO0", 	// 2 - Zeta
			"!Terminal",	// 3 - Terminal ansteuerung!
			0 };
     b2e:	de 01       	movw	r26, r28
     b30:	11 96       	adiw	r26, 0x01	; 1
     b32:	e2 ea       	ldi	r30, 0xA2	; 162
     b34:	f6 e0       	ldi	r31, 0x06	; 6
     b36:	2a e0       	ldi	r18, 0x0A	; 10
     b38:	01 90       	ld	r0, Z+
     b3a:	0d 92       	st	X+, r0
     b3c:	21 50       	subi	r18, 0x01	; 1
     b3e:	e1 f7       	brne	.-8      	; 0xb38 <switch_Motor+0x1e>
	switch (FindStringInArray(str_rx, pOptions, 3)) {
     b40:	be 01       	movw	r22, r28
     b42:	6f 5f       	subi	r22, 0xFF	; 255
     b44:	7f 4f       	sbci	r23, 0xFF	; 255
     b46:	43 e0       	ldi	r20, 0x03	; 3
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	0e 94 64 05 	call	0xac8	; 0xac8 <FindStringInArray>
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	91 05       	cpc	r25, r1
     b52:	61 f0       	breq	.+24     	; 0xb6c <switch_Motor+0x52>
     b54:	82 30       	cpi	r24, 0x02	; 2
     b56:	91 05       	cpc	r25, r1
     b58:	1c f4       	brge	.+6      	; 0xb60 <switch_Motor+0x46>
     b5a:	89 2b       	or	r24, r25
     b5c:	51 f0       	breq	.+20     	; 0xb72 <switch_Motor+0x58>
     b5e:	12 c0       	rjmp	.+36     	; 0xb84 <switch_Motor+0x6a>
     b60:	82 30       	cpi	r24, 0x02	; 2
     b62:	91 05       	cpc	r25, r1
     b64:	49 f0       	breq	.+18     	; 0xb78 <switch_Motor+0x5e>
     b66:	03 97       	sbiw	r24, 0x03	; 3
     b68:	69 f4       	brne	.+26     	; 0xb84 <switch_Motor+0x6a>
     b6a:	09 c0       	rjmp	.+18     	; 0xb7e <switch_Motor+0x64>
     b6c:	21 e0       	ldi	r18, 0x01	; 1
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	0b c0       	rjmp	.+22     	; 0xb88 <switch_Motor+0x6e>
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	08 c0       	rjmp	.+16     	; 0xb88 <switch_Motor+0x6e>
     b78:	22 e0       	ldi	r18, 0x02	; 2
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	05 c0       	rjmp	.+10     	; 0xb88 <switch_Motor+0x6e>
		break;
	case 1: 		// 1 - CSG
		return M_CSG;
		break;
	case 2:			// 2 - Zeta
		return M_ZETA;
     b7e:	23 e0       	ldi	r18, 0x03	; 3
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <switch_Motor+0x6e>
		break;
	case 3:			// 3 - Terminal ansteuerung
		return M_TERMINAL;
     b84:	2e ef       	ldi	r18, 0xFE	; 254
     b86:	3f ef       	ldi	r19, 0xFF	; 255
		break;
	default:
		return M_UNK;
	}
}
     b88:	c9 01       	movw	r24, r18
     b8a:	2a 96       	adiw	r28, 0x0a	; 10
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	08 95       	ret

00000b9c <switch_Terminal>:
		lcd_puts("       \n");
		//Initialized = switch_Inputs(str_rx);
	}
}
int init_T = 0;
void 	switch_Terminal			(char * str_rx) {
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	2a 97       	sbiw	r28, 0x0a	; 10
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
     bb4:	8c 01       	movw	r16, r24
	const char* pOptions[] = {
			"!CLS", // 0 - LC-Display l�schen
			"Test",	// 1 - Test
			"!Manual",// 2 - Ignorieren
			"!YYYY",// 3 - Wait till motor stops
			0 };
     bb6:	de 01       	movw	r26, r28
     bb8:	11 96       	adiw	r26, 0x01	; 1
     bba:	e4 ec       	ldi	r30, 0xC4	; 196
     bbc:	f6 e0       	ldi	r31, 0x06	; 6
     bbe:	8a e0       	ldi	r24, 0x0A	; 10
     bc0:	01 90       	ld	r0, Z+
     bc2:	0d 92       	st	X+, r0
     bc4:	81 50       	subi	r24, 0x01	; 1
     bc6:	e1 f7       	brne	.-8      	; 0xbc0 <switch_Terminal+0x24>

	if (init_T == 0){
     bc8:	80 91 72 07 	lds	r24, 0x0772
     bcc:	90 91 73 07 	lds	r25, 0x0773
     bd0:	89 2b       	or	r24, r25
     bd2:	c1 f4       	brne	.+48     	; 0xc04 <switch_Terminal+0x68>
		init_T = 1;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	90 93 73 07 	sts	0x0773, r25
     bdc:	80 93 72 07 	sts	0x0772, r24
		uart_put_string("Willkommen im Terminal Modus\r\n",D_RapidForm);
     be0:	8e e5       	ldi	r24, 0x5E	; 94
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
		uart_put_string("m�gliche Befehle sind: \r\n",D_RapidForm);
     bec:	8d e7       	ldi	r24, 0x7D	; 125
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
		uart_put_string(" A - Motorstatus\r\n M - Move Steps\r\n", D_RapidForm);
     bf8:	89 e9       	ldi	r24, 0x99	; 153
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
	}
	switch (FindStringInArray(str_rx, pOptions, 2)) {
     c04:	c8 01       	movw	r24, r16
     c06:	be 01       	movw	r22, r28
     c08:	6f 5f       	subi	r22, 0xFF	; 255
     c0a:	7f 4f       	sbci	r23, 0xFF	; 255
     c0c:	42 e0       	ldi	r20, 0x02	; 2
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	0e 94 64 05 	call	0xac8	; 0xac8 <FindStringInArray>
     c14:	81 30       	cpi	r24, 0x01	; 1
     c16:	91 05       	cpc	r25, r1
     c18:	61 f0       	breq	.+24     	; 0xc32 <switch_Terminal+0x96>
     c1a:	82 30       	cpi	r24, 0x02	; 2
     c1c:	91 05       	cpc	r25, r1
     c1e:	1c f4       	brge	.+6      	; 0xc26 <switch_Terminal+0x8a>
     c20:	89 2b       	or	r24, r25
     c22:	21 f0       	breq	.+8      	; 0xc2c <switch_Terminal+0x90>
     c24:	0f c0       	rjmp	.+30     	; 0xc44 <switch_Terminal+0xa8>
     c26:	04 97       	sbiw	r24, 0x04	; 4
     c28:	6c f4       	brge	.+26     	; 0xc44 <switch_Terminal+0xa8>
     c2a:	1e c0       	rjmp	.+60     	; 0xc68 <switch_Terminal+0xcc>
	case 0: // Display l�schen
		lcd_clrscr();
     c2c:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
     c30:	1b c0       	rjmp	.+54     	; 0xc68 <switch_Terminal+0xcc>
		break;
	case 1: // Interner Test
		lcd_puts("Test bestanden     \n");
     c32:	8d eb       	ldi	r24, 0xBD	; 189
     c34:	92 e0       	ldi	r25, 0x02	; 2
     c36:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("Test bestanden", D_RapidForm);
     c3a:	82 ed       	ldi	r24, 0xD2	; 210
     c3c:	92 e0       	ldi	r25, 0x02	; 2
     c3e:	60 e0       	ldi	r22, 0x00	; 0
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	10 c0       	rjmp	.+32     	; 0xc64 <switch_Terminal+0xc8>
	case 3: // Reserve 2

		break;
	default:
		//lcd_puts("Z:");
		lcd_puts(str_rx);
     c44:	c8 01       	movw	r24, r16
     c46:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts("       \n");
     c4a:	81 ee       	ldi	r24, 0xE1	; 225
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string(str_rx,D_Stepper);
     c52:	c8 01       	movw	r24, r16
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
		uart_put_string("\n",D_Stepper);
     c5c:	88 eb       	ldi	r24, 0xB8	; 184
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	61 e0       	ldi	r22, 0x01	; 1
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
	}
}
     c68:	2a 96       	adiw	r28, 0x0a	; 10
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	08 95       	ret

00000c7e <switch_csg>:
	default:
		lcd_puts("ISEL:    \n");
		lcd_puts(str_rx);
	}
}
void 	switch_csg			(char * str_rx) {
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	a0 97       	sbiw	r28, 0x20	; 32
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8c 01       	movw	r16, r24
			"H:", // 5 - H:
			"G", // 6 - Motor starten
			"M:", // 7 - Move by Pulses
			"!", // 8 - Busy Ready ?
			"H1",
			0 };
     c98:	de 01       	movw	r26, r28
     c9a:	1b 96       	adiw	r26, 0x0b	; 11
     c9c:	e7 e2       	ldi	r30, 0x27	; 39
     c9e:	f7 e0       	ldi	r31, 0x07	; 7
     ca0:	86 e1       	ldi	r24, 0x16	; 22
     ca2:	01 90       	ld	r0, Z+
     ca4:	0d 92       	st	X+, r0
     ca6:	81 50       	subi	r24, 0x01	; 1
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <switch_csg+0x24>
	switch (FindStringInArray(str_rx, pOptions, 2)) {
     caa:	c8 01       	movw	r24, r16
     cac:	be 01       	movw	r22, r28
     cae:	65 5f       	subi	r22, 0xF5	; 245
     cb0:	7f 4f       	sbci	r23, 0xFF	; 255
     cb2:	42 e0       	ldi	r20, 0x02	; 2
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	0e 94 64 05 	call	0xac8	; 0xac8 <FindStringInArray>
     cba:	84 30       	cpi	r24, 0x04	; 4
     cbc:	91 05       	cpc	r25, r1
     cbe:	c1 f1       	breq	.+112    	; 0xd30 <switch_csg+0xb2>
     cc0:	85 30       	cpi	r24, 0x05	; 5
     cc2:	91 05       	cpc	r25, r1
     cc4:	84 f4       	brge	.+32     	; 0xce6 <switch_csg+0x68>
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	91 05       	cpc	r25, r1
     cca:	29 f1       	breq	.+74     	; 0xd16 <switch_csg+0x98>
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	91 05       	cpc	r25, r1
     cd0:	1c f4       	brge	.+6      	; 0xcd8 <switch_csg+0x5a>
     cd2:	89 2b       	or	r24, r25
     cd4:	e9 f0       	breq	.+58     	; 0xd10 <switch_csg+0x92>
     cd6:	65 c0       	rjmp	.+202    	; 0xda2 <switch_csg+0x124>
     cd8:	82 30       	cpi	r24, 0x02	; 2
     cda:	91 05       	cpc	r25, r1
     cdc:	f9 f0       	breq	.+62     	; 0xd1c <switch_csg+0x9e>
     cde:	03 97       	sbiw	r24, 0x03	; 3
     ce0:	09 f0       	breq	.+2      	; 0xce4 <switch_csg+0x66>
     ce2:	5f c0       	rjmp	.+190    	; 0xda2 <switch_csg+0x124>
     ce4:	1e c0       	rjmp	.+60     	; 0xd22 <switch_csg+0xa4>
     ce6:	87 30       	cpi	r24, 0x07	; 7
     ce8:	91 05       	cpc	r25, r1
     cea:	81 f1       	breq	.+96     	; 0xd4c <switch_csg+0xce>
     cec:	88 30       	cpi	r24, 0x08	; 8
     cee:	91 05       	cpc	r25, r1
     cf0:	3c f4       	brge	.+14     	; 0xd00 <switch_csg+0x82>
     cf2:	85 30       	cpi	r24, 0x05	; 5
     cf4:	91 05       	cpc	r25, r1
     cf6:	01 f1       	breq	.+64     	; 0xd38 <switch_csg+0xba>
     cf8:	06 97       	sbiw	r24, 0x06	; 6
     cfa:	09 f0       	breq	.+2      	; 0xcfe <switch_csg+0x80>
     cfc:	52 c0       	rjmp	.+164    	; 0xda2 <switch_csg+0x124>
     cfe:	23 c0       	rjmp	.+70     	; 0xd46 <switch_csg+0xc8>
     d00:	88 30       	cpi	r24, 0x08	; 8
     d02:	91 05       	cpc	r25, r1
     d04:	09 f4       	brne	.+2      	; 0xd08 <switch_csg+0x8a>
     d06:	3f c0       	rjmp	.+126    	; 0xd86 <switch_csg+0x108>
     d08:	09 97       	sbiw	r24, 0x09	; 9
     d0a:	09 f0       	breq	.+2      	; 0xd0e <switch_csg+0x90>
     d0c:	4a c0       	rjmp	.+148    	; 0xda2 <switch_csg+0x124>
     d0e:	46 c0       	rjmp	.+140    	; 0xd9c <switch_csg+0x11e>
	case 0: // Motorkarte Erfolgreich angesprochen
		lcd_puts("!");
     d10:	8a ee       	ldi	r24, 0xEA	; 234
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	4f c0       	rjmp	.+158    	; 0xdb4 <switch_csg+0x136>
		break;
	case 1: // Display l�schen
		lcd_clrscr();
     d16:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
     d1a:	4e c0       	rjmp	.+156    	; 0xdb8 <switch_csg+0x13a>
		break;
	case 2: // Interner Test
		lcd_puts("!T");
     d1c:	8c ee       	ldi	r24, 0xEC	; 236
     d1e:	92 e0       	ldi	r25, 0x02	; 2
     d20:	49 c0       	rjmp	.+146    	; 0xdb4 <switch_csg+0x136>
		//uart_puts("Test bestanden\n\r");
		break;
	case 3: // Status abfrage von Software
		lcd_puts("Statusabfrage     \n");
     d22:	8f ee       	ldi	r24, 0xEF	; 239
     d24:	92 e0       	ldi	r25, 0x02	; 2
     d26:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		csg_Status_melden();
     d2a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <csg_Status_melden>
     d2e:	44 c0       	rjmp	.+136    	; 0xdb8 <switch_csg+0x13a>
		break;
	case 4:
		String_zerlegen_csg(str_rx);
     d30:	c8 01       	movw	r24, r16
     d32:	0e 94 bd 03 	call	0x77a	; 0x77a <String_zerlegen_csg>
     d36:	40 c0       	rjmp	.+128    	; 0xdb8 <switch_csg+0x13a>

		break;
	case 5:
		lcd_puts("H:                 \n");
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	93 e0       	ldi	r25, 0x03	; 3
     d3c:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string(B_OK, D_RapidForm);
     d40:	84 ed       	ldi	r24, 0xD4	; 212
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	26 c0       	rjmp	.+76     	; 0xd92 <switch_csg+0x114>
		break;
	case 6:
		lcd_puts("Motor starten\n");
     d46:	88 e1       	ldi	r24, 0x18	; 24
     d48:	93 e0       	ldi	r25, 0x03	; 3
     d4a:	34 c0       	rjmp	.+104    	; 0xdb4 <switch_csg+0x136>
		//uart_put_string(B_OK, D_RapidForm);
		break;
	case 7:
		move++;
     d4c:	80 91 70 07 	lds	r24, 0x0770
     d50:	90 91 71 07 	lds	r25, 0x0771
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	90 93 71 07 	sts	0x0771, r25
     d5a:	80 93 70 07 	sts	0x0770, r24
		char it[10];
		itoa(move, it, 10);
     d5e:	8e 01       	movw	r16, r28
     d60:	0f 5f       	subi	r16, 0xFF	; 255
     d62:	1f 4f       	sbci	r17, 0xFF	; 255
     d64:	b8 01       	movw	r22, r16
     d66:	4a e0       	ldi	r20, 0x0A	; 10
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <itoa>
		lcd_puts(it);
     d6e:	c8 01       	movw	r24, r16
     d70:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts("_Move!\n");
     d74:	87 e2       	ldi	r24, 0x27	; 39
     d76:	93 e0       	ldi	r25, 0x03	; 3
     d78:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("M 160000\r\n",D_Stepper);
     d7c:	8f e2       	ldi	r24, 0x2F	; 47
     d7e:	93 e0       	ldi	r25, 0x03	; 3
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	08 c0       	rjmp	.+16     	; 0xd96 <switch_csg+0x118>

		break;
	case 8:
		lcd_puts("R/B?");
     d86:	8a e3       	ldi	r24, 0x3A	; 58
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("R\r\n", D_RapidForm);
     d8e:	8f e3       	ldi	r24, 0x3F	; 63
     d90:	93 e0       	ldi	r25, 0x03	; 3
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
     d9a:	0e c0       	rjmp	.+28     	; 0xdb8 <switch_csg+0x13a>
		break;
	case 9:
		lcd_puts("H1 empfangen       \n");
     d9c:	83 e4       	ldi	r24, 0x43	; 67
     d9e:	93 e0       	ldi	r25, 0x03	; 3
     da0:	09 c0       	rjmp	.+18     	; 0xdb4 <switch_csg+0x136>
		break;
	default:
		lcd_puts("U_B: ");
     da2:	88 e5       	ldi	r24, 0x58	; 88
     da4:	93 e0       	ldi	r25, 0x03	; 3
     da6:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(str_rx);
     daa:	c8 01       	movw	r24, r16
     dac:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts("!END       \n");
     db0:	8e e5       	ldi	r24, 0x5E	; 94
     db2:	93 e0       	ldi	r25, 0x03	; 3
     db4:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	}
}
     db8:	a0 96       	adiw	r28, 0x20	; 32
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	08 95       	ret

00000dce <switch_Stepper>:
	ltoa(z,Position,10);
}
// Vearbeitungs Logik

int Initialized = M_NOTI;
void 	switch_Stepper		(char * str_rx) {
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	2a 97       	sbiw	r28, 0x0a	; 10
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
	const char* pOptions[] = {
			"#", 	// 0 - Stepper Karte Befehl erkannt
			"E", 	// 1 - Error
			"!CLS", // 2 - Clear Screen
			"Test", // 3 - Test
			0 };
     de2:	de 01       	movw	r26, r28
     de4:	11 96       	adiw	r26, 0x01	; 1
     de6:	ef e5       	ldi	r30, 0x5F	; 95
     de8:	f7 e0       	ldi	r31, 0x07	; 7
     dea:	2a e0       	ldi	r18, 0x0A	; 10
     dec:	01 90       	ld	r0, Z+
     dee:	0d 92       	st	X+, r0
     df0:	21 50       	subi	r18, 0x01	; 1
     df2:	e1 f7       	brne	.-8      	; 0xdec <switch_Stepper+0x1e>
	switch (FindStringInArray(str_rx, pOptions, 1)) {
     df4:	be 01       	movw	r22, r28
     df6:	6f 5f       	subi	r22, 0xFF	; 255
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	41 e0       	ldi	r20, 0x01	; 1
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	0e 94 64 05 	call	0xac8	; 0xac8 <FindStringInArray>
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	91 05       	cpc	r25, r1
     e06:	79 f0       	breq	.+30     	; 0xe26 <switch_Stepper+0x58>
     e08:	82 30       	cpi	r24, 0x02	; 2
     e0a:	91 05       	cpc	r25, r1
     e0c:	1c f4       	brge	.+6      	; 0xe14 <switch_Stepper+0x46>
     e0e:	89 2b       	or	r24, r25
     e10:	39 f0       	breq	.+14     	; 0xe20 <switch_Stepper+0x52>
     e12:	1c c0       	rjmp	.+56     	; 0xe4c <switch_Stepper+0x7e>
     e14:	82 30       	cpi	r24, 0x02	; 2
     e16:	91 05       	cpc	r25, r1
     e18:	89 f0       	breq	.+34     	; 0xe3c <switch_Stepper+0x6e>
     e1a:	03 97       	sbiw	r24, 0x03	; 3
     e1c:	b9 f4       	brne	.+46     	; 0xe4c <switch_Stepper+0x7e>
     e1e:	11 c0       	rjmp	.+34     	; 0xe42 <switch_Stepper+0x74>
	case 0:
		lcd_puts("Erfolgreich\n");
     e20:	8b e6       	ldi	r24, 0x6B	; 107
     e22:	93 e0       	ldi	r25, 0x03	; 3
     e24:	10 c0       	rjmp	.+32     	; 0xe46 <switch_Stepper+0x78>
		//uart_put_string("0\n\r", D_RapidForm);
		break;
	case 1:
		lcd_puts("Error\n");
     e26:	88 e7       	ldi	r24, 0x78	; 120
     e28:	93 e0       	ldi	r25, 0x03	; 3
     e2a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("1\r\n", D_RapidForm);
     e2e:	8f e7       	ldi	r24, 0x7F	; 127
     e30:	93 e0       	ldi	r25, 0x03	; 3
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
     e3a:	10 c0       	rjmp	.+32     	; 0xe5c <inner_1536+0x8>
		break;
	case 2:
		lcd_clrscr();
     e3c:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
     e40:	0d c0       	rjmp	.+26     	; 0xe5c <inner_1536+0x8>
		break;
	case 3:
		lcd_puts("Test bestanden\n");
     e42:	83 e8       	ldi	r24, 0x83	; 131
     e44:	93 e0       	ldi	r25, 0x03	; 3
     e46:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
     e4a:	08 c0       	rjmp	.+16     	; 0xe5c <inner_1536+0x8>
     e4c:	8a e0       	ldi	r24, 0x0A	; 10
     e4e:	90 e0       	ldi	r25, 0x00	; 0

00000e50 <outer_1536>:
     e50:	a0 ed       	ldi	r26, 0xD0	; 208
     e52:	b7 e0       	ldi	r27, 0x07	; 7

00000e54 <inner_1536>:
     e54:	11 97       	sbiw	r26, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <inner_1536>
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	d1 f7       	brne	.-12     	; 0xe50 <outer_1536>
		//lcd_puts("A: ");
		//lcd_puts(str_rx);
		//lcd_puts("!\n");
		//uart_put_string(str_rx, D_RapidForm);
	}
}
     e5c:	2a 96       	adiw	r28, 0x0a	; 10
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <switch_Isel>:
void 	switch_Isel			(char * str_rx) {
     e6e:	cf 92       	push	r12
     e70:	df 92       	push	r13
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	c7 55       	subi	r28, 0x57	; 87
     e84:	d0 40       	sbci	r29, 0x00	; 0
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	6c 01       	movw	r12, r24
			"!CLS",    	// 1 - LC-Display l�schen
			"Test", 	// 2 - Test
			"@01",  	// 3 - Achse ausw�hlen
			"@0R", 		// 4 - Status abfrage
			"@0M", 		// 5 - Gehe zu Position MX , +600
			0 };
     e92:	de 01       	movw	r26, r28
     e94:	11 96       	adiw	r26, 0x01	; 1
     e96:	ed e4       	ldi	r30, 0x4D	; 77
     e98:	f7 e0       	ldi	r31, 0x07	; 7
     e9a:	8e e0       	ldi	r24, 0x0E	; 14
     e9c:	01 90       	ld	r0, Z+
     e9e:	0d 92       	st	X+, r0
     ea0:	81 50       	subi	r24, 0x01	; 1
     ea2:	e1 f7       	brne	.-8      	; 0xe9c <switch_Isel+0x2e>

	int Ret_Val = FindStringInArray(str_rx, pOptions, 3);
     ea4:	c6 01       	movw	r24, r12
     ea6:	be 01       	movw	r22, r28
     ea8:	6f 5f       	subi	r22, 0xFF	; 255
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	43 e0       	ldi	r20, 0x03	; 3
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	0e 94 64 05 	call	0xac8	; 0xac8 <FindStringInArray>
	switch (Ret_Val) {
     eb4:	82 30       	cpi	r24, 0x02	; 2
     eb6:	91 05       	cpc	r25, r1
     eb8:	c9 f0       	breq	.+50     	; 0xeec <switch_Isel+0x7e>
     eba:	83 30       	cpi	r24, 0x03	; 3
     ebc:	91 05       	cpc	r25, r1
     ebe:	34 f4       	brge	.+12     	; 0xecc <switch_Isel+0x5e>
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	71 f0       	breq	.+28     	; 0xee0 <switch_Isel+0x72>
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	09 f0       	breq	.+2      	; 0xeca <switch_Isel+0x5c>
     ec8:	f9 c0       	rjmp	.+498    	; 0x10bc <inner_1753+0x7c>
     eca:	0d c0       	rjmp	.+26     	; 0xee6 <switch_Isel+0x78>
     ecc:	84 30       	cpi	r24, 0x04	; 4
     ece:	91 05       	cpc	r25, r1
     ed0:	f9 f0       	breq	.+62     	; 0xf10 <inner_1630+0xe>
     ed2:	84 30       	cpi	r24, 0x04	; 4
     ed4:	91 05       	cpc	r25, r1
     ed6:	8c f0       	brlt	.+34     	; 0xefa <switch_Isel+0x8c>
     ed8:	05 97       	sbiw	r24, 0x05	; 5
     eda:	09 f0       	breq	.+2      	; 0xede <switch_Isel+0x70>
     edc:	ef c0       	rjmp	.+478    	; 0x10bc <inner_1753+0x7c>
     ede:	41 c0       	rjmp	.+130    	; 0xf62 <inner_1646+0x36>
	case 0: 		// 0 - Reserve
		lcd_puts("Reserve\r\n");
     ee0:	83 e9       	ldi	r24, 0x93	; 147
     ee2:	93 e0       	ldi	r25, 0x03	; 3
     ee4:	f0 c0       	rjmp	.+480    	; 0x10c6 <inner_1753+0x86>
		break;
	case 1: 		// 1 - LC-Display l�schen
		lcd_clrscr();
     ee6:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
     eea:	ef c0       	rjmp	.+478    	; 0x10ca <inner_1753+0x8a>
		break;
	case 2:			// 2 - Test
		lcd_puts("Test bestanden\n");
     eec:	83 e8       	ldi	r24, 0x83	; 131
     eee:	93 e0       	ldi	r25, 0x03	; 3
     ef0:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("Test bestanden\r\n", D_RapidForm);
     ef4:	8d e9       	ldi	r24, 0x9D	; 157
     ef6:	93 e0       	ldi	r25, 0x03	; 3
     ef8:	dc c0       	rjmp	.+440    	; 0x10b2 <inner_1753+0x72>
     efa:	8a e0       	ldi	r24, 0x0A	; 10
     efc:	90 e0       	ldi	r25, 0x00	; 0

00000efe <outer_1630>:
     efe:	a0 ed       	ldi	r26, 0xD0	; 208
     f00:	b7 e0       	ldi	r27, 0x07	; 7

00000f02 <inner_1630>:
     f02:	11 97       	sbiw	r26, 0x01	; 1
     f04:	f1 f7       	brne	.-4      	; 0xf02 <inner_1630>
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	d1 f7       	brne	.-12     	; 0xefe <outer_1630>
			s_ptr++; // Increase string pointer
		} while( pgm_read_byte( s_ptr ) != 0x00 );  // End of string
		*/

		//lcd_puts( buf );
		lcd_puts("Init");
     f0a:	8e ea       	ldi	r24, 0xAE	; 174
     f0c:	93 e0       	ldi	r25, 0x03	; 3
     f0e:	cd c0       	rjmp	.+410    	; 0x10aa <inner_1753+0x6a>
		//String_zerlegen_Isel(str_rx, Position);
		uart_put_string("0\r\n", D_RapidForm);
		//uart_put_string(Protokoll.Motor[M_ISEL].Befehl[0].Output, D_RapidForm);
		break;
	case 4:			// 4 - Status abfrage
		lcd_puts("Statusabfrage:     \n");
     f10:	83 eb       	ldi	r24, 0xB3	; 179
     f12:	93 e0       	ldi	r25, 0x03	; 3
     f14:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("A\n", D_Stepper);
     f18:	88 ec       	ldi	r24, 0xC8	; 200
     f1a:	93 e0       	ldi	r25, 0x03	; 3
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
     f24:	82 e3       	ldi	r24, 0x32	; 50
     f26:	90 e0       	ldi	r25, 0x00	; 0

00000f28 <outer_1646>:
     f28:	a0 ed       	ldi	r26, 0xD0	; 208
     f2a:	b7 e0       	ldi	r27, 0x07	; 7

00000f2c <inner_1646>:
     f2c:	11 97       	sbiw	r26, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <inner_1646>
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	d1 f7       	brne	.-12     	; 0xf28 <outer_1646>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
     f34:	80 91 c8 00 	lds	r24, 0x00C8
     f38:	87 ff       	sbrs	r24, 7
     f3a:	04 c0       	rjmp	.+8      	; 0xf44 <inner_1646+0x18>
			uart_rx(D_Stepper);
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 75 08 	call	0x10ea	; 0x10ea <uart_rx>
		if (!strcmp(str_rx,"0#"))
     f44:	c6 01       	movw	r24, r12
     f46:	6b ec       	ldi	r22, 0xCB	; 203
     f48:	73 e0       	ldi	r23, 0x03	; 3
     f4a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <strcmp>
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	09 f4       	brne	.+2      	; 0xf54 <inner_1646+0x28>
     f52:	ad c0       	rjmp	.+346    	; 0x10ae <inner_1753+0x6e>
			uart_put_string("0\r\n", D_RapidForm);
		else {
			lcd_puts("Fehlgeschlagen     \n");
     f54:	8e ec       	ldi	r24, 0xCE	; 206
     f56:	93 e0       	ldi	r25, 0x03	; 3
     f58:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			uart_put_string("-1\r\n", D_RapidForm);
     f5c:	83 ee       	ldi	r24, 0xE3	; 227
     f5e:	93 e0       	ldi	r25, 0x03	; 3
     f60:	a8 c0       	rjmp	.+336    	; 0x10b2 <inner_1753+0x72>
     f62:	8a e0       	ldi	r24, 0x0A	; 10
     f64:	90 e0       	ldi	r25, 0x00	; 0

00000f66 <outer_1675>:
     f66:	a0 ed       	ldi	r26, 0xD0	; 208
     f68:	b7 e0       	ldi	r27, 0x07	; 7

00000f6a <inner_1675>:
     f6a:	11 97       	sbiw	r26, 0x01	; 1
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <inner_1675>
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	d1 f7       	brne	.-12     	; 0xf66 <outer_1675>
		}
		break;
	case 5:			// 5 - Gehe zu Position MX , +600
		ms_spin(10);
		char Position[33];
		memset(Position, '\0', 33);
     f72:	2f e0       	ldi	r18, 0x0F	; 15
     f74:	e2 2e       	mov	r14, r18
     f76:	f1 2c       	mov	r15, r1
     f78:	ec 0e       	add	r14, r28
     f7a:	fd 1e       	adc	r15, r29
     f7c:	81 e2       	ldi	r24, 0x21	; 33
     f7e:	f7 01       	movw	r30, r14
     f80:	11 92       	st	Z+, r1
     f82:	8a 95       	dec	r24
     f84:	e9 f7       	brne	.-6      	; 0xf80 <inner_1675+0x16>
		String_zerlegen_Isel(str_rx, Position);
     f86:	c6 01       	movw	r24, r12
     f88:	b7 01       	movw	r22, r14
     f8a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <String_zerlegen_Isel>
		char Move_To[40];
		memset(Move_To,  '\0', 40);
     f8e:	8e 01       	movw	r16, r28
     f90:	00 5d       	subi	r16, 0xD0	; 208
     f92:	1f 4f       	sbci	r17, 0xFF	; 255
     f94:	88 e2       	ldi	r24, 0x28	; 40
     f96:	f8 01       	movw	r30, r16
     f98:	11 92       	st	Z+, r1
     f9a:	8a 95       	dec	r24
     f9c:	e9 f7       	brne	.-6      	; 0xf98 <inner_1675+0x2e>
		Move_To[0] = 'M';
     f9e:	8d e4       	ldi	r24, 0x4D	; 77
     fa0:	88 ab       	std	Y+48, r24	; 0x30
		Move_To[1] = 'A';
     fa2:	81 e4       	ldi	r24, 0x41	; 65
     fa4:	89 ab       	std	Y+49, r24	; 0x31
		Move_To[2] = ' ';
     fa6:	80 e2       	ldi	r24, 0x20	; 32
     fa8:	8a ab       	std	Y+50, r24	; 0x32
		Move_To[3] = '\0';
     faa:	1b aa       	std	Y+51, r1	; 0x33
		strcat(Move_To, Position);
     fac:	c8 01       	movw	r24, r16
     fae:	b7 01       	movw	r22, r14
     fb0:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <strcat>
		strcat(Move_To, "\n");
     fb4:	c8 01       	movw	r24, r16
     fb6:	68 eb       	ldi	r22, 0xB8	; 184
     fb8:	71 e0       	ldi	r23, 0x01	; 1
     fba:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <strcat>
		lcd_puts("Pos:");
     fbe:	88 ee       	ldi	r24, 0xE8	; 232
     fc0:	93 e0       	ldi	r25, 0x03	; 3
     fc2:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(Move_To);
     fc6:	c8 01       	movw	r24, r16
     fc8:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>

		uart_put_string(Move_To, D_Stepper);
     fcc:	c8 01       	movw	r24, r16
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
     fd6:	02 e3       	ldi	r16, 0x32	; 50
     fd8:	10 e0       	ldi	r17, 0x00	; 0
     fda:	f8 01       	movw	r30, r16

00000fdc <outer_1715>:
     fdc:	a0 ed       	ldi	r26, 0xD0	; 208
     fde:	b7 e0       	ldi	r27, 0x07	; 7

00000fe0 <inner_1715>:
     fe0:	11 97       	sbiw	r26, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <inner_1715>
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	d1 f7       	brne	.-12     	; 0xfdc <outer_1715>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
     fe8:	80 91 c8 00 	lds	r24, 0x00C8
     fec:	87 ff       	sbrs	r24, 7
     fee:	6d c0       	rjmp	.+218    	; 0x10ca <inner_1753+0x8a>
			uart_rx(D_Stepper);
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 75 08 	call	0x10ea	; 0x10ea <uart_rx>
		else {
			//lcd_puts("Befehl n. bestaetig\n");
			break;
		}

		uart_put_string("A\n", D_Stepper);
     ff8:	88 ec       	ldi	r24, 0xC8	; 200
     ffa:	93 e0       	ldi	r25, 0x03	; 3
     ffc:	61 e0       	ldi	r22, 0x01	; 1
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
    1004:	f8 01       	movw	r30, r16

00001006 <outer_1729>:
    1006:	a0 ed       	ldi	r26, 0xD0	; 208
    1008:	b7 e0       	ldi	r27, 0x07	; 7

0000100a <inner_1729>:
    100a:	11 97       	sbiw	r26, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <inner_1729>
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	d1 f7       	brne	.-12     	; 0x1006 <outer_1729>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    1012:	80 91 c8 00 	lds	r24, 0x00C8
    1016:	87 ff       	sbrs	r24, 7
    1018:	05 c0       	rjmp	.+10     	; 0x1024 <inner_1729+0x1a>
			uart_rx(D_Stepper);
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uart_rx>
    1022:	2c c0       	rjmp	.+88     	; 0x107c <inner_1753+0x3c>
		else {
			lcd_puts("Keine Bewegung!\n");
    1024:	8d ee       	ldi	r24, 0xED	; 237
    1026:	93 e0       	ldi	r25, 0x03	; 3
    1028:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
    102c:	27 c0       	rjmp	.+78     	; 0x107c <inner_1753+0x3c>
		}

		while (!strcmp(str_rx,"1#")){
			uart_put_string("A\n", D_Stepper);
    102e:	88 ec       	ldi	r24, 0xC8	; 200
    1030:	93 e0       	ldi	r25, 0x03	; 3
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
    103a:	f7 01       	movw	r30, r14

0000103c <outer_1753>:
    103c:	a0 ed       	ldi	r26, 0xD0	; 208
    103e:	b7 e0       	ldi	r27, 0x07	; 7

00001040 <inner_1753>:
    1040:	11 97       	sbiw	r26, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <inner_1753>
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	d1 f7       	brne	.-12     	; 0x103c <outer_1753>
			ms_spin(50);
			if ((UCSR1A & (1 << RXC1))){
    1048:	80 91 c8 00 	lds	r24, 0x00C8
    104c:	87 ff       	sbrs	r24, 7
    104e:	10 c0       	rjmp	.+32     	; 0x1070 <inner_1753+0x30>
				uart_rx(D_Stepper);
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 75 08 	call	0x10ea	; 0x10ea <uart_rx>
				lcd_clrscr();
    1058:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
				lcd_puts("running to\n");
    105c:	8e ef       	ldi	r24, 0xFE	; 254
    105e:	93 e0       	ldi	r25, 0x03	; 3
    1060:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
				lcd_puts("Position: ");
    1064:	8a e0       	ldi	r24, 0x0A	; 10
    1066:	94 e0       	ldi	r25, 0x04	; 4
    1068:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
				lcd_puts(Position);
    106c:	c8 01       	movw	r24, r16
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <inner_1753+0x34>
			}
			else {
				lcd_puts("Keine Antwort\n");
    1070:	85 e1       	ldi	r24, 0x15	; 21
    1072:	94 e0       	ldi	r25, 0x04	; 4
    1074:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			}
			wdt_reset();
    1078:	a8 95       	wdr
    107a:	06 c0       	rjmp	.+12     	; 0x1088 <inner_1753+0x48>
    107c:	92 e3       	ldi	r25, 0x32	; 50
    107e:	e9 2e       	mov	r14, r25
    1080:	f1 2c       	mov	r15, r1
			if ((UCSR1A & (1 << RXC1))){
				uart_rx(D_Stepper);
				lcd_clrscr();
				lcd_puts("running to\n");
				lcd_puts("Position: ");
				lcd_puts(Position);
    1082:	8e 01       	movw	r16, r28
    1084:	01 5f       	subi	r16, 0xF1	; 241
    1086:	1f 4f       	sbci	r17, 0xFF	; 255
			uart_rx(D_Stepper);
		else {
			lcd_puts("Keine Bewegung!\n");
		}

		while (!strcmp(str_rx,"1#")){
    1088:	c6 01       	movw	r24, r12
    108a:	64 e2       	ldi	r22, 0x24	; 36
    108c:	74 e0       	ldi	r23, 0x04	; 4
    108e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <strcmp>
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	61 f2       	breq	.-104    	; 0x102e <inner_1729+0x24>
			else {
				lcd_puts("Keine Antwort\n");
			}
			wdt_reset();
		}
		lcd_puts("Position: \n");
    1096:	87 e2       	ldi	r24, 0x27	; 39
    1098:	94 e0       	ldi	r25, 0x04	; 4
    109a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(Position);
    109e:	ce 01       	movw	r24, r28
    10a0:	0f 96       	adiw	r24, 0x0f	; 15
    10a2:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(" Erreicht\n");
    10a6:	83 e3       	ldi	r24, 0x33	; 51
    10a8:	94 e0       	ldi	r25, 0x04	; 4
    10aa:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("0\r\n", D_RapidForm);
    10ae:	84 ed       	ldi	r24, 0xD4	; 212
    10b0:	91 e0       	ldi	r25, 0x01	; 1
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
    10ba:	07 c0       	rjmp	.+14     	; 0x10ca <inner_1753+0x8a>
		break;
	default:
		lcd_puts("ISEL:    \n");
    10bc:	8e e3       	ldi	r24, 0x3E	; 62
    10be:	94 e0       	ldi	r25, 0x04	; 4
    10c0:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(str_rx);
    10c4:	c6 01       	movw	r24, r12
    10c6:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	}
}
    10ca:	c9 5a       	subi	r28, 0xA9	; 169
    10cc:	df 4f       	sbci	r29, 0xFF	; 255
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	1f 91       	pop	r17
    10de:	0f 91       	pop	r16
    10e0:	ff 90       	pop	r15
    10e2:	ef 90       	pop	r14
    10e4:	df 90       	pop	r13
    10e6:	cf 90       	pop	r12
    10e8:	08 95       	ret

000010ea <uart_rx>:
		break;
	default:
		return M_UNK;
	}
}
void 	uart_rx				(int dir) {
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	8c 01       	movw	r16, r24
	uart_get_string(str_rx, dir);
    10f0:	88 e7       	ldi	r24, 0x78	; 120
    10f2:	97 e0       	ldi	r25, 0x07	; 7
    10f4:	b8 01       	movw	r22, r16
    10f6:	0e 94 2a 03 	call	0x654	; 0x654 <uart_get_string>
	if (dir == D_Stepper)
    10fa:	01 30       	cpi	r16, 0x01	; 1
    10fc:	11 05       	cpc	r17, r1
    10fe:	29 f4       	brne	.+10     	; 0x110a <uart_rx+0x20>
		switch_Stepper(str_rx);
    1100:	88 e7       	ldi	r24, 0x78	; 120
    1102:	97 e0       	ldi	r25, 0x07	; 7
    1104:	0e 94 e7 06 	call	0xdce	; 0xdce <switch_Stepper>
    1108:	48 c0       	rjmp	.+144    	; 0x119a <uart_rx+0xb0>
	else{
		if(Initialized == M_UNK){
    110a:	80 91 89 06 	lds	r24, 0x0689
    110e:	90 91 8a 06 	lds	r25, 0x068A
    1112:	8e 5f       	subi	r24, 0xFE	; 254
    1114:	9f 4f       	sbci	r25, 0xFF	; 255
    1116:	51 f4       	brne	.+20     	; 0x112c <uart_rx+0x42>
			lcd_puts("Unbekannter Motor!\n");
    1118:	89 e4       	ldi	r24, 0x49	; 73
    111a:	94 e0       	ldi	r25, 0x04	; 4
    111c:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			//lcd_puts(str_rx);
			Initialized = M_NOTI;
    1120:	8f ef       	ldi	r24, 0xFF	; 255
    1122:	9f ef       	ldi	r25, 0xFF	; 255
    1124:	90 93 8a 06 	sts	0x068A, r25
    1128:	80 93 89 06 	sts	0x0689, r24
		}
		if(Initialized == M_NOTI){
    112c:	80 91 89 06 	lds	r24, 0x0689
    1130:	90 91 8a 06 	lds	r25, 0x068A
    1134:	8f 5f       	subi	r24, 0xFF	; 255
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	41 f4       	brne	.+16     	; 0x114a <uart_rx+0x60>
			Initialized = switch_Motor(str_rx);
    113a:	88 e7       	ldi	r24, 0x78	; 120
    113c:	97 e0       	ldi	r25, 0x07	; 7
    113e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <switch_Motor>
    1142:	90 93 8a 06 	sts	0x068A, r25
    1146:	80 93 89 06 	sts	0x0689, r24
		}
		if(Initialized == M_ISEL)
    114a:	80 91 89 06 	lds	r24, 0x0689
    114e:	90 91 8a 06 	lds	r25, 0x068A
    1152:	89 2b       	or	r24, r25
    1154:	21 f4       	brne	.+8      	; 0x115e <uart_rx+0x74>
			switch_Isel(str_rx);
    1156:	88 e7       	ldi	r24, 0x78	; 120
    1158:	97 e0       	ldi	r25, 0x07	; 7
    115a:	0e 94 37 07 	call	0xe6e	; 0xe6e <switch_Isel>
		if(Initialized == M_CSG)
    115e:	80 91 89 06 	lds	r24, 0x0689
    1162:	90 91 8a 06 	lds	r25, 0x068A
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	21 f4       	brne	.+8      	; 0x1172 <uart_rx+0x88>
			switch_csg(str_rx);
    116a:	88 e7       	ldi	r24, 0x78	; 120
    116c:	97 e0       	ldi	r25, 0x07	; 7
    116e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <switch_csg>
		if(Initialized == M_ZETA)
    1172:	80 91 89 06 	lds	r24, 0x0689
    1176:	90 91 8a 06 	lds	r25, 0x068A
    117a:	02 97       	sbiw	r24, 0x02	; 2
    117c:	21 f4       	brne	.+8      	; 0x1186 <uart_rx+0x9c>
			switch_Zeta(str_rx);
    117e:	88 e7       	ldi	r24, 0x78	; 120
    1180:	97 e0       	ldi	r25, 0x07	; 7
    1182:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <switch_Zeta>
		if(Initialized == M_TERMINAL)
    1186:	80 91 89 06 	lds	r24, 0x0689
    118a:	90 91 8a 06 	lds	r25, 0x068A
    118e:	03 97       	sbiw	r24, 0x03	; 3
    1190:	21 f4       	brne	.+8      	; 0x119a <uart_rx+0xb0>
			switch_Terminal(str_rx);
    1192:	88 e7       	ldi	r24, 0x78	; 120
    1194:	97 e0       	ldi	r25, 0x07	; 7
    1196:	0e 94 ce 05 	call	0xb9c	; 0xb9c <switch_Terminal>
	}
}
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	08 95       	ret

000011a0 <switch_Zeta>:
		lcd_puts("U_B: ");
		lcd_puts(str_rx);
		lcd_puts("!END       \n");
	}
}
void 	switch_Zeta			(char * str_rx) {
    11a0:	af 92       	push	r10
    11a2:	bf 92       	push	r11
    11a4:	cf 92       	push	r12
    11a6:	df 92       	push	r13
    11a8:	ef 92       	push	r14
    11aa:	ff 92       	push	r15
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	c3 56       	subi	r28, 0x63	; 99
    11ba:	d0 40       	sbci	r29, 0x00	; 0
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	7c 01       	movw	r14, r24
			"D1125",// 7 - Position
			"A8", 	// 8 - Accelartion 8
			"V8",	// 9 - Velocity 8
			"ECHO0",// 10 - Echo abschalten
			"PSET0",// 11 - Ursprung setzen
			0 };
    11c8:	de 01       	movw	r26, r28
    11ca:	11 96       	adiw	r26, 0x01	; 1
    11cc:	e8 ef       	ldi	r30, 0xF8	; 248
    11ce:	f6 e0       	ldi	r31, 0x06	; 6
    11d0:	8a e1       	ldi	r24, 0x1A	; 26
    11d2:	01 90       	ld	r0, Z+
    11d4:	0d 92       	st	X+, r0
    11d6:	81 50       	subi	r24, 0x01	; 1
    11d8:	e1 f7       	brne	.-8      	; 0x11d2 <switch_Zeta+0x32>
	char Position[33];
	char Move_To[40];
	memset(Move_To,  '\0', 40);
    11da:	8e 01       	movw	r16, r28
    11dc:	04 5c       	subi	r16, 0xC4	; 196
    11de:	1f 4f       	sbci	r17, 0xFF	; 255
    11e0:	88 e2       	ldi	r24, 0x28	; 40
    11e2:	d8 01       	movw	r26, r16
    11e4:	1d 92       	st	X+, r1
    11e6:	8a 95       	dec	r24
    11e8:	e9 f7       	brne	.-6      	; 0x11e4 <switch_Zeta+0x44>
	Move_To[0] = 'M';
    11ea:	8d e4       	ldi	r24, 0x4D	; 77
    11ec:	8c af       	std	Y+60, r24	; 0x3c
	Move_To[1] = 'A';
    11ee:	81 e4       	ldi	r24, 0x41	; 65
    11f0:	8d af       	std	Y+61, r24	; 0x3d
	Move_To[2] = ' ';
    11f2:	80 e2       	ldi	r24, 0x20	; 32
    11f4:	8e af       	std	Y+62, r24	; 0x3e
	Move_To[3] = '\0';
    11f6:	1f ae       	std	Y+63, r1	; 0x3f
	switch (FindStringInArray(str_rx, pOptions, 1)) {
    11f8:	c7 01       	movw	r24, r14
    11fa:	be 01       	movw	r22, r28
    11fc:	6f 5f       	subi	r22, 0xFF	; 255
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1200:	41 e0       	ldi	r20, 0x01	; 1
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	0e 94 64 05 	call	0xac8	; 0xac8 <FindStringInArray>
    1208:	87 30       	cpi	r24, 0x07	; 7
    120a:	91 05       	cpc	r25, r1
    120c:	6c f4       	brge	.+26     	; 0x1228 <switch_Zeta+0x88>
    120e:	83 30       	cpi	r24, 0x03	; 3
    1210:	91 05       	cpc	r25, r1
    1212:	0c f0       	brlt	.+2      	; 0x1216 <switch_Zeta+0x76>
    1214:	ea c0       	rjmp	.+468    	; 0x13ea <inner_2109+0xaa>
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	91 05       	cpc	r25, r1
    121a:	c1 f0       	breq	.+48     	; 0x124c <switch_Zeta+0xac>
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	91 05       	cpc	r25, r1
    1220:	c4 f4       	brge	.+48     	; 0x1252 <switch_Zeta+0xb2>
    1222:	89 2b       	or	r24, r25
    1224:	81 f0       	breq	.+32     	; 0x1246 <switch_Zeta+0xa6>
    1226:	d6 c0       	rjmp	.+428    	; 0x13d4 <inner_2109+0x94>
    1228:	8a 30       	cpi	r24, 0x0A	; 10
    122a:	91 05       	cpc	r25, r1
    122c:	24 f4       	brge	.+8      	; 0x1236 <switch_Zeta+0x96>
    122e:	08 97       	sbiw	r24, 0x08	; 8
    1230:	0c f0       	brlt	.+2      	; 0x1234 <switch_Zeta+0x94>
    1232:	db c0       	rjmp	.+438    	; 0x13ea <inner_2109+0xaa>
    1234:	bd c0       	rjmp	.+378    	; 0x13b0 <inner_2109+0x70>
    1236:	8a 30       	cpi	r24, 0x0A	; 10
    1238:	91 05       	cpc	r25, r1
    123a:	09 f4       	brne	.+2      	; 0x123e <switch_Zeta+0x9e>
    123c:	c4 c0       	rjmp	.+392    	; 0x13c6 <inner_2109+0x86>
    123e:	0b 97       	sbiw	r24, 0x0b	; 11
    1240:	09 f0       	breq	.+2      	; 0x1244 <switch_Zeta+0xa4>
    1242:	c8 c0       	rjmp	.+400    	; 0x13d4 <inner_2109+0x94>
    1244:	d2 c0       	rjmp	.+420    	; 0x13ea <inner_2109+0xaa>
	case 0: // Display l�schen
		lcd_clrscr();
    1246:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
    124a:	cf c0       	rjmp	.+414    	; 0x13ea <inner_2109+0xaa>
		break;
	case 1: // Interner Test
		lcd_puts("Test bestanden     \n");
    124c:	8d eb       	ldi	r24, 0xBD	; 189
    124e:	92 e0       	ldi	r25, 0x02	; 2
    1250:	ca c0       	rjmp	.+404    	; 0x13e6 <inner_2109+0xa6>
    1252:	84 e6       	ldi	r24, 0x64	; 100
    1254:	90 e0       	ldi	r25, 0x00	; 0

00001256 <outer_2015>:
    1256:	a0 ed       	ldi	r26, 0xD0	; 208
    1258:	b7 e0       	ldi	r27, 0x07	; 7

0000125a <inner_2015>:
    125a:	11 97       	sbiw	r26, 0x01	; 1
    125c:	f1 f7       	brne	.-4      	; 0x125a <inner_2015>
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	d1 f7       	brne	.-12     	; 0x1256 <outer_2015>
		break;
	case 2: // Go
		ms_spin(100);
		strcat(Move_To, Position);
    1262:	c8 01       	movw	r24, r16
    1264:	be 01       	movw	r22, r28
    1266:	65 5e       	subi	r22, 0xE5	; 229
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
    126a:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <strcat>
		strcat(Move_To, "\n");
    126e:	c8 01       	movw	r24, r16
    1270:	68 eb       	ldi	r22, 0xB8	; 184
    1272:	71 e0       	ldi	r23, 0x01	; 1
    1274:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <strcat>
		//lcd_puts("Pos:");
		//lcd_puts(Move_To);

		uart_put_string(Move_To, D_Stepper);
    1278:	c8 01       	movw	r24, r16
    127a:	61 e0       	ldi	r22, 0x01	; 1
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
    1282:	02 e3       	ldi	r16, 0x32	; 50
    1284:	10 e0       	ldi	r17, 0x00	; 0
    1286:	f8 01       	movw	r30, r16

00001288 <outer_2032>:
    1288:	a0 ed       	ldi	r26, 0xD0	; 208
    128a:	b7 e0       	ldi	r27, 0x07	; 7

0000128c <inner_2032>:
    128c:	11 97       	sbiw	r26, 0x01	; 1
    128e:	f1 f7       	brne	.-4      	; 0x128c <inner_2032>
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	d1 f7       	brne	.-12     	; 0x1288 <outer_2032>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    1294:	80 91 c8 00 	lds	r24, 0x00C8
    1298:	87 ff       	sbrs	r24, 7
    129a:	16 c0       	rjmp	.+44     	; 0x12c8 <inner_2046+0x12>
			uart_rx(D_Stepper);
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 75 08 	call	0x10ea	; 0x10ea <uart_rx>
		else {
			lcd_puts("Befehl n. bestaetig\n");
			break;
		}

		uart_put_string("A\n", D_Stepper);
    12a4:	88 ec       	ldi	r24, 0xC8	; 200
    12a6:	93 e0       	ldi	r25, 0x03	; 3
    12a8:	61 e0       	ldi	r22, 0x01	; 1
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
    12b0:	f8 01       	movw	r30, r16

000012b2 <outer_2046>:
    12b2:	a0 ed       	ldi	r26, 0xD0	; 208
    12b4:	b7 e0       	ldi	r27, 0x07	; 7

000012b6 <inner_2046>:
    12b6:	11 97       	sbiw	r26, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <inner_2046>
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	d1 f7       	brne	.-12     	; 0x12b2 <outer_2046>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    12be:	80 91 c8 00 	lds	r24, 0x00C8
    12c2:	88 23       	and	r24, r24
    12c4:	4c f4       	brge	.+18     	; 0x12d8 <inner_2046+0x22>
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <inner_2046+0x18>
		uart_put_string(Move_To, D_Stepper);
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
			uart_rx(D_Stepper);
		else {
			lcd_puts("Befehl n. bestaetig\n");
    12c8:	8d e5       	ldi	r24, 0x5D	; 93
    12ca:	94 e0       	ldi	r25, 0x04	; 4
    12cc:	8c c0       	rjmp	.+280    	; 0x13e6 <inner_2109+0xa6>
		}

		uart_put_string("A\n", D_Stepper);
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
			uart_rx(D_Stepper);
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 75 08 	call	0x10ea	; 0x10ea <uart_rx>
    12d6:	4c c0       	rjmp	.+152    	; 0x1370 <inner_2109+0x30>
		else {
			lcd_puts("Keine Bewegung!\n");
    12d8:	8d ee       	ldi	r24, 0xED	; 237
    12da:	93 e0       	ldi	r25, 0x03	; 3
    12dc:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
    12e0:	47 c0       	rjmp	.+142    	; 0x1370 <inner_2109+0x30>
		}

		while (!strcmp(str_rx,"1#")){
			uart_put_string("W\n", D_Stepper);
    12e2:	82 e7       	ldi	r24, 0x72	; 114
    12e4:	94 e0       	ldi	r25, 0x04	; 4
    12e6:	61 e0       	ldi	r22, 0x01	; 1
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
    12ee:	f5 01       	movw	r30, r10

000012f0 <outer_2080>:
    12f0:	a0 ed       	ldi	r26, 0xD0	; 208
    12f2:	b7 e0       	ldi	r27, 0x07	; 7

000012f4 <inner_2080>:
    12f4:	11 97       	sbiw	r26, 0x01	; 1
    12f6:	f1 f7       	brne	.-4      	; 0x12f4 <inner_2080>
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	d1 f7       	brne	.-12     	; 0x12f0 <outer_2080>
			ms_spin(100);
			if ((UCSR1A & (1 << RXC1))){
    12fc:	80 91 c8 00 	lds	r24, 0x00C8
    1300:	87 ff       	sbrs	r24, 7
    1302:	10 c0       	rjmp	.+32     	; 0x1324 <inner_2080+0x30>
				uart_rx(D_Stepper);
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 75 08 	call	0x10ea	; 0x10ea <uart_rx>
				lcd_clrscr();
    130c:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
				lcd_puts("Position(Akt/Ges): \n");
    1310:	85 e7       	ldi	r24, 0x75	; 117
    1312:	94 e0       	ldi	r25, 0x04	; 4
    1314:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
				lcd_puts(str_rx);
    1318:	c7 01       	movw	r24, r14
    131a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
				lcd_puts(" / ");
    131e:	8a e8       	ldi	r24, 0x8A	; 138
    1320:	94 e0       	ldi	r25, 0x04	; 4
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <inner_2080+0x34>
			}
			else {
				lcd_puts("Keine Antwort\n");
    1324:	85 e1       	ldi	r24, 0x15	; 21
    1326:	94 e0       	ldi	r25, 0x04	; 4
    1328:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			}
			wdt_reset();
    132c:	a8 95       	wdr

			uart_put_string("A\n", D_Stepper);
    132e:	88 ec       	ldi	r24, 0xC8	; 200
    1330:	93 e0       	ldi	r25, 0x03	; 3
    1332:	61 e0       	ldi	r22, 0x01	; 1
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
    133a:	f6 01       	movw	r30, r12

0000133c <outer_2109>:
    133c:	a0 ed       	ldi	r26, 0xD0	; 208
    133e:	b7 e0       	ldi	r27, 0x07	; 7

00001340 <inner_2109>:
    1340:	11 97       	sbiw	r26, 0x01	; 1
    1342:	f1 f7       	brne	.-4      	; 0x1340 <inner_2109>
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	d1 f7       	brne	.-12     	; 0x133c <outer_2109>
			ms_spin(50);
			if ((UCSR1A & (1 << RXC1))){
    1348:	80 91 c8 00 	lds	r24, 0x00C8
    134c:	87 ff       	sbrs	r24, 7
    134e:	0a c0       	rjmp	.+20     	; 0x1364 <inner_2109+0x24>
				uart_rx(D_Stepper);
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 75 08 	call	0x10ea	; 0x10ea <uart_rx>
				//lcd_clrscr();
				//lcd_puts("running to\n");
				//lcd_puts("Position: ");
				lcd_puts(Position);
    1358:	c8 01       	movw	r24, r16
    135a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
				lcd_puts("\n");
    135e:	88 eb       	ldi	r24, 0xB8	; 184
    1360:	91 e0       	ldi	r25, 0x01	; 1
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <inner_2109+0x28>
			}
			else {
				lcd_puts("Keine Antwort\n");
    1364:	85 e1       	ldi	r24, 0x15	; 21
    1366:	94 e0       	ldi	r25, 0x04	; 4
    1368:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			}
			wdt_reset();
    136c:	a8 95       	wdr
    136e:	09 c0       	rjmp	.+18     	; 0x1382 <inner_2109+0x42>
    1370:	44 e6       	ldi	r20, 0x64	; 100
    1372:	a4 2e       	mov	r10, r20
    1374:	b1 2c       	mov	r11, r1
    1376:	32 e3       	ldi	r19, 0x32	; 50
    1378:	c3 2e       	mov	r12, r19
    137a:	d1 2c       	mov	r13, r1
			if ((UCSR1A & (1 << RXC1))){
				uart_rx(D_Stepper);
				//lcd_clrscr();
				//lcd_puts("running to\n");
				//lcd_puts("Position: ");
				lcd_puts(Position);
    137c:	8e 01       	movw	r16, r28
    137e:	05 5e       	subi	r16, 0xE5	; 229
    1380:	1f 4f       	sbci	r17, 0xFF	; 255
			uart_rx(D_Stepper);
		else {
			lcd_puts("Keine Bewegung!\n");
		}

		while (!strcmp(str_rx,"1#")){
    1382:	c7 01       	movw	r24, r14
    1384:	64 e2       	ldi	r22, 0x24	; 36
    1386:	74 e0       	ldi	r23, 0x04	; 4
    1388:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <strcmp>
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	09 f4       	brne	.+2      	; 0x1392 <inner_2109+0x52>
    1390:	a8 cf       	rjmp	.-176    	; 0x12e2 <inner_2046+0x2c>
			else {
				lcd_puts("Keine Antwort\n");
			}
			wdt_reset();
		}
		lcd_puts("Position: \n");
    1392:	87 e2       	ldi	r24, 0x27	; 39
    1394:	94 e0       	ldi	r25, 0x04	; 4
    1396:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(Position);
    139a:	ce 01       	movw	r24, r28
    139c:	4b 96       	adiw	r24, 0x1b	; 27
    139e:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(" Erreicht\n");
    13a2:	83 e3       	ldi	r24, 0x33	; 51
    13a4:	94 e0       	ldi	r25, 0x04	; 4
    13a6:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("\r\n>\040\r\n>\040\r\n>\040\r\n>\040", D_RapidForm);
    13aa:	8e e8       	ldi	r24, 0x8E	; 142
    13ac:	94 e0       	ldi	r25, 0x04	; 4
    13ae:	0d c0       	rjmp	.+26     	; 0x13ca <inner_2109+0x8a>
		break;
	case 6:
		//lcd_puts("MA1 empfangen     \n");
		break;
	case 7: // Position Setzen
		memset(Position, '\0', 33);			// Array mit Nullen bef�llen
    13b0:	fe 01       	movw	r30, r28
    13b2:	7b 96       	adiw	r30, 0x1b	; 27
    13b4:	81 e2       	ldi	r24, 0x21	; 33
    13b6:	df 01       	movw	r26, r30
    13b8:	1d 92       	st	X+, r1
    13ba:	8a 95       	dec	r24
    13bc:	e9 f7       	brne	.-6      	; 0x13b8 <inner_2109+0x78>
		Position_Zeta(Position);
    13be:	cf 01       	movw	r24, r30
    13c0:	0e 94 c6 04 	call	0x98c	; 0x98c <Position_Zeta>
    13c4:	12 c0       	rjmp	.+36     	; 0x13ea <inner_2109+0xaa>
		//lcd_puts("Speed set");
		break;
	case 10:
		//lcd_puts("Echo off           \n");
		//uart_put_string(str_rx, D_RapidForm);
		uart_put_string("ECHO0\r", D_RapidForm);
    13c6:	8f e9       	ldi	r24, 0x9F	; 159
    13c8:	94 e0       	ldi	r25, 0x04	; 4
    13ca:	60 e0       	ldi	r22, 0x00	; 0
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
    13d2:	0b c0       	rjmp	.+22     	; 0x13ea <inner_2109+0xaa>
		break;
	case 11:
		break;
	default:
		lcd_puts("Z:");
    13d4:	86 ea       	ldi	r24, 0xA6	; 166
    13d6:	94 e0       	ldi	r25, 0x04	; 4
    13d8:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(str_rx);
    13dc:	c7 01       	movw	r24, r14
    13de:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts("       \n");
    13e2:	81 ee       	ldi	r24, 0xE1	; 225
    13e4:	92 e0       	ldi	r25, 0x02	; 2
    13e6:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		//Initialized = switch_Inputs(str_rx);
	}
}
    13ea:	cd 59       	subi	r28, 0x9D	; 157
    13ec:	df 4f       	sbci	r29, 0xFF	; 255
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	ff 90       	pop	r15
    1402:	ef 90       	pop	r14
    1404:	df 90       	pop	r13
    1406:	cf 90       	pop	r12
    1408:	bf 90       	pop	r11
    140a:	af 90       	pop	r10
    140c:	08 95       	ret

0000140e <menu_puts>:
	lcd_puts("Selected: ");
	lcd_puts(name);

	ms_spin(750);
}
void 	menu_puts			(void *arg, char *name) {
    140e:	0f 93       	push	r16
    1410:	1f 93       	push	r17
    1412:	8c 01       	movw	r16, r24
	//my_select(arg, name);
	uart_put_string(arg, D_Stepper);
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
	lcd_clrscr();
    141c:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
	lcd_puts("Send: ");
    1420:	89 ea       	ldi	r24, 0xA9	; 169
    1422:	94 e0       	ldi	r25, 0x04	; 4
    1424:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts(arg);
    1428:	c8 01       	movw	r24, r16
    142a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts("\n");
    142e:	88 eb       	ldi	r24, 0xB8	; 184
    1430:	91 e0       	ldi	r25, 0x01	; 1
    1432:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
    1436:	84 e6       	ldi	r24, 0x64	; 100
    1438:	90 e0       	ldi	r25, 0x00	; 0

0000143a <outer_2234>:
    143a:	a0 ed       	ldi	r26, 0xD0	; 208
    143c:	b7 e0       	ldi	r27, 0x07	; 7

0000143e <inner_2234>:
    143e:	11 97       	sbiw	r26, 0x01	; 1
    1440:	f1 f7       	brne	.-4      	; 0x143e <inner_2234>
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	d1 f7       	brne	.-12     	; 0x143a <outer_2234>
	ms_spin(100);
	//if ((UCSR1A & (1 << RXC1)))
	uart_rx(D_Stepper);
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 75 08 	call	0x10ea	; 0x10ea <uart_rx>
    144e:	88 ee       	ldi	r24, 0xE8	; 232
    1450:	93 e0       	ldi	r25, 0x03	; 3

00001452 <outer_2242>:
    1452:	a0 ed       	ldi	r26, 0xD0	; 208
    1454:	b7 e0       	ldi	r27, 0x07	; 7

00001456 <inner_2242>:
    1456:	11 97       	sbiw	r26, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <inner_2242>
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	d1 f7       	brne	.-12     	; 0x1452 <outer_2242>
	ms_spin(1000);
}
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	08 95       	ret

00001464 <main>:
//
//      Hauptschleife
//
//////////////////////////////
int main(void) {
	init();
    1464:	0e 94 4d 03 	call	0x69a	; 0x69a <init>
	while (1) {
		wdt_reset();
    1468:	a8 95       	wdr
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    146a:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    146c:	90 91 dc 07 	lds	r25, 0x07DC
    1470:	91 70       	andi	r25, 0x01	; 1
  key_press ^= key_mask;                          // clear key(s)
    1472:	80 91 dc 07 	lds	r24, 0x07DC
    1476:	89 27       	eor	r24, r25
    1478:	80 93 dc 07 	sts	0x07DC, r24
  sei();
    147c:	78 94       	sei
		if (get_key_press(1 << KEY0) || get_key_rpt(1 << KEY0))
    147e:	99 23       	and	r25, r25
    1480:	61 f4       	brne	.+24     	; 0x149a <main+0x36>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1482:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    1484:	90 91 77 07 	lds	r25, 0x0777
    1488:	91 70       	andi	r25, 0x01	; 1
  key_rpt ^= key_mask;                            // clear key(s)
    148a:	80 91 77 07 	lds	r24, 0x0777
    148e:	89 27       	eor	r24, r25
    1490:	80 93 77 07 	sts	0x0777, r24
  sei();
    1494:	78 94       	sei
    1496:	99 23       	and	r25, r25
    1498:	11 f0       	breq	.+4      	; 0x149e <main+0x3a>
			led_lauflicht(); // LED Lauflicht
    149a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <led_lauflicht>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    149e:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    14a0:	90 91 dc 07 	lds	r25, 0x07DC
    14a4:	92 70       	andi	r25, 0x02	; 2
  key_press ^= key_mask;                          // clear key(s)
    14a6:	80 91 dc 07 	lds	r24, 0x07DC
    14aa:	89 27       	eor	r24, r25
    14ac:	80 93 dc 07 	sts	0x07DC, r24
  sei();
    14b0:	78 94       	sei
		if (get_key_press(1 << KEY1))
    14b2:	99 23       	and	r25, r25
    14b4:	31 f0       	breq	.+12     	; 0x14c2 <main+0x5e>
			uart_put_string("0\n", D_RapidForm);
    14b6:	80 eb       	ldi	r24, 0xB0	; 176
    14b8:	94 e0       	ldi	r25, 0x04	; 4
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14c2:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    14c4:	90 91 dc 07 	lds	r25, 0x07DC
    14c8:	94 70       	andi	r25, 0x04	; 4
  key_press ^= key_mask;                          // clear key(s)
    14ca:	80 91 dc 07 	lds	r24, 0x07DC
    14ce:	89 27       	eor	r24, r25
    14d0:	80 93 dc 07 	sts	0x07DC, r24
  sei();
    14d4:	78 94       	sei
		if( get_key_press( 1<<KEY2 ) )
    14d6:	99 23       	and	r25, r25
    14d8:	11 f0       	breq	.+4      	; 0x14de <main+0x7a>
			lcd_clrscr();
    14da:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14de:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    14e0:	90 91 dc 07 	lds	r25, 0x07DC
    14e4:	98 70       	andi	r25, 0x08	; 8
  key_press ^= key_mask;                          // clear key(s)
    14e6:	80 91 dc 07 	lds	r24, 0x07DC
    14ea:	89 27       	eor	r24, r25
    14ec:	80 93 dc 07 	sts	0x07DC, r24
  sei();
    14f0:	78 94       	sei


		if (get_key_press(1 << KEY3)) {
    14f2:	99 23       	and	r25, r25
    14f4:	51 f0       	breq	.+20     	; 0x150a <main+0xa6>
			lcd_puts("Betrete Men�!\n");
    14f6:	83 eb       	ldi	r24, 0xB3	; 179
    14f8:	94 e0       	ldi	r25, 0x04	; 4
    14fa:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			menu_enter(&menu_context, &menu_main);
    14fe:	86 e7       	ldi	r24, 0x76	; 118
    1500:	96 e0       	ldi	r25, 0x06	; 6
    1502:	69 e2       	ldi	r22, 0x29	; 41
    1504:	76 e0       	ldi	r23, 0x06	; 6
    1506:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <menu_enter>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    150a:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    150c:	90 91 dc 07 	lds	r25, 0x07DC
    1510:	90 71       	andi	r25, 0x10	; 16
  key_press ^= key_mask;                          // clear key(s)
    1512:	80 91 dc 07 	lds	r24, 0x07DC
    1516:	89 27       	eor	r24, r25
    1518:	80 93 dc 07 	sts	0x07DC, r24
  sei();
    151c:	78 94       	sei
		}

		if (get_key_press(1 << KEY4))
    151e:	99 23       	and	r25, r25
    1520:	21 f0       	breq	.+8      	; 0x152a <main+0xc6>
			menu_select(&menu_context); // 4 - Ausw�hlen
    1522:	86 e7       	ldi	r24, 0x76	; 118
    1524:	96 e0       	ldi	r25, 0x06	; 6
    1526:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <menu_select>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    152a:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    152c:	90 91 dc 07 	lds	r25, 0x07DC
    1530:	90 72       	andi	r25, 0x20	; 32
  key_press ^= key_mask;                          // clear key(s)
    1532:	80 91 dc 07 	lds	r24, 0x07DC
    1536:	89 27       	eor	r24, r25
    1538:	80 93 dc 07 	sts	0x07DC, r24
  sei();
    153c:	78 94       	sei
		if (get_key_press(1 << KEY5) || get_key_rpt(1 << KEY5)) // 5 - Next
    153e:	99 23       	and	r25, r25
    1540:	61 f4       	brne	.+24     	; 0x155a <main+0xf6>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1542:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    1544:	90 91 77 07 	lds	r25, 0x0777
    1548:	90 72       	andi	r25, 0x20	; 32
  key_rpt ^= key_mask;                            // clear key(s)
    154a:	80 91 77 07 	lds	r24, 0x0777
    154e:	89 27       	eor	r24, r25
    1550:	80 93 77 07 	sts	0x0777, r24
  sei();
    1554:	78 94       	sei
    1556:	99 23       	and	r25, r25
    1558:	21 f0       	breq	.+8      	; 0x1562 <main+0xfe>
			menu_next_entry(&menu_context);
    155a:	86 e7       	ldi	r24, 0x76	; 118
    155c:	96 e0       	ldi	r25, 0x06	; 6
    155e:	0e 94 2d 0c 	call	0x185a	; 0x185a <menu_next_entry>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1562:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1564:	90 91 dc 07 	lds	r25, 0x07DC
    1568:	90 74       	andi	r25, 0x40	; 64
  key_press ^= key_mask;                          // clear key(s)
    156a:	80 91 dc 07 	lds	r24, 0x07DC
    156e:	89 27       	eor	r24, r25
    1570:	80 93 dc 07 	sts	0x07DC, r24
  sei();
    1574:	78 94       	sei
		if (get_key_press(1 << KEY6) || get_key_rpt(1 << KEY6)) // 6 - Previous
    1576:	99 23       	and	r25, r25
    1578:	61 f4       	brne	.+24     	; 0x1592 <main+0x12e>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    157a:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    157c:	90 91 77 07 	lds	r25, 0x0777
    1580:	90 74       	andi	r25, 0x40	; 64
  key_rpt ^= key_mask;                            // clear key(s)
    1582:	80 91 77 07 	lds	r24, 0x0777
    1586:	89 27       	eor	r24, r25
    1588:	80 93 77 07 	sts	0x0777, r24
  sei();
    158c:	78 94       	sei
    158e:	99 23       	and	r25, r25
    1590:	21 f0       	breq	.+8      	; 0x159a <main+0x136>
			menu_prev_entry(&menu_context);
    1592:	86 e7       	ldi	r24, 0x76	; 118
    1594:	96 e0       	ldi	r25, 0x06	; 6
    1596:	0e 94 04 0c 	call	0x1808	; 0x1808 <menu_prev_entry>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    159a:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    159c:	90 91 dc 07 	lds	r25, 0x07DC
    15a0:	90 78       	andi	r25, 0x80	; 128
  key_press ^= key_mask;                          // clear key(s)
    15a2:	80 91 dc 07 	lds	r24, 0x07DC
    15a6:	89 27       	eor	r24, r25
    15a8:	80 93 dc 07 	sts	0x07DC, r24
  sei();
    15ac:	78 94       	sei
		if (get_key_press(1 << KEY7))
    15ae:	99 23       	and	r25, r25
    15b0:	21 f0       	breq	.+8      	; 0x15ba <main+0x156>
			menu_exit(&menu_context); // 7 - Men� zur�ck
    15b2:	86 e7       	ldi	r24, 0x76	; 118
    15b4:	96 e0       	ldi	r25, 0x06	; 6
    15b6:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <menu_exit>

		if ((UCSR0A & (1 << RXC0)))
    15ba:	80 91 c0 00 	lds	r24, 0x00C0
    15be:	87 ff       	sbrs	r24, 7
    15c0:	04 c0       	rjmp	.+8      	; 0x15ca <main+0x166>
			uart_rx(D_RapidForm);
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	0e 94 75 08 	call	0x10ea	; 0x10ea <uart_rx>
		if ((UCSR1A & (1 << RXC1)))
    15ca:	80 91 c8 00 	lds	r24, 0x00C8
    15ce:	87 ff       	sbrs	r24, 7
    15d0:	4b cf       	rjmp	.-362    	; 0x1468 <main+0x4>
			uart_rx(D_Stepper);
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 75 08 	call	0x10ea	; 0x10ea <uart_rx>
    15da:	46 cf       	rjmp	.-372    	; 0x1468 <main+0x4>

000015dc <lcd_my_type>:
int 	switch_Motor		(char * str_rx);
void 	switch_Stepper		(char * str_rx);
void 	switch_Isel			(char * str_rx);
void 	switch_csg			(char * str_rx);
// LCD und LED Stuff
void 	lcd_my_type			(char *s) {
    15dc:	ef 92       	push	r14
    15de:	ff 92       	push	r15
    15e0:	0f 93       	push	r16
    15e2:	1f 93       	push	r17
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	ec 01       	movw	r28, r24
	srand(TCNT0);
    15ea:	86 b5       	in	r24, 0x26	; 38
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <srand>
    15f2:	50 ed       	ldi	r21, 0xD0	; 208
    15f4:	e5 2e       	mov	r14, r21
    15f6:	57 e0       	ldi	r21, 0x07	; 7
    15f8:	f5 2e       	mov	r15, r21
    15fa:	17 c0       	rjmp	.+46     	; 0x162a <lcd_my_type+0x4e>
	int min = 10;
	int max = 250;
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		erg = (rand() % (max - min + 1) + min);
    15fc:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <rand>
    1600:	61 ef       	ldi	r22, 0xF1	; 241
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	0e 94 be 0c 	call	0x197c	; 0x197c <__divmodhi4>
    1608:	8c 01       	movw	r16, r24
    160a:	06 5f       	subi	r16, 0xF6	; 246
    160c:	1f 4f       	sbci	r17, 0xFF	; 255
		lcd_putc(*s);
    160e:	88 81       	ld	r24, Y
    1610:	0e 94 31 01 	call	0x262	; 0x262 <lcd_putc>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <lcd_my_type+0x46>
    161a:	f7 01       	movw	r30, r14
    161c:	31 97       	sbiw	r30, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <lcd_my_type+0x40>
		s++;
		for (int i = 0; i < erg; i++)
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	80 17       	cp	r24, r16
    1624:	91 07       	cpc	r25, r17
    1626:	cc f3       	brlt	.-14     	; 0x161a <lcd_my_type+0x3e>
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		erg = (rand() % (max - min + 1) + min);
		lcd_putc(*s);
		s++;
    1628:	21 96       	adiw	r28, 0x01	; 1
void 	lcd_my_type			(char *s) {
	srand(TCNT0);
	int min = 10;
	int max = 250;
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
    162a:	88 81       	ld	r24, Y
    162c:	88 23       	and	r24, r24
    162e:	31 f7       	brne	.-52     	; 0x15fc <lcd_my_type+0x20>
		lcd_putc(*s);
		s++;
		for (int i = 0; i < erg; i++)
			_delay_ms(1);
	}
}
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	ff 90       	pop	r15
    163a:	ef 90       	pop	r14
    163c:	08 95       	ret

0000163e <lcd_spielereien>:
void 	lcd_spielereien		(void) {
    163e:	88 ee       	ldi	r24, 0xE8	; 232
    1640:	93 e0       	ldi	r25, 0x03	; 3
    1642:	28 ec       	ldi	r18, 0xC8	; 200
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	f9 01       	movw	r30, r18
    1648:	31 97       	sbiw	r30, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <lcd_spielereien+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    164c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    164e:	d9 f7       	brne	.-10     	; 0x1646 <lcd_spielereien+0x8>
	_delay_ms(100);
	lcd_my_type("Hello Joe!\n");
    1650:	84 ec       	ldi	r24, 0xC4	; 196
    1652:	94 e0       	ldi	r25, 0x04	; 4
    1654:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <lcd_my_type>
    1658:	80 ed       	ldi	r24, 0xD0	; 208
    165a:	97 e0       	ldi	r25, 0x07	; 7
    165c:	28 ec       	ldi	r18, 0xC8	; 200
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	f9 01       	movw	r30, r18
    1662:	31 97       	sbiw	r30, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <lcd_spielereien+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1666:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1668:	d9 f7       	brne	.-10     	; 0x1660 <lcd_spielereien+0x22>
	_delay_ms(200);
	lcd_my_type("Have a nice Day!\n");
    166a:	80 ed       	ldi	r24, 0xD0	; 208
    166c:	94 e0       	ldi	r25, 0x04	; 4
    166e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <lcd_my_type>
    1672:	88 e8       	ldi	r24, 0x88	; 136
    1674:	93 e1       	ldi	r25, 0x13	; 19
    1676:	28 ec       	ldi	r18, 0xC8	; 200
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	f9 01       	movw	r30, r18
    167c:	31 97       	sbiw	r30, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <lcd_spielereien+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1680:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1682:	d9 f7       	brne	.-10     	; 0x167a <lcd_spielereien+0x3c>
	_delay_ms(500);
	lcd_my_type("Be a Honey Bee!\n");
    1684:	82 ee       	ldi	r24, 0xE2	; 226
    1686:	94 e0       	ldi	r25, 0x04	; 4
    1688:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <lcd_my_type>
    168c:	80 e7       	ldi	r24, 0x70	; 112
    168e:	97 e1       	ldi	r25, 0x17	; 23
    1690:	28 ec       	ldi	r18, 0xC8	; 200
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	f9 01       	movw	r30, r18
    1696:	31 97       	sbiw	r30, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <lcd_spielereien+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169c:	d9 f7       	brne	.-10     	; 0x1694 <lcd_spielereien+0x56>
	_delay_ms(600);
	lcd_clrscr();
    169e:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
}
    16a2:	08 95       	ret

000016a4 <menu_display>:
/*
 * Display the current menu in the context
 */
 
void menu_display(menu_context_t *context)
{
    16a4:	9f 92       	push	r9
    16a6:	af 92       	push	r10
    16a8:	bf 92       	push	r11
    16aa:	cf 92       	push	r12
    16ac:	df 92       	push	r13
    16ae:	ef 92       	push	r14
    16b0:	ff 92       	push	r15
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	7c 01       	movw	r14, r24
	uint8_t i;
	menu_t *menu = context->menu;
    16bc:	fc 01       	movw	r30, r24
    16be:	c4 80       	ldd	r12, Z+4	; 0x04
    16c0:	d5 80       	ldd	r13, Z+5	; 0x05
    16c2:	bb 24       	eor	r11, r11
    16c4:	99 24       	eor	r9, r9
    16c6:	52 c0       	rjmp	.+164    	; 0x176c <menu_display+0xc8>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    16c8:	e9 2d       	mov	r30, r9
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
			if (dindex++ >= menu->num_entries - menu->top_entry)
    16cc:	e2 17       	cp	r30, r18
    16ce:	f3 07       	cpc	r31, r19
    16d0:	0c f0       	brlt	.+2      	; 0x16d4 <menu_display+0x30>
    16d2:	6b c0       	rjmp	.+214    	; 0x17aa <menu_display+0x106>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    16d4:	8f 01       	movw	r16, r30
    16d6:	04 0f       	add	r16, r20
    16d8:	15 1f       	adc	r17, r21
			if (dindex++ >= menu->num_entries - menu->top_entry)
    16da:	93 94       	inc	r9
				goto entries_done;
		} while (disp_entry->flags & MENU_FLAG_HIDDEN);
    16dc:	f8 01       	movw	r30, r16
    16de:	ee 0f       	add	r30, r30
    16e0:	ff 1f       	adc	r31, r31
    16e2:	e0 0f       	add	r30, r16
    16e4:	f1 1f       	adc	r31, r17
    16e6:	63 e0       	ldi	r22, 0x03	; 3
    16e8:	ee 0f       	add	r30, r30
    16ea:	ff 1f       	adc	r31, r31
    16ec:	6a 95       	dec	r22
    16ee:	e1 f7       	brne	.-8      	; 0x16e8 <menu_display+0x44>
    16f0:	ec 0d       	add	r30, r12
    16f2:	fd 1d       	adc	r31, r13
    16f4:	85 81       	ldd	r24, Z+5	; 0x05
    16f6:	81 fd       	sbrc	r24, 1
    16f8:	e7 cf       	rjmp	.-50     	; 0x16c8 <menu_display+0x24>
			return;
#endif

		// Go to correct x,y locations and print the entry

		menu_set_pos(context->x_loc, context->y_loc + i);
    16fa:	f7 01       	movw	r30, r14
    16fc:	61 81       	ldd	r22, Z+1	; 0x01
    16fe:	6b 0d       	add	r22, r11
    1700:	80 81       	ld	r24, Z
    1702:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_gotoxy>
	if (selected)
		menu_set_inverse();
#else
	// No inverse; do workaround

	max_width--;
    1706:	f7 01       	movw	r30, r14
    1708:	a3 80       	ldd	r10, Z+3	; 0x03
    170a:	aa 94       	dec	r10
	if (selected) {
    170c:	f6 01       	movw	r30, r12
    170e:	21 81       	ldd	r18, Z+1	; 0x01
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	2f 5f       	subi	r18, 0xFF	; 255
    1714:	3f 4f       	sbci	r19, 0xFF	; 255
    1716:	80 81       	ld	r24, Z
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	89 0d       	add	r24, r9
    171c:	91 1d       	adc	r25, r1
    171e:	28 17       	cp	r18, r24
    1720:	39 07       	cpc	r19, r25
    1722:	11 f4       	brne	.+4      	; 0x1728 <menu_display+0x84>
		menu_putchar('*');
    1724:	8a e2       	ldi	r24, 0x2A	; 42
    1726:	01 c0       	rjmp	.+2      	; 0x172a <menu_display+0x86>
	} else {
		menu_putchar(' ');
    1728:	80 e2       	ldi	r24, 0x20	; 32
    172a:	0e 94 31 01 	call	0x262	; 0x262 <lcd_putc>
    172e:	e8 01       	movw	r28, r16
    1730:	cc 0f       	add	r28, r28
    1732:	dd 1f       	adc	r29, r29
    1734:	c0 0f       	add	r28, r16
    1736:	d1 1f       	adc	r29, r17
    1738:	21 96       	adiw	r28, 0x01	; 1
    173a:	83 e0       	ldi	r24, 0x03	; 3
    173c:	cc 0f       	add	r28, r28
    173e:	dd 1f       	adc	r29, r29
    1740:	8a 95       	dec	r24
    1742:	e1 f7       	brne	.-8      	; 0x173c <menu_display+0x98>
    1744:	cc 0d       	add	r28, r12
    1746:	dd 1d       	adc	r29, r13
    1748:	10 e0       	ldi	r17, 0x00	; 0
    174a:	06 c0       	rjmp	.+12     	; 0x1758 <menu_display+0xb4>
	
	// Print the characters in the name; fill out to width with
	//  spaces (mainly for inverse)
	
	for (i = 0; i < max_width; i++) {
		if (!entry->name[i])
    174c:	89 91       	ld	r24, Y+
    174e:	88 23       	and	r24, r24
    1750:	31 f0       	breq	.+12     	; 0x175e <menu_display+0xba>
			break;
			
		menu_putchar(entry->name[i]);
    1752:	0e 94 31 01 	call	0x262	; 0x262 <lcd_putc>
#endif		
	
	// Print the characters in the name; fill out to width with
	//  spaces (mainly for inverse)
	
	for (i = 0; i < max_width; i++) {
    1756:	1f 5f       	subi	r17, 0xFF	; 255
    1758:	1a 15       	cp	r17, r10
    175a:	c0 f3       	brcs	.-16     	; 0x174c <menu_display+0xa8>
    175c:	06 c0       	rjmp	.+12     	; 0x176a <menu_display+0xc6>
			
		menu_putchar(entry->name[i]);
	}
	
	for (; i < max_width; i++)
		menu_putchar(' ');
    175e:	80 e2       	ldi	r24, 0x20	; 32
    1760:	0e 94 31 01 	call	0x262	; 0x262 <lcd_putc>
			break;
			
		menu_putchar(entry->name[i]);
	}
	
	for (; i < max_width; i++)
    1764:	1f 5f       	subi	r17, 0xFF	; 255
    1766:	1a 15       	cp	r17, r10
    1768:	d0 f3       	brcs	.-12     	; 0x175e <menu_display+0xba>
	menu_clear();
#endif

	// Display only those entries that will fit on the display

	for (i = 0; i < context->height; i++) {
    176a:	b3 94       	inc	r11
    176c:	f7 01       	movw	r30, r14
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	b8 16       	cp	r11, r24
    1772:	d8 f4       	brcc	.+54     	; 0x17aa <menu_display+0x106>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    1774:	f6 01       	movw	r30, r12
    1776:	80 81       	ld	r24, Z
    1778:	48 2f       	mov	r20, r24
    177a:	50 e0       	ldi	r21, 0x00	; 0
			if (dindex++ >= menu->num_entries - menu->top_entry)
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	24 1b       	sub	r18, r20
    1784:	35 0b       	sbc	r19, r21
    1786:	a0 cf       	rjmp	.-192    	; 0x16c8 <menu_display+0x24>

#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
		menu_set_pos(context->x_loc, context->y_loc + i);
    1788:	f7 01       	movw	r30, r14
    178a:	61 81       	ldd	r22, Z+1	; 0x01
    178c:	6b 0d       	add	r22, r11
    178e:	80 81       	ld	r24, Z
    1790:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_gotoxy>
    1794:	10 e0       	ldi	r17, 0x00	; 0
    1796:	04 c0       	rjmp	.+8      	; 0x17a0 <menu_display+0xfc>
		for (j = 0; j < context->width; j++) {
			menu_putchar(' ');
    1798:	80 e2       	ldi	r24, 0x20	; 32
    179a:	0e 94 31 01 	call	0x262	; 0x262 <lcd_putc>
#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
		menu_set_pos(context->x_loc, context->y_loc + i);
		for (j = 0; j < context->width; j++) {
    179e:	1f 5f       	subi	r17, 0xFF	; 255
    17a0:	f7 01       	movw	r30, r14
    17a2:	83 81       	ldd	r24, Z+3	; 0x03
    17a4:	18 17       	cp	r17, r24
    17a6:	c0 f3       	brcs	.-16     	; 0x1798 <menu_display+0xf4>
entries_done:

#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
    17a8:	b3 94       	inc	r11
    17aa:	f7 01       	movw	r30, r14
    17ac:	82 81       	ldd	r24, Z+2	; 0x02
    17ae:	b8 16       	cp	r11, r24
    17b0:	58 f3       	brcs	.-42     	; 0x1788 <menu_display+0xe4>
		for (j = 0; j < context->width; j++) {
			menu_putchar(' ');
		}
	}	
#endif	
}
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	ff 90       	pop	r15
    17bc:	ef 90       	pop	r14
    17be:	df 90       	pop	r13
    17c0:	cf 90       	pop	r12
    17c2:	bf 90       	pop	r11
    17c4:	af 90       	pop	r10
    17c6:	9f 90       	pop	r9
    17c8:	08 95       	ret

000017ca <menu_enter>:
 *  so when we exit we can go back, and update the menu context to
 *  reflect new menu... then display it.
 */

void menu_enter(menu_context_t *context, menu_t *menu)
{
    17ca:	fc 01       	movw	r30, r24
    17cc:	db 01       	movw	r26, r22
	menu->previous = context->menu;
    17ce:	84 81       	ldd	r24, Z+4	; 0x04
    17d0:	95 81       	ldd	r25, Z+5	; 0x05
    17d2:	14 96       	adiw	r26, 0x04	; 4
    17d4:	9c 93       	st	X, r25
    17d6:	8e 93       	st	-X, r24
    17d8:	13 97       	sbiw	r26, 0x03	; 3
	context->menu = menu;
    17da:	75 83       	std	Z+5, r23	; 0x05
    17dc:	64 83       	std	Z+4, r22	; 0x04
	menu_display(context);
    17de:	cf 01       	movw	r24, r30
    17e0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <menu_display>
}
    17e4:	08 95       	ret

000017e6 <menu_exit>:
 * Exit a menu (go to the previous menu) -- if there is no previous
 *  menu, don't do anything.
 */

void menu_exit(menu_context_t *context)
{
    17e6:	dc 01       	movw	r26, r24
	if (context->menu->previous) {
    17e8:	14 96       	adiw	r26, 0x04	; 4
    17ea:	ed 91       	ld	r30, X+
    17ec:	fc 91       	ld	r31, X
    17ee:	15 97       	sbiw	r26, 0x05	; 5
    17f0:	83 81       	ldd	r24, Z+3	; 0x03
    17f2:	94 81       	ldd	r25, Z+4	; 0x04
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	39 f0       	breq	.+14     	; 0x1806 <menu_exit+0x20>
		context->menu = context->menu->previous;
    17f8:	15 96       	adiw	r26, 0x05	; 5
    17fa:	9c 93       	st	X, r25
    17fc:	8e 93       	st	-X, r24
    17fe:	14 97       	sbiw	r26, 0x04	; 4
		menu_display(context);
    1800:	cd 01       	movw	r24, r26
    1802:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <menu_display>
    1806:	08 95       	ret

00001808 <menu_prev_entry>:
 *  bounds.  Also adjust current top entry in display if needed to fit new
 *  entry on display.
 */ 

void menu_prev_entry(menu_context_t *context)
{
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	ec 01       	movw	r28, r24
	menu_t *menu = context->menu;
    180e:	ac 81       	ldd	r26, Y+4	; 0x04
    1810:	bd 81       	ldd	r27, Y+5	; 0x05
	uint8_t new_entry = menu->current_entry;
    1812:	11 96       	adiw	r26, 0x01	; 1
    1814:	2c 91       	ld	r18, X
    1816:	11 97       	sbiw	r26, 0x01	; 1
	

#ifndef CONFIG_TINYMENU_COMPACT
	while(1) {
		if (new_entry-- == 0) // Watch bounds
    1818:	22 23       	and	r18, r18
    181a:	e1 f0       	breq	.+56     	; 0x1854 <menu_prev_entry+0x4c>
    181c:	21 50       	subi	r18, 0x01	; 1
			return;
			
		if (!(menu->entry[new_entry].flags & MENU_FLAG_HIDDEN))
    181e:	82 2f       	mov	r24, r18
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	fc 01       	movw	r30, r24
    1824:	ee 0f       	add	r30, r30
    1826:	ff 1f       	adc	r31, r31
    1828:	e8 0f       	add	r30, r24
    182a:	f9 1f       	adc	r31, r25
    182c:	83 e0       	ldi	r24, 0x03	; 3
    182e:	ee 0f       	add	r30, r30
    1830:	ff 1f       	adc	r31, r31
    1832:	8a 95       	dec	r24
    1834:	e1 f7       	brne	.-8      	; 0x182e <menu_prev_entry+0x26>
    1836:	ea 0f       	add	r30, r26
    1838:	fb 1f       	adc	r31, r27
    183a:	85 81       	ldd	r24, Z+5	; 0x05
    183c:	81 fd       	sbrc	r24, 1
    183e:	ec cf       	rjmp	.-40     	; 0x1818 <menu_prev_entry+0x10>
#else
	if (new_entry-- == 0)
		return;
#endif
	
	menu->current_entry = new_entry;
    1840:	11 96       	adiw	r26, 0x01	; 1
    1842:	2c 93       	st	X, r18
    1844:	11 97       	sbiw	r26, 0x01	; 1
	
	if (menu->current_entry < menu->top_entry) 
    1846:	8c 91       	ld	r24, X
    1848:	28 17       	cp	r18, r24
    184a:	08 f4       	brcc	.+2      	; 0x184e <menu_prev_entry+0x46>
		menu->top_entry = menu->current_entry;
    184c:	2c 93       	st	X, r18
		
	menu_display(context);
    184e:	ce 01       	movw	r24, r28
    1850:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <menu_display>
}
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	08 95       	ret

0000185a <menu_next_entry>:
 *  Also adjust current top entry in display if needed to fit new entry
 *  on display
 */
 
void menu_next_entry(menu_context_t *context)
{
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	ec 01       	movw	r28, r24
	menu_t *menu = context->menu;
    1860:	ac 81       	ldd	r26, Y+4	; 0x04
    1862:	bd 81       	ldd	r27, Y+5	; 0x05
	uint8_t new_entry = menu->current_entry;
    1864:	11 96       	adiw	r26, 0x01	; 1
    1866:	2c 91       	ld	r18, X
    1868:	11 97       	sbiw	r26, 0x01	; 1
	

#ifndef CONFIG_TINYMENU_COMPACT
	while(1) {
		if (++new_entry >= menu->num_entries) // watch bounds
    186a:	12 96       	adiw	r26, 0x02	; 2
    186c:	9c 91       	ld	r25, X
    186e:	12 97       	sbiw	r26, 0x02	; 2
    1870:	2f 5f       	subi	r18, 0xFF	; 255
    1872:	29 17       	cp	r18, r25
    1874:	10 f5       	brcc	.+68     	; 0x18ba <menu_next_entry+0x60>
			return;
		if (!(menu->entry[new_entry].flags & MENU_FLAG_HIDDEN))
    1876:	42 2f       	mov	r20, r18
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	fa 01       	movw	r30, r20
    187c:	ee 0f       	add	r30, r30
    187e:	ff 1f       	adc	r31, r31
    1880:	e4 0f       	add	r30, r20
    1882:	f5 1f       	adc	r31, r21
    1884:	63 e0       	ldi	r22, 0x03	; 3
    1886:	ee 0f       	add	r30, r30
    1888:	ff 1f       	adc	r31, r31
    188a:	6a 95       	dec	r22
    188c:	e1 f7       	brne	.-8      	; 0x1886 <menu_next_entry+0x2c>
    188e:	ea 0f       	add	r30, r26
    1890:	fb 1f       	adc	r31, r27
    1892:	85 81       	ldd	r24, Z+5	; 0x05
    1894:	81 fd       	sbrc	r24, 1
    1896:	ec cf       	rjmp	.-40     	; 0x1870 <menu_next_entry+0x16>
#else
	if (++new_entry >= menu->num_entries)
		return;
#endif
	
	menu->current_entry = new_entry;
    1898:	11 96       	adiw	r26, 0x01	; 1
    189a:	2c 93       	st	X, r18
    189c:	11 97       	sbiw	r26, 0x01	; 1
	
	if (menu->current_entry >= menu->top_entry + context->height)
    189e:	3a 81       	ldd	r19, Y+2	; 0x02
    18a0:	8c 91       	ld	r24, X
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	83 0f       	add	r24, r19
    18a6:	91 1d       	adc	r25, r1
    18a8:	48 17       	cp	r20, r24
    18aa:	59 07       	cpc	r21, r25
    18ac:	1c f0       	brlt	.+6      	; 0x18b4 <menu_next_entry+0x5a>
		menu->top_entry = menu->current_entry - context->height + 1;
    18ae:	23 1b       	sub	r18, r19
    18b0:	2f 5f       	subi	r18, 0xFF	; 255
    18b2:	2c 93       	st	X, r18
	
	menu_display(context);
    18b4:	ce 01       	movw	r24, r28
    18b6:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <menu_display>
}
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <menu_select>:
 *  enter the submenu)
 *
 */

void menu_select(menu_context_t *context)
{
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	8c 01       	movw	r16, r24
	menu_entry_t *entry;


	entry = &context->menu->entry[context->menu->current_entry];
    18ca:	fc 01       	movw	r30, r24
    18cc:	c4 81       	ldd	r28, Z+4	; 0x04
    18ce:	d5 81       	ldd	r29, Z+5	; 0x05
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	90 e0       	ldi	r25, 0x00	; 0

	if (entry->flags & MENU_FLAG_SUBMENU) {
    18d4:	9c 01       	movw	r18, r24
    18d6:	22 0f       	add	r18, r18
    18d8:	33 1f       	adc	r19, r19
    18da:	28 0f       	add	r18, r24
    18dc:	39 1f       	adc	r19, r25
    18de:	d9 01       	movw	r26, r18
    18e0:	f3 e0       	ldi	r31, 0x03	; 3
    18e2:	aa 0f       	add	r26, r26
    18e4:	bb 1f       	adc	r27, r27
    18e6:	fa 95       	dec	r31
    18e8:	e1 f7       	brne	.-8      	; 0x18e2 <menu_select+0x22>
    18ea:	ac 0f       	add	r26, r28
    18ec:	bd 1f       	adc	r27, r29
    18ee:	15 96       	adiw	r26, 0x05	; 5
    18f0:	8c 91       	ld	r24, X
    18f2:	15 97       	sbiw	r26, 0x05	; 5
    18f4:	80 ff       	sbrs	r24, 0
    18f6:	08 c0       	rjmp	.+16     	; 0x1908 <menu_select+0x48>
		// Submenu -- enter it
	
		menu_enter(context, (menu_t *)entry->value);
    18f8:	5b 96       	adiw	r26, 0x1b	; 27
    18fa:	6d 91       	ld	r22, X+
    18fc:	7c 91       	ld	r23, X
    18fe:	5c 97       	sbiw	r26, 0x1c	; 28
    1900:	c8 01       	movw	r24, r16
    1902:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <menu_enter>
    1906:	13 c0       	rjmp	.+38     	; 0x192e <menu_select+0x6e>
	} else {
		// Regular entry -- execute function
	
		entry->select(entry->value, entry->name);
    1908:	c9 01       	movw	r24, r18
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	e3 e0       	ldi	r30, 0x03	; 3
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	ea 95       	dec	r30
    1914:	e1 f7       	brne	.-8      	; 0x190e <menu_select+0x4e>
    1916:	c8 0f       	add	r28, r24
    1918:	d9 1f       	adc	r29, r25
    191a:	16 96       	adiw	r26, 0x06	; 6
    191c:	ed 91       	ld	r30, X+
    191e:	fc 91       	ld	r31, X
    1920:	17 97       	sbiw	r26, 0x07	; 7
    1922:	5b 96       	adiw	r26, 0x1b	; 27
    1924:	8d 91       	ld	r24, X+
    1926:	9c 91       	ld	r25, X
    1928:	5c 97       	sbiw	r26, 0x1c	; 28
    192a:	be 01       	movw	r22, r28
    192c:	09 95       	icall
	}
	
	// Re-display menu on return
	
	menu_display(context);
    192e:	c8 01       	movw	r24, r16
    1930:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <menu_display>
}
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	08 95       	ret

0000193e <__mulsi3>:
    193e:	62 9f       	mul	r22, r18
    1940:	d0 01       	movw	r26, r0
    1942:	73 9f       	mul	r23, r19
    1944:	f0 01       	movw	r30, r0
    1946:	82 9f       	mul	r24, r18
    1948:	e0 0d       	add	r30, r0
    194a:	f1 1d       	adc	r31, r1
    194c:	64 9f       	mul	r22, r20
    194e:	e0 0d       	add	r30, r0
    1950:	f1 1d       	adc	r31, r1
    1952:	92 9f       	mul	r25, r18
    1954:	f0 0d       	add	r31, r0
    1956:	83 9f       	mul	r24, r19
    1958:	f0 0d       	add	r31, r0
    195a:	74 9f       	mul	r23, r20
    195c:	f0 0d       	add	r31, r0
    195e:	65 9f       	mul	r22, r21
    1960:	f0 0d       	add	r31, r0
    1962:	99 27       	eor	r25, r25
    1964:	72 9f       	mul	r23, r18
    1966:	b0 0d       	add	r27, r0
    1968:	e1 1d       	adc	r30, r1
    196a:	f9 1f       	adc	r31, r25
    196c:	63 9f       	mul	r22, r19
    196e:	b0 0d       	add	r27, r0
    1970:	e1 1d       	adc	r30, r1
    1972:	f9 1f       	adc	r31, r25
    1974:	bd 01       	movw	r22, r26
    1976:	cf 01       	movw	r24, r30
    1978:	11 24       	eor	r1, r1
    197a:	08 95       	ret

0000197c <__divmodhi4>:
    197c:	97 fb       	bst	r25, 7
    197e:	09 2e       	mov	r0, r25
    1980:	07 26       	eor	r0, r23
    1982:	0a d0       	rcall	.+20     	; 0x1998 <__divmodhi4_neg1>
    1984:	77 fd       	sbrc	r23, 7
    1986:	04 d0       	rcall	.+8      	; 0x1990 <__divmodhi4_neg2>
    1988:	27 d0       	rcall	.+78     	; 0x19d8 <__udivmodhi4>
    198a:	06 d0       	rcall	.+12     	; 0x1998 <__divmodhi4_neg1>
    198c:	00 20       	and	r0, r0
    198e:	1a f4       	brpl	.+6      	; 0x1996 <__divmodhi4_exit>

00001990 <__divmodhi4_neg2>:
    1990:	70 95       	com	r23
    1992:	61 95       	neg	r22
    1994:	7f 4f       	sbci	r23, 0xFF	; 255

00001996 <__divmodhi4_exit>:
    1996:	08 95       	ret

00001998 <__divmodhi4_neg1>:
    1998:	f6 f7       	brtc	.-4      	; 0x1996 <__divmodhi4_exit>
    199a:	90 95       	com	r25
    199c:	81 95       	neg	r24
    199e:	9f 4f       	sbci	r25, 0xFF	; 255
    19a0:	08 95       	ret

000019a2 <__divmodsi4>:
    19a2:	97 fb       	bst	r25, 7
    19a4:	09 2e       	mov	r0, r25
    19a6:	05 26       	eor	r0, r21
    19a8:	0e d0       	rcall	.+28     	; 0x19c6 <__divmodsi4_neg1>
    19aa:	57 fd       	sbrc	r21, 7
    19ac:	04 d0       	rcall	.+8      	; 0x19b6 <__divmodsi4_neg2>
    19ae:	28 d0       	rcall	.+80     	; 0x1a00 <__udivmodsi4>
    19b0:	0a d0       	rcall	.+20     	; 0x19c6 <__divmodsi4_neg1>
    19b2:	00 1c       	adc	r0, r0
    19b4:	38 f4       	brcc	.+14     	; 0x19c4 <__divmodsi4_exit>

000019b6 <__divmodsi4_neg2>:
    19b6:	50 95       	com	r21
    19b8:	40 95       	com	r20
    19ba:	30 95       	com	r19
    19bc:	21 95       	neg	r18
    19be:	3f 4f       	sbci	r19, 0xFF	; 255
    19c0:	4f 4f       	sbci	r20, 0xFF	; 255
    19c2:	5f 4f       	sbci	r21, 0xFF	; 255

000019c4 <__divmodsi4_exit>:
    19c4:	08 95       	ret

000019c6 <__divmodsi4_neg1>:
    19c6:	f6 f7       	brtc	.-4      	; 0x19c4 <__divmodsi4_exit>
    19c8:	90 95       	com	r25
    19ca:	80 95       	com	r24
    19cc:	70 95       	com	r23
    19ce:	61 95       	neg	r22
    19d0:	7f 4f       	sbci	r23, 0xFF	; 255
    19d2:	8f 4f       	sbci	r24, 0xFF	; 255
    19d4:	9f 4f       	sbci	r25, 0xFF	; 255
    19d6:	08 95       	ret

000019d8 <__udivmodhi4>:
    19d8:	aa 1b       	sub	r26, r26
    19da:	bb 1b       	sub	r27, r27
    19dc:	51 e1       	ldi	r21, 0x11	; 17
    19de:	07 c0       	rjmp	.+14     	; 0x19ee <__udivmodhi4_ep>

000019e0 <__udivmodhi4_loop>:
    19e0:	aa 1f       	adc	r26, r26
    19e2:	bb 1f       	adc	r27, r27
    19e4:	a6 17       	cp	r26, r22
    19e6:	b7 07       	cpc	r27, r23
    19e8:	10 f0       	brcs	.+4      	; 0x19ee <__udivmodhi4_ep>
    19ea:	a6 1b       	sub	r26, r22
    19ec:	b7 0b       	sbc	r27, r23

000019ee <__udivmodhi4_ep>:
    19ee:	88 1f       	adc	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	5a 95       	dec	r21
    19f4:	a9 f7       	brne	.-22     	; 0x19e0 <__udivmodhi4_loop>
    19f6:	80 95       	com	r24
    19f8:	90 95       	com	r25
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	08 95       	ret

00001a00 <__udivmodsi4>:
    1a00:	a1 e2       	ldi	r26, 0x21	; 33
    1a02:	1a 2e       	mov	r1, r26
    1a04:	aa 1b       	sub	r26, r26
    1a06:	bb 1b       	sub	r27, r27
    1a08:	fd 01       	movw	r30, r26
    1a0a:	0d c0       	rjmp	.+26     	; 0x1a26 <__udivmodsi4_ep>

00001a0c <__udivmodsi4_loop>:
    1a0c:	aa 1f       	adc	r26, r26
    1a0e:	bb 1f       	adc	r27, r27
    1a10:	ee 1f       	adc	r30, r30
    1a12:	ff 1f       	adc	r31, r31
    1a14:	a2 17       	cp	r26, r18
    1a16:	b3 07       	cpc	r27, r19
    1a18:	e4 07       	cpc	r30, r20
    1a1a:	f5 07       	cpc	r31, r21
    1a1c:	20 f0       	brcs	.+8      	; 0x1a26 <__udivmodsi4_ep>
    1a1e:	a2 1b       	sub	r26, r18
    1a20:	b3 0b       	sbc	r27, r19
    1a22:	e4 0b       	sbc	r30, r20
    1a24:	f5 0b       	sbc	r31, r21

00001a26 <__udivmodsi4_ep>:
    1a26:	66 1f       	adc	r22, r22
    1a28:	77 1f       	adc	r23, r23
    1a2a:	88 1f       	adc	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	1a 94       	dec	r1
    1a30:	69 f7       	brne	.-38     	; 0x1a0c <__udivmodsi4_loop>
    1a32:	60 95       	com	r22
    1a34:	70 95       	com	r23
    1a36:	80 95       	com	r24
    1a38:	90 95       	com	r25
    1a3a:	9b 01       	movw	r18, r22
    1a3c:	ac 01       	movw	r20, r24
    1a3e:	bd 01       	movw	r22, r26
    1a40:	cf 01       	movw	r24, r30
    1a42:	08 95       	ret

00001a44 <do_rand>:
    1a44:	a0 e0       	ldi	r26, 0x00	; 0
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e8 e2       	ldi	r30, 0x28	; 40
    1a4a:	fd e0       	ldi	r31, 0x0D	; 13
    1a4c:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <__prologue_saves__+0x10>
    1a50:	ec 01       	movw	r28, r24
    1a52:	a8 80       	ld	r10, Y
    1a54:	b9 80       	ldd	r11, Y+1	; 0x01
    1a56:	ca 80       	ldd	r12, Y+2	; 0x02
    1a58:	db 80       	ldd	r13, Y+3	; 0x03
    1a5a:	a1 14       	cp	r10, r1
    1a5c:	b1 04       	cpc	r11, r1
    1a5e:	c1 04       	cpc	r12, r1
    1a60:	d1 04       	cpc	r13, r1
    1a62:	41 f4       	brne	.+16     	; 0x1a74 <do_rand+0x30>
    1a64:	84 e2       	ldi	r24, 0x24	; 36
    1a66:	a8 2e       	mov	r10, r24
    1a68:	89 ed       	ldi	r24, 0xD9	; 217
    1a6a:	b8 2e       	mov	r11, r24
    1a6c:	8b e5       	ldi	r24, 0x5B	; 91
    1a6e:	c8 2e       	mov	r12, r24
    1a70:	87 e0       	ldi	r24, 0x07	; 7
    1a72:	d8 2e       	mov	r13, r24
    1a74:	c6 01       	movw	r24, r12
    1a76:	b5 01       	movw	r22, r10
    1a78:	2d e1       	ldi	r18, 0x1D	; 29
    1a7a:	33 ef       	ldi	r19, 0xF3	; 243
    1a7c:	41 e0       	ldi	r20, 0x01	; 1
    1a7e:	50 e0       	ldi	r21, 0x00	; 0
    1a80:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__divmodsi4>
    1a84:	27 ea       	ldi	r18, 0xA7	; 167
    1a86:	31 e4       	ldi	r19, 0x41	; 65
    1a88:	40 e0       	ldi	r20, 0x00	; 0
    1a8a:	50 e0       	ldi	r21, 0x00	; 0
    1a8c:	0e 94 9f 0c 	call	0x193e	; 0x193e <__mulsi3>
    1a90:	7b 01       	movw	r14, r22
    1a92:	8c 01       	movw	r16, r24
    1a94:	c6 01       	movw	r24, r12
    1a96:	b5 01       	movw	r22, r10
    1a98:	2d e1       	ldi	r18, 0x1D	; 29
    1a9a:	33 ef       	ldi	r19, 0xF3	; 243
    1a9c:	41 e0       	ldi	r20, 0x01	; 1
    1a9e:	50 e0       	ldi	r21, 0x00	; 0
    1aa0:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__divmodsi4>
    1aa4:	ca 01       	movw	r24, r20
    1aa6:	b9 01       	movw	r22, r18
    1aa8:	2c ee       	ldi	r18, 0xEC	; 236
    1aaa:	34 ef       	ldi	r19, 0xF4	; 244
    1aac:	4f ef       	ldi	r20, 0xFF	; 255
    1aae:	5f ef       	ldi	r21, 0xFF	; 255
    1ab0:	0e 94 9f 0c 	call	0x193e	; 0x193e <__mulsi3>
    1ab4:	6e 0d       	add	r22, r14
    1ab6:	7f 1d       	adc	r23, r15
    1ab8:	80 1f       	adc	r24, r16
    1aba:	91 1f       	adc	r25, r17
    1abc:	97 ff       	sbrs	r25, 7
    1abe:	04 c0       	rjmp	.+8      	; 0x1ac8 <do_rand+0x84>
    1ac0:	61 50       	subi	r22, 0x01	; 1
    1ac2:	70 40       	sbci	r23, 0x00	; 0
    1ac4:	80 40       	sbci	r24, 0x00	; 0
    1ac6:	90 48       	sbci	r25, 0x80	; 128
    1ac8:	68 83       	st	Y, r22
    1aca:	79 83       	std	Y+1, r23	; 0x01
    1acc:	8a 83       	std	Y+2, r24	; 0x02
    1ace:	9b 83       	std	Y+3, r25	; 0x03
    1ad0:	9b 01       	movw	r18, r22
    1ad2:	3f 77       	andi	r19, 0x7F	; 127
    1ad4:	c9 01       	movw	r24, r18
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	ea e0       	ldi	r30, 0x0A	; 10
    1adc:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__epilogue_restores__+0x10>

00001ae0 <rand_r>:
    1ae0:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <do_rand>
    1ae4:	08 95       	ret

00001ae6 <rand>:
    1ae6:	89 e6       	ldi	r24, 0x69	; 105
    1ae8:	97 e0       	ldi	r25, 0x07	; 7
    1aea:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <do_rand>
    1aee:	08 95       	ret

00001af0 <srand>:
    1af0:	a0 e0       	ldi	r26, 0x00	; 0
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	80 93 69 07 	sts	0x0769, r24
    1af8:	90 93 6a 07 	sts	0x076A, r25
    1afc:	a0 93 6b 07 	sts	0x076B, r26
    1b00:	b0 93 6c 07 	sts	0x076C, r27
    1b04:	08 95       	ret

00001b06 <atoi>:
    1b06:	fc 01       	movw	r30, r24
    1b08:	88 27       	eor	r24, r24
    1b0a:	99 27       	eor	r25, r25
    1b0c:	e8 94       	clt
    1b0e:	21 91       	ld	r18, Z+
    1b10:	20 32       	cpi	r18, 0x20	; 32
    1b12:	e9 f3       	breq	.-6      	; 0x1b0e <atoi+0x8>
    1b14:	29 30       	cpi	r18, 0x09	; 9
    1b16:	10 f0       	brcs	.+4      	; 0x1b1c <atoi+0x16>
    1b18:	2e 30       	cpi	r18, 0x0E	; 14
    1b1a:	c8 f3       	brcs	.-14     	; 0x1b0e <atoi+0x8>
    1b1c:	2b 32       	cpi	r18, 0x2B	; 43
    1b1e:	41 f0       	breq	.+16     	; 0x1b30 <atoi+0x2a>
    1b20:	2d 32       	cpi	r18, 0x2D	; 45
    1b22:	39 f4       	brne	.+14     	; 0x1b32 <atoi+0x2c>
    1b24:	68 94       	set
    1b26:	04 c0       	rjmp	.+8      	; 0x1b30 <atoi+0x2a>
    1b28:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__mulhi_const_10>
    1b2c:	82 0f       	add	r24, r18
    1b2e:	91 1d       	adc	r25, r1
    1b30:	21 91       	ld	r18, Z+
    1b32:	20 53       	subi	r18, 0x30	; 48
    1b34:	2a 30       	cpi	r18, 0x0A	; 10
    1b36:	c0 f3       	brcs	.-16     	; 0x1b28 <atoi+0x22>
    1b38:	1e f4       	brtc	.+6      	; 0x1b40 <atoi+0x3a>
    1b3a:	90 95       	com	r25
    1b3c:	81 95       	neg	r24
    1b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b40:	08 95       	ret

00001b42 <atol>:
    1b42:	1f 93       	push	r17
    1b44:	fc 01       	movw	r30, r24
    1b46:	99 27       	eor	r25, r25
    1b48:	88 27       	eor	r24, r24
    1b4a:	bc 01       	movw	r22, r24
    1b4c:	e8 94       	clt
    1b4e:	11 91       	ld	r17, Z+
    1b50:	10 32       	cpi	r17, 0x20	; 32
    1b52:	e9 f3       	breq	.-6      	; 0x1b4e <atol+0xc>
    1b54:	19 30       	cpi	r17, 0x09	; 9
    1b56:	10 f0       	brcs	.+4      	; 0x1b5c <atol+0x1a>
    1b58:	1e 30       	cpi	r17, 0x0E	; 14
    1b5a:	c8 f3       	brcs	.-14     	; 0x1b4e <atol+0xc>
    1b5c:	1b 32       	cpi	r17, 0x2B	; 43
    1b5e:	51 f0       	breq	.+20     	; 0x1b74 <atol+0x32>
    1b60:	1d 32       	cpi	r17, 0x2D	; 45
    1b62:	49 f4       	brne	.+18     	; 0x1b76 <atol+0x34>
    1b64:	68 94       	set
    1b66:	06 c0       	rjmp	.+12     	; 0x1b74 <atol+0x32>
    1b68:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__mulsi_const_10>
    1b6c:	61 0f       	add	r22, r17
    1b6e:	71 1d       	adc	r23, r1
    1b70:	81 1d       	adc	r24, r1
    1b72:	91 1d       	adc	r25, r1
    1b74:	11 91       	ld	r17, Z+
    1b76:	10 53       	subi	r17, 0x30	; 48
    1b78:	1a 30       	cpi	r17, 0x0A	; 10
    1b7a:	b0 f3       	brcs	.-20     	; 0x1b68 <atol+0x26>
    1b7c:	3e f4       	brtc	.+14     	; 0x1b8c <atol+0x4a>
    1b7e:	90 95       	com	r25
    1b80:	80 95       	com	r24
    1b82:	70 95       	com	r23
    1b84:	61 95       	neg	r22
    1b86:	7f 4f       	sbci	r23, 0xFF	; 255
    1b88:	8f 4f       	sbci	r24, 0xFF	; 255
    1b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8c:	1f 91       	pop	r17
    1b8e:	08 95       	ret

00001b90 <strcat>:
    1b90:	fb 01       	movw	r30, r22
    1b92:	dc 01       	movw	r26, r24
    1b94:	0d 90       	ld	r0, X+
    1b96:	00 20       	and	r0, r0
    1b98:	e9 f7       	brne	.-6      	; 0x1b94 <strcat+0x4>
    1b9a:	11 97       	sbiw	r26, 0x01	; 1
    1b9c:	01 90       	ld	r0, Z+
    1b9e:	0d 92       	st	X+, r0
    1ba0:	00 20       	and	r0, r0
    1ba2:	e1 f7       	brne	.-8      	; 0x1b9c <strcat+0xc>
    1ba4:	08 95       	ret

00001ba6 <strcmp>:
    1ba6:	fb 01       	movw	r30, r22
    1ba8:	dc 01       	movw	r26, r24
    1baa:	8d 91       	ld	r24, X+
    1bac:	01 90       	ld	r0, Z+
    1bae:	80 19       	sub	r24, r0
    1bb0:	01 10       	cpse	r0, r1
    1bb2:	d9 f3       	breq	.-10     	; 0x1baa <strcmp+0x4>
    1bb4:	99 0b       	sbc	r25, r25
    1bb6:	08 95       	ret

00001bb8 <strncmp>:
    1bb8:	fb 01       	movw	r30, r22
    1bba:	dc 01       	movw	r26, r24
    1bbc:	41 50       	subi	r20, 0x01	; 1
    1bbe:	50 40       	sbci	r21, 0x00	; 0
    1bc0:	30 f0       	brcs	.+12     	; 0x1bce <strncmp+0x16>
    1bc2:	8d 91       	ld	r24, X+
    1bc4:	01 90       	ld	r0, Z+
    1bc6:	80 19       	sub	r24, r0
    1bc8:	19 f4       	brne	.+6      	; 0x1bd0 <strncmp+0x18>
    1bca:	00 20       	and	r0, r0
    1bcc:	b9 f7       	brne	.-18     	; 0x1bbc <strncmp+0x4>
    1bce:	88 1b       	sub	r24, r24
    1bd0:	99 0b       	sbc	r25, r25
    1bd2:	08 95       	ret

00001bd4 <itoa>:
    1bd4:	fb 01       	movw	r30, r22
    1bd6:	9f 01       	movw	r18, r30
    1bd8:	e8 94       	clt
    1bda:	42 30       	cpi	r20, 0x02	; 2
    1bdc:	c4 f0       	brlt	.+48     	; 0x1c0e <itoa+0x3a>
    1bde:	45 32       	cpi	r20, 0x25	; 37
    1be0:	b4 f4       	brge	.+44     	; 0x1c0e <itoa+0x3a>
    1be2:	4a 30       	cpi	r20, 0x0A	; 10
    1be4:	29 f4       	brne	.+10     	; 0x1bf0 <itoa+0x1c>
    1be6:	97 fb       	bst	r25, 7
    1be8:	1e f4       	brtc	.+6      	; 0x1bf0 <itoa+0x1c>
    1bea:	90 95       	com	r25
    1bec:	81 95       	neg	r24
    1bee:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf0:	64 2f       	mov	r22, r20
    1bf2:	77 27       	eor	r23, r23
    1bf4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__udivmodhi4>
    1bf8:	80 5d       	subi	r24, 0xD0	; 208
    1bfa:	8a 33       	cpi	r24, 0x3A	; 58
    1bfc:	0c f0       	brlt	.+2      	; 0x1c00 <itoa+0x2c>
    1bfe:	89 5d       	subi	r24, 0xD9	; 217
    1c00:	81 93       	st	Z+, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	a1 f7       	brne	.-24     	; 0x1bf0 <itoa+0x1c>
    1c08:	16 f4       	brtc	.+4      	; 0x1c0e <itoa+0x3a>
    1c0a:	5d e2       	ldi	r21, 0x2D	; 45
    1c0c:	51 93       	st	Z+, r21
    1c0e:	10 82       	st	Z, r1
    1c10:	c9 01       	movw	r24, r18
    1c12:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <strrev>

00001c16 <ltoa>:
    1c16:	fa 01       	movw	r30, r20
    1c18:	cf 93       	push	r28
    1c1a:	ff 93       	push	r31
    1c1c:	ef 93       	push	r30
    1c1e:	22 30       	cpi	r18, 0x02	; 2
    1c20:	44 f1       	brlt	.+80     	; 0x1c72 <ltoa+0x5c>
    1c22:	25 32       	cpi	r18, 0x25	; 37
    1c24:	34 f5       	brge	.+76     	; 0x1c72 <ltoa+0x5c>
    1c26:	c2 2f       	mov	r28, r18
    1c28:	e8 94       	clt
    1c2a:	ca 30       	cpi	r28, 0x0A	; 10
    1c2c:	49 f4       	brne	.+18     	; 0x1c40 <ltoa+0x2a>
    1c2e:	97 fb       	bst	r25, 7
    1c30:	3e f4       	brtc	.+14     	; 0x1c40 <ltoa+0x2a>
    1c32:	90 95       	com	r25
    1c34:	80 95       	com	r24
    1c36:	70 95       	com	r23
    1c38:	61 95       	neg	r22
    1c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c40:	2c 2f       	mov	r18, r28
    1c42:	33 27       	eor	r19, r19
    1c44:	44 27       	eor	r20, r20
    1c46:	55 27       	eor	r21, r21
    1c48:	ff 93       	push	r31
    1c4a:	ef 93       	push	r30
    1c4c:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__udivmodsi4>
    1c50:	ef 91       	pop	r30
    1c52:	ff 91       	pop	r31
    1c54:	60 5d       	subi	r22, 0xD0	; 208
    1c56:	6a 33       	cpi	r22, 0x3A	; 58
    1c58:	0c f0       	brlt	.+2      	; 0x1c5c <ltoa+0x46>
    1c5a:	69 5d       	subi	r22, 0xD9	; 217
    1c5c:	61 93       	st	Z+, r22
    1c5e:	b9 01       	movw	r22, r18
    1c60:	ca 01       	movw	r24, r20
    1c62:	60 50       	subi	r22, 0x00	; 0
    1c64:	70 40       	sbci	r23, 0x00	; 0
    1c66:	80 40       	sbci	r24, 0x00	; 0
    1c68:	90 40       	sbci	r25, 0x00	; 0
    1c6a:	51 f7       	brne	.-44     	; 0x1c40 <ltoa+0x2a>
    1c6c:	16 f4       	brtc	.+4      	; 0x1c72 <ltoa+0x5c>
    1c6e:	cd e2       	ldi	r28, 0x2D	; 45
    1c70:	c1 93       	st	Z+, r28
    1c72:	10 82       	st	Z, r1
    1c74:	8f 91       	pop	r24
    1c76:	9f 91       	pop	r25
    1c78:	cf 91       	pop	r28
    1c7a:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <strrev>

00001c7e <__mulsi_const_10>:
    1c7e:	59 2f       	mov	r21, r25
    1c80:	48 2f       	mov	r20, r24
    1c82:	37 2f       	mov	r19, r23
    1c84:	26 2f       	mov	r18, r22
    1c86:	66 0f       	add	r22, r22
    1c88:	77 1f       	adc	r23, r23
    1c8a:	88 1f       	adc	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	66 0f       	add	r22, r22
    1c90:	77 1f       	adc	r23, r23
    1c92:	88 1f       	adc	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	62 0f       	add	r22, r18
    1c98:	73 1f       	adc	r23, r19
    1c9a:	84 1f       	adc	r24, r20
    1c9c:	95 1f       	adc	r25, r21
    1c9e:	66 0f       	add	r22, r22
    1ca0:	77 1f       	adc	r23, r23
    1ca2:	88 1f       	adc	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	08 95       	ret

00001ca8 <__mulhi_const_10>:
    1ca8:	7a e0       	ldi	r23, 0x0A	; 10
    1caa:	97 9f       	mul	r25, r23
    1cac:	90 2d       	mov	r25, r0
    1cae:	87 9f       	mul	r24, r23
    1cb0:	80 2d       	mov	r24, r0
    1cb2:	91 0d       	add	r25, r1
    1cb4:	11 24       	eor	r1, r1
    1cb6:	08 95       	ret

00001cb8 <strrev>:
    1cb8:	dc 01       	movw	r26, r24
    1cba:	fc 01       	movw	r30, r24
    1cbc:	67 2f       	mov	r22, r23
    1cbe:	71 91       	ld	r23, Z+
    1cc0:	77 23       	and	r23, r23
    1cc2:	e1 f7       	brne	.-8      	; 0x1cbc <strrev+0x4>
    1cc4:	32 97       	sbiw	r30, 0x02	; 2
    1cc6:	04 c0       	rjmp	.+8      	; 0x1cd0 <strrev+0x18>
    1cc8:	7c 91       	ld	r23, X
    1cca:	6d 93       	st	X+, r22
    1ccc:	70 83       	st	Z, r23
    1cce:	62 91       	ld	r22, -Z
    1cd0:	ae 17       	cp	r26, r30
    1cd2:	bf 07       	cpc	r27, r31
    1cd4:	c8 f3       	brcs	.-14     	; 0x1cc8 <strrev+0x10>
    1cd6:	08 95       	ret

00001cd8 <__prologue_saves__>:
    1cd8:	2f 92       	push	r2
    1cda:	3f 92       	push	r3
    1cdc:	4f 92       	push	r4
    1cde:	5f 92       	push	r5
    1ce0:	6f 92       	push	r6
    1ce2:	7f 92       	push	r7
    1ce4:	8f 92       	push	r8
    1ce6:	9f 92       	push	r9
    1ce8:	af 92       	push	r10
    1cea:	bf 92       	push	r11
    1cec:	cf 92       	push	r12
    1cee:	df 92       	push	r13
    1cf0:	ef 92       	push	r14
    1cf2:	ff 92       	push	r15
    1cf4:	0f 93       	push	r16
    1cf6:	1f 93       	push	r17
    1cf8:	cf 93       	push	r28
    1cfa:	df 93       	push	r29
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	ca 1b       	sub	r28, r26
    1d02:	db 0b       	sbc	r29, r27
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	09 94       	ijmp

00001d10 <__epilogue_restores__>:
    1d10:	2a 88       	ldd	r2, Y+18	; 0x12
    1d12:	39 88       	ldd	r3, Y+17	; 0x11
    1d14:	48 88       	ldd	r4, Y+16	; 0x10
    1d16:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d18:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d20:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d22:	b9 84       	ldd	r11, Y+9	; 0x09
    1d24:	c8 84       	ldd	r12, Y+8	; 0x08
    1d26:	df 80       	ldd	r13, Y+7	; 0x07
    1d28:	ee 80       	ldd	r14, Y+6	; 0x06
    1d2a:	fd 80       	ldd	r15, Y+5	; 0x05
    1d2c:	0c 81       	ldd	r16, Y+4	; 0x04
    1d2e:	1b 81       	ldd	r17, Y+3	; 0x03
    1d30:	aa 81       	ldd	r26, Y+2	; 0x02
    1d32:	b9 81       	ldd	r27, Y+1	; 0x01
    1d34:	ce 0f       	add	r28, r30
    1d36:	d1 1d       	adc	r29, r1
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	ed 01       	movw	r28, r26
    1d44:	08 95       	ret

00001d46 <_exit>:
    1d46:	f8 94       	cli

00001d48 <__stop_program>:
    1d48:	ff cf       	rjmp	.-2      	; 0x1d48 <__stop_program>
