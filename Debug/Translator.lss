
Translator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000700  00800100  00001c86  00001d1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800800  00800800  0000241a  2**0
                  ALLOC
  3 .stab         00003cc0  00000000  00000000  0000241c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015a3  00000000  00000000  000060dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__vector_6>
      1c:	0c 94 03 04 	jmp	0x806	; 0x806 <__vector_7>
      20:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__vector_8>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_18>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	18 e0       	ldi	r17, 0x08	; 8
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e6 e8       	ldi	r30, 0x86	; 134
      90:	fc e1       	ldi	r31, 0x1C	; 28
      92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
      98:	a0 30       	cpi	r26, 0x00	; 0
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
      9e:	18 e0       	ldi	r17, 0x08	; 8
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b8 e0       	ldi	r27, 0x08	; 8
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ae 36       	cpi	r26, 0x6E	; 110
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <main>
      b2:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
      ba:	66 23       	and	r22, r22
      bc:	11 f0       	breq	.+4      	; 0xc2 <lcd_write+0x8>
       lcd_rs_high();
      be:	46 9a       	sbi	0x08, 6	; 8
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
      c2:	46 98       	cbi	0x08, 6	; 8
    }
    lcd_rw_low();
      c4:	45 98       	cbi	0x08, 5	; 8
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
      c6:	3b 9a       	sbi	0x07, 3	; 7
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
      c8:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
      ca:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
      cc:	38 9a       	sbi	0x07, 0	; 7
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
      ce:	40 98       	cbi	0x08, 0	; 8
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
      d0:	41 98       	cbi	0x08, 1	; 8
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
      d2:	42 98       	cbi	0x08, 2	; 8
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
      d4:	43 98       	cbi	0x08, 3	; 8
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
      d6:	87 fd       	sbrc	r24, 7
      d8:	40 9a       	sbi	0x08, 0	; 8
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
      da:	86 fd       	sbrc	r24, 6
      dc:	41 9a       	sbi	0x08, 1	; 8
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
      de:	85 fd       	sbrc	r24, 5
      e0:	42 9a       	sbi	0x08, 2	; 8
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
      e2:	84 fd       	sbrc	r24, 4
      e4:	43 9a       	sbi	0x08, 3	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
      e6:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
      e8:	00 c0       	rjmp	.+0      	; 0xea <lcd_write+0x30>
    lcd_e_low();
      ea:	44 98       	cbi	0x08, 4	; 8
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
      ec:	40 98       	cbi	0x08, 0	; 8
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
      ee:	41 98       	cbi	0x08, 1	; 8
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
      f0:	42 98       	cbi	0x08, 2	; 8
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
      f2:	43 98       	cbi	0x08, 3	; 8
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
      f4:	83 fd       	sbrc	r24, 3
      f6:	40 9a       	sbi	0x08, 0	; 8
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
      f8:	82 fd       	sbrc	r24, 2
      fa:	41 9a       	sbi	0x08, 1	; 8
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
      fc:	81 fd       	sbrc	r24, 1
      fe:	42 9a       	sbi	0x08, 2	; 8
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     100:	80 fd       	sbrc	r24, 0
     102:	43 9a       	sbi	0x08, 3	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     104:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_write+0x4e>
    lcd_e_low();
     108:	44 98       	cbi	0x08, 4	; 8
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     10a:	43 9a       	sbi	0x08, 3	; 8
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     10c:	42 9a       	sbi	0x08, 2	; 8
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     10e:	41 9a       	sbi	0x08, 1	; 8
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     110:	40 9a       	sbi	0x08, 0	; 8
    }
}
     112:	08 95       	ret

00000114 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
     114:	88 23       	and	r24, r24
     116:	11 f0       	breq	.+4      	; 0x11c <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
     118:	46 9a       	sbi	0x08, 6	; 8
     11a:	01 c0       	rjmp	.+2      	; 0x11e <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     11c:	46 98       	cbi	0x08, 6	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
     11e:	45 9a       	sbi	0x08, 5	; 8
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     120:	3b 98       	cbi	0x07, 3	; 7
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     122:	3a 98       	cbi	0x07, 2	; 7
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     124:	39 98       	cbi	0x07, 1	; 7
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     126:	38 98       	cbi	0x07, 0	; 7
                
        /* read high nibble first */
        lcd_e_high();
     128:	44 9a       	sbi	0x08, 4	; 8
        lcd_e_delay();        
     12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     12c:	33 9b       	sbis	0x06, 3	; 6
     12e:	02 c0       	rjmp	.+4      	; 0x134 <lcd_read+0x20>
     130:	80 e1       	ldi	r24, 0x10	; 16
     132:	01 c0       	rjmp	.+2      	; 0x136 <lcd_read+0x22>
     134:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     136:	32 99       	sbic	0x06, 2	; 6
     138:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     13a:	31 99       	sbic	0x06, 1	; 6
     13c:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     13e:	30 99       	sbic	0x06, 0	; 6
     140:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     142:	44 98       	cbi	0x08, 4	; 8

        lcd_e_delay();                       /* Enable 500ns low       */
     144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
     146:	44 9a       	sbi	0x08, 4	; 8
        lcd_e_delay();
     148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     14a:	33 99       	sbic	0x06, 3	; 6
     14c:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     14e:	32 99       	sbic	0x06, 2	; 6
     150:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     152:	31 99       	sbic	0x06, 1	; 6
     154:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     156:	30 99       	sbic	0x06, 0	; 6
     158:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     15a:	44 98       	cbi	0x08, 4	; 8
    }
    return data;
}
     15c:	08 95       	ret

0000015e <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_read>
     164:	87 fd       	sbrc	r24, 7
     166:	fb cf       	rjmp	.-10     	; 0x15e <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     168:	82 e0       	ldi	r24, 0x02	; 2
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	01 97       	sbiw	r24, 0x01	; 1
     16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_read>
    
}/* lcd_waitbusy */
     176:	08 95       	ret

00000178 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     178:	1f 93       	push	r17
     17a:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     17c:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_waitbusy>
    lcd_write(cmd,0);
     180:	81 2f       	mov	r24, r17
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
}
     188:	1f 91       	pop	r17
     18a:	08 95       	ret

0000018c <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     18c:	1f 93       	push	r17
     18e:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     190:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_waitbusy>
    lcd_write(data,1);
     194:	81 2f       	mov	r24, r17
     196:	61 e0       	ldi	r22, 0x01	; 1
     198:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
}
     19c:	1f 91       	pop	r17
     19e:	08 95       	ret

000001a0 <lcd_gotoxy>:
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
     1a0:	66 23       	and	r22, r22
     1a2:	11 f4       	brne	.+4      	; 0x1a8 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     1a4:	80 58       	subi	r24, 0x80	; 128
     1a6:	09 c0       	rjmp	.+18     	; 0x1ba <lcd_gotoxy+0x1a>
    else if ( y==1)
     1a8:	61 30       	cpi	r22, 0x01	; 1
     1aa:	11 f4       	brne	.+4      	; 0x1b0 <lcd_gotoxy+0x10>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     1ac:	80 54       	subi	r24, 0x40	; 64
     1ae:	05 c0       	rjmp	.+10     	; 0x1ba <lcd_gotoxy+0x1a>
    else if ( y==2)
     1b0:	62 30       	cpi	r22, 0x02	; 2
     1b2:	11 f4       	brne	.+4      	; 0x1b8 <lcd_gotoxy+0x18>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
     1b4:	8c 56       	subi	r24, 0x6C	; 108
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <lcd_gotoxy+0x1a>
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
     1b8:	8c 52       	subi	r24, 0x2C	; 44
     1ba:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
     1be:	08 95       	ret

000001c0 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     1c0:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_waitbusy>
}
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	08 95       	ret

000001c8 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
}
     1ce:	08 95       	ret

000001d0 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
}
     1d6:	08 95       	ret

000001d8 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     1d8:	1f 93       	push	r17
     1da:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     1dc:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_waitbusy>
     1e0:	98 2f       	mov	r25, r24
    if (c=='\n')
     1e2:	1a 30       	cpi	r17, 0x0A	; 10
     1e4:	99 f4       	brne	.+38     	; 0x20c <lcd_putc+0x34>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
     1e6:	84 31       	cpi	r24, 0x14	; 20
     1e8:	10 f4       	brcc	.+4      	; 0x1ee <lcd_putc+0x16>
     1ea:	80 e4       	ldi	r24, 0x40	; 64
     1ec:	0b c0       	rjmp	.+22     	; 0x204 <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
     1ee:	80 54       	subi	r24, 0x40	; 64
     1f0:	84 31       	cpi	r24, 0x14	; 20
     1f2:	10 f4       	brcc	.+4      	; 0x1f8 <lcd_putc+0x20>
     1f4:	84 e1       	ldi	r24, 0x14	; 20
     1f6:	06 c0       	rjmp	.+12     	; 0x204 <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
     1f8:	94 51       	subi	r25, 0x14	; 20
     1fa:	9c 32       	cpi	r25, 0x2C	; 44
     1fc:	10 f0       	brcs	.+4      	; 0x202 <lcd_putc+0x2a>
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	01 c0       	rjmp	.+2      	; 0x204 <lcd_putc+0x2c>
     202:	84 e5       	ldi	r24, 0x54	; 84
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     204:	80 58       	subi	r24, 0x80	; 128
     206:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
     20a:	18 c0       	rjmp	.+48     	; 0x23c <lcd_putc+0x64>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==4
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
     20c:	83 31       	cpi	r24, 0x13	; 19
     20e:	11 f4       	brne	.+4      	; 0x214 <lcd_putc+0x3c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
     210:	80 ec       	ldi	r24, 0xC0	; 192
     212:	0b c0       	rjmp	.+22     	; 0x22a <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
     214:	83 35       	cpi	r24, 0x53	; 83
     216:	11 f4       	brne	.+4      	; 0x21c <lcd_putc+0x44>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
     218:	84 e9       	ldi	r24, 0x94	; 148
     21a:	07 c0       	rjmp	.+14     	; 0x22a <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
     21c:	87 32       	cpi	r24, 0x27	; 39
     21e:	11 f4       	brne	.+4      	; 0x224 <lcd_putc+0x4c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
     220:	84 ed       	ldi	r24, 0xD4	; 212
     222:	03 c0       	rjmp	.+6      	; 0x22a <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
     224:	87 36       	cpi	r24, 0x67	; 103
     226:	21 f4       	brne	.+8      	; 0x230 <lcd_putc+0x58>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
     228:	80 e8       	ldi	r24, 0x80	; 128
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
        }
#endif
        lcd_waitbusy();
     230:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_waitbusy>
#endif
        lcd_write(c, 1);
     234:	81 2f       	mov	r24, r17
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
    }

}/* lcd_putc */
     23c:	1f 91       	pop	r17
     23e:	08 95       	ret

00000240 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	ec 01       	movw	r28, r24
     246:	02 c0       	rjmp	.+4      	; 0x24c <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
     248:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     24c:	89 91       	ld	r24, Y+
     24e:	88 23       	and	r24, r24
     250:	d9 f7       	brne	.-10     	; 0x248 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	08 95       	ret

00000258 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	ec 01       	movw	r28, r24
     25e:	02 c0       	rjmp	.+4      	; 0x264 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
     260:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
     264:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     266:	21 96       	adiw	r28, 0x01	; 1
     268:	84 91       	lpm	r24, Z+
     26a:	88 23       	and	r24, r24
     26c:	c9 f7       	brne	.-14     	; 0x260 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     274:	1f 93       	push	r17
     276:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     278:	3e 9a       	sbi	0x07, 6	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     27a:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     27c:	3c 9a       	sbi	0x07, 4	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     27e:	3b 9a       	sbi	0x07, 3	; 7
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     280:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     282:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     284:	38 9a       	sbi	0x07, 0	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     286:	80 e8       	ldi	r24, 0x80	; 128
     288:	9e e3       	ldi	r25, 0x3E	; 62
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     28e:	42 9a       	sbi	0x08, 2	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     290:	43 9a       	sbi	0x08, 3	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     292:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     294:	00 c0       	rjmp	.+0      	; 0x296 <lcd_init+0x22>
    lcd_e_low();
     296:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     298:	80 e8       	ldi	r24, 0x80	; 128
     29a:	93 e1       	ldi	r25, 0x13	; 19
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     2a0:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <lcd_init+0x30>
    lcd_e_low();
     2a4:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2a6:	80 e4       	ldi	r24, 0x40	; 64
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	fc 01       	movw	r30, r24
     2ac:	31 97       	sbiw	r30, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     2b0:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <lcd_init+0x40>
    lcd_e_low();
     2b4:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2b6:	fc 01       	movw	r30, r24
     2b8:	31 97       	sbiw	r30, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     2bc:	43 98       	cbi	0x08, 3	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     2be:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd_init+0x4e>
    lcd_e_low();
     2c2:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     2c8:	88 e2       	ldi	r24, 0x28	; 40
     2ca:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     2ce:	88 e0       	ldi	r24, 0x08	; 8
     2d0:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     2d4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     2d8:	86 e0       	ldi	r24, 0x06	; 6
     2da:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     2de:	81 2f       	mov	r24, r17
     2e0:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>

}/* lcd_init */
     2e4:	1f 91       	pop	r17
     2e6:	08 95       	ret

000002e8 <__vector_18>:
 
volatile uint8_t key_rpt;                                  // key long press and repeat
 
 
ISR( TIMER0_OVF_vect )                            // every 10ms
{
     2e8:	1f 92       	push	r1
     2ea:	0f 92       	push	r0
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	0f 92       	push	r0
     2f0:	11 24       	eor	r1, r1
     2f2:	2f 93       	push	r18
     2f4:	8f 93       	push	r24
     2f6:	9f 93       	push	r25
  static uint8_t ct0, ct1, rpt;
  uint8_t i;
 
  TCNT0 = (uint8_t)(int16_t)-(F_CPU / 1024 * 10e-3 + 0.5);  // preload for 10ms
     2f8:	82 eb       	ldi	r24, 0xB2	; 178
     2fa:	86 bd       	out	0x26, r24	; 38
 
  i = key_state ^ ~KEY_PIN;                       // key changed ?
     2fc:	80 91 6d 08 	lds	r24, 0x086D
     300:	20 b1       	in	r18, 0x00	; 0
     302:	20 95       	com	r18
     304:	28 27       	eor	r18, r24
  ct0 = ~( ct0 & i );                             // reset or count ct0
     306:	80 91 06 08 	lds	r24, 0x0806
     30a:	82 23       	and	r24, r18
     30c:	80 95       	com	r24
     30e:	80 93 06 08 	sts	0x0806, r24
  ct1 = ct0 ^ (ct1 & i);                          // reset or count ct1
     312:	90 91 05 08 	lds	r25, 0x0805
     316:	92 23       	and	r25, r18
     318:	98 27       	eor	r25, r24
     31a:	90 93 05 08 	sts	0x0805, r25
  i &= ct0 & ct1;                                 // count until roll over ?
     31e:	82 23       	and	r24, r18
     320:	89 23       	and	r24, r25
  key_state ^= i;                                 // then toggle debounced state
     322:	90 91 6d 08 	lds	r25, 0x086D
     326:	98 27       	eor	r25, r24
     328:	90 93 6d 08 	sts	0x086D, r25
  key_press |= key_state & i;                     // 0->1: key press detect
     32c:	20 91 6c 08 	lds	r18, 0x086C
     330:	90 91 6d 08 	lds	r25, 0x086D
     334:	89 23       	and	r24, r25
     336:	82 2b       	or	r24, r18
     338:	80 93 6c 08 	sts	0x086C, r24
 
  if( (key_state & REPEAT_MASK) == 0 )            // check repeat function
     33c:	80 91 6d 08 	lds	r24, 0x086D
     340:	87 78       	andi	r24, 0x87	; 135
     342:	19 f4       	brne	.+6      	; 0x34a <__vector_18+0x62>
     rpt = REPEAT_START;                          // start delay
     344:	82 e3       	ldi	r24, 0x32	; 50
     346:	80 93 04 08 	sts	0x0804, r24
  if( --rpt == 0 ){
     34a:	80 91 04 08 	lds	r24, 0x0804
     34e:	81 50       	subi	r24, 0x01	; 1
     350:	80 93 04 08 	sts	0x0804, r24
     354:	88 23       	and	r24, r24
     356:	59 f4       	brne	.+22     	; 0x36e <__vector_18+0x86>
    rpt = REPEAT_NEXT;                            // repeat delay
     358:	84 e1       	ldi	r24, 0x14	; 20
     35a:	80 93 04 08 	sts	0x0804, r24
    key_rpt |= key_state & REPEAT_MASK;
     35e:	90 91 07 08 	lds	r25, 0x0807
     362:	80 91 6d 08 	lds	r24, 0x086D
     366:	87 78       	andi	r24, 0x87	; 135
     368:	89 2b       	or	r24, r25
     36a:	80 93 07 08 	sts	0x0807, r24
  }
}
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	2f 91       	pop	r18
     374:	0f 90       	pop	r0
     376:	0f be       	out	0x3f, r0	; 63
     378:	0f 90       	pop	r0
     37a:	1f 90       	pop	r1
     37c:	18 95       	reti

0000037e <get_key_press>:
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     37e:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     380:	90 91 6c 08 	lds	r25, 0x086C
     384:	89 23       	and	r24, r25
  key_press ^= key_mask;                          // clear key(s)
     386:	90 91 6c 08 	lds	r25, 0x086C
     38a:	98 27       	eor	r25, r24
     38c:	90 93 6c 08 	sts	0x086C, r25
  sei();
     390:	78 94       	sei
  return key_mask;
}
     392:	08 95       	ret

00000394 <get_key_rpt>:
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     394:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
     396:	90 91 07 08 	lds	r25, 0x0807
     39a:	89 23       	and	r24, r25
  key_rpt ^= key_mask;                            // clear key(s)
     39c:	90 91 07 08 	lds	r25, 0x0807
     3a0:	98 27       	eor	r25, r24
     3a2:	90 93 07 08 	sts	0x0807, r25
  sei();
     3a6:	78 94       	sei
  return key_mask;
}
     3a8:	08 95       	ret

000003aa <get_key_short>:
 
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_short( uint8_t key_mask )
{
  cli();                                          // read key state and key press atomic !
     3aa:	f8 94       	cli
  return get_key_press( ~key_state & key_mask );
     3ac:	90 91 6d 08 	lds	r25, 0x086D
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     3b0:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     3b2:	20 91 6c 08 	lds	r18, 0x086C
     3b6:	90 95       	com	r25
     3b8:	89 23       	and	r24, r25
     3ba:	82 23       	and	r24, r18
  key_press ^= key_mask;                          // clear key(s)
     3bc:	90 91 6c 08 	lds	r25, 0x086C
     3c0:	98 27       	eor	r25, r24
     3c2:	90 93 6c 08 	sts	0x086C, r25
  sei();
     3c6:	78 94       	sei
//
uint8_t get_key_short( uint8_t key_mask )
{
  cli();                                          // read key state and key press atomic !
  return get_key_press( ~key_state & key_mask );
}
     3c8:	08 95       	ret

000003ca <get_key_long>:
 
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_long( uint8_t key_mask )
{
     3ca:	98 2f       	mov	r25, r24
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     3cc:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
     3ce:	80 91 07 08 	lds	r24, 0x0807
     3d2:	98 23       	and	r25, r24
  key_rpt ^= key_mask;                            // clear key(s)
     3d4:	80 91 07 08 	lds	r24, 0x0807
     3d8:	89 27       	eor	r24, r25
     3da:	80 93 07 08 	sts	0x0807, r24
  sei();
     3de:	78 94       	sei
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     3e0:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     3e2:	80 91 6c 08 	lds	r24, 0x086C
     3e6:	89 23       	and	r24, r25
  key_press ^= key_mask;                          // clear key(s)
     3e8:	90 91 6c 08 	lds	r25, 0x086C
     3ec:	98 27       	eor	r25, r24
     3ee:	90 93 6c 08 	sts	0x086C, r25
  sei();
     3f2:	78 94       	sei
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_long( uint8_t key_mask )
{
  return get_key_press( get_key_rpt( key_mask ));
}
     3f4:	08 95       	ret

000003f6 <uart_init>:
	LED_PORT ^= (1 << LED3);
}
// UART Stuff
void 	uart_init			() {
	// UART 0 - IN (Rapidform Software/Terminal)
	UBRR0H = UBRRH_VALUE;
     3f6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
     3fa:	23 e3       	ldi	r18, 0x33	; 51
     3fc:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0C = (3 << UCSZ00);
     400:	96 e0       	ldi	r25, 0x06	; 6
     402:	90 93 c2 00 	sts	0x00C2, r25
	UCSR0B |= (1 << TXEN0); //Transmitter Enabled
     406:	e1 ec       	ldi	r30, 0xC1	; 193
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	88 60       	ori	r24, 0x08	; 8
     40e:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXEN0); // UART RX einschalten
     410:	80 81       	ld	r24, Z
     412:	80 61       	ori	r24, 0x10	; 16
     414:	80 83       	st	Z, r24

	// UART 1 - OUT (Stepper Karte/Drehtisch)
	UBRR1H = UBRRH_VALUE;
     416:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = UBRRL_VALUE;
     41a:	20 93 cc 00 	sts	0x00CC, r18
	UCSR1C = (3 << UCSZ00);
     41e:	90 93 ca 00 	sts	0x00CA, r25
	UCSR1B |= (1 << TXEN1); //Transmitter Enabled
     422:	e9 ec       	ldi	r30, 0xC9	; 201
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	88 60       	ori	r24, 0x08	; 8
     42a:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXEN1); // UART RX einschalten
     42c:	80 81       	ld	r24, Z
     42e:	80 61       	ori	r24, 0x10	; 16
     430:	80 83       	st	Z, r24

}
     432:	08 95       	ret

00000434 <uart_put_charater>:
void 	uart_put_charater	(unsigned char c, int dir) {
     434:	98 2f       	mov	r25, r24
	// To Rapidform
	if (dir == D_RapidForm) {
     436:	67 2b       	or	r22, r23
     438:	39 f4       	brne	.+14     	; 0x448 <uart_put_charater+0x14>
		while (!(UCSR0A & (1 << UDRE0))) //warten bis Senden moeglich
     43a:	80 91 c0 00 	lds	r24, 0x00C0
     43e:	85 ff       	sbrs	r24, 5
     440:	fc cf       	rjmp	.-8      	; 0x43a <uart_put_charater+0x6>
		{
		}
		UDR0 = c; // sende Zeichen
     442:	90 93 c6 00 	sts	0x00C6, r25
     446:	08 95       	ret
	}
	// To Stepper
	else {
		while (!(UCSR1A & (1 << UDRE1))) //warten bis Senden moeglich
     448:	80 91 c8 00 	lds	r24, 0x00C8
     44c:	85 ff       	sbrs	r24, 5
     44e:	fc cf       	rjmp	.-8      	; 0x448 <uart_put_charater+0x14>
		{
		}
		UDR1 = c; // sende Zeichen
     450:	90 93 ce 00 	sts	0x00CE, r25
     454:	08 95       	ret

00000456 <uart_put_string>:
	}
	//return 0;
}
void 	uart_put_string		(char *s, int dir) {
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	ec 01       	movw	r28, r24
     460:	8b 01       	movw	r16, r22
     462:	04 c0       	rjmp	.+8      	; 0x46c <uart_put_string+0x16>
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		uart_put_charater(*s, dir);
     464:	b8 01       	movw	r22, r16
     466:	0e 94 1a 02 	call	0x434	; 0x434 <uart_put_charater>
		s++;
     46a:	21 96       	adiw	r28, 0x01	; 1
		UDR1 = c; // sende Zeichen
	}
	//return 0;
}
void 	uart_put_string		(char *s, int dir) {
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
     46c:	88 81       	ld	r24, Y
     46e:	88 23       	and	r24, r24
     470:	c9 f7       	brne	.-14     	; 0x464 <uart_put_string+0xe>
	{
		uart_put_charater(*s, dir);
		s++;
	}
}
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	0f 91       	pop	r16
     47a:	08 95       	ret

0000047c <uart_get_character>:
int 	uart_get_character	(int dir) {
	if (dir == D_RapidForm) {
     47c:	00 97       	sbiw	r24, 0x00	; 0
     47e:	39 f4       	brne	.+14     	; 0x48e <uart_get_character+0x12>
		while (!(UCSR0A & (1 << RXC0)))
     480:	80 91 c0 00 	lds	r24, 0x00C0
     484:	87 ff       	sbrs	r24, 7
     486:	fc cf       	rjmp	.-8      	; 0x480 <uart_get_character+0x4>
			// warten bis Zeichen verfuegbar
			;
		return UDR0; // Zeichen aus UDR an Aufrufer zurueckgeben
     488:	80 91 c6 00 	lds	r24, 0x00C6
     48c:	0b c0       	rjmp	.+22     	; 0x4a4 <uart_get_character+0x28>
	}
	if (dir == D_Stepper) {
     48e:	01 97       	sbiw	r24, 0x01	; 1
     490:	19 f0       	breq	.+6      	; 0x498 <uart_get_character+0x1c>
     492:	2f ef       	ldi	r18, 0xFF	; 255
     494:	3f ef       	ldi	r19, 0xFF	; 255
     496:	08 c0       	rjmp	.+16     	; 0x4a8 <uart_get_character+0x2c>
		while (!(UCSR1A & (1 << RXC1)))
     498:	80 91 c8 00 	lds	r24, 0x00C8
     49c:	87 ff       	sbrs	r24, 7
     49e:	fc cf       	rjmp	.-8      	; 0x498 <uart_get_character+0x1c>
			// warten bis Zeichen verfuegbar
			;
		return UDR1; // Zeichen aus UDR an Aufrufer zurueckgeben
     4a0:	80 91 ce 00 	lds	r24, 0x00CE
     4a4:	28 2f       	mov	r18, r24
     4a6:	30 e0       	ldi	r19, 0x00	; 0
	}
	return -1;
}
     4a8:	c9 01       	movw	r24, r18
     4aa:	08 95       	ret

000004ac <uart_get_string>:
void 	uart_get_string		(char * string_in, int dir) {
     4ac:	ef 92       	push	r14
     4ae:	ff 92       	push	r15
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	8c 01       	movw	r16, r24
     4ba:	7b 01       	movw	r14, r22
     4bc:	c0 e0       	ldi	r28, 0x00	; 0
     4be:	d0 e0       	ldi	r29, 0x00	; 0
	char c;
	int i = 0;
	do {
		c = uart_get_character(dir);
     4c0:	c7 01       	movw	r24, r14
     4c2:	0e 94 3e 02 	call	0x47c	; 0x47c <uart_get_character>
		if (c != '\r') {
     4c6:	8d 30       	cpi	r24, 0x0D	; 13
     4c8:	21 f0       	breq	.+8      	; 0x4d2 <uart_get_string+0x26>
			*string_in = c;
     4ca:	f8 01       	movw	r30, r16
     4cc:	81 93       	st	Z+, r24
     4ce:	8f 01       	movw	r16, r30
			string_in += 1;
			i++;
     4d0:	21 96       	adiw	r28, 0x01	; 1
		}
	} while (i < 100 && c != '\r' && c != '\n');
     4d2:	c4 36       	cpi	r28, 0x64	; 100
     4d4:	d1 05       	cpc	r29, r1
     4d6:	24 f4       	brge	.+8      	; 0x4e0 <uart_get_string+0x34>
     4d8:	8d 30       	cpi	r24, 0x0D	; 13
     4da:	11 f0       	breq	.+4      	; 0x4e0 <uart_get_string+0x34>
     4dc:	8a 30       	cpi	r24, 0x0A	; 10
     4de:	81 f7       	brne	.-32     	; 0x4c0 <uart_get_string+0x14>
	*string_in = '\0';
     4e0:	f8 01       	movw	r30, r16
     4e2:	10 82       	st	Z, r1
	if (dir == D_Stepper)
     4e4:	f1 e0       	ldi	r31, 0x01	; 1
     4e6:	ef 16       	cp	r14, r31
     4e8:	f1 04       	cpc	r15, r1
     4ea:	11 f4       	brne	.+4      	; 0x4f0 <uart_get_string+0x44>
		LED_PORT |= ( 1 << LED3 );
     4ec:	2b 9a       	sbi	0x05, 3	; 5
     4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <uart_get_string+0x46>
	else
		LED_PORT |= ( 1 << LED2 );
     4f0:	2a 9a       	sbi	0x05, 2	; 5
}
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	ff 90       	pop	r15
     4fc:	ef 90       	pop	r14
     4fe:	08 95       	ret

00000500 <csg_Status_melden>:
	//uart_put_string("0\n", D_Stepper);
	uart_put_string(B_OK, D_RapidForm);
}
// 		Hilfs Funktionen
void 	csg_Status_melden	(void) {
		uart_put_string("         0,         0,K,K,R\r\n", D_RapidForm); // Status an RapidForm zur�ckmelden
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
}
     50c:	08 95       	ret

0000050e <led_spielerein>:
	lcd_my_type("Hello Joe!\n");
	_delay_ms(600);
	lcd_clrscr();
	lcd_my_type("Ready!\n");
}
void 	led_spielerein		(void) {						// LEDs durchlaufen
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     512:	a8 ec       	ldi	r26, 0xC8	; 200
     514:	b0 e0       	ldi	r27, 0x00	; 0
	for (int i = 1; i < 9; i++) {
		_delay_ms(80); 					// warte 80ms
		LED_PORT &= ~((1 << i)); 	   	// loescht Bit an PortB - LED an
     516:	61 e0       	ldi	r22, 0x01	; 1
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	21 c0       	rjmp	.+66     	; 0x55e <led_spielerein+0x50>
     51c:	fd 01       	movw	r30, r26
     51e:	31 97       	sbiw	r30, 0x01	; 1
     520:	f1 f7       	brne	.-4      	; 0x51e <led_spielerein+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     522:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     524:	d9 f7       	brne	.-10     	; 0x51c <led_spielerein+0xe>
     526:	25 b1       	in	r18, 0x05	; 5
     528:	cb 01       	movw	r24, r22
     52a:	04 2e       	mov	r0, r20
     52c:	02 c0       	rjmp	.+4      	; 0x532 <led_spielerein+0x24>
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	0a 94       	dec	r0
     534:	e2 f7       	brpl	.-8      	; 0x52e <led_spielerein+0x20>
     536:	80 95       	com	r24
     538:	82 23       	and	r24, r18
     53a:	85 b9       	out	0x05, r24	; 5
		LED_PORT |=  ((1 << (i - 1))); 	// setzt  Bit an PortB - LED aus
     53c:	25 b1       	in	r18, 0x05	; 5
     53e:	41 50       	subi	r20, 0x01	; 1
     540:	50 40       	sbci	r21, 0x00	; 0
     542:	cb 01       	movw	r24, r22
     544:	04 2e       	mov	r0, r20
     546:	02 c0       	rjmp	.+4      	; 0x54c <led_spielerein+0x3e>
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	0a 94       	dec	r0
     54e:	e2 f7       	brpl	.-8      	; 0x548 <led_spielerein+0x3a>
     550:	28 2b       	or	r18, r24
     552:	25 b9       	out	0x05, r18	; 5
	_delay_ms(600);
	lcd_clrscr();
	lcd_my_type("Ready!\n");
}
void 	led_spielerein		(void) {						// LEDs durchlaufen
	for (int i = 1; i < 9; i++) {
     554:	4e 5f       	subi	r20, 0xFE	; 254
     556:	5f 4f       	sbci	r21, 0xFF	; 255
     558:	49 30       	cpi	r20, 0x09	; 9
     55a:	51 05       	cpc	r21, r1
     55c:	19 f0       	breq	.+6      	; 0x564 <led_spielerein+0x56>
     55e:	80 e2       	ldi	r24, 0x20	; 32
     560:	93 e0       	ldi	r25, 0x03	; 3
     562:	dc cf       	rjmp	.-72     	; 0x51c <led_spielerein+0xe>
     564:	08 95       	ret

00000566 <debounce_init>:
		LED_PORT |=  ((1 << (i - 1))); 	// setzt  Bit an PortB - LED aus
		//wdt_reset();
	}
}
void 	debounce_init		(void) {
	KEY_DDR &= ~ALL_KEYS; // configure key port for input
     566:	81 b1       	in	r24, 0x01	; 1
     568:	11 b8       	out	0x01, r1	; 1
	KEY_PORT |= ALL_KEYS; // and turn on pull up resistors
     56a:	82 b1       	in	r24, 0x02	; 2
     56c:	8f ef       	ldi	r24, 0xFF	; 255
     56e:	82 b9       	out	0x02, r24	; 2
	TCCR0B = (1 << CS02) | (1 << CS00); // divide by 1024
     570:	85 e0       	ldi	r24, 0x05	; 5
     572:	85 bd       	out	0x25, r24	; 37
	TCNT0 = (uint8_t) (int16_t) -(F_CPU / 1024 * 10 * 10e-3 + 0.5); // preload for 10ms
     574:	83 ef       	ldi	r24, 0xF3	; 243
     576:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= 1 << TOIE0; // enable timer interrupt
     578:	ee e6       	ldi	r30, 0x6E	; 110
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	80 81       	ld	r24, Z
     57e:	81 60       	ori	r24, 0x01	; 1
     580:	80 83       	st	Z, r24
	sei();
     582:	78 94       	sei
}
     584:	08 95       	ret

00000586 <led_lauflicht>:
 *
 * 08  00001000		00000001
 * i|  11101111		11111101
*/
void 	led_lauflicht 		(void) {
	uint8_t i = LED_PORT;
     586:	85 b1       	in	r24, 0x05	; 5
	i = (i & 0x00) | ((i << 1) & 0xFE);
     588:	88 0f       	add	r24, r24
	if (i < 0xFE) i |= 0x01;
     58a:	8e 3f       	cpi	r24, 0xFE	; 254
     58c:	08 f4       	brcc	.+2      	; 0x590 <led_lauflicht+0xa>
     58e:	81 60       	ori	r24, 0x01	; 1
		LED_PORT = i;
     590:	85 b9       	out	0x05, r24	; 5
}
     592:	08 95       	ret

00000594 <init_WDT>:
	uart_rx(D_Stepper);
	ms_spin(1000);
}
// Init Stuff
void init_WDT(void) {
	cli();
     594:	f8 94       	cli
	wdt_reset();
     596:	a8 95       	wdr
	WDTCSR |= (1 << WDCE) | (1 << WDE);
     598:	e0 e6       	ldi	r30, 0x60	; 96
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 81       	ld	r24, Z
     59e:	88 61       	ori	r24, 0x18	; 24
     5a0:	80 83       	st	Z, r24
	WDTCSR = (1 << WDE) | (1 << WDIE) | (1 << WDP3) | (1 << WDP0); //Watchdog 8s
     5a2:	89 e6       	ldi	r24, 0x69	; 105
     5a4:	80 83       	st	Z, r24
	//WDTCSR = 0x0F; //Watchdog Off
	sei();
     5a6:	78 94       	sei
}
     5a8:	08 95       	ret

000005aa <my_select>:
	lcd_puts("Danach Select\n");
	lcd_puts("-> Drehung um 45\n");
	if (get_key_press(1 << KEY4))
		uart_put_string("M 55750\r", D_Stepper);
}
void 	my_select			(void *arg, char *name) {
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	8b 01       	movw	r16, r22
	lcd_clrscr();
     5b0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
	lcd_puts("Selected: ");
     5b4:	8e e1       	ldi	r24, 0x1E	; 30
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(name);
     5bc:	c8 01       	movw	r24, r16
     5be:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
 */


static inline void ms_spin(unsigned short ms) {
	if (ms) {
		__asm__ __volatile__ (
     5c2:	8e ee       	ldi	r24, 0xEE	; 238
     5c4:	92 e0       	ldi	r25, 0x02	; 2

000005c6 <outer_501>:
     5c6:	a0 ed       	ldi	r26, 0xD0	; 208
     5c8:	b7 e0       	ldi	r27, 0x07	; 7

000005ca <inner_501>:
     5ca:	11 97       	sbiw	r26, 0x01	; 1
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <inner_501>
     5ce:	01 97       	sbiw	r24, 0x01	; 1
     5d0:	d1 f7       	brne	.-12     	; 0x5c6 <outer_501>

	ms_spin(750);
}
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	08 95       	ret

000005d8 <mod_manual>:
	if (i < 0xFE) i |= 0x01;
		LED_PORT = i;
}
// 		Menu Stuff
void 	mod_manual			(void *arg, void *name) {
	lcd_puts("Manueller Modus\n");
     5d8:	89 e2       	ldi	r24, 0x29	; 41
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("Aufnahme starten!\n");
     5e0:	8a e3       	ldi	r24, 0x3A	; 58
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("Danach Select\n");
     5e8:	8d e4       	ldi	r24, 0x4D	; 77
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("-> Drehung um 45\n");
     5f0:	8c e5       	ldi	r24, 0x5C	; 92
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     5f8:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     5fa:	90 91 6c 08 	lds	r25, 0x086C
     5fe:	90 71       	andi	r25, 0x10	; 16
  key_press ^= key_mask;                          // clear key(s)
     600:	80 91 6c 08 	lds	r24, 0x086C
     604:	89 27       	eor	r24, r25
     606:	80 93 6c 08 	sts	0x086C, r24
  sei();
     60a:	78 94       	sei
	if (get_key_press(1 << KEY4))
     60c:	99 23       	and	r25, r25
     60e:	31 f0       	breq	.+12     	; 0x61c <mod_manual+0x44>
		uart_put_string("M 55750\r", D_Stepper);
     610:	8e e6       	ldi	r24, 0x6E	; 110
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
     61c:	08 95       	ret

0000061e <String_zerlegen_csg>:
	y = z / 7200;
	z = (z * 71111)  /1024;
	ltoa(y, Winkel,		10 );
	ltoa(z, Position,	10 );
}
void 	String_zerlegen_csg	(char * str_rx) {
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	df 93       	push	r29
     62c:	cf 93       	push	r28
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	61 97       	sbiw	r28, 0x11	; 17
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	6c 01       	movw	r12, r24
	int i = 4; // Index Input String | Bei 4. Zeichen Beginnen. Die ersten 3 Zeichen sind Fix.
	int j = 0; // Index Variable
	char c; // Zu kopierendes Zeichen
	// Variablen Deklaration und Initialisierung mit Defaultwerten
	char Speed_Range[2] = "2";
	char ONE_Min_Speed[6] = "200";
     640:	82 e3       	ldi	r24, 0x32	; 50
     642:	90 e3       	ldi	r25, 0x30	; 48
     644:	a0 e3       	ldi	r26, 0x30	; 48
     646:	b0 e0       	ldi	r27, 0x00	; 0
     648:	8e 83       	std	Y+6, r24	; 0x06
     64a:	9f 83       	std	Y+7, r25	; 0x07
     64c:	a8 87       	std	Y+8, r26	; 0x08
     64e:	b9 87       	std	Y+9, r27	; 0x09
     650:	1b 86       	std	Y+11, r1	; 0x0b
     652:	1a 86       	std	Y+10, r1	; 0x0a
	char ONE_Max_Speed[6] = "2000";
     654:	de 01       	movw	r26, r28
     656:	1c 96       	adiw	r26, 0x0c	; 12
     658:	e4 ea       	ldi	r30, 0xA4	; 164
     65a:	f1 e0       	ldi	r31, 0x01	; 1
     65c:	85 e0       	ldi	r24, 0x05	; 5
     65e:	01 90       	ld	r0, Z+
     660:	0d 92       	st	X+, r0
     662:	81 50       	subi	r24, 0x01	; 1
     664:	e1 f7       	brne	.-8      	; 0x65e <String_zerlegen_csg+0x40>
     666:	19 8a       	std	Y+17, r1	; 0x11
	char ONE_Acc_Speed[5] = "200";
     668:	82 e3       	ldi	r24, 0x32	; 50
     66a:	90 e3       	ldi	r25, 0x30	; 48
     66c:	a0 e3       	ldi	r26, 0x30	; 48
     66e:	b0 e0       	ldi	r27, 0x00	; 0
     670:	89 83       	std	Y+1, r24	; 0x01
     672:	9a 83       	std	Y+2, r25	; 0x02
     674:	ab 83       	std	Y+3, r26	; 0x03
     676:	bc 83       	std	Y+4, r27	; 0x04
     678:	1d 82       	std	Y+5, r1	; 0x05
     67a:	84 e0       	ldi	r24, 0x04	; 4
     67c:	e8 2e       	mov	r14, r24
     67e:	f1 2c       	mov	r15, r1
     680:	a0 e0       	ldi	r26, 0x00	; 0
     682:	b0 e0       	ldi	r27, 0x00	; 0
	//
	////////////////////////
	do {
		c = str_rx[i];
		if (c != 'F') {
			ONE_Min_Speed[j] = c;
     684:	9e 01       	movw	r18, r28
     686:	2a 5f       	subi	r18, 0xFA	; 250
     688:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	//  Min Speed (50 - 20000)
	//
	////////////////////////
	do {
		c = str_rx[i];
     68a:	f6 01       	movw	r30, r12
     68c:	ee 0d       	add	r30, r14
     68e:	ff 1d       	adc	r31, r15
     690:	80 81       	ld	r24, Z
		if (c != 'F') {
     692:	86 34       	cpi	r24, 0x46	; 70
     694:	41 f0       	breq	.+16     	; 0x6a6 <String_zerlegen_csg+0x88>
			ONE_Min_Speed[j] = c;
     696:	f9 01       	movw	r30, r18
     698:	ea 0f       	add	r30, r26
     69a:	fb 1f       	adc	r31, r27
     69c:	80 83       	st	Z, r24
			j++;
     69e:	11 96       	adiw	r26, 0x01	; 1
			i++;
     6a0:	08 94       	sec
     6a2:	e1 1c       	adc	r14, r1
     6a4:	f1 1c       	adc	r15, r1
		}
	} while (j < 6 && c != '\0' && c != 'F');
     6a6:	a6 30       	cpi	r26, 0x06	; 6
     6a8:	b1 05       	cpc	r27, r1
     6aa:	24 f4       	brge	.+8      	; 0x6b4 <String_zerlegen_csg+0x96>
     6ac:	88 23       	and	r24, r24
     6ae:	11 f0       	breq	.+4      	; 0x6b4 <String_zerlegen_csg+0x96>
     6b0:	86 34       	cpi	r24, 0x46	; 70
     6b2:	59 f7       	brne	.-42     	; 0x68a <String_zerlegen_csg+0x6c>
	ONE_Min_Speed[j] = '\0';
     6b4:	8e 01       	movw	r16, r28
     6b6:	0a 5f       	subi	r16, 0xFA	; 250
     6b8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ba:	a0 0f       	add	r26, r16
     6bc:	b1 1f       	adc	r27, r17
     6be:	1c 92       	st	X, r1

	lcd_puts("1_MIN_SPEED:");
     6c0:	87 e7       	ldi	r24, 0x77	; 119
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(ONE_Min_Speed);
     6c8:	c8 01       	movw	r24, r16
     6ca:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("\n");
     6ce:	84 e8       	ldi	r24, 0x84	; 132
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	////////////////////////
	//
	//  Max Speed (50 - 20000)
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
     6d6:	08 94       	sec
     6d8:	e1 1c       	adc	r14, r1
     6da:	f1 1c       	adc	r15, r1
     6dc:	a0 e0       	ldi	r26, 0x00	; 0
     6de:	b0 e0       	ldi	r27, 0x00	; 0
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
		if (c != 'R') {
			ONE_Max_Speed[j] = c;
     6e0:	9e 01       	movw	r18, r28
     6e2:	24 5f       	subi	r18, 0xF4	; 244
     6e4:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
     6e6:	f6 01       	movw	r30, r12
     6e8:	ee 0d       	add	r30, r14
     6ea:	ff 1d       	adc	r31, r15
     6ec:	80 81       	ld	r24, Z
		if (c != 'R') {
     6ee:	82 35       	cpi	r24, 0x52	; 82
     6f0:	41 f0       	breq	.+16     	; 0x702 <String_zerlegen_csg+0xe4>
			ONE_Max_Speed[j] = c;
     6f2:	f9 01       	movw	r30, r18
     6f4:	ea 0f       	add	r30, r26
     6f6:	fb 1f       	adc	r31, r27
     6f8:	80 83       	st	Z, r24
			i++;
     6fa:	08 94       	sec
     6fc:	e1 1c       	adc	r14, r1
     6fe:	f1 1c       	adc	r15, r1
			j++;
     700:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (j < 6 && c != '\0' && c != 'R');
     702:	a6 30       	cpi	r26, 0x06	; 6
     704:	b1 05       	cpc	r27, r1
     706:	24 f4       	brge	.+8      	; 0x710 <String_zerlegen_csg+0xf2>
     708:	88 23       	and	r24, r24
     70a:	11 f0       	breq	.+4      	; 0x710 <String_zerlegen_csg+0xf2>
     70c:	82 35       	cpi	r24, 0x52	; 82
     70e:	59 f7       	brne	.-42     	; 0x6e6 <String_zerlegen_csg+0xc8>
	ONE_Max_Speed[j] = '\0';
     710:	8e 01       	movw	r16, r28
     712:	04 5f       	subi	r16, 0xF4	; 244
     714:	1f 4f       	sbci	r17, 0xFF	; 255
     716:	a0 0f       	add	r26, r16
     718:	b1 1f       	adc	r27, r17
     71a:	1c 92       	st	X, r1

	lcd_puts("1_MAX_SPEED:");
     71c:	86 e8       	ldi	r24, 0x86	; 134
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(ONE_Max_Speed);
     724:	c8 01       	movw	r24, r16
     726:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("\n");
     72a:	84 e8       	ldi	r24, 0x84	; 132
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	////////////////////////
	//
	//  Acceleration (0 - 1000)
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
     732:	c7 01       	movw	r24, r14
     734:	01 96       	adiw	r24, 0x01	; 1
     736:	a0 e0       	ldi	r26, 0x00	; 0
     738:	b0 e0       	ldi	r27, 0x00	; 0
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
		if (c != 'S') {
			ONE_Acc_Speed[j] = c;
     73a:	ae 01       	movw	r20, r28
     73c:	4f 5f       	subi	r20, 0xFF	; 255
     73e:	5f 4f       	sbci	r21, 0xFF	; 255
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
     740:	f6 01       	movw	r30, r12
     742:	e8 0f       	add	r30, r24
     744:	f9 1f       	adc	r31, r25
     746:	20 81       	ld	r18, Z
		if (c != 'S') {
     748:	23 35       	cpi	r18, 0x53	; 83
     74a:	31 f0       	breq	.+12     	; 0x758 <String_zerlegen_csg+0x13a>
			ONE_Acc_Speed[j] = c;
     74c:	fa 01       	movw	r30, r20
     74e:	ea 0f       	add	r30, r26
     750:	fb 1f       	adc	r31, r27
     752:	20 83       	st	Z, r18
			i++;
     754:	01 96       	adiw	r24, 0x01	; 1
			j++;
     756:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (j < 4 && c != '\0' && c != 'S');
     758:	a4 30       	cpi	r26, 0x04	; 4
     75a:	b1 05       	cpc	r27, r1
     75c:	24 f4       	brge	.+8      	; 0x766 <String_zerlegen_csg+0x148>
     75e:	22 23       	and	r18, r18
     760:	11 f0       	breq	.+4      	; 0x766 <String_zerlegen_csg+0x148>
     762:	23 35       	cpi	r18, 0x53	; 83
     764:	69 f7       	brne	.-38     	; 0x740 <String_zerlegen_csg+0x122>
	ONE_Acc_Speed[j] = '\0';
     766:	8e 01       	movw	r16, r28
     768:	0f 5f       	subi	r16, 0xFF	; 255
     76a:	1f 4f       	sbci	r17, 0xFF	; 255
     76c:	a0 0f       	add	r26, r16
     76e:	b1 1f       	adc	r27, r17
     770:	1c 92       	st	X, r1

	lcd_puts("1_ACC_SPEED:");
     772:	83 e9       	ldi	r24, 0x93	; 147
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(ONE_Acc_Speed);
     77a:	c8 01       	movw	r24, r16
     77c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("\n");
     780:	84 e8       	ldi	r24, 0x84	; 132
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>

	//uart_put_string("0\n", D_Stepper);
	uart_put_string(B_OK, D_RapidForm);
     788:	80 ea       	ldi	r24, 0xA0	; 160
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
}
     794:	61 96       	adiw	r28, 0x11	; 17
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	cd bf       	out	0x3d, r28	; 61
     7a0:	cf 91       	pop	r28
     7a2:	df 91       	pop	r29
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	df 90       	pop	r13
     7ae:	cf 90       	pop	r12
     7b0:	08 95       	ret

000007b2 <__vector_6>:
ISR(PCINT3_vect){						// Endschalter Position erreicht
	lcd_puts("Positive Enschalter Position Erreicht!");
	//uart_put_string("1H\n", D_Stepper);
	LED_PORT ^= (1 << LED3);
}
ISR(PCINT2_vect){						// Endschalter Position erreicht
     7b2:	1f 92       	push	r1
     7b4:	0f 92       	push	r0
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	0f 92       	push	r0
     7ba:	11 24       	eor	r1, r1
     7bc:	2f 93       	push	r18
     7be:	3f 93       	push	r19
     7c0:	4f 93       	push	r20
     7c2:	5f 93       	push	r21
     7c4:	6f 93       	push	r22
     7c6:	7f 93       	push	r23
     7c8:	8f 93       	push	r24
     7ca:	9f 93       	push	r25
     7cc:	af 93       	push	r26
     7ce:	bf 93       	push	r27
     7d0:	ef 93       	push	r30
     7d2:	ff 93       	push	r31
	lcd_puts("Negative Enschalter Position Erreicht!");
     7d4:	8a ea       	ldi	r24, 0xAA	; 170
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	//uart_put_string("1H\n", D_Stepper);
	LED_PORT ^= (1 << LED3);
     7dc:	85 b1       	in	r24, 0x05	; 5
     7de:	98 e0       	ldi	r25, 0x08	; 8
     7e0:	89 27       	eor	r24, r25
     7e2:	85 b9       	out	0x05, r24	; 5
}
     7e4:	ff 91       	pop	r31
     7e6:	ef 91       	pop	r30
     7e8:	bf 91       	pop	r27
     7ea:	af 91       	pop	r26
     7ec:	9f 91       	pop	r25
     7ee:	8f 91       	pop	r24
     7f0:	7f 91       	pop	r23
     7f2:	6f 91       	pop	r22
     7f4:	5f 91       	pop	r21
     7f6:	4f 91       	pop	r20
     7f8:	3f 91       	pop	r19
     7fa:	2f 91       	pop	r18
     7fc:	0f 90       	pop	r0
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	0f 90       	pop	r0
     802:	1f 90       	pop	r1
     804:	18 95       	reti

00000806 <__vector_7>:
// Interrupt Stuff
ISR(WDT_vect){ 							// Watchdog ISR
		LED_PORT &= ~(1 << LED4); 		// LED5 einschalten
		lcd_puts("Something went \nterribly wrong!\nRebooting!");
}
ISR(PCINT3_vect){						// Endschalter Position erreicht
     806:	1f 92       	push	r1
     808:	0f 92       	push	r0
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	0f 92       	push	r0
     80e:	11 24       	eor	r1, r1
     810:	2f 93       	push	r18
     812:	3f 93       	push	r19
     814:	4f 93       	push	r20
     816:	5f 93       	push	r21
     818:	6f 93       	push	r22
     81a:	7f 93       	push	r23
     81c:	8f 93       	push	r24
     81e:	9f 93       	push	r25
     820:	af 93       	push	r26
     822:	bf 93       	push	r27
     824:	ef 93       	push	r30
     826:	ff 93       	push	r31
	lcd_puts("Positive Enschalter Position Erreicht!");
     828:	81 ed       	ldi	r24, 0xD1	; 209
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	//uart_put_string("1H\n", D_Stepper);
	LED_PORT ^= (1 << LED3);
     830:	85 b1       	in	r24, 0x05	; 5
     832:	98 e0       	ldi	r25, 0x08	; 8
     834:	89 27       	eor	r24, r25
     836:	85 b9       	out	0x05, r24	; 5
}
     838:	ff 91       	pop	r31
     83a:	ef 91       	pop	r30
     83c:	bf 91       	pop	r27
     83e:	af 91       	pop	r26
     840:	9f 91       	pop	r25
     842:	8f 91       	pop	r24
     844:	7f 91       	pop	r23
     846:	6f 91       	pop	r22
     848:	5f 91       	pop	r21
     84a:	4f 91       	pop	r20
     84c:	3f 91       	pop	r19
     84e:	2f 91       	pop	r18
     850:	0f 90       	pop	r0
     852:	0f be       	out	0x3f, r0	; 63
     854:	0f 90       	pop	r0
     856:	1f 90       	pop	r1
     858:	18 95       	reti

0000085a <__vector_8>:
//    	Hauptschleife Ende
//
//////////////////////////////

// Interrupt Stuff
ISR(WDT_vect){ 							// Watchdog ISR
     85a:	1f 92       	push	r1
     85c:	0f 92       	push	r0
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	0f 92       	push	r0
     862:	11 24       	eor	r1, r1
     864:	2f 93       	push	r18
     866:	3f 93       	push	r19
     868:	4f 93       	push	r20
     86a:	5f 93       	push	r21
     86c:	6f 93       	push	r22
     86e:	7f 93       	push	r23
     870:	8f 93       	push	r24
     872:	9f 93       	push	r25
     874:	af 93       	push	r26
     876:	bf 93       	push	r27
     878:	ef 93       	push	r30
     87a:	ff 93       	push	r31
		LED_PORT &= ~(1 << LED4); 		// LED5 einschalten
     87c:	2c 98       	cbi	0x05, 4	; 5
		lcd_puts("Something went \nterribly wrong!\nRebooting!");
     87e:	88 ef       	ldi	r24, 0xF8	; 248
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
}
     886:	ff 91       	pop	r31
     888:	ef 91       	pop	r30
     88a:	bf 91       	pop	r27
     88c:	af 91       	pop	r26
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	7f 91       	pop	r23
     894:	6f 91       	pop	r22
     896:	5f 91       	pop	r21
     898:	4f 91       	pop	r20
     89a:	3f 91       	pop	r19
     89c:	2f 91       	pop	r18
     89e:	0f 90       	pop	r0
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	0f 90       	pop	r0
     8a4:	1f 90       	pop	r1
     8a6:	18 95       	reti

000008a8 <lcd_my_type>:
		if(Initialized == M_TERMINAL)
			switch_Terminal(str_rx);
	}
}
// 		LCD und LED Stuff
void 	lcd_my_type			(char *s) {
     8a8:	ef 92       	push	r14
     8aa:	ff 92       	push	r15
     8ac:	0f 93       	push	r16
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	ec 01       	movw	r28, r24
	srand(TCNT0);
     8b6:	86 b5       	in	r24, 0x26	; 38
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <srand>
     8be:	90 ed       	ldi	r25, 0xD0	; 208
     8c0:	e9 2e       	mov	r14, r25
     8c2:	97 e0       	ldi	r25, 0x07	; 7
     8c4:	f9 2e       	mov	r15, r25
     8c6:	17 c0       	rjmp	.+46     	; 0x8f6 <lcd_my_type+0x4e>
	int min = 10;
	int max = 250;
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		erg = (rand() % (max - min + 1) + min);
     8c8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <rand>
     8cc:	61 ef       	ldi	r22, 0xF1	; 241
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__divmodhi4>
     8d4:	8c 01       	movw	r16, r24
     8d6:	06 5f       	subi	r16, 0xF6	; 246
     8d8:	1f 4f       	sbci	r17, 0xFF	; 255
		lcd_putc(*s);
     8da:	88 81       	ld	r24, Y
     8dc:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	04 c0       	rjmp	.+8      	; 0x8ee <lcd_my_type+0x46>
     8e6:	f7 01       	movw	r30, r14
     8e8:	31 97       	sbiw	r30, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <lcd_my_type+0x40>
		s++;
		for (int i = 0; i < erg; i++)
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	80 17       	cp	r24, r16
     8f0:	91 07       	cpc	r25, r17
     8f2:	cc f3       	brlt	.-14     	; 0x8e6 <lcd_my_type+0x3e>
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		erg = (rand() % (max - min + 1) + min);
		lcd_putc(*s);
		s++;
     8f4:	21 96       	adiw	r28, 0x01	; 1
void 	lcd_my_type			(char *s) {
	srand(TCNT0);
	int min = 10;
	int max = 250;
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
     8f6:	88 81       	ld	r24, Y
     8f8:	88 23       	and	r24, r24
     8fa:	31 f7       	brne	.-52     	; 0x8c8 <lcd_my_type+0x20>
		lcd_putc(*s);
		s++;
		for (int i = 0; i < erg; i++)
			_delay_ms(1);
	}
}
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	ff 90       	pop	r15
     906:	ef 90       	pop	r14
     908:	08 95       	ret

0000090a <lcd_spielereien>:
void 	lcd_spielereien		(void) {
     90a:	88 ee       	ldi	r24, 0xE8	; 232
     90c:	93 e0       	ldi	r25, 0x03	; 3
     90e:	28 ec       	ldi	r18, 0xC8	; 200
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	f9 01       	movw	r30, r18
     914:	31 97       	sbiw	r30, 0x01	; 1
     916:	f1 f7       	brne	.-4      	; 0x914 <lcd_spielereien+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     918:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     91a:	d9 f7       	brne	.-10     	; 0x912 <lcd_spielereien+0x8>
	_delay_ms(100);
	lcd_my_type("Hello Joe!\n");
     91c:	83 e2       	ldi	r24, 0x23	; 35
     91e:	92 e0       	ldi	r25, 0x02	; 2
     920:	0e 94 54 04 	call	0x8a8	; 0x8a8 <lcd_my_type>
     924:	80 e7       	ldi	r24, 0x70	; 112
     926:	97 e1       	ldi	r25, 0x17	; 23
     928:	28 ec       	ldi	r18, 0xC8	; 200
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	f9 01       	movw	r30, r18
     92e:	31 97       	sbiw	r30, 0x01	; 1
     930:	f1 f7       	brne	.-4      	; 0x92e <lcd_spielereien+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     932:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     934:	d9 f7       	brne	.-10     	; 0x92c <lcd_spielereien+0x22>
	_delay_ms(600);
	lcd_clrscr();
     936:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
	lcd_my_type("Ready!\n");
     93a:	8f e2       	ldi	r24, 0x2F	; 47
     93c:	92 e0       	ldi	r25, 0x02	; 2
     93e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <lcd_my_type>
}
     942:	08 95       	ret

00000944 <init>:
	WDTCSR = (1 << WDE) | (1 << WDIE) | (1 << WDP3) | (1 << WDP0); //Watchdog 8s
	//WDTCSR = 0x0F; //Watchdog Off
	sei();
}
void init() {
	init_WDT();						// Watchdog Initialisieren oder Abschalten
     944:	0e 94 ca 02 	call	0x594	; 0x594 <init_WDT>
	LED_DDR   = 0xFF;				// LED Port Richtung definieren (Ausgang)
     948:	8f ef       	ldi	r24, 0xFF	; 255
     94a:	84 b9       	out	0x04, r24	; 4
	LED_PORT  = 0xFF;				// LEDs ausschalten
     94c:	85 b9       	out	0x05, r24	; 5
	PCMSK3   |= ( 1 << PCINT28 ); 	// Interrupts definierenPD4 als Interrupt zulassen
     94e:	e3 e7       	ldi	r30, 0x73	; 115
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
     954:	80 61       	ori	r24, 0x10	; 16
     956:	80 83       	st	Z, r24
	PCICR    |= ( 1 << PCIE3   ); 	// Pin Change Interrupt Control Register - PCIE3 setzen fuer PCINT30
     958:	e8 e6       	ldi	r30, 0x68	; 104
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	80 81       	ld	r24, Z
     95e:	88 60       	ori	r24, 0x08	; 8
     960:	80 83       	st	Z, r24
	DDRC     |= ( 1 << PB7     );	// Pin7 (Kontrast) als Ausgang definieren 	(Nur LCD an STK500)
     962:	3f 9a       	sbi	0x07, 7	; 7
	LCD_PORT &= ( 1 << PB7 	   );  	// Pin7 auf 0V legen 						(Nur LCD an STK500)
     964:	88 b1       	in	r24, 0x08	; 8
     966:	80 78       	andi	r24, 0x80	; 128
     968:	88 b9       	out	0x08, r24	; 8
    lcd_init(LCD_DISP_ON_CURSOR);	// LC Display initialisieren
     96a:	8e e0       	ldi	r24, 0x0E	; 14
     96c:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_init>
	lcd_spielereien();				// Kurze Startup Meldung zeigen
     970:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_spielereien>
	led_spielerein();				// Starten des Mikrocontroller kennzeichnen
     974:	0e 94 87 02 	call	0x50e	; 0x50e <led_spielerein>
	debounce_init();				// Taster entprellen
     978:	0e 94 b3 02 	call	0x566	; 0x566 <debounce_init>
	uart_init();					// RS-232 Verbindung initialisieren
     97c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <uart_init>
	//menu_enter(&menu_context, &menu_main); // Kommentar entfernen um Menue zu aktivieren
}
     980:	08 95       	ret

00000982 <Position_Zeta>:
}
// 		Hilfs Funktionen
void 	csg_Status_melden	(void) {
		uart_put_string("         0,         0,K,K,R\r\n", D_RapidForm); // Status an RapidForm zur�ckmelden
}
void 	Position_Zeta		(char * Position) {
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	8c 01       	movw	r16, r24
     98c:	c0 e0       	ldi	r28, 0x00	; 0
     98e:	d0 e0       	ldi	r29, 0x00	; 0
    char c;
    int i = 0;
    do{
        c = str_rx[i + 1];
     990:	de 01       	movw	r26, r28
     992:	11 96       	adiw	r26, 0x01	; 1
     994:	fd 01       	movw	r30, r26
     996:	e8 5f       	subi	r30, 0xF8	; 248
     998:	f7 4f       	sbci	r31, 0xF7	; 247
     99a:	e0 81       	ld	r30, Z
        if(c != ','){
     99c:	ec 32       	cpi	r30, 0x2C	; 44
     99e:	11 f4       	brne	.+4      	; 0x9a4 <Position_Zeta+0x22>
     9a0:	de 01       	movw	r26, r28
     9a2:	03 c0       	rjmp	.+6      	; 0x9aa <Position_Zeta+0x28>
            Position[i] = c;
     9a4:	c0 0f       	add	r28, r16
     9a6:	d1 1f       	adc	r29, r17
     9a8:	e8 83       	st	Y, r30
            i++;
        }
    }
     while(i < 20 && c != '\0' && c != ',');
     9aa:	a4 31       	cpi	r26, 0x14	; 20
     9ac:	b1 05       	cpc	r27, r1
     9ae:	34 f4       	brge	.+12     	; 0x9bc <Position_Zeta+0x3a>
     9b0:	ee 23       	and	r30, r30
     9b2:	21 f0       	breq	.+8      	; 0x9bc <Position_Zeta+0x3a>
     9b4:	ec 32       	cpi	r30, 0x2C	; 44
     9b6:	11 f0       	breq	.+4      	; 0x9bc <Position_Zeta+0x3a>
     9b8:	ed 01       	movw	r28, r26
     9ba:	ea cf       	rjmp	.-44     	; 0x990 <Position_Zeta+0xe>
    Position[i] = '\0';
     9bc:	a0 0f       	add	r26, r16
     9be:	b1 1f       	adc	r27, r17
     9c0:	1c 92       	st	X, r1
	int32_t z;
	z = atol(Position);
     9c2:	c8 01       	movw	r24, r16
     9c4:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <atol>
	z = z/9;
	ltoa(z,Position,10);
     9c8:	29 e0       	ldi	r18, 0x09	; 9
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	0e 94 6f 0c 	call	0x18de	; 0x18de <__divmodsi4>
     9d4:	ca 01       	movw	r24, r20
     9d6:	b9 01       	movw	r22, r18
     9d8:	a8 01       	movw	r20, r16
     9da:	2a e0       	ldi	r18, 0x0A	; 10
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <ltoa>
}
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	08 95       	ret

000009ec <String_zerlegen_Isel>:
			return n;
		}
	}
	return 99;
}
void 	String_zerlegen_Isel(char * str_rx, char * Position, char * Winkel) {
     9ec:	8f 92       	push	r8
     9ee:	9f 92       	push	r9
     9f0:	af 92       	push	r10
     9f2:	bf 92       	push	r11
     9f4:	cf 92       	push	r12
     9f6:	df 92       	push	r13
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	8c 01       	movw	r16, r24
     a06:	eb 01       	movw	r28, r22
     a08:	4a 01       	movw	r8, r20
	//0M5200, +600
	//Achse M Position, +Geschwindigkeit
	char * Achse="0";
	Achse[0] = str_rx[1];
	Achse[1] = '\0';
	if(atoi(Achse)==0){
     a0a:	87 e3       	ldi	r24, 0x37	; 55
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <atoi>
     a12:	89 2b       	or	r24, r25
     a14:	61 f4       	brne	.+24     	; 0xa2e <String_zerlegen_Isel+0x42>
		lcd_puts("Achse: ");
     a16:	89 e3       	ldi	r24, 0x39	; 57
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(Achse);
     a1e:	87 e3       	ldi	r24, 0x37	; 55
     a20:	92 e0       	ldi	r25, 0x02	; 2
     a22:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(" (Rotation)\n");
     a26:	81 e4       	ldi	r24, 0x41	; 65
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	}
	if(atoi(Achse)==1){
     a2e:	87 e3       	ldi	r24, 0x37	; 55
     a30:	92 e0       	ldi	r25, 0x02	; 2
     a32:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <atoi>
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	61 f4       	brne	.+24     	; 0xa52 <String_zerlegen_Isel+0x66>
		lcd_puts("Achse: ");
     a3a:	89 e3       	ldi	r24, 0x39	; 57
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(Achse);
     a42:	87 e3       	ldi	r24, 0x37	; 55
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(" (Hoehe)   \n");
     a4a:	8e e4       	ldi	r24, 0x4E	; 78
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	}
	lcd_puts("Test: ");
     a52:	8b e5       	ldi	r24, 0x5B	; 91
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(Position);
     a5a:	ce 01       	movw	r24, r28
     a5c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
     a60:	a0 e0       	ldi	r26, 0x00	; 0
     a62:	b0 e0       	ldi	r27, 0x00	; 0
	char c;
	int i = 0;
	do {
		c = str_rx[i + 3];
     a64:	f8 01       	movw	r30, r16
     a66:	ea 0f       	add	r30, r26
     a68:	fb 1f       	adc	r31, r27
     a6a:	83 81       	ldd	r24, Z+3	; 0x03
		if (c != ',') {
     a6c:	8c 32       	cpi	r24, 0x2C	; 44
     a6e:	29 f0       	breq	.+10     	; 0xa7a <String_zerlegen_Isel+0x8e>
			Position[i] = c;
     a70:	fe 01       	movw	r30, r28
     a72:	ea 0f       	add	r30, r26
     a74:	fb 1f       	adc	r31, r27
     a76:	80 83       	st	Z, r24
			i++;
     a78:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (i < 20 && c != '\0' && c != ',');
     a7a:	a4 31       	cpi	r26, 0x14	; 20
     a7c:	b1 05       	cpc	r27, r1
     a7e:	24 f4       	brge	.+8      	; 0xa88 <String_zerlegen_Isel+0x9c>
     a80:	88 23       	and	r24, r24
     a82:	11 f0       	breq	.+4      	; 0xa88 <String_zerlegen_Isel+0x9c>
     a84:	8c 32       	cpi	r24, 0x2C	; 44
     a86:	71 f7       	brne	.-36     	; 0xa64 <String_zerlegen_Isel+0x78>
	Position[i] = '\0';
     a88:	ac 0f       	add	r26, r28
     a8a:	bd 1f       	adc	r27, r29
     a8c:	1c 92       	st	X, r1
	int32_t z;
	int32_t y;
	z = atol(Position);
     a8e:	ce 01       	movw	r24, r28
     a90:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <atol>
     a94:	7b 01       	movw	r14, r22
     a96:	8c 01       	movw	r16, r24
	y = z / 7200;
	z = (z * 71111)  /1024;
     a98:	27 ec       	ldi	r18, 0xC7	; 199
     a9a:	35 e1       	ldi	r19, 0x15	; 21
     a9c:	41 e0       	ldi	r20, 0x01	; 1
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	0e 94 3d 0c 	call	0x187a	; 0x187a <__mulsi3>
     aa4:	5b 01       	movw	r10, r22
     aa6:	6c 01       	movw	r12, r24
	ltoa(y, Winkel,		10 );
     aa8:	c8 01       	movw	r24, r16
     aaa:	b7 01       	movw	r22, r14
     aac:	20 e2       	ldi	r18, 0x20	; 32
     aae:	3c e1       	ldi	r19, 0x1C	; 28
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	0e 94 6f 0c 	call	0x18de	; 0x18de <__divmodsi4>
     ab8:	ca 01       	movw	r24, r20
     aba:	b9 01       	movw	r22, r18
     abc:	a4 01       	movw	r20, r8
     abe:	2a e0       	ldi	r18, 0x0A	; 10
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <ltoa>
	ltoa(z, Position,	10 );
     ac6:	c6 01       	movw	r24, r12
     ac8:	b5 01       	movw	r22, r10
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	34 e0       	ldi	r19, 0x04	; 4
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	0e 94 6f 0c 	call	0x18de	; 0x18de <__divmodsi4>
     ad6:	ca 01       	movw	r24, r20
     ad8:	b9 01       	movw	r22, r18
     ada:	ae 01       	movw	r20, r28
     adc:	2a e0       	ldi	r18, 0x0A	; 10
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <ltoa>
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	df 90       	pop	r13
     af2:	cf 90       	pop	r12
     af4:	bf 90       	pop	r11
     af6:	af 90       	pop	r10
     af8:	9f 90       	pop	r9
     afa:	8f 90       	pop	r8
     afc:	08 95       	ret

00000afe <FindStringInArray>:
			.Befehl = progmem_Befehl,
	}
};
*/

int 	FindStringInArray	(const char* pInput, const char* pOptions[], int cmp_length) {
     afe:	cf 92       	push	r12
     b00:	df 92       	push	r13
     b02:	ef 92       	push	r14
     b04:	ff 92       	push	r15
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	6c 01       	movw	r12, r24
     b10:	7a 01       	movw	r14, r20
     b12:	8b 01       	movw	r16, r22
     b14:	cf ef       	ldi	r28, 0xFF	; 255
     b16:	df ef       	ldi	r29, 0xFF	; 255
     b18:	08 c0       	rjmp	.+16     	; 0xb2a <FindStringInArray+0x2c>
	int n = -1;
	while (pOptions[++n]) {
		//lcd_puts(pOptions[n]);
		//lcd_puts("\n");
		if (!strncmp(pInput, pOptions[n], cmp_length)){
     b1a:	c6 01       	movw	r24, r12
     b1c:	a7 01       	movw	r20, r14
     b1e:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <strncmp>
     b22:	0e 5f       	subi	r16, 0xFE	; 254
     b24:	1f 4f       	sbci	r17, 0xFF	; 255
     b26:	00 97       	sbiw	r24, 0x00	; 0
     b28:	49 f0       	breq	.+18     	; 0xb3c <FindStringInArray+0x3e>
};
*/

int 	FindStringInArray	(const char* pInput, const char* pOptions[], int cmp_length) {
	int n = -1;
	while (pOptions[++n]) {
     b2a:	21 96       	adiw	r28, 0x01	; 1
     b2c:	f8 01       	movw	r30, r16
     b2e:	60 81       	ld	r22, Z
     b30:	71 81       	ldd	r23, Z+1	; 0x01
     b32:	61 15       	cp	r22, r1
     b34:	71 05       	cpc	r23, r1
     b36:	89 f7       	brne	.-30     	; 0xb1a <FindStringInArray+0x1c>
     b38:	c3 e6       	ldi	r28, 0x63	; 99
     b3a:	d0 e0       	ldi	r29, 0x00	; 0
		if (!strncmp(pInput, pOptions[n], cmp_length)){
			return n;
		}
	}
	return 99;
}
     b3c:	ce 01       	movw	r24, r28
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	ff 90       	pop	r15
     b48:	ef 90       	pop	r14
     b4a:	df 90       	pop	r13
     b4c:	cf 90       	pop	r12
     b4e:	08 95       	ret

00000b50 <switch_Motor>:
		lcd_puts("       \n");
		uart_put_string(str_rx,D_Stepper);
		uart_put_string("\n",D_Stepper);
	}
}
int 	switch_Motor		(char * str_rx) {
     b50:	df 93       	push	r29
     b52:	cf 93       	push	r28
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	2a 97       	sbiw	r28, 0x0a	; 10
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	f8 94       	cli
     b5e:	de bf       	out	0x3e, r29	; 62
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	cd bf       	out	0x3d, r28	; 61
	const char* pOptions[] = {
			"@01", 		// 0 - Isel
			"Q:",    	// 1 - CSG
			"ECHO0", 	// 2 - Zeta
			"!Terminal",	// 3 - Terminal ansteuerung!
			0 };
     b64:	de 01       	movw	r26, r28
     b66:	11 96       	adiw	r26, 0x01	; 1
     b68:	e5 e3       	ldi	r30, 0x35	; 53
     b6a:	f7 e0       	ldi	r31, 0x07	; 7
     b6c:	2a e0       	ldi	r18, 0x0A	; 10
     b6e:	01 90       	ld	r0, Z+
     b70:	0d 92       	st	X+, r0
     b72:	21 50       	subi	r18, 0x01	; 1
     b74:	e1 f7       	brne	.-8      	; 0xb6e <switch_Motor+0x1e>
	switch (FindStringInArray(str_rx, pOptions, 3)) {
     b76:	be 01       	movw	r22, r28
     b78:	6f 5f       	subi	r22, 0xFF	; 255
     b7a:	7f 4f       	sbci	r23, 0xFF	; 255
     b7c:	43 e0       	ldi	r20, 0x03	; 3
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	0e 94 7f 05 	call	0xafe	; 0xafe <FindStringInArray>
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	91 05       	cpc	r25, r1
     b88:	61 f0       	breq	.+24     	; 0xba2 <switch_Motor+0x52>
     b8a:	82 30       	cpi	r24, 0x02	; 2
     b8c:	91 05       	cpc	r25, r1
     b8e:	1c f4       	brge	.+6      	; 0xb96 <switch_Motor+0x46>
     b90:	89 2b       	or	r24, r25
     b92:	51 f0       	breq	.+20     	; 0xba8 <switch_Motor+0x58>
     b94:	12 c0       	rjmp	.+36     	; 0xbba <switch_Motor+0x6a>
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	91 05       	cpc	r25, r1
     b9a:	49 f0       	breq	.+18     	; 0xbae <switch_Motor+0x5e>
     b9c:	03 97       	sbiw	r24, 0x03	; 3
     b9e:	69 f4       	brne	.+26     	; 0xbba <switch_Motor+0x6a>
     ba0:	09 c0       	rjmp	.+18     	; 0xbb4 <switch_Motor+0x64>
     ba2:	21 e0       	ldi	r18, 0x01	; 1
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	0b c0       	rjmp	.+22     	; 0xbbe <switch_Motor+0x6e>
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	08 c0       	rjmp	.+16     	; 0xbbe <switch_Motor+0x6e>
     bae:	22 e0       	ldi	r18, 0x02	; 2
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	05 c0       	rjmp	.+10     	; 0xbbe <switch_Motor+0x6e>
		break;
	case 1: 		// 1 - CSG
		return M_CSG;
		break;
	case 2:			// 2 - Zeta
		return M_ZETA;
     bb4:	23 e0       	ldi	r18, 0x03	; 3
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <switch_Motor+0x6e>
		break;
	case 3:			// 3 - Terminal ansteuerung
		return M_TERMINAL;
     bba:	2e ef       	ldi	r18, 0xFE	; 254
     bbc:	3f ef       	ldi	r19, 0xFF	; 255
		break;
	default:
		return M_UNK;
	}
}
     bbe:	c9 01       	movw	r24, r18
     bc0:	2a 96       	adiw	r28, 0x0a	; 10
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <switch_Terminal>:
		lcd_puts(str_rx);
		lcd_puts("   \n");
		//Initialized = switch_Inputs(str_rx);
	}
}
void 	switch_Terminal		(char * str_rx) {
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	df 93       	push	r29
     bd8:	cf 93       	push	r28
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	2a 97       	sbiw	r28, 0x0a	; 10
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	de bf       	out	0x3e, r29	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	8c 01       	movw	r16, r24
	const char* pOptions[] = {
			"!CLS", // 0 - LC-Display l�schen
			"Test",	// 1 - Test
			"!Manual",// 2 - Ignorieren
			"!YYYY",// 3 - Wait till motor stops
			0 };
     bec:	de 01       	movw	r26, r28
     bee:	11 96       	adiw	r26, 0x01	; 1
     bf0:	e7 e5       	ldi	r30, 0x57	; 87
     bf2:	f7 e0       	ldi	r31, 0x07	; 7
     bf4:	8a e0       	ldi	r24, 0x0A	; 10
     bf6:	01 90       	ld	r0, Z+
     bf8:	0d 92       	st	X+, r0
     bfa:	81 50       	subi	r24, 0x01	; 1
     bfc:	e1 f7       	brne	.-8      	; 0xbf6 <switch_Terminal+0x24>

	if (init_T == 0){
     bfe:	80 91 02 08 	lds	r24, 0x0802
     c02:	90 91 03 08 	lds	r25, 0x0803
     c06:	89 2b       	or	r24, r25
     c08:	c1 f4       	brne	.+48     	; 0xc3a <switch_Terminal+0x68>
		init_T = 1;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	90 93 03 08 	sts	0x0803, r25
     c12:	80 93 02 08 	sts	0x0802, r24
		uart_put_string("Willkommen im Terminal Modus\r\n",D_RapidForm);
     c16:	82 e6       	ldi	r24, 0x62	; 98
     c18:	92 e0       	ldi	r25, 0x02	; 2
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
		uart_put_string("m�gliche Befehle sind: \r\n",D_RapidForm);
     c22:	81 e8       	ldi	r24, 0x81	; 129
     c24:	92 e0       	ldi	r25, 0x02	; 2
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
		uart_put_string(" A - Motorstatus\r\n M - Move Steps\r\n", D_RapidForm);
     c2e:	8d e9       	ldi	r24, 0x9D	; 157
     c30:	92 e0       	ldi	r25, 0x02	; 2
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
	}
	switch (FindStringInArray(str_rx, pOptions, 2)) {
     c3a:	c8 01       	movw	r24, r16
     c3c:	be 01       	movw	r22, r28
     c3e:	6f 5f       	subi	r22, 0xFF	; 255
     c40:	7f 4f       	sbci	r23, 0xFF	; 255
     c42:	42 e0       	ldi	r20, 0x02	; 2
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	0e 94 7f 05 	call	0xafe	; 0xafe <FindStringInArray>
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	91 05       	cpc	r25, r1
     c4e:	61 f0       	breq	.+24     	; 0xc68 <switch_Terminal+0x96>
     c50:	82 30       	cpi	r24, 0x02	; 2
     c52:	91 05       	cpc	r25, r1
     c54:	1c f4       	brge	.+6      	; 0xc5c <switch_Terminal+0x8a>
     c56:	89 2b       	or	r24, r25
     c58:	21 f0       	breq	.+8      	; 0xc62 <switch_Terminal+0x90>
     c5a:	0f c0       	rjmp	.+30     	; 0xc7a <switch_Terminal+0xa8>
     c5c:	04 97       	sbiw	r24, 0x04	; 4
     c5e:	6c f4       	brge	.+26     	; 0xc7a <switch_Terminal+0xa8>
     c60:	1e c0       	rjmp	.+60     	; 0xc9e <switch_Terminal+0xcc>
	case 0: // Display l�schen
		lcd_clrscr();
     c62:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
     c66:	1b c0       	rjmp	.+54     	; 0xc9e <switch_Terminal+0xcc>
		break;
	case 1: // Interner Test
		lcd_puts("Test bestanden     \n");
     c68:	81 ec       	ldi	r24, 0xC1	; 193
     c6a:	92 e0       	ldi	r25, 0x02	; 2
     c6c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("Test bestanden", D_RapidForm);
     c70:	86 ed       	ldi	r24, 0xD6	; 214
     c72:	92 e0       	ldi	r25, 0x02	; 2
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	10 c0       	rjmp	.+32     	; 0xc9a <switch_Terminal+0xc8>
	case 3: // Reserve 2

		break;
	default:
		//lcd_puts("Z:");
		lcd_puts(str_rx);
     c7a:	c8 01       	movw	r24, r16
     c7c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts("       \n");
     c80:	85 ee       	ldi	r24, 0xE5	; 229
     c82:	92 e0       	ldi	r25, 0x02	; 2
     c84:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string(str_rx,D_Stepper);
     c88:	c8 01       	movw	r24, r16
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
		uart_put_string("\n",D_Stepper);
     c92:	84 e8       	ldi	r24, 0x84	; 132
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	61 e0       	ldi	r22, 0x01	; 1
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
	}
}
     c9e:	2a 96       	adiw	r28, 0x0a	; 10
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	08 95       	ret

00000cb4 <switch_csg>:
	default:
		//lcd_puts("ISEL:    \n");
		lcd_puts(str_rx);
	}
}
void 	switch_csg			(char * str_rx) {
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	a0 97       	sbiw	r28, 0x20	; 32
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	8c 01       	movw	r16, r24
			"H:", // 5 - H:
			"G", // 6 - Motor starten
			"M:", // 7 - Move by Pulses
			"!", // 8 - Busy Ready ?
			"H1",
			0 };
     cce:	de 01       	movw	r26, r28
     cd0:	1b 96       	adiw	r26, 0x0b	; 11
     cd2:	ea eb       	ldi	r30, 0xBA	; 186
     cd4:	f7 e0       	ldi	r31, 0x07	; 7
     cd6:	86 e1       	ldi	r24, 0x16	; 22
     cd8:	01 90       	ld	r0, Z+
     cda:	0d 92       	st	X+, r0
     cdc:	81 50       	subi	r24, 0x01	; 1
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <switch_csg+0x24>
	switch (FindStringInArray(str_rx, pOptions, 2)) {
     ce0:	c8 01       	movw	r24, r16
     ce2:	be 01       	movw	r22, r28
     ce4:	65 5f       	subi	r22, 0xF5	; 245
     ce6:	7f 4f       	sbci	r23, 0xFF	; 255
     ce8:	42 e0       	ldi	r20, 0x02	; 2
     cea:	50 e0       	ldi	r21, 0x00	; 0
     cec:	0e 94 7f 05 	call	0xafe	; 0xafe <FindStringInArray>
     cf0:	84 30       	cpi	r24, 0x04	; 4
     cf2:	91 05       	cpc	r25, r1
     cf4:	c1 f1       	breq	.+112    	; 0xd66 <switch_csg+0xb2>
     cf6:	85 30       	cpi	r24, 0x05	; 5
     cf8:	91 05       	cpc	r25, r1
     cfa:	84 f4       	brge	.+32     	; 0xd1c <switch_csg+0x68>
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	91 05       	cpc	r25, r1
     d00:	29 f1       	breq	.+74     	; 0xd4c <switch_csg+0x98>
     d02:	82 30       	cpi	r24, 0x02	; 2
     d04:	91 05       	cpc	r25, r1
     d06:	1c f4       	brge	.+6      	; 0xd0e <switch_csg+0x5a>
     d08:	89 2b       	or	r24, r25
     d0a:	e9 f0       	breq	.+58     	; 0xd46 <switch_csg+0x92>
     d0c:	65 c0       	rjmp	.+202    	; 0xdd8 <switch_csg+0x124>
     d0e:	82 30       	cpi	r24, 0x02	; 2
     d10:	91 05       	cpc	r25, r1
     d12:	f9 f0       	breq	.+62     	; 0xd52 <switch_csg+0x9e>
     d14:	03 97       	sbiw	r24, 0x03	; 3
     d16:	09 f0       	breq	.+2      	; 0xd1a <switch_csg+0x66>
     d18:	5f c0       	rjmp	.+190    	; 0xdd8 <switch_csg+0x124>
     d1a:	1e c0       	rjmp	.+60     	; 0xd58 <switch_csg+0xa4>
     d1c:	87 30       	cpi	r24, 0x07	; 7
     d1e:	91 05       	cpc	r25, r1
     d20:	81 f1       	breq	.+96     	; 0xd82 <switch_csg+0xce>
     d22:	88 30       	cpi	r24, 0x08	; 8
     d24:	91 05       	cpc	r25, r1
     d26:	3c f4       	brge	.+14     	; 0xd36 <switch_csg+0x82>
     d28:	85 30       	cpi	r24, 0x05	; 5
     d2a:	91 05       	cpc	r25, r1
     d2c:	01 f1       	breq	.+64     	; 0xd6e <switch_csg+0xba>
     d2e:	06 97       	sbiw	r24, 0x06	; 6
     d30:	09 f0       	breq	.+2      	; 0xd34 <switch_csg+0x80>
     d32:	52 c0       	rjmp	.+164    	; 0xdd8 <switch_csg+0x124>
     d34:	23 c0       	rjmp	.+70     	; 0xd7c <switch_csg+0xc8>
     d36:	88 30       	cpi	r24, 0x08	; 8
     d38:	91 05       	cpc	r25, r1
     d3a:	09 f4       	brne	.+2      	; 0xd3e <switch_csg+0x8a>
     d3c:	3f c0       	rjmp	.+126    	; 0xdbc <switch_csg+0x108>
     d3e:	09 97       	sbiw	r24, 0x09	; 9
     d40:	09 f0       	breq	.+2      	; 0xd44 <switch_csg+0x90>
     d42:	4a c0       	rjmp	.+148    	; 0xdd8 <switch_csg+0x124>
     d44:	46 c0       	rjmp	.+140    	; 0xdd2 <switch_csg+0x11e>
	case 0: // Motorkarte Erfolgreich angesprochen
		lcd_puts("!");
     d46:	8e ee       	ldi	r24, 0xEE	; 238
     d48:	92 e0       	ldi	r25, 0x02	; 2
     d4a:	4f c0       	rjmp	.+158    	; 0xdea <switch_csg+0x136>
		break;
	case 1: // Display l�schen
		lcd_clrscr();
     d4c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
     d50:	4e c0       	rjmp	.+156    	; 0xdee <switch_csg+0x13a>
		break;
	case 2: // Interner Test
		lcd_puts("!T");
     d52:	80 ef       	ldi	r24, 0xF0	; 240
     d54:	92 e0       	ldi	r25, 0x02	; 2
     d56:	49 c0       	rjmp	.+146    	; 0xdea <switch_csg+0x136>
		//uart_puts("Test bestanden\n\r");
		break;
	case 3: // Status abfrage von Software
		lcd_puts("Statusabfrage     \n");
     d58:	83 ef       	ldi	r24, 0xF3	; 243
     d5a:	92 e0       	ldi	r25, 0x02	; 2
     d5c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		csg_Status_melden();
     d60:	0e 94 80 02 	call	0x500	; 0x500 <csg_Status_melden>
     d64:	44 c0       	rjmp	.+136    	; 0xdee <switch_csg+0x13a>
		break;
	case 4:
		String_zerlegen_csg(str_rx);
     d66:	c8 01       	movw	r24, r16
     d68:	0e 94 0f 03 	call	0x61e	; 0x61e <String_zerlegen_csg>
     d6c:	40 c0       	rjmp	.+128    	; 0xdee <switch_csg+0x13a>

		break;
	case 5:
		lcd_puts("H:                 \n");
     d6e:	87 e0       	ldi	r24, 0x07	; 7
     d70:	93 e0       	ldi	r25, 0x03	; 3
     d72:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string(B_OK, D_RapidForm);
     d76:	80 ea       	ldi	r24, 0xA0	; 160
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	26 c0       	rjmp	.+76     	; 0xdc8 <switch_csg+0x114>
		break;
	case 6:
		lcd_puts("Motor starten\n");
     d7c:	8c e1       	ldi	r24, 0x1C	; 28
     d7e:	93 e0       	ldi	r25, 0x03	; 3
     d80:	34 c0       	rjmp	.+104    	; 0xdea <switch_csg+0x136>
		//uart_put_string(B_OK, D_RapidForm);
		break;
	case 7:
		move++;
     d82:	80 91 00 08 	lds	r24, 0x0800
     d86:	90 91 01 08 	lds	r25, 0x0801
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	90 93 01 08 	sts	0x0801, r25
     d90:	80 93 00 08 	sts	0x0800, r24
		char it[10];
		itoa(move, it, 10);
     d94:	8e 01       	movw	r16, r28
     d96:	0f 5f       	subi	r16, 0xFF	; 255
     d98:	1f 4f       	sbci	r17, 0xFF	; 255
     d9a:	b8 01       	movw	r22, r16
     d9c:	4a e0       	ldi	r20, 0x0A	; 10
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <itoa>
		lcd_puts(it);
     da4:	c8 01       	movw	r24, r16
     da6:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts("_Move!\n");
     daa:	8b e2       	ldi	r24, 0x2B	; 43
     dac:	93 e0       	ldi	r25, 0x03	; 3
     dae:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("M 160000\r\n",D_Stepper);
     db2:	83 e3       	ldi	r24, 0x33	; 51
     db4:	93 e0       	ldi	r25, 0x03	; 3
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	08 c0       	rjmp	.+16     	; 0xdcc <switch_csg+0x118>

		break;
	case 8:
		lcd_puts("R/B?");
     dbc:	8e e3       	ldi	r24, 0x3E	; 62
     dbe:	93 e0       	ldi	r25, 0x03	; 3
     dc0:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("R\r\n", D_RapidForm);
     dc4:	83 e4       	ldi	r24, 0x43	; 67
     dc6:	93 e0       	ldi	r25, 0x03	; 3
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
     dd0:	0e c0       	rjmp	.+28     	; 0xdee <switch_csg+0x13a>
		break;
	case 9:
		lcd_puts("H1 empfangen       \n");
     dd2:	87 e4       	ldi	r24, 0x47	; 71
     dd4:	93 e0       	ldi	r25, 0x03	; 3
     dd6:	09 c0       	rjmp	.+18     	; 0xdea <switch_csg+0x136>
		break;
	default:
		lcd_puts("U_B: ");
     dd8:	8c e5       	ldi	r24, 0x5C	; 92
     dda:	93 e0       	ldi	r25, 0x03	; 3
     ddc:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(str_rx);
     de0:	c8 01       	movw	r24, r16
     de2:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts("!END       \n");
     de6:	82 e6       	ldi	r24, 0x62	; 98
     de8:	93 e0       	ldi	r25, 0x03	; 3
     dea:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	}
}
     dee:	a0 96       	adiw	r28, 0x20	; 32
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	08 95       	ret

00000e04 <switch_Stepper>:
	z = z/9;
	ltoa(z,Position,10);
}
// 		Vearbeitungs Logik
int 	Initialized = M_NOTI;
void 	switch_Stepper		(char * str_rx) {
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	2a 97       	sbiw	r28, 0x0a	; 10
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
	const char* pOptions[] = {
			"#", 	// 0 - Stepper Karte Befehl erkannt
			"E", 	// 1 - Error
			"!CLS", // 2 - Clear Screen
			"Test", // 3 - Test
			0 };
     e18:	de 01       	movw	r26, r28
     e1a:	11 96       	adiw	r26, 0x01	; 1
     e1c:	e2 ef       	ldi	r30, 0xF2	; 242
     e1e:	f7 e0       	ldi	r31, 0x07	; 7
     e20:	2a e0       	ldi	r18, 0x0A	; 10
     e22:	01 90       	ld	r0, Z+
     e24:	0d 92       	st	X+, r0
     e26:	21 50       	subi	r18, 0x01	; 1
     e28:	e1 f7       	brne	.-8      	; 0xe22 <switch_Stepper+0x1e>
	switch (FindStringInArray(str_rx, pOptions, 1)) {
     e2a:	be 01       	movw	r22, r28
     e2c:	6f 5f       	subi	r22, 0xFF	; 255
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	41 e0       	ldi	r20, 0x01	; 1
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	0e 94 7f 05 	call	0xafe	; 0xafe <FindStringInArray>
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	91 05       	cpc	r25, r1
     e3c:	79 f0       	breq	.+30     	; 0xe5c <switch_Stepper+0x58>
     e3e:	82 30       	cpi	r24, 0x02	; 2
     e40:	91 05       	cpc	r25, r1
     e42:	1c f4       	brge	.+6      	; 0xe4a <switch_Stepper+0x46>
     e44:	89 2b       	or	r24, r25
     e46:	39 f0       	breq	.+14     	; 0xe56 <switch_Stepper+0x52>
     e48:	1c c0       	rjmp	.+56     	; 0xe82 <switch_Stepper+0x7e>
     e4a:	82 30       	cpi	r24, 0x02	; 2
     e4c:	91 05       	cpc	r25, r1
     e4e:	89 f0       	breq	.+34     	; 0xe72 <switch_Stepper+0x6e>
     e50:	03 97       	sbiw	r24, 0x03	; 3
     e52:	b9 f4       	brne	.+46     	; 0xe82 <switch_Stepper+0x7e>
     e54:	11 c0       	rjmp	.+34     	; 0xe78 <switch_Stepper+0x74>
	case 0:
		lcd_puts("Erfolgreich\n");
     e56:	8f e6       	ldi	r24, 0x6F	; 111
     e58:	93 e0       	ldi	r25, 0x03	; 3
     e5a:	10 c0       	rjmp	.+32     	; 0xe7c <switch_Stepper+0x78>
		//uart_put_string("0\n\r", D_RapidForm);
		break;
	case 1:
		lcd_puts("Error\n");
     e5c:	8c e7       	ldi	r24, 0x7C	; 124
     e5e:	93 e0       	ldi	r25, 0x03	; 3
     e60:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("1\r\n", D_RapidForm);
     e64:	83 e8       	ldi	r24, 0x83	; 131
     e66:	93 e0       	ldi	r25, 0x03	; 3
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
     e70:	10 c0       	rjmp	.+32     	; 0xe92 <inner_1682+0x8>
		break;
	case 2:
		lcd_clrscr();
     e72:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
     e76:	0d c0       	rjmp	.+26     	; 0xe92 <inner_1682+0x8>
		break;
	case 3:
		lcd_puts("Test bestanden\n");
     e78:	87 e8       	ldi	r24, 0x87	; 135
     e7a:	93 e0       	ldi	r25, 0x03	; 3
     e7c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
     e80:	08 c0       	rjmp	.+16     	; 0xe92 <inner_1682+0x8>
     e82:	8a e0       	ldi	r24, 0x0A	; 10
     e84:	90 e0       	ldi	r25, 0x00	; 0

00000e86 <outer_1682>:
     e86:	a0 ed       	ldi	r26, 0xD0	; 208
     e88:	b7 e0       	ldi	r27, 0x07	; 7

00000e8a <inner_1682>:
     e8a:	11 97       	sbiw	r26, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <inner_1682>
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	d1 f7       	brne	.-12     	; 0xe86 <outer_1682>
		ms_spin(10);
		//lcd_puts("Stepper: ");
		//lcd_puts(str_rx);
		//lcd_puts("!\n");
	}
}
     e92:	2a 96       	adiw	r28, 0x0a	; 10
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <switch_Isel>:
void 	switch_Isel			(char * str_rx) {
     ea4:	cf 92       	push	r12
     ea6:	df 92       	push	r13
     ea8:	ef 92       	push	r14
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	cd 55       	subi	r28, 0x5D	; 93
     eba:	d0 40       	sbci	r29, 0x00	; 0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	6c 01       	movw	r12, r24
			"!CLS",    	// 1 - LC-Display l�schen
			"Test", 	// 2 - Test
			"@01",  	// 3 - Achse ausw�hlen
			"@0R", 		// 4 - Status abfrage
			"@0M", 		// 5 - Gehe zu Position MX , +600
			0 };
     ec8:	de 01       	movw	r26, r28
     eca:	17 96       	adiw	r26, 0x07	; 7
     ecc:	e0 ee       	ldi	r30, 0xE0	; 224
     ece:	f7 e0       	ldi	r31, 0x07	; 7
     ed0:	8e e0       	ldi	r24, 0x0E	; 14
     ed2:	01 90       	ld	r0, Z+
     ed4:	0d 92       	st	X+, r0
     ed6:	81 50       	subi	r24, 0x01	; 1
     ed8:	e1 f7       	brne	.-8      	; 0xed2 <switch_Isel+0x2e>

	int Ret_Val = FindStringInArray(str_rx, pOptions, 3);
     eda:	c6 01       	movw	r24, r12
     edc:	be 01       	movw	r22, r28
     ede:	69 5f       	subi	r22, 0xF9	; 249
     ee0:	7f 4f       	sbci	r23, 0xFF	; 255
     ee2:	43 e0       	ldi	r20, 0x03	; 3
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	0e 94 7f 05 	call	0xafe	; 0xafe <FindStringInArray>
	switch (Ret_Val) {
     eea:	82 30       	cpi	r24, 0x02	; 2
     eec:	91 05       	cpc	r25, r1
     eee:	c9 f0       	breq	.+50     	; 0xf22 <switch_Isel+0x7e>
     ef0:	83 30       	cpi	r24, 0x03	; 3
     ef2:	91 05       	cpc	r25, r1
     ef4:	34 f4       	brge	.+12     	; 0xf02 <switch_Isel+0x5e>
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	71 f0       	breq	.+28     	; 0xf16 <switch_Isel+0x72>
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	09 f0       	breq	.+2      	; 0xf00 <switch_Isel+0x5c>
     efe:	01 c1       	rjmp	.+514    	; 0x1102 <inner_1905+0x7c>
     f00:	0d c0       	rjmp	.+26     	; 0xf1c <switch_Isel+0x78>
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	91 05       	cpc	r25, r1
     f06:	f9 f0       	breq	.+62     	; 0xf46 <inner_1776+0xe>
     f08:	84 30       	cpi	r24, 0x04	; 4
     f0a:	91 05       	cpc	r25, r1
     f0c:	8c f0       	brlt	.+34     	; 0xf30 <switch_Isel+0x8c>
     f0e:	05 97       	sbiw	r24, 0x05	; 5
     f10:	09 f0       	breq	.+2      	; 0xf14 <switch_Isel+0x70>
     f12:	f7 c0       	rjmp	.+494    	; 0x1102 <inner_1905+0x7c>
     f14:	41 c0       	rjmp	.+130    	; 0xf98 <inner_1792+0x36>
	case 0: 		// 0 - Reserve
		lcd_puts("Reserve\r\n");
     f16:	87 e9       	ldi	r24, 0x97	; 151
     f18:	93 e0       	ldi	r25, 0x03	; 3
     f1a:	f4 c0       	rjmp	.+488    	; 0x1104 <inner_1905+0x7e>
		break;
	case 1: 		// 1 - LC-Display l�schen
		lcd_clrscr();
     f1c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
     f20:	f3 c0       	rjmp	.+486    	; 0x1108 <inner_1905+0x82>
		break;
	case 2:			// 2 - Test
		lcd_puts("Test bestanden\n");
     f22:	87 e8       	ldi	r24, 0x87	; 135
     f24:	93 e0       	ldi	r25, 0x03	; 3
     f26:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("Test bestanden\r\n", D_RapidForm);
     f2a:	81 ea       	ldi	r24, 0xA1	; 161
     f2c:	93 e0       	ldi	r25, 0x03	; 3
     f2e:	e4 c0       	rjmp	.+456    	; 0x10f8 <inner_1905+0x72>
     f30:	8a e0       	ldi	r24, 0x0A	; 10
     f32:	90 e0       	ldi	r25, 0x00	; 0

00000f34 <outer_1776>:
     f34:	a0 ed       	ldi	r26, 0xD0	; 208
     f36:	b7 e0       	ldi	r27, 0x07	; 7

00000f38 <inner_1776>:
     f38:	11 97       	sbiw	r26, 0x01	; 1
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <inner_1776>
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	d1 f7       	brne	.-12     	; 0xf34 <outer_1776>
			s_ptr++; // Increase string pointer
		} while( pgm_read_byte( s_ptr ) != 0x00 );  // End of string
		*/

		//lcd_puts( buf );
		lcd_puts("Init");
     f40:	82 eb       	ldi	r24, 0xB2	; 178
     f42:	93 e0       	ldi	r25, 0x03	; 3
     f44:	d5 c0       	rjmp	.+426    	; 0x10f0 <inner_1905+0x6a>
		//String_zerlegen_Isel(str_rx, Position);
		uart_put_string("0\r\n", D_RapidForm);
		//uart_put_string(Protokoll.Motor[M_ISEL].Befehl[0].Output, D_RapidForm);
		break;
	case 4:			// 4 - Status abfrage
		lcd_puts("Statusabfrage:     \n");
     f46:	87 eb       	ldi	r24, 0xB7	; 183
     f48:	93 e0       	ldi	r25, 0x03	; 3
     f4a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("A\n", D_Stepper);
     f4e:	8c ec       	ldi	r24, 0xCC	; 204
     f50:	93 e0       	ldi	r25, 0x03	; 3
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
     f5a:	82 e3       	ldi	r24, 0x32	; 50
     f5c:	90 e0       	ldi	r25, 0x00	; 0

00000f5e <outer_1792>:
     f5e:	a0 ed       	ldi	r26, 0xD0	; 208
     f60:	b7 e0       	ldi	r27, 0x07	; 7

00000f62 <inner_1792>:
     f62:	11 97       	sbiw	r26, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <inner_1792>
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	d1 f7       	brne	.-12     	; 0xf5e <outer_1792>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
     f6a:	80 91 c8 00 	lds	r24, 0x00C8
     f6e:	87 ff       	sbrs	r24, 7
     f70:	04 c0       	rjmp	.+8      	; 0xf7a <inner_1792+0x18>
			uart_rx(D_Stepper);
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 94 08 	call	0x1128	; 0x1128 <uart_rx>
		if (!strcmp(str_rx,"0#"))
     f7a:	c6 01       	movw	r24, r12
     f7c:	6f ec       	ldi	r22, 0xCF	; 207
     f7e:	73 e0       	ldi	r23, 0x03	; 3
     f80:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <strcmp>
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	09 f4       	brne	.+2      	; 0xf8a <inner_1792+0x28>
     f88:	b5 c0       	rjmp	.+362    	; 0x10f4 <inner_1905+0x6e>
			uart_put_string("0\r\n", D_RapidForm);
		else {
			lcd_puts("Fehlgeschlagen     \n");
     f8a:	82 ed       	ldi	r24, 0xD2	; 210
     f8c:	93 e0       	ldi	r25, 0x03	; 3
     f8e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			uart_put_string("1\r\n", D_RapidForm);
     f92:	83 e8       	ldi	r24, 0x83	; 131
     f94:	93 e0       	ldi	r25, 0x03	; 3
     f96:	b0 c0       	rjmp	.+352    	; 0x10f8 <inner_1905+0x72>
     f98:	8a e0       	ldi	r24, 0x0A	; 10
     f9a:	90 e0       	ldi	r25, 0x00	; 0

00000f9c <outer_1821>:
     f9c:	a0 ed       	ldi	r26, 0xD0	; 208
     f9e:	b7 e0       	ldi	r27, 0x07	; 7

00000fa0 <inner_1821>:
     fa0:	11 97       	sbiw	r26, 0x01	; 1
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <inner_1821>
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	d1 f7       	brne	.-12     	; 0xf9c <outer_1821>
		}
		break;
	case 5:			// 5 - Gehe zu Position MX , +600
		ms_spin(10);
		char Position[33], Winkel[6];
		memset(Position, '\0', 33);
     fa8:	35 e1       	ldi	r19, 0x15	; 21
     faa:	e3 2e       	mov	r14, r19
     fac:	f1 2c       	mov	r15, r1
     fae:	ec 0e       	add	r14, r28
     fb0:	fd 1e       	adc	r15, r29
     fb2:	81 e2       	ldi	r24, 0x21	; 33
     fb4:	d7 01       	movw	r26, r14
     fb6:	1d 92       	st	X+, r1
     fb8:	8a 95       	dec	r24
     fba:	e9 f7       	brne	.-6      	; 0xfb6 <inner_1821+0x16>
		memset(Winkel, '\0', 6);
     fbc:	fe 01       	movw	r30, r28
     fbe:	31 96       	adiw	r30, 0x01	; 1
     fc0:	86 e0       	ldi	r24, 0x06	; 6
     fc2:	df 01       	movw	r26, r30
     fc4:	1d 92       	st	X+, r1
     fc6:	8a 95       	dec	r24
     fc8:	e9 f7       	brne	.-6      	; 0xfc4 <inner_1821+0x24>
		String_zerlegen_Isel(str_rx, Position, Winkel);
     fca:	c6 01       	movw	r24, r12
     fcc:	b7 01       	movw	r22, r14
     fce:	af 01       	movw	r20, r30
     fd0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String_zerlegen_Isel>
		char Move_To[40];
		memset(Move_To,  '\0', 40);
     fd4:	8e 01       	movw	r16, r28
     fd6:	0a 5c       	subi	r16, 0xCA	; 202
     fd8:	1f 4f       	sbci	r17, 0xFF	; 255
     fda:	88 e2       	ldi	r24, 0x28	; 40
     fdc:	f8 01       	movw	r30, r16
     fde:	11 92       	st	Z+, r1
     fe0:	8a 95       	dec	r24
     fe2:	e9 f7       	brne	.-6      	; 0xfde <inner_1821+0x3e>
		Move_To[0] = 'M';
     fe4:	8d e4       	ldi	r24, 0x4D	; 77
     fe6:	8e ab       	std	Y+54, r24	; 0x36
		Move_To[1] = 'A';
     fe8:	81 e4       	ldi	r24, 0x41	; 65
     fea:	8f ab       	std	Y+55, r24	; 0x37
		Move_To[2] = ' ';
     fec:	80 e2       	ldi	r24, 0x20	; 32
     fee:	88 af       	std	Y+56, r24	; 0x38
		Move_To[3] = '\0';
     ff0:	19 ae       	std	Y+57, r1	; 0x39
		strcat(Move_To, Position);
     ff2:	c8 01       	movw	r24, r16
     ff4:	b7 01       	movw	r22, r14
     ff6:	0e 94 66 0d 	call	0x1acc	; 0x1acc <strcat>
		strcat(Move_To, "\n");
     ffa:	c8 01       	movw	r24, r16
     ffc:	64 e8       	ldi	r22, 0x84	; 132
     ffe:	71 e0       	ldi	r23, 0x01	; 1
    1000:	0e 94 66 0d 	call	0x1acc	; 0x1acc <strcat>
		lcd_puts("Pos:");
    1004:	87 ee       	ldi	r24, 0xE7	; 231
    1006:	93 e0       	ldi	r25, 0x03	; 3
    1008:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(Move_To);
    100c:	c8 01       	movw	r24, r16
    100e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>

		uart_put_string(Move_To, D_Stepper);
    1012:	c8 01       	movw	r24, r16
    1014:	61 e0       	ldi	r22, 0x01	; 1
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
    101c:	02 e3       	ldi	r16, 0x32	; 50
    101e:	10 e0       	ldi	r17, 0x00	; 0
    1020:	f8 01       	movw	r30, r16

00001022 <outer_1867>:
    1022:	a0 ed       	ldi	r26, 0xD0	; 208
    1024:	b7 e0       	ldi	r27, 0x07	; 7

00001026 <inner_1867>:
    1026:	11 97       	sbiw	r26, 0x01	; 1
    1028:	f1 f7       	brne	.-4      	; 0x1026 <inner_1867>
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	d1 f7       	brne	.-12     	; 0x1022 <outer_1867>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    102e:	80 91 c8 00 	lds	r24, 0x00C8
    1032:	87 ff       	sbrs	r24, 7
    1034:	69 c0       	rjmp	.+210    	; 0x1108 <inner_1905+0x82>
			uart_rx(D_Stepper);
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 94 08 	call	0x1128	; 0x1128 <uart_rx>
		else {
			//lcd_puts("Befehl n. bestaetig\n");
			break;
		}

		uart_put_string("A\n", D_Stepper);
    103e:	8c ec       	ldi	r24, 0xCC	; 204
    1040:	93 e0       	ldi	r25, 0x03	; 3
    1042:	61 e0       	ldi	r22, 0x01	; 1
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
    104a:	f8 01       	movw	r30, r16

0000104c <outer_1881>:
    104c:	a0 ed       	ldi	r26, 0xD0	; 208
    104e:	b7 e0       	ldi	r27, 0x07	; 7

00001050 <inner_1881>:
    1050:	11 97       	sbiw	r26, 0x01	; 1
    1052:	f1 f7       	brne	.-4      	; 0x1050 <inner_1881>
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	d1 f7       	brne	.-12     	; 0x104c <outer_1881>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    1058:	80 91 c8 00 	lds	r24, 0x00C8
    105c:	87 ff       	sbrs	r24, 7
    105e:	05 c0       	rjmp	.+10     	; 0x106a <inner_1881+0x1a>
			uart_rx(D_Stepper);
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 94 08 	call	0x1128	; 0x1128 <uart_rx>
    1068:	2c c0       	rjmp	.+88     	; 0x10c2 <inner_1905+0x3c>
		else {
			lcd_puts("Keine Bewegung!\n");
    106a:	8c ee       	ldi	r24, 0xEC	; 236
    106c:	93 e0       	ldi	r25, 0x03	; 3
    106e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
    1072:	27 c0       	rjmp	.+78     	; 0x10c2 <inner_1905+0x3c>
		}

		while (!strcmp(str_rx,"1#")){
			uart_put_string("A\n", D_Stepper);
    1074:	8c ec       	ldi	r24, 0xCC	; 204
    1076:	93 e0       	ldi	r25, 0x03	; 3
    1078:	61 e0       	ldi	r22, 0x01	; 1
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
    1080:	f7 01       	movw	r30, r14

00001082 <outer_1905>:
    1082:	a0 ed       	ldi	r26, 0xD0	; 208
    1084:	b7 e0       	ldi	r27, 0x07	; 7

00001086 <inner_1905>:
    1086:	11 97       	sbiw	r26, 0x01	; 1
    1088:	f1 f7       	brne	.-4      	; 0x1086 <inner_1905>
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	d1 f7       	brne	.-12     	; 0x1082 <outer_1905>
			ms_spin(50);
			if ((UCSR1A & (1 << RXC1))){
    108e:	80 91 c8 00 	lds	r24, 0x00C8
    1092:	87 ff       	sbrs	r24, 7
    1094:	10 c0       	rjmp	.+32     	; 0x10b6 <inner_1905+0x30>
				uart_rx(D_Stepper);
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 94 08 	call	0x1128	; 0x1128 <uart_rx>
				lcd_clrscr();
    109e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
				lcd_puts("Gehe zu Winkel: ");
    10a2:	8d ef       	ldi	r24, 0xFD	; 253
    10a4:	93 e0       	ldi	r25, 0x03	; 3
    10a6:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
				lcd_puts(Winkel);
    10aa:	c8 01       	movw	r24, r16
    10ac:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
				lcd_puts("\n");
    10b0:	84 e8       	ldi	r24, 0x84	; 132
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <inner_1905+0x34>
			}
			else {
				lcd_puts("Keine Antwort\n");
    10b6:	8e e0       	ldi	r24, 0x0E	; 14
    10b8:	94 e0       	ldi	r25, 0x04	; 4
    10ba:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			}
			wdt_reset();
    10be:	a8 95       	wdr
    10c0:	06 c0       	rjmp	.+12     	; 0x10ce <inner_1905+0x48>
    10c2:	22 e3       	ldi	r18, 0x32	; 50
    10c4:	e2 2e       	mov	r14, r18
    10c6:	f1 2c       	mov	r15, r1
			ms_spin(50);
			if ((UCSR1A & (1 << RXC1))){
				uart_rx(D_Stepper);
				lcd_clrscr();
				lcd_puts("Gehe zu Winkel: ");
				lcd_puts(Winkel);
    10c8:	8e 01       	movw	r16, r28
    10ca:	0f 5f       	subi	r16, 0xFF	; 255
    10cc:	1f 4f       	sbci	r17, 0xFF	; 255
			uart_rx(D_Stepper);
		else {
			lcd_puts("Keine Bewegung!\n");
		}

		while (!strcmp(str_rx,"1#")){
    10ce:	c6 01       	movw	r24, r12
    10d0:	6d e1       	ldi	r22, 0x1D	; 29
    10d2:	74 e0       	ldi	r23, 0x04	; 4
    10d4:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <strcmp>
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	61 f2       	breq	.-104    	; 0x1074 <inner_1881+0x24>
			else {
				lcd_puts("Keine Antwort\n");
			}
			wdt_reset();
		}
		lcd_puts("Winkel: ");
    10dc:	80 e2       	ldi	r24, 0x20	; 32
    10de:	94 e0       	ldi	r25, 0x04	; 4
    10e0:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(Winkel);
    10e4:	ce 01       	movw	r24, r28
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(" Erreicht\n");
    10ec:	89 e2       	ldi	r24, 0x29	; 41
    10ee:	94 e0       	ldi	r25, 0x04	; 4
    10f0:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("0\r\n", D_RapidForm);
    10f4:	80 ea       	ldi	r24, 0xA0	; 160
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
    1100:	03 c0       	rjmp	.+6      	; 0x1108 <inner_1905+0x82>
		break;
	default:
		//lcd_puts("ISEL:    \n");
		lcd_puts(str_rx);
    1102:	c6 01       	movw	r24, r12
    1104:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	}
}
    1108:	c3 5a       	subi	r28, 0xA3	; 163
    110a:	df 4f       	sbci	r29, 0xFF	; 255
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	ff 90       	pop	r15
    1120:	ef 90       	pop	r14
    1122:	df 90       	pop	r13
    1124:	cf 90       	pop	r12
    1126:	08 95       	ret

00001128 <uart_rx>:
		break;
	default:
		return M_UNK;
	}
}
void 	uart_rx				(int dir) {
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	8c 01       	movw	r16, r24
	uart_get_string(str_rx, dir);
    112e:	88 e0       	ldi	r24, 0x08	; 8
    1130:	98 e0       	ldi	r25, 0x08	; 8
    1132:	b8 01       	movw	r22, r16
    1134:	0e 94 56 02 	call	0x4ac	; 0x4ac <uart_get_string>
	if (dir == D_Stepper)
    1138:	01 30       	cpi	r16, 0x01	; 1
    113a:	11 05       	cpc	r17, r1
    113c:	29 f4       	brne	.+10     	; 0x1148 <uart_rx+0x20>
		switch_Stepper(str_rx);
    113e:	88 e0       	ldi	r24, 0x08	; 8
    1140:	98 e0       	ldi	r25, 0x08	; 8
    1142:	0e 94 02 07 	call	0xe04	; 0xe04 <switch_Stepper>
    1146:	48 c0       	rjmp	.+144    	; 0x11d8 <uart_rx+0xb0>
	else{
		if(Initialized == M_UNK){
    1148:	80 91 1c 07 	lds	r24, 0x071C
    114c:	90 91 1d 07 	lds	r25, 0x071D
    1150:	8e 5f       	subi	r24, 0xFE	; 254
    1152:	9f 4f       	sbci	r25, 0xFF	; 255
    1154:	51 f4       	brne	.+20     	; 0x116a <uart_rx+0x42>
			lcd_puts("Unbekannter Motor!\n");
    1156:	84 e3       	ldi	r24, 0x34	; 52
    1158:	94 e0       	ldi	r25, 0x04	; 4
    115a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			//lcd_puts(str_rx);
			Initialized = M_NOTI;
    115e:	8f ef       	ldi	r24, 0xFF	; 255
    1160:	9f ef       	ldi	r25, 0xFF	; 255
    1162:	90 93 1d 07 	sts	0x071D, r25
    1166:	80 93 1c 07 	sts	0x071C, r24
		}
		if(Initialized == M_NOTI){
    116a:	80 91 1c 07 	lds	r24, 0x071C
    116e:	90 91 1d 07 	lds	r25, 0x071D
    1172:	8f 5f       	subi	r24, 0xFF	; 255
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	41 f4       	brne	.+16     	; 0x1188 <uart_rx+0x60>
			Initialized = switch_Motor(str_rx);
    1178:	88 e0       	ldi	r24, 0x08	; 8
    117a:	98 e0       	ldi	r25, 0x08	; 8
    117c:	0e 94 a8 05 	call	0xb50	; 0xb50 <switch_Motor>
    1180:	90 93 1d 07 	sts	0x071D, r25
    1184:	80 93 1c 07 	sts	0x071C, r24
		}
		if(Initialized == M_ISEL)
    1188:	80 91 1c 07 	lds	r24, 0x071C
    118c:	90 91 1d 07 	lds	r25, 0x071D
    1190:	89 2b       	or	r24, r25
    1192:	21 f4       	brne	.+8      	; 0x119c <uart_rx+0x74>
			switch_Isel(str_rx);
    1194:	88 e0       	ldi	r24, 0x08	; 8
    1196:	98 e0       	ldi	r25, 0x08	; 8
    1198:	0e 94 52 07 	call	0xea4	; 0xea4 <switch_Isel>
		if(Initialized == M_CSG)
    119c:	80 91 1c 07 	lds	r24, 0x071C
    11a0:	90 91 1d 07 	lds	r25, 0x071D
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	21 f4       	brne	.+8      	; 0x11b0 <uart_rx+0x88>
			switch_csg(str_rx);
    11a8:	88 e0       	ldi	r24, 0x08	; 8
    11aa:	98 e0       	ldi	r25, 0x08	; 8
    11ac:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <switch_csg>
		if(Initialized == M_ZETA)
    11b0:	80 91 1c 07 	lds	r24, 0x071C
    11b4:	90 91 1d 07 	lds	r25, 0x071D
    11b8:	02 97       	sbiw	r24, 0x02	; 2
    11ba:	21 f4       	brne	.+8      	; 0x11c4 <uart_rx+0x9c>
			switch_Zeta(str_rx);
    11bc:	88 e0       	ldi	r24, 0x08	; 8
    11be:	98 e0       	ldi	r25, 0x08	; 8
    11c0:	0e 94 1a 09 	call	0x1234	; 0x1234 <switch_Zeta>
		if(Initialized == M_TERMINAL)
    11c4:	80 91 1c 07 	lds	r24, 0x071C
    11c8:	90 91 1d 07 	lds	r25, 0x071D
    11cc:	03 97       	sbiw	r24, 0x03	; 3
    11ce:	21 f4       	brne	.+8      	; 0x11d8 <uart_rx+0xb0>
			switch_Terminal(str_rx);
    11d0:	88 e0       	ldi	r24, 0x08	; 8
    11d2:	98 e0       	ldi	r25, 0x08	; 8
    11d4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <switch_Terminal>
	}
}
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	08 95       	ret

000011de <menu_puts>:
	lcd_puts("Selected: ");
	lcd_puts(name);

	ms_spin(750);
}
void 	menu_puts			(void *arg, char *name) {
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	8c 01       	movw	r16, r24
	//my_select(arg, name);
	uart_put_string(arg, D_Stepper);
    11e4:	61 e0       	ldi	r22, 0x01	; 1
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
	lcd_clrscr();
    11ec:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
	lcd_puts("Send: ");
    11f0:	88 e4       	ldi	r24, 0x48	; 72
    11f2:	94 e0       	ldi	r25, 0x04	; 4
    11f4:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(arg);
    11f8:	c8 01       	movw	r24, r16
    11fa:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("\n");
    11fe:	84 e8       	ldi	r24, 0x84	; 132
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
    1206:	84 e6       	ldi	r24, 0x64	; 100
    1208:	90 e0       	ldi	r25, 0x00	; 0

0000120a <outer_2088>:
    120a:	a0 ed       	ldi	r26, 0xD0	; 208
    120c:	b7 e0       	ldi	r27, 0x07	; 7

0000120e <inner_2088>:
    120e:	11 97       	sbiw	r26, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <inner_2088>
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	d1 f7       	brne	.-12     	; 0x120a <outer_2088>
	ms_spin(100);
	//if ((UCSR1A & (1 << RXC1)))
	uart_rx(D_Stepper);
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 94 08 	call	0x1128	; 0x1128 <uart_rx>
    121e:	88 ee       	ldi	r24, 0xE8	; 232
    1220:	93 e0       	ldi	r25, 0x03	; 3

00001222 <outer_2096>:
    1222:	a0 ed       	ldi	r26, 0xD0	; 208
    1224:	b7 e0       	ldi	r27, 0x07	; 7

00001226 <inner_2096>:
    1226:	11 97       	sbiw	r26, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <inner_2096>
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	d1 f7       	brne	.-12     	; 0x1222 <outer_2096>
	ms_spin(1000);
}
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	08 95       	ret

00001234 <switch_Zeta>:
		lcd_puts("U_B: ");
		lcd_puts(str_rx);
		lcd_puts("!END       \n");
	}
}
void 	switch_Zeta			(char * str_rx) {
    1234:	af 92       	push	r10
    1236:	bf 92       	push	r11
    1238:	cf 92       	push	r12
    123a:	df 92       	push	r13
    123c:	ef 92       	push	r14
    123e:	ff 92       	push	r15
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	c3 56       	subi	r28, 0x63	; 99
    124e:	d0 40       	sbci	r29, 0x00	; 0
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	7c 01       	movw	r14, r24
			"D1125",// 7 - Position
			"A8", 	// 8 - Accelartion 8
			"V8",	// 9 - Velocity 8
			"ECHO0",// 10 - Echo abschalten
			"PSET0",// 11 - Ursprung setzen
			0 };
    125c:	de 01       	movw	r26, r28
    125e:	11 96       	adiw	r26, 0x01	; 1
    1260:	eb e8       	ldi	r30, 0x8B	; 139
    1262:	f7 e0       	ldi	r31, 0x07	; 7
    1264:	8a e1       	ldi	r24, 0x1A	; 26
    1266:	01 90       	ld	r0, Z+
    1268:	0d 92       	st	X+, r0
    126a:	81 50       	subi	r24, 0x01	; 1
    126c:	e1 f7       	brne	.-8      	; 0x1266 <switch_Zeta+0x32>
	char Position[33];
	char Move_To[40];
	memset(Move_To,  '\0', 40);
    126e:	8e 01       	movw	r16, r28
    1270:	04 5c       	subi	r16, 0xC4	; 196
    1272:	1f 4f       	sbci	r17, 0xFF	; 255
    1274:	88 e2       	ldi	r24, 0x28	; 40
    1276:	d8 01       	movw	r26, r16
    1278:	1d 92       	st	X+, r1
    127a:	8a 95       	dec	r24
    127c:	e9 f7       	brne	.-6      	; 0x1278 <switch_Zeta+0x44>
	Move_To[0] = 'M';
    127e:	8d e4       	ldi	r24, 0x4D	; 77
    1280:	8c af       	std	Y+60, r24	; 0x3c
	Move_To[1] = 'A';
    1282:	81 e4       	ldi	r24, 0x41	; 65
    1284:	8d af       	std	Y+61, r24	; 0x3d
	Move_To[2] = ' ';
    1286:	80 e2       	ldi	r24, 0x20	; 32
    1288:	8e af       	std	Y+62, r24	; 0x3e
	Move_To[3] = '\0';
    128a:	1f ae       	std	Y+63, r1	; 0x3f
	switch (FindStringInArray(str_rx, pOptions, 1)) {
    128c:	c7 01       	movw	r24, r14
    128e:	be 01       	movw	r22, r28
    1290:	6f 5f       	subi	r22, 0xFF	; 255
    1292:	7f 4f       	sbci	r23, 0xFF	; 255
    1294:	41 e0       	ldi	r20, 0x01	; 1
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	0e 94 7f 05 	call	0xafe	; 0xafe <FindStringInArray>
    129c:	87 30       	cpi	r24, 0x07	; 7
    129e:	91 05       	cpc	r25, r1
    12a0:	6c f4       	brge	.+26     	; 0x12bc <switch_Zeta+0x88>
    12a2:	83 30       	cpi	r24, 0x03	; 3
    12a4:	91 05       	cpc	r25, r1
    12a6:	0c f0       	brlt	.+2      	; 0x12aa <switch_Zeta+0x76>
    12a8:	f5 c0       	rjmp	.+490    	; 0x1494 <inner_2303+0xb0>
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	91 05       	cpc	r25, r1
    12ae:	01 f1       	breq	.+64     	; 0x12f0 <switch_Zeta+0xbc>
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	91 05       	cpc	r25, r1
    12b4:	04 f5       	brge	.+64     	; 0x12f6 <switch_Zeta+0xc2>
    12b6:	89 2b       	or	r24, r25
    12b8:	c1 f0       	breq	.+48     	; 0x12ea <switch_Zeta+0xb6>
    12ba:	e1 c0       	rjmp	.+450    	; 0x147e <inner_2303+0x9a>
    12bc:	89 30       	cpi	r24, 0x09	; 9
    12be:	91 05       	cpc	r25, r1
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <switch_Zeta+0x90>
    12c2:	d7 c0       	rjmp	.+430    	; 0x1472 <inner_2303+0x8e>
    12c4:	8a 30       	cpi	r24, 0x0A	; 10
    12c6:	91 05       	cpc	r25, r1
    12c8:	44 f4       	brge	.+16     	; 0x12da <switch_Zeta+0xa6>
    12ca:	87 30       	cpi	r24, 0x07	; 7
    12cc:	91 05       	cpc	r25, r1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <switch_Zeta+0x9e>
    12d0:	c5 c0       	rjmp	.+394    	; 0x145c <inner_2303+0x78>
    12d2:	08 97       	sbiw	r24, 0x08	; 8
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <switch_Zeta+0xa4>
    12d6:	d3 c0       	rjmp	.+422    	; 0x147e <inner_2303+0x9a>
    12d8:	dd c0       	rjmp	.+442    	; 0x1494 <inner_2303+0xb0>
    12da:	8a 30       	cpi	r24, 0x0A	; 10
    12dc:	91 05       	cpc	r25, r1
    12de:	09 f4       	brne	.+2      	; 0x12e2 <switch_Zeta+0xae>
    12e0:	cb c0       	rjmp	.+406    	; 0x1478 <inner_2303+0x94>
    12e2:	0b 97       	sbiw	r24, 0x0b	; 11
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <switch_Zeta+0xb4>
    12e6:	cb c0       	rjmp	.+406    	; 0x147e <inner_2303+0x9a>
    12e8:	d5 c0       	rjmp	.+426    	; 0x1494 <inner_2303+0xb0>
	case 0: // Display l�schen
		lcd_clrscr();
    12ea:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
    12ee:	d2 c0       	rjmp	.+420    	; 0x1494 <inner_2303+0xb0>
		break;
	case 1: // Interner Test
		lcd_puts("Test bestanden     \n");
    12f0:	81 ec       	ldi	r24, 0xC1	; 193
    12f2:	92 e0       	ldi	r25, 0x02	; 2
    12f4:	cd c0       	rjmp	.+410    	; 0x1490 <inner_2303+0xac>
    12f6:	84 e6       	ldi	r24, 0x64	; 100
    12f8:	90 e0       	ldi	r25, 0x00	; 0

000012fa <outer_2209>:
    12fa:	a0 ed       	ldi	r26, 0xD0	; 208
    12fc:	b7 e0       	ldi	r27, 0x07	; 7

000012fe <inner_2209>:
    12fe:	11 97       	sbiw	r26, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <inner_2209>
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	d1 f7       	brne	.-12     	; 0x12fa <outer_2209>
		break;
	case 2: // Go
		ms_spin(100);
		strcat(Move_To, Position);
    1306:	c8 01       	movw	r24, r16
    1308:	be 01       	movw	r22, r28
    130a:	65 5e       	subi	r22, 0xE5	; 229
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	0e 94 66 0d 	call	0x1acc	; 0x1acc <strcat>
		strcat(Move_To, "\n");
    1312:	c8 01       	movw	r24, r16
    1314:	64 e8       	ldi	r22, 0x84	; 132
    1316:	71 e0       	ldi	r23, 0x01	; 1
    1318:	0e 94 66 0d 	call	0x1acc	; 0x1acc <strcat>
		//lcd_puts("Pos:");
		//lcd_puts(Move_To);

		uart_put_string(Move_To, D_Stepper);
    131c:	c8 01       	movw	r24, r16
    131e:	61 e0       	ldi	r22, 0x01	; 1
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
    1326:	02 e3       	ldi	r16, 0x32	; 50
    1328:	10 e0       	ldi	r17, 0x00	; 0
    132a:	f8 01       	movw	r30, r16

0000132c <outer_2226>:
    132c:	a0 ed       	ldi	r26, 0xD0	; 208
    132e:	b7 e0       	ldi	r27, 0x07	; 7

00001330 <inner_2226>:
    1330:	11 97       	sbiw	r26, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <inner_2226>
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	d1 f7       	brne	.-12     	; 0x132c <outer_2226>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    1338:	80 91 c8 00 	lds	r24, 0x00C8
    133c:	87 ff       	sbrs	r24, 7
    133e:	16 c0       	rjmp	.+44     	; 0x136c <inner_2240+0x12>
			uart_rx(D_Stepper);
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 94 94 08 	call	0x1128	; 0x1128 <uart_rx>
		else {
			lcd_puts("Befehl n. bestaetig\n");
			break;
		}

		uart_put_string("A\n", D_Stepper);
    1348:	8c ec       	ldi	r24, 0xCC	; 204
    134a:	93 e0       	ldi	r25, 0x03	; 3
    134c:	61 e0       	ldi	r22, 0x01	; 1
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
    1354:	f8 01       	movw	r30, r16

00001356 <outer_2240>:
    1356:	a0 ed       	ldi	r26, 0xD0	; 208
    1358:	b7 e0       	ldi	r27, 0x07	; 7

0000135a <inner_2240>:
    135a:	11 97       	sbiw	r26, 0x01	; 1
    135c:	f1 f7       	brne	.-4      	; 0x135a <inner_2240>
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	d1 f7       	brne	.-12     	; 0x1356 <outer_2240>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    1362:	80 91 c8 00 	lds	r24, 0x00C8
    1366:	88 23       	and	r24, r24
    1368:	4c f4       	brge	.+18     	; 0x137c <inner_2240+0x22>
    136a:	03 c0       	rjmp	.+6      	; 0x1372 <inner_2240+0x18>
		uart_put_string(Move_To, D_Stepper);
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
			uart_rx(D_Stepper);
		else {
			lcd_puts("Befehl n. bestaetig\n");
    136c:	8f e4       	ldi	r24, 0x4F	; 79
    136e:	94 e0       	ldi	r25, 0x04	; 4
    1370:	8f c0       	rjmp	.+286    	; 0x1490 <inner_2303+0xac>
		}

		uart_put_string("A\n", D_Stepper);
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
			uart_rx(D_Stepper);
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 94 08 	call	0x1128	; 0x1128 <uart_rx>
    137a:	4c c0       	rjmp	.+152    	; 0x1414 <inner_2303+0x30>
		else {
			lcd_puts("Keine Bewegung!\n");
    137c:	8c ee       	ldi	r24, 0xEC	; 236
    137e:	93 e0       	ldi	r25, 0x03	; 3
    1380:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
    1384:	47 c0       	rjmp	.+142    	; 0x1414 <inner_2303+0x30>
		}

		while (!strcmp(str_rx,"1#")){
			uart_put_string("W\n", D_Stepper);
    1386:	84 e6       	ldi	r24, 0x64	; 100
    1388:	94 e0       	ldi	r25, 0x04	; 4
    138a:	61 e0       	ldi	r22, 0x01	; 1
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
    1392:	f5 01       	movw	r30, r10

00001394 <outer_2274>:
    1394:	a0 ed       	ldi	r26, 0xD0	; 208
    1396:	b7 e0       	ldi	r27, 0x07	; 7

00001398 <inner_2274>:
    1398:	11 97       	sbiw	r26, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <inner_2274>
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	d1 f7       	brne	.-12     	; 0x1394 <outer_2274>
			ms_spin(100);
			if ((UCSR1A & (1 << RXC1))){
    13a0:	80 91 c8 00 	lds	r24, 0x00C8
    13a4:	87 ff       	sbrs	r24, 7
    13a6:	10 c0       	rjmp	.+32     	; 0x13c8 <inner_2274+0x30>
				uart_rx(D_Stepper);
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 94 08 	call	0x1128	; 0x1128 <uart_rx>
				lcd_clrscr();
    13b0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
				lcd_puts("Position(Akt/Ges): \n");
    13b4:	87 e6       	ldi	r24, 0x67	; 103
    13b6:	94 e0       	ldi	r25, 0x04	; 4
    13b8:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
				lcd_puts(str_rx);
    13bc:	c7 01       	movw	r24, r14
    13be:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
				lcd_puts(" / ");
    13c2:	8c e7       	ldi	r24, 0x7C	; 124
    13c4:	94 e0       	ldi	r25, 0x04	; 4
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <inner_2274+0x34>
			}
			else {
				lcd_puts("Keine Antwort\n");
    13c8:	8e e0       	ldi	r24, 0x0E	; 14
    13ca:	94 e0       	ldi	r25, 0x04	; 4
    13cc:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			}
			wdt_reset();
    13d0:	a8 95       	wdr

			uart_put_string("A\n", D_Stepper);
    13d2:	8c ec       	ldi	r24, 0xCC	; 204
    13d4:	93 e0       	ldi	r25, 0x03	; 3
    13d6:	61 e0       	ldi	r22, 0x01	; 1
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
    13de:	f6 01       	movw	r30, r12

000013e0 <outer_2303>:
    13e0:	a0 ed       	ldi	r26, 0xD0	; 208
    13e2:	b7 e0       	ldi	r27, 0x07	; 7

000013e4 <inner_2303>:
    13e4:	11 97       	sbiw	r26, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <inner_2303>
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	d1 f7       	brne	.-12     	; 0x13e0 <outer_2303>
			ms_spin(50);
			if ((UCSR1A & (1 << RXC1))){
    13ec:	80 91 c8 00 	lds	r24, 0x00C8
    13f0:	87 ff       	sbrs	r24, 7
    13f2:	0a c0       	rjmp	.+20     	; 0x1408 <inner_2303+0x24>
				uart_rx(D_Stepper);
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 94 08 	call	0x1128	; 0x1128 <uart_rx>
				//lcd_clrscr();
				//lcd_puts("running to\n");
				//lcd_puts("Position: ");
				lcd_puts(Position);
    13fc:	c8 01       	movw	r24, r16
    13fe:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
				lcd_puts("\n");
    1402:	84 e8       	ldi	r24, 0x84	; 132
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	02 c0       	rjmp	.+4      	; 0x140c <inner_2303+0x28>
			}
			else {
				lcd_puts("Keine Antwort\n");
    1408:	8e e0       	ldi	r24, 0x0E	; 14
    140a:	94 e0       	ldi	r25, 0x04	; 4
    140c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			}
			wdt_reset();
    1410:	a8 95       	wdr
    1412:	09 c0       	rjmp	.+18     	; 0x1426 <inner_2303+0x42>
    1414:	54 e6       	ldi	r21, 0x64	; 100
    1416:	a5 2e       	mov	r10, r21
    1418:	b1 2c       	mov	r11, r1
    141a:	42 e3       	ldi	r20, 0x32	; 50
    141c:	c4 2e       	mov	r12, r20
    141e:	d1 2c       	mov	r13, r1
			if ((UCSR1A & (1 << RXC1))){
				uart_rx(D_Stepper);
				//lcd_clrscr();
				//lcd_puts("running to\n");
				//lcd_puts("Position: ");
				lcd_puts(Position);
    1420:	8e 01       	movw	r16, r28
    1422:	05 5e       	subi	r16, 0xE5	; 229
    1424:	1f 4f       	sbci	r17, 0xFF	; 255
			uart_rx(D_Stepper);
		else {
			lcd_puts("Keine Bewegung!\n");
		}

		while (!strcmp(str_rx,"1#")){
    1426:	c7 01       	movw	r24, r14
    1428:	6d e1       	ldi	r22, 0x1D	; 29
    142a:	74 e0       	ldi	r23, 0x04	; 4
    142c:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <strcmp>
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	09 f4       	brne	.+2      	; 0x1436 <inner_2303+0x52>
    1434:	a8 cf       	rjmp	.-176    	; 0x1386 <inner_2240+0x2c>
			else {
				lcd_puts("Keine Antwort\n");
			}
			wdt_reset();
		}
		lcd_puts("Position: \n");
    1436:	80 e8       	ldi	r24, 0x80	; 128
    1438:	94 e0       	ldi	r25, 0x04	; 4
    143a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(Position);
    143e:	ce 01       	movw	r24, r28
    1440:	4b 96       	adiw	r24, 0x1b	; 27
    1442:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(" Erreicht\n");
    1446:	89 e2       	ldi	r24, 0x29	; 41
    1448:	94 e0       	ldi	r25, 0x04	; 4
    144a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string(B_Zeta_Return, D_RapidForm);
    144e:	8c e8       	ldi	r24, 0x8C	; 140
    1450:	94 e0       	ldi	r25, 0x04	; 4
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	0e 94 2b 02 	call	0x456	; 0x456 <uart_put_string>
    145a:	1c c0       	rjmp	.+56     	; 0x1494 <inner_2303+0xb0>
		break;
	case 6:
		//lcd_puts("MA1 empfangen     \n");
		break;
	case 7: // Position Setzen
		memset(Position, '\0', 33);			// Array mit Nullen bef�llen
    145c:	fe 01       	movw	r30, r28
    145e:	7b 96       	adiw	r30, 0x1b	; 27
    1460:	81 e2       	ldi	r24, 0x21	; 33
    1462:	df 01       	movw	r26, r30
    1464:	1d 92       	st	X+, r1
    1466:	8a 95       	dec	r24
    1468:	e9 f7       	brne	.-6      	; 0x1464 <inner_2303+0x80>
		Position_Zeta(Position);
    146a:	cf 01       	movw	r24, r30
    146c:	0e 94 c1 04 	call	0x982	; 0x982 <Position_Zeta>
    1470:	11 c0       	rjmp	.+34     	; 0x1494 <inner_2303+0xb0>
		break;
	case 8:
		break;
	case 9:		//V8
		lcd_puts("Speed set          \n");
    1472:	8d e9       	ldi	r24, 0x9D	; 157
    1474:	94 e0       	ldi	r25, 0x04	; 4
    1476:	0c c0       	rjmp	.+24     	; 0x1490 <inner_2303+0xac>
		//uart_put_string(B_Zeta_Return, D_RapidForm);
		break;
	case 10:
		lcd_puts("Echo off           \n");
    1478:	82 eb       	ldi	r24, 0xB2	; 178
    147a:	94 e0       	ldi	r25, 0x04	; 4
    147c:	09 c0       	rjmp	.+18     	; 0x1490 <inner_2303+0xac>
		//uart_put_string("ECHO0\r", D_RapidForm);
		break;
	case 11:
		break;
	default:
		lcd_puts("Z:");
    147e:	87 ec       	ldi	r24, 0xC7	; 199
    1480:	94 e0       	ldi	r25, 0x04	; 4
    1482:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(str_rx);
    1486:	c7 01       	movw	r24, r14
    1488:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts("   \n");
    148c:	8a ec       	ldi	r24, 0xCA	; 202
    148e:	94 e0       	ldi	r25, 0x04	; 4
    1490:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		//Initialized = switch_Inputs(str_rx);
	}
}
    1494:	cd 59       	subi	r28, 0x9D	; 157
    1496:	df 4f       	sbci	r29, 0xFF	; 255
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	ff 90       	pop	r15
    14ac:	ef 90       	pop	r14
    14ae:	df 90       	pop	r13
    14b0:	cf 90       	pop	r12
    14b2:	bf 90       	pop	r11
    14b4:	af 90       	pop	r10
    14b6:	08 95       	ret

000014b8 <main>:
//
//      Hauptschleife
//
//////////////////////////////
int main(void) {
	init();
    14b8:	0e 94 a2 04 	call	0x944	; 0x944 <init>
	while (1) {
		wdt_reset();
    14bc:	a8 95       	wdr
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14be:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    14c0:	90 91 6c 08 	lds	r25, 0x086C
    14c4:	91 70       	andi	r25, 0x01	; 1
  key_press ^= key_mask;                          // clear key(s)
    14c6:	80 91 6c 08 	lds	r24, 0x086C
    14ca:	89 27       	eor	r24, r25
    14cc:	80 93 6c 08 	sts	0x086C, r24
  sei();
    14d0:	78 94       	sei
		if (get_key_press(1 << KEY0) || get_key_rpt(1 << KEY0)){
    14d2:	99 23       	and	r25, r25
    14d4:	61 f4       	brne	.+24     	; 0x14ee <main+0x36>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14d6:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    14d8:	90 91 07 08 	lds	r25, 0x0807
    14dc:	91 70       	andi	r25, 0x01	; 1
  key_rpt ^= key_mask;                            // clear key(s)
    14de:	80 91 07 08 	lds	r24, 0x0807
    14e2:	89 27       	eor	r24, r25
    14e4:	80 93 07 08 	sts	0x0807, r24
  sei();
    14e8:	78 94       	sei
    14ea:	99 23       	and	r25, r25
    14ec:	51 f0       	breq	.+20     	; 0x1502 <main+0x4a>
			lcd_puts("Betrete Menue!\n");
    14ee:	8f ec       	ldi	r24, 0xCF	; 207
    14f0:	94 e0       	ldi	r25, 0x04	; 4
    14f2:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			menu_enter(&menu_context, &menu_main);
    14f6:	86 e1       	ldi	r24, 0x16	; 22
    14f8:	97 e0       	ldi	r25, 0x07	; 7
    14fa:	69 ec       	ldi	r22, 0xC9	; 201
    14fc:	76 e0       	ldi	r23, 0x06	; 6
    14fe:	0e 94 83 0b 	call	0x1706	; 0x1706 <menu_enter>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1502:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1504:	90 91 6c 08 	lds	r25, 0x086C
    1508:	92 70       	andi	r25, 0x02	; 2
  key_press ^= key_mask;                          // clear key(s)
    150a:	80 91 6c 08 	lds	r24, 0x086C
    150e:	89 27       	eor	r24, r25
    1510:	80 93 6c 08 	sts	0x086C, r24
  sei();
    1514:	78 94       	sei
		}
		if (get_key_press(1 << KEY1))
    1516:	99 23       	and	r25, r25
    1518:	21 f0       	breq	.+8      	; 0x1522 <main+0x6a>
			menu_exit(&menu_context); 	// 1 - Back
    151a:	86 e1       	ldi	r24, 0x16	; 22
    151c:	97 e0       	ldi	r25, 0x07	; 7
    151e:	0e 94 91 0b 	call	0x1722	; 0x1722 <menu_exit>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1522:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1524:	90 91 6c 08 	lds	r25, 0x086C
    1528:	94 70       	andi	r25, 0x04	; 4
  key_press ^= key_mask;                          // clear key(s)
    152a:	80 91 6c 08 	lds	r24, 0x086C
    152e:	89 27       	eor	r24, r25
    1530:	80 93 6c 08 	sts	0x086C, r24
  sei();
    1534:	78 94       	sei
		if( get_key_press( 1<<KEY2 ))
    1536:	99 23       	and	r25, r25
    1538:	21 f0       	breq	.+8      	; 0x1542 <main+0x8a>
			menu_prev_entry(&menu_context);
    153a:	86 e1       	ldi	r24, 0x16	; 22
    153c:	97 e0       	ldi	r25, 0x07	; 7
    153e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <menu_prev_entry>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1542:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1544:	90 91 6c 08 	lds	r25, 0x086C
    1548:	98 70       	andi	r25, 0x08	; 8
  key_press ^= key_mask;                          // clear key(s)
    154a:	80 91 6c 08 	lds	r24, 0x086C
    154e:	89 27       	eor	r24, r25
    1550:	80 93 6c 08 	sts	0x086C, r24
  sei();
    1554:	78 94       	sei
		if (get_key_press(1 << KEY3) || get_key_rpt(1 << KEY3))
    1556:	99 23       	and	r25, r25
    1558:	61 f4       	brne	.+24     	; 0x1572 <main+0xba>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    155a:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    155c:	90 91 07 08 	lds	r25, 0x0807
    1560:	98 70       	andi	r25, 0x08	; 8
  key_rpt ^= key_mask;                            // clear key(s)
    1562:	80 91 07 08 	lds	r24, 0x0807
    1566:	89 27       	eor	r24, r25
    1568:	80 93 07 08 	sts	0x0807, r24
  sei();
    156c:	78 94       	sei
    156e:	99 23       	and	r25, r25
    1570:	21 f0       	breq	.+8      	; 0x157a <main+0xc2>
			menu_next_entry(&menu_context);
    1572:	86 e1       	ldi	r24, 0x16	; 22
    1574:	97 e0       	ldi	r25, 0x07	; 7
    1576:	0e 94 cb 0b 	call	0x1796	; 0x1796 <menu_next_entry>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    157a:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    157c:	90 91 6c 08 	lds	r25, 0x086C
    1580:	90 71       	andi	r25, 0x10	; 16
  key_press ^= key_mask;                          // clear key(s)
    1582:	80 91 6c 08 	lds	r24, 0x086C
    1586:	89 27       	eor	r24, r25
    1588:	80 93 6c 08 	sts	0x086C, r24
  sei();
    158c:	78 94       	sei
		if (get_key_press(1 << KEY4) || get_key_rpt(1 << KEY4))
    158e:	99 23       	and	r25, r25
    1590:	61 f4       	brne	.+24     	; 0x15aa <main+0xf2>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1592:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    1594:	90 91 07 08 	lds	r25, 0x0807
    1598:	90 71       	andi	r25, 0x10	; 16
  key_rpt ^= key_mask;                            // clear key(s)
    159a:	80 91 07 08 	lds	r24, 0x0807
    159e:	89 27       	eor	r24, r25
    15a0:	80 93 07 08 	sts	0x0807, r24
  sei();
    15a4:	78 94       	sei
    15a6:	99 23       	and	r25, r25
    15a8:	21 f0       	breq	.+8      	; 0x15b2 <main+0xfa>
			menu_select(&menu_context); // 4 - Select
    15aa:	86 e1       	ldi	r24, 0x16	; 22
    15ac:	97 e0       	ldi	r25, 0x07	; 7
    15ae:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <menu_select>
		if ((UCSR0A & (1 << RXC0))){
    15b2:	80 91 c0 00 	lds	r24, 0x00C0
    15b6:	87 ff       	sbrs	r24, 7
    15b8:	07 c0       	rjmp	.+14     	; 0x15c8 <main+0x110>
			LED_PORT &= ( 1 << LED2 );
    15ba:	85 b1       	in	r24, 0x05	; 5
    15bc:	84 70       	andi	r24, 0x04	; 4
    15be:	85 b9       	out	0x05, r24	; 5
			uart_rx(D_RapidForm);
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 94 08 	call	0x1128	; 0x1128 <uart_rx>
		}
		if ((UCSR1A & (1 << RXC1))){
    15c8:	80 91 c8 00 	lds	r24, 0x00C8
    15cc:	87 ff       	sbrs	r24, 7
    15ce:	76 cf       	rjmp	.-276    	; 0x14bc <main+0x4>
			LED_PORT &= ( 1 << LED3 );
    15d0:	85 b1       	in	r24, 0x05	; 5
    15d2:	88 70       	andi	r24, 0x08	; 8
    15d4:	85 b9       	out	0x05, r24	; 5
			uart_rx(D_Stepper);
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 94 08 	call	0x1128	; 0x1128 <uart_rx>
    15de:	6e cf       	rjmp	.-292    	; 0x14bc <main+0x4>

000015e0 <menu_display>:
/*
 * Display the current menu in the context
 */
 
void menu_display(menu_context_t *context)
{
    15e0:	9f 92       	push	r9
    15e2:	af 92       	push	r10
    15e4:	bf 92       	push	r11
    15e6:	cf 92       	push	r12
    15e8:	df 92       	push	r13
    15ea:	ef 92       	push	r14
    15ec:	ff 92       	push	r15
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	7c 01       	movw	r14, r24
	uint8_t i;
	menu_t *menu = context->menu;
    15f8:	fc 01       	movw	r30, r24
    15fa:	c4 80       	ldd	r12, Z+4	; 0x04
    15fc:	d5 80       	ldd	r13, Z+5	; 0x05
    15fe:	bb 24       	eor	r11, r11
    1600:	99 24       	eor	r9, r9
    1602:	52 c0       	rjmp	.+164    	; 0x16a8 <menu_display+0xc8>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    1604:	e9 2d       	mov	r30, r9
    1606:	f0 e0       	ldi	r31, 0x00	; 0
			if (dindex++ >= menu->num_entries - menu->top_entry)
    1608:	e2 17       	cp	r30, r18
    160a:	f3 07       	cpc	r31, r19
    160c:	0c f0       	brlt	.+2      	; 0x1610 <menu_display+0x30>
    160e:	6b c0       	rjmp	.+214    	; 0x16e6 <menu_display+0x106>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    1610:	8f 01       	movw	r16, r30
    1612:	04 0f       	add	r16, r20
    1614:	15 1f       	adc	r17, r21
			if (dindex++ >= menu->num_entries - menu->top_entry)
    1616:	93 94       	inc	r9
				goto entries_done;
		} while (disp_entry->flags & MENU_FLAG_HIDDEN);
    1618:	f8 01       	movw	r30, r16
    161a:	ee 0f       	add	r30, r30
    161c:	ff 1f       	adc	r31, r31
    161e:	e0 0f       	add	r30, r16
    1620:	f1 1f       	adc	r31, r17
    1622:	63 e0       	ldi	r22, 0x03	; 3
    1624:	ee 0f       	add	r30, r30
    1626:	ff 1f       	adc	r31, r31
    1628:	6a 95       	dec	r22
    162a:	e1 f7       	brne	.-8      	; 0x1624 <menu_display+0x44>
    162c:	ec 0d       	add	r30, r12
    162e:	fd 1d       	adc	r31, r13
    1630:	85 81       	ldd	r24, Z+5	; 0x05
    1632:	81 fd       	sbrc	r24, 1
    1634:	e7 cf       	rjmp	.-50     	; 0x1604 <menu_display+0x24>
			return;
#endif

		// Go to correct x,y locations and print the entry

		menu_set_pos(context->x_loc, context->y_loc + i);
    1636:	f7 01       	movw	r30, r14
    1638:	61 81       	ldd	r22, Z+1	; 0x01
    163a:	6b 0d       	add	r22, r11
    163c:	80 81       	ld	r24, Z
    163e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_gotoxy>
	if (selected)
		menu_set_inverse();
#else
	// No inverse; do workaround

	max_width--;
    1642:	f7 01       	movw	r30, r14
    1644:	a3 80       	ldd	r10, Z+3	; 0x03
    1646:	aa 94       	dec	r10
	if (selected) {
    1648:	f6 01       	movw	r30, r12
    164a:	21 81       	ldd	r18, Z+1	; 0x01
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	2f 5f       	subi	r18, 0xFF	; 255
    1650:	3f 4f       	sbci	r19, 0xFF	; 255
    1652:	80 81       	ld	r24, Z
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	89 0d       	add	r24, r9
    1658:	91 1d       	adc	r25, r1
    165a:	28 17       	cp	r18, r24
    165c:	39 07       	cpc	r19, r25
    165e:	11 f4       	brne	.+4      	; 0x1664 <menu_display+0x84>
		menu_putchar('*');
    1660:	8a e2       	ldi	r24, 0x2A	; 42
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <menu_display+0x86>
	} else {
		menu_putchar(' ');
    1664:	80 e2       	ldi	r24, 0x20	; 32
    1666:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
    166a:	e8 01       	movw	r28, r16
    166c:	cc 0f       	add	r28, r28
    166e:	dd 1f       	adc	r29, r29
    1670:	c0 0f       	add	r28, r16
    1672:	d1 1f       	adc	r29, r17
    1674:	21 96       	adiw	r28, 0x01	; 1
    1676:	83 e0       	ldi	r24, 0x03	; 3
    1678:	cc 0f       	add	r28, r28
    167a:	dd 1f       	adc	r29, r29
    167c:	8a 95       	dec	r24
    167e:	e1 f7       	brne	.-8      	; 0x1678 <menu_display+0x98>
    1680:	cc 0d       	add	r28, r12
    1682:	dd 1d       	adc	r29, r13
    1684:	10 e0       	ldi	r17, 0x00	; 0
    1686:	06 c0       	rjmp	.+12     	; 0x1694 <menu_display+0xb4>
	
	// Print the characters in the name; fill out to width with
	//  spaces (mainly for inverse)
	
	for (i = 0; i < max_width; i++) {
		if (!entry->name[i])
    1688:	89 91       	ld	r24, Y+
    168a:	88 23       	and	r24, r24
    168c:	31 f0       	breq	.+12     	; 0x169a <menu_display+0xba>
			break;
			
		menu_putchar(entry->name[i]);
    168e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
#endif		
	
	// Print the characters in the name; fill out to width with
	//  spaces (mainly for inverse)
	
	for (i = 0; i < max_width; i++) {
    1692:	1f 5f       	subi	r17, 0xFF	; 255
    1694:	1a 15       	cp	r17, r10
    1696:	c0 f3       	brcs	.-16     	; 0x1688 <menu_display+0xa8>
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <menu_display+0xc6>
			
		menu_putchar(entry->name[i]);
	}
	
	for (; i < max_width; i++)
		menu_putchar(' ');
    169a:	80 e2       	ldi	r24, 0x20	; 32
    169c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
			break;
			
		menu_putchar(entry->name[i]);
	}
	
	for (; i < max_width; i++)
    16a0:	1f 5f       	subi	r17, 0xFF	; 255
    16a2:	1a 15       	cp	r17, r10
    16a4:	d0 f3       	brcs	.-12     	; 0x169a <menu_display+0xba>
	menu_clear();
#endif

	// Display only those entries that will fit on the display

	for (i = 0; i < context->height; i++) {
    16a6:	b3 94       	inc	r11
    16a8:	f7 01       	movw	r30, r14
    16aa:	82 81       	ldd	r24, Z+2	; 0x02
    16ac:	b8 16       	cp	r11, r24
    16ae:	d8 f4       	brcc	.+54     	; 0x16e6 <menu_display+0x106>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    16b0:	f6 01       	movw	r30, r12
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	50 e0       	ldi	r21, 0x00	; 0
			if (dindex++ >= menu->num_entries - menu->top_entry)
    16b8:	82 81       	ldd	r24, Z+2	; 0x02
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	24 1b       	sub	r18, r20
    16c0:	35 0b       	sbc	r19, r21
    16c2:	a0 cf       	rjmp	.-192    	; 0x1604 <menu_display+0x24>

#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
		menu_set_pos(context->x_loc, context->y_loc + i);
    16c4:	f7 01       	movw	r30, r14
    16c6:	61 81       	ldd	r22, Z+1	; 0x01
    16c8:	6b 0d       	add	r22, r11
    16ca:	80 81       	ld	r24, Z
    16cc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_gotoxy>
    16d0:	10 e0       	ldi	r17, 0x00	; 0
    16d2:	04 c0       	rjmp	.+8      	; 0x16dc <menu_display+0xfc>
		for (j = 0; j < context->width; j++) {
			menu_putchar(' ');
    16d4:	80 e2       	ldi	r24, 0x20	; 32
    16d6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
		menu_set_pos(context->x_loc, context->y_loc + i);
		for (j = 0; j < context->width; j++) {
    16da:	1f 5f       	subi	r17, 0xFF	; 255
    16dc:	f7 01       	movw	r30, r14
    16de:	83 81       	ldd	r24, Z+3	; 0x03
    16e0:	18 17       	cp	r17, r24
    16e2:	c0 f3       	brcs	.-16     	; 0x16d4 <menu_display+0xf4>
entries_done:

#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
    16e4:	b3 94       	inc	r11
    16e6:	f7 01       	movw	r30, r14
    16e8:	82 81       	ldd	r24, Z+2	; 0x02
    16ea:	b8 16       	cp	r11, r24
    16ec:	58 f3       	brcs	.-42     	; 0x16c4 <menu_display+0xe4>
		for (j = 0; j < context->width; j++) {
			menu_putchar(' ');
		}
	}	
#endif	
}
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	1f 91       	pop	r17
    16f4:	0f 91       	pop	r16
    16f6:	ff 90       	pop	r15
    16f8:	ef 90       	pop	r14
    16fa:	df 90       	pop	r13
    16fc:	cf 90       	pop	r12
    16fe:	bf 90       	pop	r11
    1700:	af 90       	pop	r10
    1702:	9f 90       	pop	r9
    1704:	08 95       	ret

00001706 <menu_enter>:
 *  so when we exit we can go back, and update the menu context to
 *  reflect new menu... then display it.
 */

void menu_enter(menu_context_t *context, menu_t *menu)
{
    1706:	fc 01       	movw	r30, r24
    1708:	db 01       	movw	r26, r22
	menu->previous = context->menu;
    170a:	84 81       	ldd	r24, Z+4	; 0x04
    170c:	95 81       	ldd	r25, Z+5	; 0x05
    170e:	14 96       	adiw	r26, 0x04	; 4
    1710:	9c 93       	st	X, r25
    1712:	8e 93       	st	-X, r24
    1714:	13 97       	sbiw	r26, 0x03	; 3
	context->menu = menu;
    1716:	75 83       	std	Z+5, r23	; 0x05
    1718:	64 83       	std	Z+4, r22	; 0x04
	menu_display(context);
    171a:	cf 01       	movw	r24, r30
    171c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <menu_display>
}
    1720:	08 95       	ret

00001722 <menu_exit>:
 * Exit a menu (go to the previous menu) -- if there is no previous
 *  menu, don't do anything.
 */

void menu_exit(menu_context_t *context)
{
    1722:	dc 01       	movw	r26, r24
	if (context->menu->previous) {
    1724:	14 96       	adiw	r26, 0x04	; 4
    1726:	ed 91       	ld	r30, X+
    1728:	fc 91       	ld	r31, X
    172a:	15 97       	sbiw	r26, 0x05	; 5
    172c:	83 81       	ldd	r24, Z+3	; 0x03
    172e:	94 81       	ldd	r25, Z+4	; 0x04
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	39 f0       	breq	.+14     	; 0x1742 <menu_exit+0x20>
		context->menu = context->menu->previous;
    1734:	15 96       	adiw	r26, 0x05	; 5
    1736:	9c 93       	st	X, r25
    1738:	8e 93       	st	-X, r24
    173a:	14 97       	sbiw	r26, 0x04	; 4
		menu_display(context);
    173c:	cd 01       	movw	r24, r26
    173e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <menu_display>
    1742:	08 95       	ret

00001744 <menu_prev_entry>:
 *  bounds.  Also adjust current top entry in display if needed to fit new
 *  entry on display.
 */ 

void menu_prev_entry(menu_context_t *context)
{
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	ec 01       	movw	r28, r24
	menu_t *menu = context->menu;
    174a:	ac 81       	ldd	r26, Y+4	; 0x04
    174c:	bd 81       	ldd	r27, Y+5	; 0x05
	uint8_t new_entry = menu->current_entry;
    174e:	11 96       	adiw	r26, 0x01	; 1
    1750:	2c 91       	ld	r18, X
    1752:	11 97       	sbiw	r26, 0x01	; 1
	

#ifndef CONFIG_TINYMENU_COMPACT
	while(1) {
		if (new_entry-- == 0) // Watch bounds
    1754:	22 23       	and	r18, r18
    1756:	e1 f0       	breq	.+56     	; 0x1790 <menu_prev_entry+0x4c>
    1758:	21 50       	subi	r18, 0x01	; 1
			return;
			
		if (!(menu->entry[new_entry].flags & MENU_FLAG_HIDDEN))
    175a:	82 2f       	mov	r24, r18
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	fc 01       	movw	r30, r24
    1760:	ee 0f       	add	r30, r30
    1762:	ff 1f       	adc	r31, r31
    1764:	e8 0f       	add	r30, r24
    1766:	f9 1f       	adc	r31, r25
    1768:	83 e0       	ldi	r24, 0x03	; 3
    176a:	ee 0f       	add	r30, r30
    176c:	ff 1f       	adc	r31, r31
    176e:	8a 95       	dec	r24
    1770:	e1 f7       	brne	.-8      	; 0x176a <menu_prev_entry+0x26>
    1772:	ea 0f       	add	r30, r26
    1774:	fb 1f       	adc	r31, r27
    1776:	85 81       	ldd	r24, Z+5	; 0x05
    1778:	81 fd       	sbrc	r24, 1
    177a:	ec cf       	rjmp	.-40     	; 0x1754 <menu_prev_entry+0x10>
#else
	if (new_entry-- == 0)
		return;
#endif
	
	menu->current_entry = new_entry;
    177c:	11 96       	adiw	r26, 0x01	; 1
    177e:	2c 93       	st	X, r18
    1780:	11 97       	sbiw	r26, 0x01	; 1
	
	if (menu->current_entry < menu->top_entry) 
    1782:	8c 91       	ld	r24, X
    1784:	28 17       	cp	r18, r24
    1786:	08 f4       	brcc	.+2      	; 0x178a <menu_prev_entry+0x46>
		menu->top_entry = menu->current_entry;
    1788:	2c 93       	st	X, r18
		
	menu_display(context);
    178a:	ce 01       	movw	r24, r28
    178c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <menu_display>
}
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	08 95       	ret

00001796 <menu_next_entry>:
 *  Also adjust current top entry in display if needed to fit new entry
 *  on display
 */
 
void menu_next_entry(menu_context_t *context)
{
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	ec 01       	movw	r28, r24
	menu_t *menu = context->menu;
    179c:	ac 81       	ldd	r26, Y+4	; 0x04
    179e:	bd 81       	ldd	r27, Y+5	; 0x05
	uint8_t new_entry = menu->current_entry;
    17a0:	11 96       	adiw	r26, 0x01	; 1
    17a2:	2c 91       	ld	r18, X
    17a4:	11 97       	sbiw	r26, 0x01	; 1
	

#ifndef CONFIG_TINYMENU_COMPACT
	while(1) {
		if (++new_entry >= menu->num_entries) // watch bounds
    17a6:	12 96       	adiw	r26, 0x02	; 2
    17a8:	9c 91       	ld	r25, X
    17aa:	12 97       	sbiw	r26, 0x02	; 2
    17ac:	2f 5f       	subi	r18, 0xFF	; 255
    17ae:	29 17       	cp	r18, r25
    17b0:	10 f5       	brcc	.+68     	; 0x17f6 <menu_next_entry+0x60>
			return;
		if (!(menu->entry[new_entry].flags & MENU_FLAG_HIDDEN))
    17b2:	42 2f       	mov	r20, r18
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	fa 01       	movw	r30, r20
    17b8:	ee 0f       	add	r30, r30
    17ba:	ff 1f       	adc	r31, r31
    17bc:	e4 0f       	add	r30, r20
    17be:	f5 1f       	adc	r31, r21
    17c0:	63 e0       	ldi	r22, 0x03	; 3
    17c2:	ee 0f       	add	r30, r30
    17c4:	ff 1f       	adc	r31, r31
    17c6:	6a 95       	dec	r22
    17c8:	e1 f7       	brne	.-8      	; 0x17c2 <menu_next_entry+0x2c>
    17ca:	ea 0f       	add	r30, r26
    17cc:	fb 1f       	adc	r31, r27
    17ce:	85 81       	ldd	r24, Z+5	; 0x05
    17d0:	81 fd       	sbrc	r24, 1
    17d2:	ec cf       	rjmp	.-40     	; 0x17ac <menu_next_entry+0x16>
#else
	if (++new_entry >= menu->num_entries)
		return;
#endif
	
	menu->current_entry = new_entry;
    17d4:	11 96       	adiw	r26, 0x01	; 1
    17d6:	2c 93       	st	X, r18
    17d8:	11 97       	sbiw	r26, 0x01	; 1
	
	if (menu->current_entry >= menu->top_entry + context->height)
    17da:	3a 81       	ldd	r19, Y+2	; 0x02
    17dc:	8c 91       	ld	r24, X
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	83 0f       	add	r24, r19
    17e2:	91 1d       	adc	r25, r1
    17e4:	48 17       	cp	r20, r24
    17e6:	59 07       	cpc	r21, r25
    17e8:	1c f0       	brlt	.+6      	; 0x17f0 <menu_next_entry+0x5a>
		menu->top_entry = menu->current_entry - context->height + 1;
    17ea:	23 1b       	sub	r18, r19
    17ec:	2f 5f       	subi	r18, 0xFF	; 255
    17ee:	2c 93       	st	X, r18
	
	menu_display(context);
    17f0:	ce 01       	movw	r24, r28
    17f2:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <menu_display>
}
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	08 95       	ret

000017fc <menu_select>:
 *  enter the submenu)
 *
 */

void menu_select(menu_context_t *context)
{
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	8c 01       	movw	r16, r24
	menu_entry_t *entry;


	entry = &context->menu->entry[context->menu->current_entry];
    1806:	fc 01       	movw	r30, r24
    1808:	c4 81       	ldd	r28, Z+4	; 0x04
    180a:	d5 81       	ldd	r29, Z+5	; 0x05
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	90 e0       	ldi	r25, 0x00	; 0

	if (entry->flags & MENU_FLAG_SUBMENU) {
    1810:	9c 01       	movw	r18, r24
    1812:	22 0f       	add	r18, r18
    1814:	33 1f       	adc	r19, r19
    1816:	28 0f       	add	r18, r24
    1818:	39 1f       	adc	r19, r25
    181a:	d9 01       	movw	r26, r18
    181c:	f3 e0       	ldi	r31, 0x03	; 3
    181e:	aa 0f       	add	r26, r26
    1820:	bb 1f       	adc	r27, r27
    1822:	fa 95       	dec	r31
    1824:	e1 f7       	brne	.-8      	; 0x181e <menu_select+0x22>
    1826:	ac 0f       	add	r26, r28
    1828:	bd 1f       	adc	r27, r29
    182a:	15 96       	adiw	r26, 0x05	; 5
    182c:	8c 91       	ld	r24, X
    182e:	15 97       	sbiw	r26, 0x05	; 5
    1830:	80 ff       	sbrs	r24, 0
    1832:	08 c0       	rjmp	.+16     	; 0x1844 <menu_select+0x48>
		// Submenu -- enter it
	
		menu_enter(context, (menu_t *)entry->value);
    1834:	5b 96       	adiw	r26, 0x1b	; 27
    1836:	6d 91       	ld	r22, X+
    1838:	7c 91       	ld	r23, X
    183a:	5c 97       	sbiw	r26, 0x1c	; 28
    183c:	c8 01       	movw	r24, r16
    183e:	0e 94 83 0b 	call	0x1706	; 0x1706 <menu_enter>
    1842:	13 c0       	rjmp	.+38     	; 0x186a <menu_select+0x6e>
	} else {
		// Regular entry -- execute function
	
		entry->select(entry->value, entry->name);
    1844:	c9 01       	movw	r24, r18
    1846:	01 96       	adiw	r24, 0x01	; 1
    1848:	e3 e0       	ldi	r30, 0x03	; 3
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	ea 95       	dec	r30
    1850:	e1 f7       	brne	.-8      	; 0x184a <menu_select+0x4e>
    1852:	c8 0f       	add	r28, r24
    1854:	d9 1f       	adc	r29, r25
    1856:	16 96       	adiw	r26, 0x06	; 6
    1858:	ed 91       	ld	r30, X+
    185a:	fc 91       	ld	r31, X
    185c:	17 97       	sbiw	r26, 0x07	; 7
    185e:	5b 96       	adiw	r26, 0x1b	; 27
    1860:	8d 91       	ld	r24, X+
    1862:	9c 91       	ld	r25, X
    1864:	5c 97       	sbiw	r26, 0x1c	; 28
    1866:	be 01       	movw	r22, r28
    1868:	09 95       	icall
	}
	
	// Re-display menu on return
	
	menu_display(context);
    186a:	c8 01       	movw	r24, r16
    186c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <menu_display>
}
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	08 95       	ret

0000187a <__mulsi3>:
    187a:	62 9f       	mul	r22, r18
    187c:	d0 01       	movw	r26, r0
    187e:	73 9f       	mul	r23, r19
    1880:	f0 01       	movw	r30, r0
    1882:	82 9f       	mul	r24, r18
    1884:	e0 0d       	add	r30, r0
    1886:	f1 1d       	adc	r31, r1
    1888:	64 9f       	mul	r22, r20
    188a:	e0 0d       	add	r30, r0
    188c:	f1 1d       	adc	r31, r1
    188e:	92 9f       	mul	r25, r18
    1890:	f0 0d       	add	r31, r0
    1892:	83 9f       	mul	r24, r19
    1894:	f0 0d       	add	r31, r0
    1896:	74 9f       	mul	r23, r20
    1898:	f0 0d       	add	r31, r0
    189a:	65 9f       	mul	r22, r21
    189c:	f0 0d       	add	r31, r0
    189e:	99 27       	eor	r25, r25
    18a0:	72 9f       	mul	r23, r18
    18a2:	b0 0d       	add	r27, r0
    18a4:	e1 1d       	adc	r30, r1
    18a6:	f9 1f       	adc	r31, r25
    18a8:	63 9f       	mul	r22, r19
    18aa:	b0 0d       	add	r27, r0
    18ac:	e1 1d       	adc	r30, r1
    18ae:	f9 1f       	adc	r31, r25
    18b0:	bd 01       	movw	r22, r26
    18b2:	cf 01       	movw	r24, r30
    18b4:	11 24       	eor	r1, r1
    18b6:	08 95       	ret

000018b8 <__divmodhi4>:
    18b8:	97 fb       	bst	r25, 7
    18ba:	09 2e       	mov	r0, r25
    18bc:	07 26       	eor	r0, r23
    18be:	0a d0       	rcall	.+20     	; 0x18d4 <__divmodhi4_neg1>
    18c0:	77 fd       	sbrc	r23, 7
    18c2:	04 d0       	rcall	.+8      	; 0x18cc <__divmodhi4_neg2>
    18c4:	27 d0       	rcall	.+78     	; 0x1914 <__udivmodhi4>
    18c6:	06 d0       	rcall	.+12     	; 0x18d4 <__divmodhi4_neg1>
    18c8:	00 20       	and	r0, r0
    18ca:	1a f4       	brpl	.+6      	; 0x18d2 <__divmodhi4_exit>

000018cc <__divmodhi4_neg2>:
    18cc:	70 95       	com	r23
    18ce:	61 95       	neg	r22
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255

000018d2 <__divmodhi4_exit>:
    18d2:	08 95       	ret

000018d4 <__divmodhi4_neg1>:
    18d4:	f6 f7       	brtc	.-4      	; 0x18d2 <__divmodhi4_exit>
    18d6:	90 95       	com	r25
    18d8:	81 95       	neg	r24
    18da:	9f 4f       	sbci	r25, 0xFF	; 255
    18dc:	08 95       	ret

000018de <__divmodsi4>:
    18de:	97 fb       	bst	r25, 7
    18e0:	09 2e       	mov	r0, r25
    18e2:	05 26       	eor	r0, r21
    18e4:	0e d0       	rcall	.+28     	; 0x1902 <__divmodsi4_neg1>
    18e6:	57 fd       	sbrc	r21, 7
    18e8:	04 d0       	rcall	.+8      	; 0x18f2 <__divmodsi4_neg2>
    18ea:	28 d0       	rcall	.+80     	; 0x193c <__udivmodsi4>
    18ec:	0a d0       	rcall	.+20     	; 0x1902 <__divmodsi4_neg1>
    18ee:	00 1c       	adc	r0, r0
    18f0:	38 f4       	brcc	.+14     	; 0x1900 <__divmodsi4_exit>

000018f2 <__divmodsi4_neg2>:
    18f2:	50 95       	com	r21
    18f4:	40 95       	com	r20
    18f6:	30 95       	com	r19
    18f8:	21 95       	neg	r18
    18fa:	3f 4f       	sbci	r19, 0xFF	; 255
    18fc:	4f 4f       	sbci	r20, 0xFF	; 255
    18fe:	5f 4f       	sbci	r21, 0xFF	; 255

00001900 <__divmodsi4_exit>:
    1900:	08 95       	ret

00001902 <__divmodsi4_neg1>:
    1902:	f6 f7       	brtc	.-4      	; 0x1900 <__divmodsi4_exit>
    1904:	90 95       	com	r25
    1906:	80 95       	com	r24
    1908:	70 95       	com	r23
    190a:	61 95       	neg	r22
    190c:	7f 4f       	sbci	r23, 0xFF	; 255
    190e:	8f 4f       	sbci	r24, 0xFF	; 255
    1910:	9f 4f       	sbci	r25, 0xFF	; 255
    1912:	08 95       	ret

00001914 <__udivmodhi4>:
    1914:	aa 1b       	sub	r26, r26
    1916:	bb 1b       	sub	r27, r27
    1918:	51 e1       	ldi	r21, 0x11	; 17
    191a:	07 c0       	rjmp	.+14     	; 0x192a <__udivmodhi4_ep>

0000191c <__udivmodhi4_loop>:
    191c:	aa 1f       	adc	r26, r26
    191e:	bb 1f       	adc	r27, r27
    1920:	a6 17       	cp	r26, r22
    1922:	b7 07       	cpc	r27, r23
    1924:	10 f0       	brcs	.+4      	; 0x192a <__udivmodhi4_ep>
    1926:	a6 1b       	sub	r26, r22
    1928:	b7 0b       	sbc	r27, r23

0000192a <__udivmodhi4_ep>:
    192a:	88 1f       	adc	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	5a 95       	dec	r21
    1930:	a9 f7       	brne	.-22     	; 0x191c <__udivmodhi4_loop>
    1932:	80 95       	com	r24
    1934:	90 95       	com	r25
    1936:	bc 01       	movw	r22, r24
    1938:	cd 01       	movw	r24, r26
    193a:	08 95       	ret

0000193c <__udivmodsi4>:
    193c:	a1 e2       	ldi	r26, 0x21	; 33
    193e:	1a 2e       	mov	r1, r26
    1940:	aa 1b       	sub	r26, r26
    1942:	bb 1b       	sub	r27, r27
    1944:	fd 01       	movw	r30, r26
    1946:	0d c0       	rjmp	.+26     	; 0x1962 <__udivmodsi4_ep>

00001948 <__udivmodsi4_loop>:
    1948:	aa 1f       	adc	r26, r26
    194a:	bb 1f       	adc	r27, r27
    194c:	ee 1f       	adc	r30, r30
    194e:	ff 1f       	adc	r31, r31
    1950:	a2 17       	cp	r26, r18
    1952:	b3 07       	cpc	r27, r19
    1954:	e4 07       	cpc	r30, r20
    1956:	f5 07       	cpc	r31, r21
    1958:	20 f0       	brcs	.+8      	; 0x1962 <__udivmodsi4_ep>
    195a:	a2 1b       	sub	r26, r18
    195c:	b3 0b       	sbc	r27, r19
    195e:	e4 0b       	sbc	r30, r20
    1960:	f5 0b       	sbc	r31, r21

00001962 <__udivmodsi4_ep>:
    1962:	66 1f       	adc	r22, r22
    1964:	77 1f       	adc	r23, r23
    1966:	88 1f       	adc	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	1a 94       	dec	r1
    196c:	69 f7       	brne	.-38     	; 0x1948 <__udivmodsi4_loop>
    196e:	60 95       	com	r22
    1970:	70 95       	com	r23
    1972:	80 95       	com	r24
    1974:	90 95       	com	r25
    1976:	9b 01       	movw	r18, r22
    1978:	ac 01       	movw	r20, r24
    197a:	bd 01       	movw	r22, r26
    197c:	cf 01       	movw	r24, r30
    197e:	08 95       	ret

00001980 <do_rand>:
    1980:	a0 e0       	ldi	r26, 0x00	; 0
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e6 ec       	ldi	r30, 0xC6	; 198
    1986:	fc e0       	ldi	r31, 0x0C	; 12
    1988:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__prologue_saves__+0x10>
    198c:	ec 01       	movw	r28, r24
    198e:	a8 80       	ld	r10, Y
    1990:	b9 80       	ldd	r11, Y+1	; 0x01
    1992:	ca 80       	ldd	r12, Y+2	; 0x02
    1994:	db 80       	ldd	r13, Y+3	; 0x03
    1996:	a1 14       	cp	r10, r1
    1998:	b1 04       	cpc	r11, r1
    199a:	c1 04       	cpc	r12, r1
    199c:	d1 04       	cpc	r13, r1
    199e:	41 f4       	brne	.+16     	; 0x19b0 <do_rand+0x30>
    19a0:	84 e2       	ldi	r24, 0x24	; 36
    19a2:	a8 2e       	mov	r10, r24
    19a4:	89 ed       	ldi	r24, 0xD9	; 217
    19a6:	b8 2e       	mov	r11, r24
    19a8:	8b e5       	ldi	r24, 0x5B	; 91
    19aa:	c8 2e       	mov	r12, r24
    19ac:	87 e0       	ldi	r24, 0x07	; 7
    19ae:	d8 2e       	mov	r13, r24
    19b0:	c6 01       	movw	r24, r12
    19b2:	b5 01       	movw	r22, r10
    19b4:	2d e1       	ldi	r18, 0x1D	; 29
    19b6:	33 ef       	ldi	r19, 0xF3	; 243
    19b8:	41 e0       	ldi	r20, 0x01	; 1
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	0e 94 6f 0c 	call	0x18de	; 0x18de <__divmodsi4>
    19c0:	27 ea       	ldi	r18, 0xA7	; 167
    19c2:	31 e4       	ldi	r19, 0x41	; 65
    19c4:	40 e0       	ldi	r20, 0x00	; 0
    19c6:	50 e0       	ldi	r21, 0x00	; 0
    19c8:	0e 94 3d 0c 	call	0x187a	; 0x187a <__mulsi3>
    19cc:	7b 01       	movw	r14, r22
    19ce:	8c 01       	movw	r16, r24
    19d0:	c6 01       	movw	r24, r12
    19d2:	b5 01       	movw	r22, r10
    19d4:	2d e1       	ldi	r18, 0x1D	; 29
    19d6:	33 ef       	ldi	r19, 0xF3	; 243
    19d8:	41 e0       	ldi	r20, 0x01	; 1
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	0e 94 6f 0c 	call	0x18de	; 0x18de <__divmodsi4>
    19e0:	ca 01       	movw	r24, r20
    19e2:	b9 01       	movw	r22, r18
    19e4:	2c ee       	ldi	r18, 0xEC	; 236
    19e6:	34 ef       	ldi	r19, 0xF4	; 244
    19e8:	4f ef       	ldi	r20, 0xFF	; 255
    19ea:	5f ef       	ldi	r21, 0xFF	; 255
    19ec:	0e 94 3d 0c 	call	0x187a	; 0x187a <__mulsi3>
    19f0:	6e 0d       	add	r22, r14
    19f2:	7f 1d       	adc	r23, r15
    19f4:	80 1f       	adc	r24, r16
    19f6:	91 1f       	adc	r25, r17
    19f8:	97 ff       	sbrs	r25, 7
    19fa:	04 c0       	rjmp	.+8      	; 0x1a04 <do_rand+0x84>
    19fc:	61 50       	subi	r22, 0x01	; 1
    19fe:	70 40       	sbci	r23, 0x00	; 0
    1a00:	80 40       	sbci	r24, 0x00	; 0
    1a02:	90 48       	sbci	r25, 0x80	; 128
    1a04:	68 83       	st	Y, r22
    1a06:	79 83       	std	Y+1, r23	; 0x01
    1a08:	8a 83       	std	Y+2, r24	; 0x02
    1a0a:	9b 83       	std	Y+3, r25	; 0x03
    1a0c:	9b 01       	movw	r18, r22
    1a0e:	3f 77       	andi	r19, 0x7F	; 127
    1a10:	c9 01       	movw	r24, r18
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	ea e0       	ldi	r30, 0x0A	; 10
    1a18:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__epilogue_restores__+0x10>

00001a1c <rand_r>:
    1a1c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <do_rand>
    1a20:	08 95       	ret

00001a22 <rand>:
    1a22:	8c ef       	ldi	r24, 0xFC	; 252
    1a24:	97 e0       	ldi	r25, 0x07	; 7
    1a26:	0e 94 c0 0c 	call	0x1980	; 0x1980 <do_rand>
    1a2a:	08 95       	ret

00001a2c <srand>:
    1a2c:	a0 e0       	ldi	r26, 0x00	; 0
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	80 93 fc 07 	sts	0x07FC, r24
    1a34:	90 93 fd 07 	sts	0x07FD, r25
    1a38:	a0 93 fe 07 	sts	0x07FE, r26
    1a3c:	b0 93 ff 07 	sts	0x07FF, r27
    1a40:	08 95       	ret

00001a42 <atoi>:
    1a42:	fc 01       	movw	r30, r24
    1a44:	88 27       	eor	r24, r24
    1a46:	99 27       	eor	r25, r25
    1a48:	e8 94       	clt
    1a4a:	21 91       	ld	r18, Z+
    1a4c:	20 32       	cpi	r18, 0x20	; 32
    1a4e:	e9 f3       	breq	.-6      	; 0x1a4a <atoi+0x8>
    1a50:	29 30       	cpi	r18, 0x09	; 9
    1a52:	10 f0       	brcs	.+4      	; 0x1a58 <atoi+0x16>
    1a54:	2e 30       	cpi	r18, 0x0E	; 14
    1a56:	c8 f3       	brcs	.-14     	; 0x1a4a <atoi+0x8>
    1a58:	2b 32       	cpi	r18, 0x2B	; 43
    1a5a:	41 f0       	breq	.+16     	; 0x1a6c <atoi+0x2a>
    1a5c:	2d 32       	cpi	r18, 0x2D	; 45
    1a5e:	39 f4       	brne	.+14     	; 0x1a6e <atoi+0x2c>
    1a60:	68 94       	set
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <atoi+0x2a>
    1a64:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__mulhi_const_10>
    1a68:	82 0f       	add	r24, r18
    1a6a:	91 1d       	adc	r25, r1
    1a6c:	21 91       	ld	r18, Z+
    1a6e:	20 53       	subi	r18, 0x30	; 48
    1a70:	2a 30       	cpi	r18, 0x0A	; 10
    1a72:	c0 f3       	brcs	.-16     	; 0x1a64 <atoi+0x22>
    1a74:	1e f4       	brtc	.+6      	; 0x1a7c <atoi+0x3a>
    1a76:	90 95       	com	r25
    1a78:	81 95       	neg	r24
    1a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7c:	08 95       	ret

00001a7e <atol>:
    1a7e:	1f 93       	push	r17
    1a80:	fc 01       	movw	r30, r24
    1a82:	99 27       	eor	r25, r25
    1a84:	88 27       	eor	r24, r24
    1a86:	bc 01       	movw	r22, r24
    1a88:	e8 94       	clt
    1a8a:	11 91       	ld	r17, Z+
    1a8c:	10 32       	cpi	r17, 0x20	; 32
    1a8e:	e9 f3       	breq	.-6      	; 0x1a8a <atol+0xc>
    1a90:	19 30       	cpi	r17, 0x09	; 9
    1a92:	10 f0       	brcs	.+4      	; 0x1a98 <atol+0x1a>
    1a94:	1e 30       	cpi	r17, 0x0E	; 14
    1a96:	c8 f3       	brcs	.-14     	; 0x1a8a <atol+0xc>
    1a98:	1b 32       	cpi	r17, 0x2B	; 43
    1a9a:	51 f0       	breq	.+20     	; 0x1ab0 <atol+0x32>
    1a9c:	1d 32       	cpi	r17, 0x2D	; 45
    1a9e:	49 f4       	brne	.+18     	; 0x1ab2 <atol+0x34>
    1aa0:	68 94       	set
    1aa2:	06 c0       	rjmp	.+12     	; 0x1ab0 <atol+0x32>
    1aa4:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__mulsi_const_10>
    1aa8:	61 0f       	add	r22, r17
    1aaa:	71 1d       	adc	r23, r1
    1aac:	81 1d       	adc	r24, r1
    1aae:	91 1d       	adc	r25, r1
    1ab0:	11 91       	ld	r17, Z+
    1ab2:	10 53       	subi	r17, 0x30	; 48
    1ab4:	1a 30       	cpi	r17, 0x0A	; 10
    1ab6:	b0 f3       	brcs	.-20     	; 0x1aa4 <atol+0x26>
    1ab8:	3e f4       	brtc	.+14     	; 0x1ac8 <atol+0x4a>
    1aba:	90 95       	com	r25
    1abc:	80 95       	com	r24
    1abe:	70 95       	com	r23
    1ac0:	61 95       	neg	r22
    1ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac8:	1f 91       	pop	r17
    1aca:	08 95       	ret

00001acc <strcat>:
    1acc:	fb 01       	movw	r30, r22
    1ace:	dc 01       	movw	r26, r24
    1ad0:	0d 90       	ld	r0, X+
    1ad2:	00 20       	and	r0, r0
    1ad4:	e9 f7       	brne	.-6      	; 0x1ad0 <strcat+0x4>
    1ad6:	11 97       	sbiw	r26, 0x01	; 1
    1ad8:	01 90       	ld	r0, Z+
    1ada:	0d 92       	st	X+, r0
    1adc:	00 20       	and	r0, r0
    1ade:	e1 f7       	brne	.-8      	; 0x1ad8 <strcat+0xc>
    1ae0:	08 95       	ret

00001ae2 <strcmp>:
    1ae2:	fb 01       	movw	r30, r22
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	8d 91       	ld	r24, X+
    1ae8:	01 90       	ld	r0, Z+
    1aea:	80 19       	sub	r24, r0
    1aec:	01 10       	cpse	r0, r1
    1aee:	d9 f3       	breq	.-10     	; 0x1ae6 <strcmp+0x4>
    1af0:	99 0b       	sbc	r25, r25
    1af2:	08 95       	ret

00001af4 <strncmp>:
    1af4:	fb 01       	movw	r30, r22
    1af6:	dc 01       	movw	r26, r24
    1af8:	41 50       	subi	r20, 0x01	; 1
    1afa:	50 40       	sbci	r21, 0x00	; 0
    1afc:	30 f0       	brcs	.+12     	; 0x1b0a <strncmp+0x16>
    1afe:	8d 91       	ld	r24, X+
    1b00:	01 90       	ld	r0, Z+
    1b02:	80 19       	sub	r24, r0
    1b04:	19 f4       	brne	.+6      	; 0x1b0c <strncmp+0x18>
    1b06:	00 20       	and	r0, r0
    1b08:	b9 f7       	brne	.-18     	; 0x1af8 <strncmp+0x4>
    1b0a:	88 1b       	sub	r24, r24
    1b0c:	99 0b       	sbc	r25, r25
    1b0e:	08 95       	ret

00001b10 <itoa>:
    1b10:	fb 01       	movw	r30, r22
    1b12:	9f 01       	movw	r18, r30
    1b14:	e8 94       	clt
    1b16:	42 30       	cpi	r20, 0x02	; 2
    1b18:	c4 f0       	brlt	.+48     	; 0x1b4a <itoa+0x3a>
    1b1a:	45 32       	cpi	r20, 0x25	; 37
    1b1c:	b4 f4       	brge	.+44     	; 0x1b4a <itoa+0x3a>
    1b1e:	4a 30       	cpi	r20, 0x0A	; 10
    1b20:	29 f4       	brne	.+10     	; 0x1b2c <itoa+0x1c>
    1b22:	97 fb       	bst	r25, 7
    1b24:	1e f4       	brtc	.+6      	; 0x1b2c <itoa+0x1c>
    1b26:	90 95       	com	r25
    1b28:	81 95       	neg	r24
    1b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2c:	64 2f       	mov	r22, r20
    1b2e:	77 27       	eor	r23, r23
    1b30:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__udivmodhi4>
    1b34:	80 5d       	subi	r24, 0xD0	; 208
    1b36:	8a 33       	cpi	r24, 0x3A	; 58
    1b38:	0c f0       	brlt	.+2      	; 0x1b3c <itoa+0x2c>
    1b3a:	89 5d       	subi	r24, 0xD9	; 217
    1b3c:	81 93       	st	Z+, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	a1 f7       	brne	.-24     	; 0x1b2c <itoa+0x1c>
    1b44:	16 f4       	brtc	.+4      	; 0x1b4a <itoa+0x3a>
    1b46:	5d e2       	ldi	r21, 0x2D	; 45
    1b48:	51 93       	st	Z+, r21
    1b4a:	10 82       	st	Z, r1
    1b4c:	c9 01       	movw	r24, r18
    1b4e:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <strrev>

00001b52 <ltoa>:
    1b52:	fa 01       	movw	r30, r20
    1b54:	cf 93       	push	r28
    1b56:	ff 93       	push	r31
    1b58:	ef 93       	push	r30
    1b5a:	22 30       	cpi	r18, 0x02	; 2
    1b5c:	44 f1       	brlt	.+80     	; 0x1bae <ltoa+0x5c>
    1b5e:	25 32       	cpi	r18, 0x25	; 37
    1b60:	34 f5       	brge	.+76     	; 0x1bae <ltoa+0x5c>
    1b62:	c2 2f       	mov	r28, r18
    1b64:	e8 94       	clt
    1b66:	ca 30       	cpi	r28, 0x0A	; 10
    1b68:	49 f4       	brne	.+18     	; 0x1b7c <ltoa+0x2a>
    1b6a:	97 fb       	bst	r25, 7
    1b6c:	3e f4       	brtc	.+14     	; 0x1b7c <ltoa+0x2a>
    1b6e:	90 95       	com	r25
    1b70:	80 95       	com	r24
    1b72:	70 95       	com	r23
    1b74:	61 95       	neg	r22
    1b76:	7f 4f       	sbci	r23, 0xFF	; 255
    1b78:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7c:	2c 2f       	mov	r18, r28
    1b7e:	33 27       	eor	r19, r19
    1b80:	44 27       	eor	r20, r20
    1b82:	55 27       	eor	r21, r21
    1b84:	ff 93       	push	r31
    1b86:	ef 93       	push	r30
    1b88:	0e 94 9e 0c 	call	0x193c	; 0x193c <__udivmodsi4>
    1b8c:	ef 91       	pop	r30
    1b8e:	ff 91       	pop	r31
    1b90:	60 5d       	subi	r22, 0xD0	; 208
    1b92:	6a 33       	cpi	r22, 0x3A	; 58
    1b94:	0c f0       	brlt	.+2      	; 0x1b98 <ltoa+0x46>
    1b96:	69 5d       	subi	r22, 0xD9	; 217
    1b98:	61 93       	st	Z+, r22
    1b9a:	b9 01       	movw	r22, r18
    1b9c:	ca 01       	movw	r24, r20
    1b9e:	60 50       	subi	r22, 0x00	; 0
    1ba0:	70 40       	sbci	r23, 0x00	; 0
    1ba2:	80 40       	sbci	r24, 0x00	; 0
    1ba4:	90 40       	sbci	r25, 0x00	; 0
    1ba6:	51 f7       	brne	.-44     	; 0x1b7c <ltoa+0x2a>
    1ba8:	16 f4       	brtc	.+4      	; 0x1bae <ltoa+0x5c>
    1baa:	cd e2       	ldi	r28, 0x2D	; 45
    1bac:	c1 93       	st	Z+, r28
    1bae:	10 82       	st	Z, r1
    1bb0:	8f 91       	pop	r24
    1bb2:	9f 91       	pop	r25
    1bb4:	cf 91       	pop	r28
    1bb6:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <strrev>

00001bba <__mulsi_const_10>:
    1bba:	59 2f       	mov	r21, r25
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	37 2f       	mov	r19, r23
    1bc0:	26 2f       	mov	r18, r22
    1bc2:	66 0f       	add	r22, r22
    1bc4:	77 1f       	adc	r23, r23
    1bc6:	88 1f       	adc	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	66 0f       	add	r22, r22
    1bcc:	77 1f       	adc	r23, r23
    1bce:	88 1f       	adc	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	62 0f       	add	r22, r18
    1bd4:	73 1f       	adc	r23, r19
    1bd6:	84 1f       	adc	r24, r20
    1bd8:	95 1f       	adc	r25, r21
    1bda:	66 0f       	add	r22, r22
    1bdc:	77 1f       	adc	r23, r23
    1bde:	88 1f       	adc	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	08 95       	ret

00001be4 <__mulhi_const_10>:
    1be4:	7a e0       	ldi	r23, 0x0A	; 10
    1be6:	97 9f       	mul	r25, r23
    1be8:	90 2d       	mov	r25, r0
    1bea:	87 9f       	mul	r24, r23
    1bec:	80 2d       	mov	r24, r0
    1bee:	91 0d       	add	r25, r1
    1bf0:	11 24       	eor	r1, r1
    1bf2:	08 95       	ret

00001bf4 <strrev>:
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	67 2f       	mov	r22, r23
    1bfa:	71 91       	ld	r23, Z+
    1bfc:	77 23       	and	r23, r23
    1bfe:	e1 f7       	brne	.-8      	; 0x1bf8 <strrev+0x4>
    1c00:	32 97       	sbiw	r30, 0x02	; 2
    1c02:	04 c0       	rjmp	.+8      	; 0x1c0c <strrev+0x18>
    1c04:	7c 91       	ld	r23, X
    1c06:	6d 93       	st	X+, r22
    1c08:	70 83       	st	Z, r23
    1c0a:	62 91       	ld	r22, -Z
    1c0c:	ae 17       	cp	r26, r30
    1c0e:	bf 07       	cpc	r27, r31
    1c10:	c8 f3       	brcs	.-14     	; 0x1c04 <strrev+0x10>
    1c12:	08 95       	ret

00001c14 <__prologue_saves__>:
    1c14:	2f 92       	push	r2
    1c16:	3f 92       	push	r3
    1c18:	4f 92       	push	r4
    1c1a:	5f 92       	push	r5
    1c1c:	6f 92       	push	r6
    1c1e:	7f 92       	push	r7
    1c20:	8f 92       	push	r8
    1c22:	9f 92       	push	r9
    1c24:	af 92       	push	r10
    1c26:	bf 92       	push	r11
    1c28:	cf 92       	push	r12
    1c2a:	df 92       	push	r13
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	ca 1b       	sub	r28, r26
    1c3e:	db 0b       	sbc	r29, r27
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	09 94       	ijmp

00001c4c <__epilogue_restores__>:
    1c4c:	2a 88       	ldd	r2, Y+18	; 0x12
    1c4e:	39 88       	ldd	r3, Y+17	; 0x11
    1c50:	48 88       	ldd	r4, Y+16	; 0x10
    1c52:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c54:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c56:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c58:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c5a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c5c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c5e:	b9 84       	ldd	r11, Y+9	; 0x09
    1c60:	c8 84       	ldd	r12, Y+8	; 0x08
    1c62:	df 80       	ldd	r13, Y+7	; 0x07
    1c64:	ee 80       	ldd	r14, Y+6	; 0x06
    1c66:	fd 80       	ldd	r15, Y+5	; 0x05
    1c68:	0c 81       	ldd	r16, Y+4	; 0x04
    1c6a:	1b 81       	ldd	r17, Y+3	; 0x03
    1c6c:	aa 81       	ldd	r26, Y+2	; 0x02
    1c6e:	b9 81       	ldd	r27, Y+1	; 0x01
    1c70:	ce 0f       	add	r28, r30
    1c72:	d1 1d       	adc	r29, r1
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	ed 01       	movw	r28, r26
    1c80:	08 95       	ret

00001c82 <_exit>:
    1c82:	f8 94       	cli

00001c84 <__stop_program>:
    1c84:	ff cf       	rjmp	.-2      	; 0x1c84 <__stop_program>
