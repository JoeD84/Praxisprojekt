
Translator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006b4  00800100  00001bee  00001c82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  008007b4  008007b4  00002336  2**0
                  ALLOC
  3 .stab         00003d5c  00000000  00000000  00002338  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001578  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_7>
      20:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_8>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_18>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	17 e0       	ldi	r17, 0x07	; 7
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ee ee       	ldi	r30, 0xEE	; 238
      90:	fb e1       	ldi	r31, 0x1B	; 27
      92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
      98:	a4 3b       	cpi	r26, 0xB4	; 180
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
      9e:	18 e0       	ldi	r17, 0x08	; 8
      a0:	a4 eb       	ldi	r26, 0xB4	; 180
      a2:	b7 e0       	ldi	r27, 0x07	; 7
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a2 32       	cpi	r26, 0x22	; 34
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <main>
      b2:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
      ba:	28 2f       	mov	r18, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
      bc:	66 23       	and	r22, r22
      be:	11 f0       	breq	.+4      	; 0xc4 <lcd_write+0xa>
       lcd_rs_high();
      c0:	46 9a       	sbi	0x08, 6	; 8
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <lcd_write+0xc>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
      c4:	46 98       	cbi	0x08, 6	; 8
    }
    lcd_rw_low();
      c6:	45 98       	cbi	0x08, 5	; 8

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
      c8:	87 b1       	in	r24, 0x07	; 7
      ca:	8f 60       	ori	r24, 0x0F	; 15
      cc:	87 b9       	out	0x07, r24	; 7

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
      ce:	98 b1       	in	r25, 0x08	; 8
      d0:	90 7f       	andi	r25, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
      d2:	82 2f       	mov	r24, r18
      d4:	82 95       	swap	r24
      d6:	8f 70       	andi	r24, 0x0F	; 15
      d8:	89 2b       	or	r24, r25
      da:	88 b9       	out	0x08, r24	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
      dc:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
      de:	00 c0       	rjmp	.+0      	; 0xe0 <lcd_write+0x26>
    lcd_e_low();
      e0:	44 98       	cbi	0x08, 4	; 8
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
      e2:	2f 70       	andi	r18, 0x0F	; 15
      e4:	29 2b       	or	r18, r25
      e6:	28 b9       	out	0x08, r18	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
      e8:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
      ea:	00 c0       	rjmp	.+0      	; 0xec <lcd_write+0x32>
    lcd_e_low();
      ec:	44 98       	cbi	0x08, 4	; 8
        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
      ee:	9f 60       	ori	r25, 0x0F	; 15
      f0:	98 b9       	out	0x08, r25	; 8
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
      f2:	08 95       	ret

000000f4 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
      f4:	88 23       	and	r24, r24
      f6:	11 f0       	breq	.+4      	; 0xfc <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
      f8:	46 9a       	sbi	0x08, 6	; 8
      fa:	01 c0       	rjmp	.+2      	; 0xfe <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
      fc:	46 98       	cbi	0x08, 6	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
      fe:	45 9a       	sbi	0x08, 5	; 8
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
     100:	87 b1       	in	r24, 0x07	; 7
     102:	80 7f       	andi	r24, 0xF0	; 240
     104:	87 b9       	out	0x07, r24	; 7
        
        lcd_e_high();
     106:	44 9a       	sbi	0x08, 4	; 8
        lcd_e_delay();        
     108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_read+0x16>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
     10a:	96 b1       	in	r25, 0x06	; 6
        lcd_e_low();
     10c:	44 98       	cbi	0x08, 4	; 8
        
        lcd_e_delay();                       /* Enable 500ns low       */
     10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_read+0x1c>
        
        lcd_e_high();
     110:	44 9a       	sbi	0x08, 4	; 8
        lcd_e_delay();
     112:	00 c0       	rjmp	.+0      	; 0x114 <lcd_read+0x20>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
     114:	86 b1       	in	r24, 0x06	; 6
     116:	8f 70       	andi	r24, 0x0F	; 15
     118:	92 95       	swap	r25
     11a:	90 7f       	andi	r25, 0xF0	; 240
        lcd_e_low();
     11c:	44 98       	cbi	0x08, 4	; 8
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
     11e:	89 2b       	or	r24, r25
     120:	08 95       	ret

00000122 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_read>
     128:	87 fd       	sbrc	r24, 7
     12a:	fb cf       	rjmp	.-10     	; 0x122 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	01 97       	sbiw	r24, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_read>
    
}/* lcd_waitbusy */
     13a:	08 95       	ret

0000013c <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     13c:	1f 93       	push	r17
     13e:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     140:	0e 94 91 00 	call	0x122	; 0x122 <lcd_waitbusy>
    lcd_write(cmd,0);
     144:	81 2f       	mov	r24, r17
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
}
     14c:	1f 91       	pop	r17
     14e:	08 95       	ret

00000150 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     150:	1f 93       	push	r17
     152:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     154:	0e 94 91 00 	call	0x122	; 0x122 <lcd_waitbusy>
    lcd_write(data,1);
     158:	81 2f       	mov	r24, r17
     15a:	61 e0       	ldi	r22, 0x01	; 1
     15c:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
}
     160:	1f 91       	pop	r17
     162:	08 95       	ret

00000164 <lcd_gotoxy>:
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
     164:	66 23       	and	r22, r22
     166:	11 f4       	brne	.+4      	; 0x16c <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     168:	80 58       	subi	r24, 0x80	; 128
     16a:	09 c0       	rjmp	.+18     	; 0x17e <lcd_gotoxy+0x1a>
    else if ( y==1)
     16c:	61 30       	cpi	r22, 0x01	; 1
     16e:	11 f4       	brne	.+4      	; 0x174 <lcd_gotoxy+0x10>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     170:	80 54       	subi	r24, 0x40	; 64
     172:	05 c0       	rjmp	.+10     	; 0x17e <lcd_gotoxy+0x1a>
    else if ( y==2)
     174:	62 30       	cpi	r22, 0x02	; 2
     176:	11 f4       	brne	.+4      	; 0x17c <lcd_gotoxy+0x18>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
     178:	8c 56       	subi	r24, 0x6C	; 108
     17a:	01 c0       	rjmp	.+2      	; 0x17e <lcd_gotoxy+0x1a>
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
     17c:	8c 52       	subi	r24, 0x2C	; 44
     17e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
     182:	08 95       	ret

00000184 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     184:	0e 94 91 00 	call	0x122	; 0x122 <lcd_waitbusy>
}
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	08 95       	ret

0000018c <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
}
     192:	08 95       	ret

00000194 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     194:	82 e0       	ldi	r24, 0x02	; 2
     196:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
}
     19a:	08 95       	ret

0000019c <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     19c:	1f 93       	push	r17
     19e:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     1a0:	0e 94 91 00 	call	0x122	; 0x122 <lcd_waitbusy>
     1a4:	98 2f       	mov	r25, r24
    if (c=='\n')
     1a6:	1a 30       	cpi	r17, 0x0A	; 10
     1a8:	99 f4       	brne	.+38     	; 0x1d0 <lcd_putc+0x34>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
     1aa:	84 31       	cpi	r24, 0x14	; 20
     1ac:	10 f4       	brcc	.+4      	; 0x1b2 <lcd_putc+0x16>
     1ae:	80 e4       	ldi	r24, 0x40	; 64
     1b0:	0b c0       	rjmp	.+22     	; 0x1c8 <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
     1b2:	80 54       	subi	r24, 0x40	; 64
     1b4:	84 31       	cpi	r24, 0x14	; 20
     1b6:	10 f4       	brcc	.+4      	; 0x1bc <lcd_putc+0x20>
     1b8:	84 e1       	ldi	r24, 0x14	; 20
     1ba:	06 c0       	rjmp	.+12     	; 0x1c8 <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
     1bc:	94 51       	subi	r25, 0x14	; 20
     1be:	9c 32       	cpi	r25, 0x2C	; 44
     1c0:	10 f0       	brcs	.+4      	; 0x1c6 <lcd_putc+0x2a>
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <lcd_putc+0x2c>
     1c6:	84 e5       	ldi	r24, 0x54	; 84
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     1c8:	80 58       	subi	r24, 0x80	; 128
     1ca:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
     1ce:	18 c0       	rjmp	.+48     	; 0x200 <lcd_putc+0x64>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==4
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
     1d0:	83 31       	cpi	r24, 0x13	; 19
     1d2:	11 f4       	brne	.+4      	; 0x1d8 <lcd_putc+0x3c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
     1d4:	80 ec       	ldi	r24, 0xC0	; 192
     1d6:	0b c0       	rjmp	.+22     	; 0x1ee <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
     1d8:	83 35       	cpi	r24, 0x53	; 83
     1da:	11 f4       	brne	.+4      	; 0x1e0 <lcd_putc+0x44>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
     1dc:	84 e9       	ldi	r24, 0x94	; 148
     1de:	07 c0       	rjmp	.+14     	; 0x1ee <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
     1e0:	87 32       	cpi	r24, 0x27	; 39
     1e2:	11 f4       	brne	.+4      	; 0x1e8 <lcd_putc+0x4c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
     1e4:	84 ed       	ldi	r24, 0xD4	; 212
     1e6:	03 c0       	rjmp	.+6      	; 0x1ee <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
     1e8:	87 36       	cpi	r24, 0x67	; 103
     1ea:	21 f4       	brne	.+8      	; 0x1f4 <lcd_putc+0x58>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
     1ec:	80 e8       	ldi	r24, 0x80	; 128
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
        }
#endif
        lcd_waitbusy();
     1f4:	0e 94 91 00 	call	0x122	; 0x122 <lcd_waitbusy>
#endif
        lcd_write(c, 1);
     1f8:	81 2f       	mov	r24, r17
     1fa:	61 e0       	ldi	r22, 0x01	; 1
     1fc:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
    }

}/* lcd_putc */
     200:	1f 91       	pop	r17
     202:	08 95       	ret

00000204 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	ec 01       	movw	r28, r24
     20a:	02 c0       	rjmp	.+4      	; 0x210 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
     20c:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     210:	89 91       	ld	r24, Y+
     212:	88 23       	and	r24, r24
     214:	d9 f7       	brne	.-10     	; 0x20c <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	ec 01       	movw	r28, r24
     222:	02 c0       	rjmp	.+4      	; 0x228 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
     224:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_putc>
     228:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     22a:	21 96       	adiw	r28, 0x01	; 1
     22c:	84 91       	lpm	r24, Z+
     22e:	88 23       	and	r24, r24
     230:	c9 f7       	brne	.-14     	; 0x224 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	08 95       	ret

00000238 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     238:	1f 93       	push	r17
     23a:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
     23c:	87 b1       	in	r24, 0x07	; 7
     23e:	8f 60       	ori	r24, 0x0F	; 15
     240:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     242:	3e 9a       	sbi	0x07, 6	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     244:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     246:	3c 9a       	sbi	0x07, 4	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     248:	80 e8       	ldi	r24, 0x80	; 128
     24a:	9e e3       	ldi	r25, 0x3E	; 62
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_init+0x14>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     250:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     252:	40 9a       	sbi	0x08, 0	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     254:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_init+0x20>
    lcd_e_low();
     258:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     25a:	80 e8       	ldi	r24, 0x80	; 128
     25c:	93 e1       	ldi	r25, 0x13	; 19
     25e:	01 97       	sbiw	r24, 0x01	; 1
     260:	f1 f7       	brne	.-4      	; 0x25e <lcd_init+0x26>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     262:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_init+0x2e>
    lcd_e_low();
     266:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     268:	80 e4       	ldi	r24, 0x40	; 64
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	fc 01       	movw	r30, r24
     26e:	31 97       	sbiw	r30, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <lcd_init+0x36>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     272:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_init+0x3e>
    lcd_e_low();
     276:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     278:	fc 01       	movw	r30, r24
     27a:	31 97       	sbiw	r30, 0x01	; 1
     27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     27e:	40 98       	cbi	0x08, 0	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     280:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     282:	00 c0       	rjmp	.+0      	; 0x284 <lcd_init+0x4c>
    lcd_e_low();
     284:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <lcd_init+0x4e>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     28a:	88 e2       	ldi	r24, 0x28	; 40
     28c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     290:	88 e0       	ldi	r24, 0x08	; 8
     292:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     296:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     29a:	86 e0       	ldi	r24, 0x06	; 6
     29c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     2a0:	81 2f       	mov	r24, r17
     2a2:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>

}/* lcd_init */
     2a6:	1f 91       	pop	r17
     2a8:	08 95       	ret

000002aa <__vector_18>:
 
volatile uint8_t key_rpt;                                  // key long press and repeat
 
 
ISR( TIMER0_OVF_vect )                            // every 10ms
{
     2aa:	1f 92       	push	r1
     2ac:	0f 92       	push	r0
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	0f 92       	push	r0
     2b2:	11 24       	eor	r1, r1
     2b4:	2f 93       	push	r18
     2b6:	8f 93       	push	r24
     2b8:	9f 93       	push	r25
  static uint8_t ct0, ct1, rpt;
  uint8_t i;
 
  TCNT0 = (uint8_t)(int16_t)-(F_CPU / 1024 * 10e-3 + 0.5);  // preload for 10ms
     2ba:	82 eb       	ldi	r24, 0xB2	; 178
     2bc:	86 bd       	out	0x26, r24	; 38
 
  i = key_state ^ ~KEY_PIN;                       // key changed ?
     2be:	80 91 21 08 	lds	r24, 0x0821
     2c2:	20 b1       	in	r18, 0x00	; 0
     2c4:	20 95       	com	r18
     2c6:	28 27       	eor	r18, r24
  ct0 = ~( ct0 & i );                             // reset or count ct0
     2c8:	80 91 ba 07 	lds	r24, 0x07BA
     2cc:	82 23       	and	r24, r18
     2ce:	80 95       	com	r24
     2d0:	80 93 ba 07 	sts	0x07BA, r24
  ct1 = ct0 ^ (ct1 & i);                          // reset or count ct1
     2d4:	90 91 b9 07 	lds	r25, 0x07B9
     2d8:	92 23       	and	r25, r18
     2da:	98 27       	eor	r25, r24
     2dc:	90 93 b9 07 	sts	0x07B9, r25
  i &= ct0 & ct1;                                 // count until roll over ?
     2e0:	82 23       	and	r24, r18
     2e2:	89 23       	and	r24, r25
  key_state ^= i;                                 // then toggle debounced state
     2e4:	90 91 21 08 	lds	r25, 0x0821
     2e8:	98 27       	eor	r25, r24
     2ea:	90 93 21 08 	sts	0x0821, r25
  key_press |= key_state & i;                     // 0->1: key press detect
     2ee:	20 91 20 08 	lds	r18, 0x0820
     2f2:	90 91 21 08 	lds	r25, 0x0821
     2f6:	89 23       	and	r24, r25
     2f8:	82 2b       	or	r24, r18
     2fa:	80 93 20 08 	sts	0x0820, r24
 
  if( (key_state & REPEAT_MASK) == 0 )            // check repeat function
     2fe:	80 91 21 08 	lds	r24, 0x0821
     302:	87 78       	andi	r24, 0x87	; 135
     304:	19 f4       	brne	.+6      	; 0x30c <__vector_18+0x62>
     rpt = REPEAT_START;                          // start delay
     306:	82 e3       	ldi	r24, 0x32	; 50
     308:	80 93 b8 07 	sts	0x07B8, r24
  if( --rpt == 0 ){
     30c:	80 91 b8 07 	lds	r24, 0x07B8
     310:	81 50       	subi	r24, 0x01	; 1
     312:	80 93 b8 07 	sts	0x07B8, r24
     316:	88 23       	and	r24, r24
     318:	59 f4       	brne	.+22     	; 0x330 <__vector_18+0x86>
    rpt = REPEAT_NEXT;                            // repeat delay
     31a:	84 e1       	ldi	r24, 0x14	; 20
     31c:	80 93 b8 07 	sts	0x07B8, r24
    key_rpt |= key_state & REPEAT_MASK;
     320:	90 91 bb 07 	lds	r25, 0x07BB
     324:	80 91 21 08 	lds	r24, 0x0821
     328:	87 78       	andi	r24, 0x87	; 135
     32a:	89 2b       	or	r24, r25
     32c:	80 93 bb 07 	sts	0x07BB, r24
  }
}
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	2f 91       	pop	r18
     336:	0f 90       	pop	r0
     338:	0f be       	out	0x3f, r0	; 63
     33a:	0f 90       	pop	r0
     33c:	1f 90       	pop	r1
     33e:	18 95       	reti

00000340 <get_key_press>:
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     340:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     342:	90 91 20 08 	lds	r25, 0x0820
     346:	89 23       	and	r24, r25
  key_press ^= key_mask;                          // clear key(s)
     348:	90 91 20 08 	lds	r25, 0x0820
     34c:	98 27       	eor	r25, r24
     34e:	90 93 20 08 	sts	0x0820, r25
  sei();
     352:	78 94       	sei
  return key_mask;
}
     354:	08 95       	ret

00000356 <get_key_rpt>:
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     356:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
     358:	90 91 bb 07 	lds	r25, 0x07BB
     35c:	89 23       	and	r24, r25
  key_rpt ^= key_mask;                            // clear key(s)
     35e:	90 91 bb 07 	lds	r25, 0x07BB
     362:	98 27       	eor	r25, r24
     364:	90 93 bb 07 	sts	0x07BB, r25
  sei();
     368:	78 94       	sei
  return key_mask;
}
     36a:	08 95       	ret

0000036c <get_key_short>:
 
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_short( uint8_t key_mask )
{
  cli();                                          // read key state and key press atomic !
     36c:	f8 94       	cli
  return get_key_press( ~key_state & key_mask );
     36e:	90 91 21 08 	lds	r25, 0x0821
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     372:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     374:	20 91 20 08 	lds	r18, 0x0820
     378:	90 95       	com	r25
     37a:	89 23       	and	r24, r25
     37c:	82 23       	and	r24, r18
  key_press ^= key_mask;                          // clear key(s)
     37e:	90 91 20 08 	lds	r25, 0x0820
     382:	98 27       	eor	r25, r24
     384:	90 93 20 08 	sts	0x0820, r25
  sei();
     388:	78 94       	sei
//
uint8_t get_key_short( uint8_t key_mask )
{
  cli();                                          // read key state and key press atomic !
  return get_key_press( ~key_state & key_mask );
}
     38a:	08 95       	ret

0000038c <get_key_long>:
 
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_long( uint8_t key_mask )
{
     38c:	98 2f       	mov	r25, r24
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     38e:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
     390:	80 91 bb 07 	lds	r24, 0x07BB
     394:	98 23       	and	r25, r24
  key_rpt ^= key_mask;                            // clear key(s)
     396:	80 91 bb 07 	lds	r24, 0x07BB
     39a:	89 27       	eor	r24, r25
     39c:	80 93 bb 07 	sts	0x07BB, r24
  sei();
     3a0:	78 94       	sei
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     3a2:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     3a4:	80 91 20 08 	lds	r24, 0x0820
     3a8:	89 23       	and	r24, r25
  key_press ^= key_mask;                          // clear key(s)
     3aa:	90 91 20 08 	lds	r25, 0x0820
     3ae:	98 27       	eor	r25, r24
     3b0:	90 93 20 08 	sts	0x0820, r25
  sei();
     3b4:	78 94       	sei
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_long( uint8_t key_mask )
{
  return get_key_press( get_key_rpt( key_mask ));
}
     3b6:	08 95       	ret

000003b8 <__vector_8>:
//////////////////////////////

// Interrupt Stuff
ISR(WDT_vect)
//Interrupt Service Routine
{
     3b8:	1f 92       	push	r1
     3ba:	0f 92       	push	r0
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	0f 92       	push	r0
     3c0:	11 24       	eor	r1, r1
     3c2:	8f 93       	push	r24
     3c4:	9f 93       	push	r25
		LED_PORT ^= (1 << LED0);
     3c6:	85 b1       	in	r24, 0x05	; 5
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	89 27       	eor	r24, r25
     3cc:	85 b9       	out	0x05, r24	; 5
}
     3ce:	9f 91       	pop	r25
     3d0:	8f 91       	pop	r24
     3d2:	0f 90       	pop	r0
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	0f 90       	pop	r0
     3d8:	1f 90       	pop	r1
     3da:	18 95       	reti

000003dc <uart_init>:
	LED_PORT ^= (1 << LED0);
}
// UART Stuff
void 	uart_init			() {
	// UART 0 - IN (Rapidform Software/Terminal)
	UBRR0H = UBRRH_VALUE;
     3dc:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
     3e0:	23 e3       	ldi	r18, 0x33	; 51
     3e2:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0C = (3 << UCSZ00);
     3e6:	96 e0       	ldi	r25, 0x06	; 6
     3e8:	90 93 c2 00 	sts	0x00C2, r25
	UCSR0B |= (1 << TXEN0); //Transmitter Enabled
     3ec:	e1 ec       	ldi	r30, 0xC1	; 193
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 81       	ld	r24, Z
     3f2:	88 60       	ori	r24, 0x08	; 8
     3f4:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXEN0); // UART RX einschalten
     3f6:	80 81       	ld	r24, Z
     3f8:	80 61       	ori	r24, 0x10	; 16
     3fa:	80 83       	st	Z, r24

	// UART 1 - OUT (Stepper Karte/Drehtisch)
	UBRR1H = UBRRH_VALUE;
     3fc:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = UBRRL_VALUE;
     400:	20 93 cc 00 	sts	0x00CC, r18
	UCSR1C = (3 << UCSZ00);
     404:	90 93 ca 00 	sts	0x00CA, r25
	UCSR1B |= (1 << TXEN1); //Transmitter Enabled
     408:	e9 ec       	ldi	r30, 0xC9	; 201
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	88 60       	ori	r24, 0x08	; 8
     410:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXEN1); // UART RX einschalten
     412:	80 81       	ld	r24, Z
     414:	80 61       	ori	r24, 0x10	; 16
     416:	80 83       	st	Z, r24

}
     418:	08 95       	ret

0000041a <uart_put_charater>:
void 	uart_put_charater	(unsigned char c, int dir) {
     41a:	98 2f       	mov	r25, r24
	// To Rapidform
	if (dir == D_RapidForm) {
     41c:	67 2b       	or	r22, r23
     41e:	39 f4       	brne	.+14     	; 0x42e <uart_put_charater+0x14>
		while (!(UCSR0A & (1 << UDRE0))) //warten bis Senden moeglich
     420:	80 91 c0 00 	lds	r24, 0x00C0
     424:	85 ff       	sbrs	r24, 5
     426:	fc cf       	rjmp	.-8      	; 0x420 <uart_put_charater+0x6>
		{
		}
		UDR0 = c; // sende Zeichen
     428:	90 93 c6 00 	sts	0x00C6, r25
     42c:	08 95       	ret
	}
	// To Stepper
	else {
		while (!(UCSR1A & (1 << UDRE1))) //warten bis Senden moeglich
     42e:	80 91 c8 00 	lds	r24, 0x00C8
     432:	85 ff       	sbrs	r24, 5
     434:	fc cf       	rjmp	.-8      	; 0x42e <uart_put_charater+0x14>
		{
		}
		UDR1 = c; // sende Zeichen
     436:	90 93 ce 00 	sts	0x00CE, r25
     43a:	08 95       	ret

0000043c <uart_put_string>:
	}
	//return 0;
}
void 	uart_put_string		(char *s, int dir) {
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	ec 01       	movw	r28, r24
     446:	8b 01       	movw	r16, r22
     448:	04 c0       	rjmp	.+8      	; 0x452 <uart_put_string+0x16>
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		uart_put_charater(*s, dir);
     44a:	b8 01       	movw	r22, r16
     44c:	0e 94 0d 02 	call	0x41a	; 0x41a <uart_put_charater>
		s++;
     450:	21 96       	adiw	r28, 0x01	; 1
		UDR1 = c; // sende Zeichen
	}
	//return 0;
}
void 	uart_put_string		(char *s, int dir) {
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
     452:	88 81       	ld	r24, Y
     454:	88 23       	and	r24, r24
     456:	c9 f7       	brne	.-14     	; 0x44a <uart_put_string+0xe>
	{
		uart_put_charater(*s, dir);
		s++;
	}
}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	08 95       	ret

00000462 <__vector_7>:
{
		LED_PORT ^= (1 << LED0);
}
ISR(PCINT3_vect)
//Interrupt Service Routine
{
     462:	1f 92       	push	r1
     464:	0f 92       	push	r0
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	0f 92       	push	r0
     46a:	11 24       	eor	r1, r1
     46c:	2f 93       	push	r18
     46e:	3f 93       	push	r19
     470:	4f 93       	push	r20
     472:	5f 93       	push	r21
     474:	6f 93       	push	r22
     476:	7f 93       	push	r23
     478:	8f 93       	push	r24
     47a:	9f 93       	push	r25
     47c:	af 93       	push	r26
     47e:	bf 93       	push	r27
     480:	ef 93       	push	r30
     482:	ff 93       	push	r31
	//led_lauflicht();
	//uart_put_string("2H\n", D_Stepper);
	uart_put_string("1H\n", D_Stepper);
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	61 e0       	ldi	r22, 0x01	; 1
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
	LED_PORT ^= (1 << LED0);
     490:	85 b1       	in	r24, 0x05	; 5
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	89 27       	eor	r24, r25
     496:	85 b9       	out	0x05, r24	; 5
}
     498:	ff 91       	pop	r31
     49a:	ef 91       	pop	r30
     49c:	bf 91       	pop	r27
     49e:	af 91       	pop	r26
     4a0:	9f 91       	pop	r25
     4a2:	8f 91       	pop	r24
     4a4:	7f 91       	pop	r23
     4a6:	6f 91       	pop	r22
     4a8:	5f 91       	pop	r21
     4aa:	4f 91       	pop	r20
     4ac:	3f 91       	pop	r19
     4ae:	2f 91       	pop	r18
     4b0:	0f 90       	pop	r0
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	0f 90       	pop	r0
     4b6:	1f 90       	pop	r1
     4b8:	18 95       	reti

000004ba <uart_get_character>:
		uart_put_charater(*s, dir);
		s++;
	}
}
int 	uart_get_character	(int dir) {
	if (dir == D_RapidForm) {
     4ba:	00 97       	sbiw	r24, 0x00	; 0
     4bc:	39 f4       	brne	.+14     	; 0x4cc <uart_get_character+0x12>
		while (!(UCSR0A & (1 << RXC0)))
     4be:	80 91 c0 00 	lds	r24, 0x00C0
     4c2:	87 ff       	sbrs	r24, 7
     4c4:	fc cf       	rjmp	.-8      	; 0x4be <uart_get_character+0x4>
			// warten bis Zeichen verfuegbar
			;
		return UDR0; // Zeichen aus UDR an Aufrufer zurueckgeben
     4c6:	80 91 c6 00 	lds	r24, 0x00C6
     4ca:	0b c0       	rjmp	.+22     	; 0x4e2 <uart_get_character+0x28>
	}
	if (dir == D_Stepper) {
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	19 f0       	breq	.+6      	; 0x4d6 <uart_get_character+0x1c>
     4d0:	2f ef       	ldi	r18, 0xFF	; 255
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	08 c0       	rjmp	.+16     	; 0x4e6 <uart_get_character+0x2c>
		while (!(UCSR1A & (1 << RXC1)))
     4d6:	80 91 c8 00 	lds	r24, 0x00C8
     4da:	87 ff       	sbrs	r24, 7
     4dc:	fc cf       	rjmp	.-8      	; 0x4d6 <uart_get_character+0x1c>
			// warten bis Zeichen verfuegbar
			;
		return UDR1; // Zeichen aus UDR an Aufrufer zurueckgeben
     4de:	80 91 ce 00 	lds	r24, 0x00CE
     4e2:	28 2f       	mov	r18, r24
     4e4:	30 e0       	ldi	r19, 0x00	; 0
	}
	return -1;
}
     4e6:	c9 01       	movw	r24, r18
     4e8:	08 95       	ret

000004ea <uart_get_string>:
void 	uart_get_string		(char * string_in, int dir) {
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	8c 01       	movw	r16, r24
     4f8:	7b 01       	movw	r14, r22
     4fa:	c0 e0       	ldi	r28, 0x00	; 0
     4fc:	d0 e0       	ldi	r29, 0x00	; 0
	char c;
	int i = 0;
	do {
		c = uart_get_character(dir);
     4fe:	c7 01       	movw	r24, r14
     500:	0e 94 5d 02 	call	0x4ba	; 0x4ba <uart_get_character>
		if (c != '\r') {
     504:	8d 30       	cpi	r24, 0x0D	; 13
     506:	21 f0       	breq	.+8      	; 0x510 <uart_get_string+0x26>
			*string_in = c;
     508:	f8 01       	movw	r30, r16
     50a:	81 93       	st	Z+, r24
     50c:	8f 01       	movw	r16, r30
			string_in += 1;
			i++;
     50e:	21 96       	adiw	r28, 0x01	; 1
		}
	} while (i < 100 && c != '\r' && c != '\n');
     510:	c4 36       	cpi	r28, 0x64	; 100
     512:	d1 05       	cpc	r29, r1
     514:	24 f4       	brge	.+8      	; 0x51e <uart_get_string+0x34>
     516:	8d 30       	cpi	r24, 0x0D	; 13
     518:	11 f0       	breq	.+4      	; 0x51e <uart_get_string+0x34>
     51a:	8a 30       	cpi	r24, 0x0A	; 10
     51c:	81 f7       	brne	.-32     	; 0x4fe <uart_get_string+0x14>
	*string_in = '\0';
     51e:	f8 01       	movw	r30, r16
     520:	10 82       	st	Z, r1
}
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	ff 90       	pop	r15
     52c:	ef 90       	pop	r14
     52e:	08 95       	ret

00000530 <csg_Status_melden>:
	//uart_put_string("0\n", D_Stepper);
	uart_put_string(B_OK, D_RapidForm);
}
// Hilfs Funktionen
void 	csg_Status_melden	() {
		uart_put_string(" 999999999,         0,K,K,R\r\n", D_RapidForm); // Status an RapidForm zur�ckmelden
     530:	84 e0       	ldi	r24, 0x04	; 4
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
}
     53c:	08 95       	ret

0000053e <led_spielerein>:
	_delay_ms(500);
	lcd_my_type("Be a Honey Bee!\n");
	_delay_ms(600);
	lcd_clrscr();
}
void 	led_spielerein		(void) {
     53e:	41 e0       	ldi	r20, 0x01	; 1
     540:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     542:	a8 ec       	ldi	r26, 0xC8	; 200
     544:	b0 e0       	ldi	r27, 0x00	; 0

	for (int i = 1; i < 9; i++) // LEDs durchlaufen
	{
		_delay_ms(80); // Eine Sekunde +/-1/10000 Sekunde warten...
		LED_PORT &= ~((1 << i)); // l�scht Bit an PortB - LED an
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	21 c0       	rjmp	.+66     	; 0x58e <led_spielerein+0x50>
     54c:	fd 01       	movw	r30, r26
     54e:	31 97       	sbiw	r30, 0x01	; 1
     550:	f1 f7       	brne	.-4      	; 0x54e <led_spielerein+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     552:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     554:	d9 f7       	brne	.-10     	; 0x54c <led_spielerein+0xe>
     556:	25 b1       	in	r18, 0x05	; 5
     558:	cb 01       	movw	r24, r22
     55a:	04 2e       	mov	r0, r20
     55c:	02 c0       	rjmp	.+4      	; 0x562 <led_spielerein+0x24>
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	0a 94       	dec	r0
     564:	e2 f7       	brpl	.-8      	; 0x55e <led_spielerein+0x20>
     566:	80 95       	com	r24
     568:	82 23       	and	r24, r18
     56a:	85 b9       	out	0x05, r24	; 5
		LED_PORT |= ((1 << (i - 1))); // setzt  Bit an PortB - LED aus
     56c:	25 b1       	in	r18, 0x05	; 5
     56e:	41 50       	subi	r20, 0x01	; 1
     570:	50 40       	sbci	r21, 0x00	; 0
     572:	cb 01       	movw	r24, r22
     574:	04 2e       	mov	r0, r20
     576:	02 c0       	rjmp	.+4      	; 0x57c <led_spielerein+0x3e>
     578:	88 0f       	add	r24, r24
     57a:	99 1f       	adc	r25, r25
     57c:	0a 94       	dec	r0
     57e:	e2 f7       	brpl	.-8      	; 0x578 <led_spielerein+0x3a>
     580:	28 2b       	or	r18, r24
     582:	25 b9       	out	0x05, r18	; 5
	_delay_ms(600);
	lcd_clrscr();
}
void 	led_spielerein		(void) {

	for (int i = 1; i < 9; i++) // LEDs durchlaufen
     584:	4e 5f       	subi	r20, 0xFE	; 254
     586:	5f 4f       	sbci	r21, 0xFF	; 255
     588:	49 30       	cpi	r20, 0x09	; 9
     58a:	51 05       	cpc	r21, r1
     58c:	19 f0       	breq	.+6      	; 0x594 <led_spielerein+0x56>
     58e:	80 e2       	ldi	r24, 0x20	; 32
     590:	93 e0       	ldi	r25, 0x03	; 3
     592:	dc cf       	rjmp	.-72     	; 0x54c <led_spielerein+0xe>
     594:	08 95       	ret

00000596 <debounce_init>:
}
void 	debounce_init		(void) {
	///////////////// Debounce Stuff ////////////////////

	// Configure debouncing routines
	KEY_DDR &= ~ALL_KEYS; // configure key port for input
     596:	81 b1       	in	r24, 0x01	; 1
     598:	11 b8       	out	0x01, r1	; 1
	KEY_PORT |= ALL_KEYS; // and turn on pull up resistors
     59a:	82 b1       	in	r24, 0x02	; 2
     59c:	8f ef       	ldi	r24, 0xFF	; 255
     59e:	82 b9       	out	0x02, r24	; 2

	TCCR0B = (1 << CS02) | (1 << CS00); // divide by 1024
     5a0:	85 e0       	ldi	r24, 0x05	; 5
     5a2:	85 bd       	out	0x25, r24	; 37
	TCNT0 = (uint8_t) (int16_t) -(F_CPU / 1024 * 10 * 10e-3 + 0.5); // preload for 10ms
     5a4:	83 ef       	ldi	r24, 0xF3	; 243
     5a6:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= 1 << TOIE0; // enable timer interrupt
     5a8:	ee e6       	ldi	r30, 0x6E	; 110
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	80 81       	ld	r24, Z
     5ae:	81 60       	ori	r24, 0x01	; 1
     5b0:	80 83       	st	Z, r24

	sei();
     5b2:	78 94       	sei
	///////////////// Debounce Stuff ////////////////////
}
     5b4:	08 95       	ret

000005b6 <led_lauflicht>:
void 	led_lauflicht		(void) {
	uint8_t i = LED_PORT;
     5b6:	85 b1       	in	r24, 0x05	; 5
	i = (i & 0x07) | ((i << 1) & 0xF0);
     5b8:	98 2f       	mov	r25, r24
     5ba:	99 0f       	add	r25, r25
     5bc:	90 7f       	andi	r25, 0xF0	; 240
     5be:	87 70       	andi	r24, 0x07	; 7
     5c0:	98 2b       	or	r25, r24
	if (i < 0xF0)
     5c2:	90 3f       	cpi	r25, 0xF0	; 240
     5c4:	08 f4       	brcc	.+2      	; 0x5c8 <led_lauflicht+0x12>
		i |= 0x08;
     5c6:	98 60       	ori	r25, 0x08	; 8
	LED_PORT = i;
     5c8:	95 b9       	out	0x05, r25	; 5
}
     5ca:	08 95       	ret

000005cc <init_WDT>:
	ms_spin(1000);
}

// Init Stuff
void init_WDT(void) {
	cli();
     5cc:	f8 94       	cli
	wdt_reset();
     5ce:	a8 95       	wdr
	WDTCSR |= (1 << WDCE) | (1 << WDE);
     5d0:	e0 e6       	ldi	r30, 0x60	; 96
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	80 81       	ld	r24, Z
     5d6:	88 61       	ori	r24, 0x18	; 24
     5d8:	80 83       	st	Z, r24
	WDTCSR = (1 << WDE) | (1 << WDIE) | (1 << WDP3) | (1 << WDP0); //Watchdog 8s
     5da:	89 e6       	ldi	r24, 0x69	; 105
     5dc:	80 83       	st	Z, r24
	//WDTCSR = 0x0F; //Watchdog Off
	sei();
     5de:	78 94       	sei
}
     5e0:	08 95       	ret

000005e2 <init>:
void init() {
	// Watchdog Initialisieren oder Abschalten
	init_WDT();
     5e2:	0e 94 e6 02 	call	0x5cc	; 0x5cc <init_WDT>
	// LED Port definieren
	LED_DDR = 0xFF;
     5e6:	8f ef       	ldi	r24, 0xFF	; 255
     5e8:	84 b9       	out	0x04, r24	; 4
	LED_PORT = 0xFF;
     5ea:	85 b9       	out	0x05, r24	; 5
	// Interrupts definieren
	PCMSK3 |= (1 << PCINT28); // PD4 als Interrupt zulassen
     5ec:	e3 e7       	ldi	r30, 0x73	; 115
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 81       	ld	r24, Z
     5f2:	80 61       	ori	r24, 0x10	; 16
     5f4:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE3); //Pin Change Interrupt Control Register - PCIE3 setzen f�r PCINT30
     5f6:	e8 e6       	ldi	r30, 0x68	; 104
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	80 81       	ld	r24, Z
     5fc:	88 60       	ori	r24, 0x08	; 8
     5fe:	80 83       	st	Z, r24
	// Startup kennzeichnen
	led_spielerein();
     600:	0e 94 9f 02 	call	0x53e	; 0x53e <led_spielerein>
	// LC Display initialisieren
	lcd_init(LCD_DISP_ON_CURSOR);
     604:	8e e0       	ldi	r24, 0x0E	; 14
     606:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_init>
	lcd_clrscr();
     60a:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
	lcd_home();
     60e:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_home>
	//lcd_spielereien();
	// Taster entprellen
	debounce_init();
     612:	0e 94 cb 02 	call	0x596	; 0x596 <debounce_init>
	// RS-232 Verbindung initialisieren
	uart_init();
     616:	0e 94 ee 01 	call	0x3dc	; 0x3dc <uart_init>
	//menu_enter(&menu_context, &menu_main);
}
     61a:	08 95       	ret

0000061c <my_select>:
	lcd_puts("Aufnahme starten\n");
	lcd_puts("Nach Aufnahme SW3 dr�cken!\n");
	if (get_key_press(1 << KEY3))
		uart_put_string("M 16000\r", D_Stepper);
}
void 	my_select			(void *arg, char *name) {
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	8b 01       	movw	r16, r22
	lcd_clrscr();
     622:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
	lcd_puts("Selected: ");
     626:	82 e2       	ldi	r24, 0x22	; 34
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts(name);
     62e:	c8 01       	movw	r24, r16
     630:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
 */


static inline void ms_spin(unsigned short ms) {
	if (ms) {
		__asm__ __volatile__ (
     634:	8e ee       	ldi	r24, 0xEE	; 238
     636:	92 e0       	ldi	r25, 0x02	; 2

00000638 <outer_592>:
     638:	a0 ed       	ldi	r26, 0xD0	; 208
     63a:	b7 e0       	ldi	r27, 0x07	; 7

0000063c <inner_592>:
     63c:	11 97       	sbiw	r26, 0x01	; 1
     63e:	f1 f7       	brne	.-4      	; 0x63c <inner_592>
     640:	01 97       	sbiw	r24, 0x01	; 1
     642:	d1 f7       	brne	.-12     	; 0x638 <outer_592>

	ms_spin(750);
}
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	08 95       	ret

0000064a <mod_manual>:
	LED_PORT = i;
}

// Menu Stuff
void 	mod_manual			(void *arg, void *name) {
	lcd_puts("Manueller Modus\n");
     64a:	8d e2       	ldi	r24, 0x2D	; 45
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts("Aufnahme starten\n");
     652:	8e e3       	ldi	r24, 0x3E	; 62
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts("Nach Aufnahme SW3 dr�cken!\n");
     65a:	80 e5       	ldi	r24, 0x50	; 80
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     662:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     664:	90 91 20 08 	lds	r25, 0x0820
     668:	98 70       	andi	r25, 0x08	; 8
  key_press ^= key_mask;                          // clear key(s)
     66a:	80 91 20 08 	lds	r24, 0x0820
     66e:	89 27       	eor	r24, r25
     670:	80 93 20 08 	sts	0x0820, r24
  sei();
     674:	78 94       	sei
	if (get_key_press(1 << KEY3))
     676:	99 23       	and	r25, r25
     678:	31 f0       	breq	.+12     	; 0x686 <mod_manual+0x3c>
		uart_put_string("M 16000\r", D_Stepper);
     67a:	8e e6       	ldi	r24, 0x6E	; 110
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
     686:	08 95       	ret

00000688 <String_zerlegen_csg>:
	ltoa(z,Position,10);
	//lcd_puts("Position: ");
	//lcd_puts(Position);
	//lcd_puts("\n");
}
void 	String_zerlegen_csg	(char * str_rx) {
     688:	cf 92       	push	r12
     68a:	df 92       	push	r13
     68c:	ef 92       	push	r14
     68e:	ff 92       	push	r15
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	df 93       	push	r29
     696:	cf 93       	push	r28
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	61 97       	sbiw	r28, 0x11	; 17
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
     6a8:	6c 01       	movw	r12, r24
	int i = 4; // Index Input String | Bei 4. Zeichen Beginnen. Die ersten 3 Zeichen sind Fix.
	int j = 0; // Index Variable
	char c; // Zu kopierendes Zeichen
	// Variablen Deklaration und Initialisierung mit Defaultwerten
	char Speed_Range[2] = "2";
	char ONE_Min_Speed[6] = "200";
     6aa:	82 e3       	ldi	r24, 0x32	; 50
     6ac:	90 e3       	ldi	r25, 0x30	; 48
     6ae:	a0 e3       	ldi	r26, 0x30	; 48
     6b0:	b0 e0       	ldi	r27, 0x00	; 0
     6b2:	8e 83       	std	Y+6, r24	; 0x06
     6b4:	9f 83       	std	Y+7, r25	; 0x07
     6b6:	a8 87       	std	Y+8, r26	; 0x08
     6b8:	b9 87       	std	Y+9, r27	; 0x09
     6ba:	1b 86       	std	Y+11, r1	; 0x0b
     6bc:	1a 86       	std	Y+10, r1	; 0x0a
	char ONE_Max_Speed[6] = "2000";
     6be:	de 01       	movw	r26, r28
     6c0:	1c 96       	adiw	r26, 0x0c	; 12
     6c2:	e4 ea       	ldi	r30, 0xA4	; 164
     6c4:	f1 e0       	ldi	r31, 0x01	; 1
     6c6:	85 e0       	ldi	r24, 0x05	; 5
     6c8:	01 90       	ld	r0, Z+
     6ca:	0d 92       	st	X+, r0
     6cc:	81 50       	subi	r24, 0x01	; 1
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <String_zerlegen_csg+0x40>
     6d0:	19 8a       	std	Y+17, r1	; 0x11
	char ONE_Acc_Speed[5] = "200";
     6d2:	82 e3       	ldi	r24, 0x32	; 50
     6d4:	90 e3       	ldi	r25, 0x30	; 48
     6d6:	a0 e3       	ldi	r26, 0x30	; 48
     6d8:	b0 e0       	ldi	r27, 0x00	; 0
     6da:	89 83       	std	Y+1, r24	; 0x01
     6dc:	9a 83       	std	Y+2, r25	; 0x02
     6de:	ab 83       	std	Y+3, r26	; 0x03
     6e0:	bc 83       	std	Y+4, r27	; 0x04
     6e2:	1d 82       	std	Y+5, r1	; 0x05
     6e4:	84 e0       	ldi	r24, 0x04	; 4
     6e6:	e8 2e       	mov	r14, r24
     6e8:	f1 2c       	mov	r15, r1
     6ea:	a0 e0       	ldi	r26, 0x00	; 0
     6ec:	b0 e0       	ldi	r27, 0x00	; 0
	//
	////////////////////////
	do {
		c = str_rx[i];
		if (c != 'F') {
			ONE_Min_Speed[j] = c;
     6ee:	9e 01       	movw	r18, r28
     6f0:	2a 5f       	subi	r18, 0xFA	; 250
     6f2:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	//  Min Speed (50 - 20000)
	//
	////////////////////////
	do {
		c = str_rx[i];
     6f4:	f6 01       	movw	r30, r12
     6f6:	ee 0d       	add	r30, r14
     6f8:	ff 1d       	adc	r31, r15
     6fa:	80 81       	ld	r24, Z
		if (c != 'F') {
     6fc:	86 34       	cpi	r24, 0x46	; 70
     6fe:	41 f0       	breq	.+16     	; 0x710 <String_zerlegen_csg+0x88>
			ONE_Min_Speed[j] = c;
     700:	f9 01       	movw	r30, r18
     702:	ea 0f       	add	r30, r26
     704:	fb 1f       	adc	r31, r27
     706:	80 83       	st	Z, r24
			j++;
     708:	11 96       	adiw	r26, 0x01	; 1
			i++;
     70a:	08 94       	sec
     70c:	e1 1c       	adc	r14, r1
     70e:	f1 1c       	adc	r15, r1
		}
	} while (j < 6 && c != '\0' && c != 'F');
     710:	a6 30       	cpi	r26, 0x06	; 6
     712:	b1 05       	cpc	r27, r1
     714:	24 f4       	brge	.+8      	; 0x71e <String_zerlegen_csg+0x96>
     716:	88 23       	and	r24, r24
     718:	11 f0       	breq	.+4      	; 0x71e <String_zerlegen_csg+0x96>
     71a:	86 34       	cpi	r24, 0x46	; 70
     71c:	59 f7       	brne	.-42     	; 0x6f4 <String_zerlegen_csg+0x6c>
	ONE_Min_Speed[j] = '\0';
     71e:	8e 01       	movw	r16, r28
     720:	0a 5f       	subi	r16, 0xFA	; 250
     722:	1f 4f       	sbci	r17, 0xFF	; 255
     724:	a0 0f       	add	r26, r16
     726:	b1 1f       	adc	r27, r17
     728:	1c 92       	st	X, r1

	lcd_puts("1_MIN_SPEED:");
     72a:	87 e7       	ldi	r24, 0x77	; 119
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts(ONE_Min_Speed);
     732:	c8 01       	movw	r24, r16
     734:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts("\n");
     738:	84 e8       	ldi	r24, 0x84	; 132
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	////////////////////////
	//
	//  Max Speed (50 - 20000)
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
     740:	08 94       	sec
     742:	e1 1c       	adc	r14, r1
     744:	f1 1c       	adc	r15, r1
     746:	a0 e0       	ldi	r26, 0x00	; 0
     748:	b0 e0       	ldi	r27, 0x00	; 0
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
		if (c != 'R') {
			ONE_Max_Speed[j] = c;
     74a:	9e 01       	movw	r18, r28
     74c:	24 5f       	subi	r18, 0xF4	; 244
     74e:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
     750:	f6 01       	movw	r30, r12
     752:	ee 0d       	add	r30, r14
     754:	ff 1d       	adc	r31, r15
     756:	80 81       	ld	r24, Z
		if (c != 'R') {
     758:	82 35       	cpi	r24, 0x52	; 82
     75a:	41 f0       	breq	.+16     	; 0x76c <String_zerlegen_csg+0xe4>
			ONE_Max_Speed[j] = c;
     75c:	f9 01       	movw	r30, r18
     75e:	ea 0f       	add	r30, r26
     760:	fb 1f       	adc	r31, r27
     762:	80 83       	st	Z, r24
			i++;
     764:	08 94       	sec
     766:	e1 1c       	adc	r14, r1
     768:	f1 1c       	adc	r15, r1
			j++;
     76a:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (j < 6 && c != '\0' && c != 'R');
     76c:	a6 30       	cpi	r26, 0x06	; 6
     76e:	b1 05       	cpc	r27, r1
     770:	24 f4       	brge	.+8      	; 0x77a <String_zerlegen_csg+0xf2>
     772:	88 23       	and	r24, r24
     774:	11 f0       	breq	.+4      	; 0x77a <String_zerlegen_csg+0xf2>
     776:	82 35       	cpi	r24, 0x52	; 82
     778:	59 f7       	brne	.-42     	; 0x750 <String_zerlegen_csg+0xc8>
	ONE_Max_Speed[j] = '\0';
     77a:	8e 01       	movw	r16, r28
     77c:	04 5f       	subi	r16, 0xF4	; 244
     77e:	1f 4f       	sbci	r17, 0xFF	; 255
     780:	a0 0f       	add	r26, r16
     782:	b1 1f       	adc	r27, r17
     784:	1c 92       	st	X, r1

	lcd_puts("1_MAX_SPEED:");
     786:	86 e8       	ldi	r24, 0x86	; 134
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts(ONE_Max_Speed);
     78e:	c8 01       	movw	r24, r16
     790:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts("\n");
     794:	84 e8       	ldi	r24, 0x84	; 132
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	////////////////////////
	//
	//  Acceleration (0 - 1000)
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
     79c:	c7 01       	movw	r24, r14
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	a0 e0       	ldi	r26, 0x00	; 0
     7a2:	b0 e0       	ldi	r27, 0x00	; 0
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
		if (c != 'S') {
			ONE_Acc_Speed[j] = c;
     7a4:	ae 01       	movw	r20, r28
     7a6:	4f 5f       	subi	r20, 0xFF	; 255
     7a8:	5f 4f       	sbci	r21, 0xFF	; 255
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
     7aa:	f6 01       	movw	r30, r12
     7ac:	e8 0f       	add	r30, r24
     7ae:	f9 1f       	adc	r31, r25
     7b0:	20 81       	ld	r18, Z
		if (c != 'S') {
     7b2:	23 35       	cpi	r18, 0x53	; 83
     7b4:	31 f0       	breq	.+12     	; 0x7c2 <String_zerlegen_csg+0x13a>
			ONE_Acc_Speed[j] = c;
     7b6:	fa 01       	movw	r30, r20
     7b8:	ea 0f       	add	r30, r26
     7ba:	fb 1f       	adc	r31, r27
     7bc:	20 83       	st	Z, r18
			i++;
     7be:	01 96       	adiw	r24, 0x01	; 1
			j++;
     7c0:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (j < 4 && c != '\0' && c != 'S');
     7c2:	a4 30       	cpi	r26, 0x04	; 4
     7c4:	b1 05       	cpc	r27, r1
     7c6:	24 f4       	brge	.+8      	; 0x7d0 <String_zerlegen_csg+0x148>
     7c8:	22 23       	and	r18, r18
     7ca:	11 f0       	breq	.+4      	; 0x7d0 <String_zerlegen_csg+0x148>
     7cc:	23 35       	cpi	r18, 0x53	; 83
     7ce:	69 f7       	brne	.-38     	; 0x7aa <String_zerlegen_csg+0x122>
	ONE_Acc_Speed[j] = '\0';
     7d0:	8e 01       	movw	r16, r28
     7d2:	0f 5f       	subi	r16, 0xFF	; 255
     7d4:	1f 4f       	sbci	r17, 0xFF	; 255
     7d6:	a0 0f       	add	r26, r16
     7d8:	b1 1f       	adc	r27, r17
     7da:	1c 92       	st	X, r1

	lcd_puts("1_ACC_SPEED:");
     7dc:	83 e9       	ldi	r24, 0x93	; 147
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts(ONE_Acc_Speed);
     7e4:	c8 01       	movw	r24, r16
     7e6:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts("\n");
     7ea:	84 e8       	ldi	r24, 0x84	; 132
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>

	//uart_put_string("0\n", D_Stepper);
	uart_put_string(B_OK, D_RapidForm);
     7f2:	80 ea       	ldi	r24, 0xA0	; 160
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
}
     7fe:	61 96       	adiw	r28, 0x11	; 17
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	de bf       	out	0x3e, r29	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	cd bf       	out	0x3d, r28	; 61
     80a:	cf 91       	pop	r28
     80c:	df 91       	pop	r29
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	ef 90       	pop	r14
     816:	df 90       	pop	r13
     818:	cf 90       	pop	r12
     81a:	08 95       	ret

0000081c <lcd_my_type>:
			switch_Terminal(str_rx);
	}
}

// LCD und LED Stuff
void 	lcd_my_type			(char *s) {
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	ec 01       	movw	r28, r24
	srand(TCNT0);
     82a:	86 b5       	in	r24, 0x26	; 38
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 ca 0c 	call	0x1994	; 0x1994 <srand>
     832:	90 ed       	ldi	r25, 0xD0	; 208
     834:	e9 2e       	mov	r14, r25
     836:	97 e0       	ldi	r25, 0x07	; 7
     838:	f9 2e       	mov	r15, r25
     83a:	17 c0       	rjmp	.+46     	; 0x86a <lcd_my_type+0x4e>
	int min = 10;
	int max = 250;
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		erg = (rand() % (max - min + 1) + min);
     83c:	0e 94 c5 0c 	call	0x198a	; 0x198a <rand>
     840:	61 ef       	ldi	r22, 0xF1	; 241
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	0e 94 10 0c 	call	0x1820	; 0x1820 <__divmodhi4>
     848:	8c 01       	movw	r16, r24
     84a:	06 5f       	subi	r16, 0xF6	; 246
     84c:	1f 4f       	sbci	r17, 0xFF	; 255
		lcd_putc(*s);
     84e:	88 81       	ld	r24, Y
     850:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_putc>
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	04 c0       	rjmp	.+8      	; 0x862 <lcd_my_type+0x46>
     85a:	f7 01       	movw	r30, r14
     85c:	31 97       	sbiw	r30, 0x01	; 1
     85e:	f1 f7       	brne	.-4      	; 0x85c <lcd_my_type+0x40>
		s++;
		for (int i = 0; i < erg; i++)
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	80 17       	cp	r24, r16
     864:	91 07       	cpc	r25, r17
     866:	cc f3       	brlt	.-14     	; 0x85a <lcd_my_type+0x3e>
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		erg = (rand() % (max - min + 1) + min);
		lcd_putc(*s);
		s++;
     868:	21 96       	adiw	r28, 0x01	; 1
void 	lcd_my_type			(char *s) {
	srand(TCNT0);
	int min = 10;
	int max = 250;
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
     86a:	88 81       	ld	r24, Y
     86c:	88 23       	and	r24, r24
     86e:	31 f7       	brne	.-52     	; 0x83c <lcd_my_type+0x20>
		lcd_putc(*s);
		s++;
		for (int i = 0; i < erg; i++)
			_delay_ms(1);
	}
}
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	08 95       	ret

0000087e <lcd_spielereien>:
void 	lcd_spielereien		(void) {
     87e:	88 ee       	ldi	r24, 0xE8	; 232
     880:	93 e0       	ldi	r25, 0x03	; 3
     882:	28 ec       	ldi	r18, 0xC8	; 200
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	f9 01       	movw	r30, r18
     888:	31 97       	sbiw	r30, 0x01	; 1
     88a:	f1 f7       	brne	.-4      	; 0x888 <lcd_spielereien+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     88c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     88e:	d9 f7       	brne	.-10     	; 0x886 <lcd_spielereien+0x8>
	_delay_ms(100);
	lcd_my_type("Hello Joe!\n");
     890:	8a ea       	ldi	r24, 0xAA	; 170
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	0e 94 0e 04 	call	0x81c	; 0x81c <lcd_my_type>
     898:	80 ed       	ldi	r24, 0xD0	; 208
     89a:	97 e0       	ldi	r25, 0x07	; 7
     89c:	28 ec       	ldi	r18, 0xC8	; 200
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	f9 01       	movw	r30, r18
     8a2:	31 97       	sbiw	r30, 0x01	; 1
     8a4:	f1 f7       	brne	.-4      	; 0x8a2 <lcd_spielereien+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8a8:	d9 f7       	brne	.-10     	; 0x8a0 <lcd_spielereien+0x22>
	_delay_ms(200);
	lcd_my_type("Have a nice Day!\n");
     8aa:	86 eb       	ldi	r24, 0xB6	; 182
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	0e 94 0e 04 	call	0x81c	; 0x81c <lcd_my_type>
     8b2:	88 e8       	ldi	r24, 0x88	; 136
     8b4:	93 e1       	ldi	r25, 0x13	; 19
     8b6:	28 ec       	ldi	r18, 0xC8	; 200
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	f9 01       	movw	r30, r18
     8bc:	31 97       	sbiw	r30, 0x01	; 1
     8be:	f1 f7       	brne	.-4      	; 0x8bc <lcd_spielereien+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c2:	d9 f7       	brne	.-10     	; 0x8ba <lcd_spielereien+0x3c>
	_delay_ms(500);
	lcd_my_type("Be a Honey Bee!\n");
     8c4:	88 ec       	ldi	r24, 0xC8	; 200
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	0e 94 0e 04 	call	0x81c	; 0x81c <lcd_my_type>
     8cc:	80 e7       	ldi	r24, 0x70	; 112
     8ce:	97 e1       	ldi	r25, 0x17	; 23
     8d0:	28 ec       	ldi	r18, 0xC8	; 200
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	f9 01       	movw	r30, r18
     8d6:	31 97       	sbiw	r30, 0x01	; 1
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <lcd_spielereien+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8dc:	d9 f7       	brne	.-10     	; 0x8d4 <lcd_spielereien+0x56>
	_delay_ms(600);
	lcd_clrscr();
     8de:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
}
     8e2:	08 95       	ret

000008e4 <Position_Zeta>:
}
// Hilfs Funktionen
void 	csg_Status_melden	() {
		uart_put_string(" 999999999,         0,K,K,R\r\n", D_RapidForm); // Status an RapidForm zur�ckmelden
}
void 	Position_Zeta		(char * Position) {
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	8c 01       	movw	r16, r24
     8ee:	c0 e0       	ldi	r28, 0x00	; 0
     8f0:	d0 e0       	ldi	r29, 0x00	; 0
    char c;
    int i = 0;
    do{
        c = str_rx[i + 1];
     8f2:	de 01       	movw	r26, r28
     8f4:	11 96       	adiw	r26, 0x01	; 1
     8f6:	fd 01       	movw	r30, r26
     8f8:	e4 54       	subi	r30, 0x44	; 68
     8fa:	f8 4f       	sbci	r31, 0xF8	; 248
     8fc:	e0 81       	ld	r30, Z
        if(c != ','){
     8fe:	ec 32       	cpi	r30, 0x2C	; 44
     900:	11 f4       	brne	.+4      	; 0x906 <__stack+0x7>
     902:	de 01       	movw	r26, r28
     904:	03 c0       	rjmp	.+6      	; 0x90c <__stack+0xd>
            Position[i] = c;
     906:	c0 0f       	add	r28, r16
     908:	d1 1f       	adc	r29, r17
     90a:	e8 83       	st	Y, r30
            i++;
        }
    }
     while(i < 20 && c != '\0' && c != ',');
     90c:	a4 31       	cpi	r26, 0x14	; 20
     90e:	b1 05       	cpc	r27, r1
     910:	34 f4       	brge	.+12     	; 0x91e <__stack+0x1f>
     912:	ee 23       	and	r30, r30
     914:	21 f0       	breq	.+8      	; 0x91e <__stack+0x1f>
     916:	ec 32       	cpi	r30, 0x2C	; 44
     918:	11 f0       	breq	.+4      	; 0x91e <__stack+0x1f>
     91a:	ed 01       	movw	r28, r26
     91c:	ea cf       	rjmp	.-44     	; 0x8f2 <Position_Zeta+0xe>
    Position[i] = '\0';
     91e:	a0 0f       	add	r26, r16
     920:	b1 1f       	adc	r27, r17
     922:	1c 92       	st	X, r1
	int32_t z;
	z = atol(Position);
     924:	c8 01       	movw	r24, r16
     926:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <atol>
	z = z/9;
	ltoa(z,Position,10);
     92a:	29 e0       	ldi	r18, 0x09	; 9
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	0e 94 23 0c 	call	0x1846	; 0x1846 <__divmodsi4>
     936:	ca 01       	movw	r24, r20
     938:	b9 01       	movw	r22, r18
     93a:	a8 01       	movw	r20, r16
     93c:	2a e0       	ldi	r18, 0x0A	; 10
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <ltoa>
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	08 95       	ret

0000094e <String_zerlegen_Isel>:
			return n;
		}
	}
	return 99;
}
void 	String_zerlegen_Isel(char * str_rx, char * Position) {
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	8c 01       	movw	r16, r24
     958:	eb 01       	movw	r28, r22
	//0M5200, +600
	//Achse M Position, +Geschwindigkeit
	char * Achse="0";
	Achse[0] = str_rx[1];
	Achse[1] = '\0';
	if(atoi(Achse)==0){
     95a:	89 ed       	ldi	r24, 0xD9	; 217
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <atoi>
     962:	89 2b       	or	r24, r25
     964:	61 f4       	brne	.+24     	; 0x97e <String_zerlegen_Isel+0x30>
		lcd_puts("Achse: ");
     966:	8b ed       	ldi	r24, 0xDB	; 219
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(Achse);
     96e:	89 ed       	ldi	r24, 0xD9	; 217
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(" (Rotation)\n");
     976:	83 ee       	ldi	r24, 0xE3	; 227
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	}
	if(atoi(Achse)==1){
     97e:	89 ed       	ldi	r24, 0xD9	; 217
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <atoi>
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	61 f4       	brne	.+24     	; 0x9a2 <String_zerlegen_Isel+0x54>
		lcd_puts("Achse: ");
     98a:	8b ed       	ldi	r24, 0xDB	; 219
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(Achse);
     992:	89 ed       	ldi	r24, 0xD9	; 217
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(" (Hoehe)   \n");
     99a:	80 ef       	ldi	r24, 0xF0	; 240
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	}
	lcd_puts("Test: ");
     9a2:	8d ef       	ldi	r24, 0xFD	; 253
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts(Position);
     9aa:	ce 01       	movw	r24, r28
     9ac:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
	char c;
	int i = 0;
	do {
		c = str_rx[i + 3];
     9b4:	f8 01       	movw	r30, r16
     9b6:	ea 0f       	add	r30, r26
     9b8:	fb 1f       	adc	r31, r27
     9ba:	83 81       	ldd	r24, Z+3	; 0x03
		if (c != ',') {
     9bc:	8c 32       	cpi	r24, 0x2C	; 44
     9be:	29 f0       	breq	.+10     	; 0x9ca <String_zerlegen_Isel+0x7c>
			Position[i] = c;
     9c0:	fe 01       	movw	r30, r28
     9c2:	ea 0f       	add	r30, r26
     9c4:	fb 1f       	adc	r31, r27
     9c6:	80 83       	st	Z, r24
			i++;
     9c8:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (i < 20 && c != '\0' && c != ',');
     9ca:	a4 31       	cpi	r26, 0x14	; 20
     9cc:	b1 05       	cpc	r27, r1
     9ce:	24 f4       	brge	.+8      	; 0x9d8 <String_zerlegen_Isel+0x8a>
     9d0:	88 23       	and	r24, r24
     9d2:	11 f0       	breq	.+4      	; 0x9d8 <String_zerlegen_Isel+0x8a>
     9d4:	8c 32       	cpi	r24, 0x2C	; 44
     9d6:	71 f7       	brne	.-36     	; 0x9b4 <String_zerlegen_Isel+0x66>
	Position[i] = '\0';
     9d8:	ac 0f       	add	r26, r28
     9da:	bd 1f       	adc	r27, r29
     9dc:	1c 92       	st	X, r1
	int32_t z;
	z = atol(Position);
     9de:	ce 01       	movw	r24, r28
     9e0:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <atol>
	z = (z * 71111)  /1024;
     9e4:	27 ec       	ldi	r18, 0xC7	; 199
     9e6:	35 e1       	ldi	r19, 0x15	; 21
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__mulsi3>
	ltoa(z,Position,10);
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	34 e0       	ldi	r19, 0x04	; 4
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	0e 94 23 0c 	call	0x1846	; 0x1846 <__divmodsi4>
     9fc:	ca 01       	movw	r24, r20
     9fe:	b9 01       	movw	r22, r18
     a00:	ae 01       	movw	r20, r28
     a02:	2a e0       	ldi	r18, 0x0A	; 10
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <ltoa>
	//lcd_puts("Position: ");
	//lcd_puts(Position);
	//lcd_puts("\n");
}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	08 95       	ret

00000a14 <FindStringInArray>:
			.Befehl = progmem_Befehl,
	}
};
*/

int 	FindStringInArray	(const char* pInput, const char* pOptions[], int cmp_length) {
     a14:	cf 92       	push	r12
     a16:	df 92       	push	r13
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	6c 01       	movw	r12, r24
     a26:	7a 01       	movw	r14, r20
     a28:	8b 01       	movw	r16, r22
     a2a:	cf ef       	ldi	r28, 0xFF	; 255
     a2c:	df ef       	ldi	r29, 0xFF	; 255
     a2e:	08 c0       	rjmp	.+16     	; 0xa40 <FindStringInArray+0x2c>
	int n = -1;
	while (pOptions[++n]) {
		//lcd_puts(pOptions[n]);
		//lcd_puts("\n");
		if (!strncmp(pInput, pOptions[n], cmp_length)){
     a30:	c6 01       	movw	r24, r12
     a32:	a7 01       	movw	r20, r14
     a34:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <strncmp>
     a38:	0e 5f       	subi	r16, 0xFE	; 254
     a3a:	1f 4f       	sbci	r17, 0xFF	; 255
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	49 f0       	breq	.+18     	; 0xa52 <FindStringInArray+0x3e>
};
*/

int 	FindStringInArray	(const char* pInput, const char* pOptions[], int cmp_length) {
	int n = -1;
	while (pOptions[++n]) {
     a40:	21 96       	adiw	r28, 0x01	; 1
     a42:	f8 01       	movw	r30, r16
     a44:	60 81       	ld	r22, Z
     a46:	71 81       	ldd	r23, Z+1	; 0x01
     a48:	61 15       	cp	r22, r1
     a4a:	71 05       	cpc	r23, r1
     a4c:	89 f7       	brne	.-30     	; 0xa30 <FindStringInArray+0x1c>
     a4e:	c3 e6       	ldi	r28, 0x63	; 99
     a50:	d0 e0       	ldi	r29, 0x00	; 0
		if (!strncmp(pInput, pOptions[n], cmp_length)){
			return n;
		}
	}
	return 99;
}
     a52:	ce 01       	movw	r24, r28
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	08 95       	ret

00000a66 <switch_Motor>:
		uart_put_string(str_rx,D_Stepper);
		uart_put_string("\n",D_Stepper);
	}
}

int 	switch_Motor		(char * str_rx) {
     a66:	df 93       	push	r29
     a68:	cf 93       	push	r28
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
     a6e:	2a 97       	sbiw	r28, 0x0a	; 10
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	f8 94       	cli
     a74:	de bf       	out	0x3e, r29	; 62
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	cd bf       	out	0x3d, r28	; 61
	const char* pOptions[] = {
			"@01", 		// 0 - Isel
			"Q:",    	// 1 - CSG
			"ECHO0", 	// 2 - Zeta
			"!Terminal",	// 3 - Terminal ansteuerung!
			0 };
     a7a:	de 01       	movw	r26, r28
     a7c:	11 96       	adiw	r26, 0x01	; 1
     a7e:	e8 ee       	ldi	r30, 0xE8	; 232
     a80:	f6 e0       	ldi	r31, 0x06	; 6
     a82:	2a e0       	ldi	r18, 0x0A	; 10
     a84:	01 90       	ld	r0, Z+
     a86:	0d 92       	st	X+, r0
     a88:	21 50       	subi	r18, 0x01	; 1
     a8a:	e1 f7       	brne	.-8      	; 0xa84 <switch_Motor+0x1e>
	switch (FindStringInArray(str_rx, pOptions, 3)) {
     a8c:	be 01       	movw	r22, r28
     a8e:	6f 5f       	subi	r22, 0xFF	; 255
     a90:	7f 4f       	sbci	r23, 0xFF	; 255
     a92:	43 e0       	ldi	r20, 0x03	; 3
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	0e 94 0a 05 	call	0xa14	; 0xa14 <FindStringInArray>
     a9a:	81 30       	cpi	r24, 0x01	; 1
     a9c:	91 05       	cpc	r25, r1
     a9e:	61 f0       	breq	.+24     	; 0xab8 <switch_Motor+0x52>
     aa0:	82 30       	cpi	r24, 0x02	; 2
     aa2:	91 05       	cpc	r25, r1
     aa4:	1c f4       	brge	.+6      	; 0xaac <switch_Motor+0x46>
     aa6:	89 2b       	or	r24, r25
     aa8:	51 f0       	breq	.+20     	; 0xabe <switch_Motor+0x58>
     aaa:	12 c0       	rjmp	.+36     	; 0xad0 <switch_Motor+0x6a>
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	91 05       	cpc	r25, r1
     ab0:	49 f0       	breq	.+18     	; 0xac4 <switch_Motor+0x5e>
     ab2:	03 97       	sbiw	r24, 0x03	; 3
     ab4:	69 f4       	brne	.+26     	; 0xad0 <switch_Motor+0x6a>
     ab6:	09 c0       	rjmp	.+18     	; 0xaca <switch_Motor+0x64>
     ab8:	21 e0       	ldi	r18, 0x01	; 1
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	0b c0       	rjmp	.+22     	; 0xad4 <switch_Motor+0x6e>
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	08 c0       	rjmp	.+16     	; 0xad4 <switch_Motor+0x6e>
     ac4:	22 e0       	ldi	r18, 0x02	; 2
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	05 c0       	rjmp	.+10     	; 0xad4 <switch_Motor+0x6e>
		break;
	case 1: 		// 1 - CSG
		return M_CSG;
		break;
	case 2:			// 2 - Zeta
		return M_ZETA;
     aca:	23 e0       	ldi	r18, 0x03	; 3
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <switch_Motor+0x6e>
		break;
	case 3:			// 3 - Terminal ansteuerung
		return M_TERMINAL;
     ad0:	2e ef       	ldi	r18, 0xFE	; 254
     ad2:	3f ef       	ldi	r19, 0xFF	; 255
		break;
	default:
		return M_UNK;
	}
}
     ad4:	c9 01       	movw	r24, r18
     ad6:	2a 96       	adiw	r28, 0x0a	; 10
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	cd bf       	out	0x3d, r28	; 61
     ae2:	cf 91       	pop	r28
     ae4:	df 91       	pop	r29
     ae6:	08 95       	ret

00000ae8 <switch_Terminal>:
		lcd_puts("   \n");
		//Initialized = switch_Inputs(str_rx);
	}
}

void 	switch_Terminal			(char * str_rx) {
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	df 93       	push	r29
     aee:	cf 93       	push	r28
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
     af4:	2a 97       	sbiw	r28, 0x0a	; 10
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	8c 01       	movw	r16, r24
	const char* pOptions[] = {
			"!CLS", // 0 - LC-Display l�schen
			"Test",	// 1 - Test
			"!Manual",// 2 - Ignorieren
			"!YYYY",// 3 - Wait till motor stops
			0 };
     b02:	de 01       	movw	r26, r28
     b04:	11 96       	adiw	r26, 0x01	; 1
     b06:	ea e0       	ldi	r30, 0x0A	; 10
     b08:	f7 e0       	ldi	r31, 0x07	; 7
     b0a:	8a e0       	ldi	r24, 0x0A	; 10
     b0c:	01 90       	ld	r0, Z+
     b0e:	0d 92       	st	X+, r0
     b10:	81 50       	subi	r24, 0x01	; 1
     b12:	e1 f7       	brne	.-8      	; 0xb0c <switch_Terminal+0x24>

	if (init_T == 0){
     b14:	80 91 b6 07 	lds	r24, 0x07B6
     b18:	90 91 b7 07 	lds	r25, 0x07B7
     b1c:	89 2b       	or	r24, r25
     b1e:	c1 f4       	brne	.+48     	; 0xb50 <switch_Terminal+0x68>
		init_T = 1;
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	90 93 b7 07 	sts	0x07B7, r25
     b28:	80 93 b6 07 	sts	0x07B6, r24
		uart_put_string("Willkommen im Terminal Modus\r\n",D_RapidForm);
     b2c:	84 e0       	ldi	r24, 0x04	; 4
     b2e:	92 e0       	ldi	r25, 0x02	; 2
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
		uart_put_string("m�gliche Befehle sind: \r\n",D_RapidForm);
     b38:	83 e2       	ldi	r24, 0x23	; 35
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
		uart_put_string(" A - Motorstatus\r\n M - Move Steps\r\n", D_RapidForm);
     b44:	8f e3       	ldi	r24, 0x3F	; 63
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
	}
	switch (FindStringInArray(str_rx, pOptions, 2)) {
     b50:	c8 01       	movw	r24, r16
     b52:	be 01       	movw	r22, r28
     b54:	6f 5f       	subi	r22, 0xFF	; 255
     b56:	7f 4f       	sbci	r23, 0xFF	; 255
     b58:	42 e0       	ldi	r20, 0x02	; 2
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	0e 94 0a 05 	call	0xa14	; 0xa14 <FindStringInArray>
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	91 05       	cpc	r25, r1
     b64:	61 f0       	breq	.+24     	; 0xb7e <switch_Terminal+0x96>
     b66:	82 30       	cpi	r24, 0x02	; 2
     b68:	91 05       	cpc	r25, r1
     b6a:	1c f4       	brge	.+6      	; 0xb72 <switch_Terminal+0x8a>
     b6c:	89 2b       	or	r24, r25
     b6e:	21 f0       	breq	.+8      	; 0xb78 <switch_Terminal+0x90>
     b70:	0f c0       	rjmp	.+30     	; 0xb90 <switch_Terminal+0xa8>
     b72:	04 97       	sbiw	r24, 0x04	; 4
     b74:	6c f4       	brge	.+26     	; 0xb90 <switch_Terminal+0xa8>
     b76:	1e c0       	rjmp	.+60     	; 0xbb4 <switch_Terminal+0xcc>
	case 0: // Display l�schen
		lcd_clrscr();
     b78:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
     b7c:	1b c0       	rjmp	.+54     	; 0xbb4 <switch_Terminal+0xcc>
		break;
	case 1: // Interner Test
		lcd_puts("Test bestanden     \n");
     b7e:	83 e6       	ldi	r24, 0x63	; 99
     b80:	92 e0       	ldi	r25, 0x02	; 2
     b82:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string("Test bestanden", D_RapidForm);
     b86:	88 e7       	ldi	r24, 0x78	; 120
     b88:	92 e0       	ldi	r25, 0x02	; 2
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	10 c0       	rjmp	.+32     	; 0xbb0 <switch_Terminal+0xc8>
	case 3: // Reserve 2

		break;
	default:
		//lcd_puts("Z:");
		lcd_puts(str_rx);
     b90:	c8 01       	movw	r24, r16
     b92:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts("       \n");
     b96:	87 e8       	ldi	r24, 0x87	; 135
     b98:	92 e0       	ldi	r25, 0x02	; 2
     b9a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string(str_rx,D_Stepper);
     b9e:	c8 01       	movw	r24, r16
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
		uart_put_string("\n",D_Stepper);
     ba8:	84 e8       	ldi	r24, 0x84	; 132
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
	}
}
     bb4:	2a 96       	adiw	r28, 0x0a	; 10
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	f8 94       	cli
     bba:	de bf       	out	0x3e, r29	; 62
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	cd bf       	out	0x3d, r28	; 61
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	08 95       	ret

00000bca <switch_csg>:
	default:
		lcd_puts("ISEL:    \n");
		lcd_puts(str_rx);
	}
}
void 	switch_csg			(char * str_rx) {
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	a0 97       	sbiw	r28, 0x20	; 32
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	8c 01       	movw	r16, r24
			"H:", // 5 - H:
			"G", // 6 - Motor starten
			"M:", // 7 - Move by Pulses
			"!", // 8 - Busy Ready ?
			"H1",
			0 };
     be4:	de 01       	movw	r26, r28
     be6:	1b 96       	adiw	r26, 0x0b	; 11
     be8:	ed e6       	ldi	r30, 0x6D	; 109
     bea:	f7 e0       	ldi	r31, 0x07	; 7
     bec:	86 e1       	ldi	r24, 0x16	; 22
     bee:	01 90       	ld	r0, Z+
     bf0:	0d 92       	st	X+, r0
     bf2:	81 50       	subi	r24, 0x01	; 1
     bf4:	e1 f7       	brne	.-8      	; 0xbee <switch_csg+0x24>
	switch (FindStringInArray(str_rx, pOptions, 2)) {
     bf6:	c8 01       	movw	r24, r16
     bf8:	be 01       	movw	r22, r28
     bfa:	65 5f       	subi	r22, 0xF5	; 245
     bfc:	7f 4f       	sbci	r23, 0xFF	; 255
     bfe:	42 e0       	ldi	r20, 0x02	; 2
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	0e 94 0a 05 	call	0xa14	; 0xa14 <FindStringInArray>
     c06:	84 30       	cpi	r24, 0x04	; 4
     c08:	91 05       	cpc	r25, r1
     c0a:	c1 f1       	breq	.+112    	; 0xc7c <switch_csg+0xb2>
     c0c:	85 30       	cpi	r24, 0x05	; 5
     c0e:	91 05       	cpc	r25, r1
     c10:	84 f4       	brge	.+32     	; 0xc32 <switch_csg+0x68>
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	91 05       	cpc	r25, r1
     c16:	29 f1       	breq	.+74     	; 0xc62 <switch_csg+0x98>
     c18:	82 30       	cpi	r24, 0x02	; 2
     c1a:	91 05       	cpc	r25, r1
     c1c:	1c f4       	brge	.+6      	; 0xc24 <switch_csg+0x5a>
     c1e:	89 2b       	or	r24, r25
     c20:	e9 f0       	breq	.+58     	; 0xc5c <switch_csg+0x92>
     c22:	65 c0       	rjmp	.+202    	; 0xcee <switch_csg+0x124>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	91 05       	cpc	r25, r1
     c28:	f9 f0       	breq	.+62     	; 0xc68 <switch_csg+0x9e>
     c2a:	03 97       	sbiw	r24, 0x03	; 3
     c2c:	09 f0       	breq	.+2      	; 0xc30 <switch_csg+0x66>
     c2e:	5f c0       	rjmp	.+190    	; 0xcee <switch_csg+0x124>
     c30:	1e c0       	rjmp	.+60     	; 0xc6e <switch_csg+0xa4>
     c32:	87 30       	cpi	r24, 0x07	; 7
     c34:	91 05       	cpc	r25, r1
     c36:	81 f1       	breq	.+96     	; 0xc98 <switch_csg+0xce>
     c38:	88 30       	cpi	r24, 0x08	; 8
     c3a:	91 05       	cpc	r25, r1
     c3c:	3c f4       	brge	.+14     	; 0xc4c <switch_csg+0x82>
     c3e:	85 30       	cpi	r24, 0x05	; 5
     c40:	91 05       	cpc	r25, r1
     c42:	01 f1       	breq	.+64     	; 0xc84 <switch_csg+0xba>
     c44:	06 97       	sbiw	r24, 0x06	; 6
     c46:	09 f0       	breq	.+2      	; 0xc4a <switch_csg+0x80>
     c48:	52 c0       	rjmp	.+164    	; 0xcee <switch_csg+0x124>
     c4a:	23 c0       	rjmp	.+70     	; 0xc92 <switch_csg+0xc8>
     c4c:	88 30       	cpi	r24, 0x08	; 8
     c4e:	91 05       	cpc	r25, r1
     c50:	09 f4       	brne	.+2      	; 0xc54 <switch_csg+0x8a>
     c52:	3f c0       	rjmp	.+126    	; 0xcd2 <switch_csg+0x108>
     c54:	09 97       	sbiw	r24, 0x09	; 9
     c56:	09 f0       	breq	.+2      	; 0xc5a <switch_csg+0x90>
     c58:	4a c0       	rjmp	.+148    	; 0xcee <switch_csg+0x124>
     c5a:	46 c0       	rjmp	.+140    	; 0xce8 <switch_csg+0x11e>
	case 0: // Motorkarte Erfolgreich angesprochen
		lcd_puts("!");
     c5c:	80 e9       	ldi	r24, 0x90	; 144
     c5e:	92 e0       	ldi	r25, 0x02	; 2
     c60:	4f c0       	rjmp	.+158    	; 0xd00 <switch_csg+0x136>
		break;
	case 1: // Display l�schen
		lcd_clrscr();
     c62:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
     c66:	4e c0       	rjmp	.+156    	; 0xd04 <switch_csg+0x13a>
		break;
	case 2: // Interner Test
		lcd_puts("!T");
     c68:	82 e9       	ldi	r24, 0x92	; 146
     c6a:	92 e0       	ldi	r25, 0x02	; 2
     c6c:	49 c0       	rjmp	.+146    	; 0xd00 <switch_csg+0x136>
		//uart_puts("Test bestanden\n\r");
		break;
	case 3: // Status abfrage von Software
		lcd_puts("Statusabfrage     \n");
     c6e:	85 e9       	ldi	r24, 0x95	; 149
     c70:	92 e0       	ldi	r25, 0x02	; 2
     c72:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		csg_Status_melden();
     c76:	0e 94 98 02 	call	0x530	; 0x530 <csg_Status_melden>
     c7a:	44 c0       	rjmp	.+136    	; 0xd04 <switch_csg+0x13a>
		break;
	case 4:
		String_zerlegen_csg(str_rx);
     c7c:	c8 01       	movw	r24, r16
     c7e:	0e 94 44 03 	call	0x688	; 0x688 <String_zerlegen_csg>
     c82:	40 c0       	rjmp	.+128    	; 0xd04 <switch_csg+0x13a>

		break;
	case 5:
		lcd_puts("H:                 \n");
     c84:	89 ea       	ldi	r24, 0xA9	; 169
     c86:	92 e0       	ldi	r25, 0x02	; 2
     c88:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string(B_OK, D_RapidForm);
     c8c:	80 ea       	ldi	r24, 0xA0	; 160
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	26 c0       	rjmp	.+76     	; 0xcde <switch_csg+0x114>
		break;
	case 6:
		lcd_puts("Motor starten\n");
     c92:	8e eb       	ldi	r24, 0xBE	; 190
     c94:	92 e0       	ldi	r25, 0x02	; 2
     c96:	34 c0       	rjmp	.+104    	; 0xd00 <switch_csg+0x136>
		//uart_put_string(B_OK, D_RapidForm);
		break;
	case 7:
		move++;
     c98:	80 91 b4 07 	lds	r24, 0x07B4
     c9c:	90 91 b5 07 	lds	r25, 0x07B5
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	90 93 b5 07 	sts	0x07B5, r25
     ca6:	80 93 b4 07 	sts	0x07B4, r24
		char it[10];
		itoa(move, it, 10);
     caa:	8e 01       	movw	r16, r28
     cac:	0f 5f       	subi	r16, 0xFF	; 255
     cae:	1f 4f       	sbci	r17, 0xFF	; 255
     cb0:	b8 01       	movw	r22, r16
     cb2:	4a e0       	ldi	r20, 0x0A	; 10
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <itoa>
		lcd_puts(it);
     cba:	c8 01       	movw	r24, r16
     cbc:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts("_Move!\n");
     cc0:	8d ec       	ldi	r24, 0xCD	; 205
     cc2:	92 e0       	ldi	r25, 0x02	; 2
     cc4:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string("M 160000\r\n",D_Stepper);
     cc8:	85 ed       	ldi	r24, 0xD5	; 213
     cca:	92 e0       	ldi	r25, 0x02	; 2
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	08 c0       	rjmp	.+16     	; 0xce2 <switch_csg+0x118>

		break;
	case 8:
		lcd_puts("R/B?");
     cd2:	80 ee       	ldi	r24, 0xE0	; 224
     cd4:	92 e0       	ldi	r25, 0x02	; 2
     cd6:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string("R\r\n", D_RapidForm);
     cda:	85 ee       	ldi	r24, 0xE5	; 229
     cdc:	92 e0       	ldi	r25, 0x02	; 2
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
     ce6:	0e c0       	rjmp	.+28     	; 0xd04 <switch_csg+0x13a>
		break;
	case 9:
		lcd_puts("H1 empfangen       \n");
     ce8:	89 ee       	ldi	r24, 0xE9	; 233
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	09 c0       	rjmp	.+18     	; 0xd00 <switch_csg+0x136>
		break;
	default:
		lcd_puts("U_B: ");
     cee:	8e ef       	ldi	r24, 0xFE	; 254
     cf0:	92 e0       	ldi	r25, 0x02	; 2
     cf2:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(str_rx);
     cf6:	c8 01       	movw	r24, r16
     cf8:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts("!END       \n");
     cfc:	84 e0       	ldi	r24, 0x04	; 4
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	}
}
     d04:	a0 96       	adiw	r28, 0x20	; 32
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	08 95       	ret

00000d1a <switch_Stepper>:
	ltoa(z,Position,10);
}
// Vearbeitungs Logik

int Initialized = M_NOTI;
void 	switch_Stepper		(char * str_rx) {
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	2a 97       	sbiw	r28, 0x0a	; 10
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
	const char* pOptions[] = {
			"#", 	// 0 - Stepper Karte Befehl erkannt
			"E", 	// 1 - Error
			"!CLS", // 2 - Clear Screen
			"Test", // 3 - Test
			0 };
     d2e:	de 01       	movw	r26, r28
     d30:	11 96       	adiw	r26, 0x01	; 1
     d32:	e5 ea       	ldi	r30, 0xA5	; 165
     d34:	f7 e0       	ldi	r31, 0x07	; 7
     d36:	2a e0       	ldi	r18, 0x0A	; 10
     d38:	01 90       	ld	r0, Z+
     d3a:	0d 92       	st	X+, r0
     d3c:	21 50       	subi	r18, 0x01	; 1
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <switch_Stepper+0x1e>
	switch (FindStringInArray(str_rx, pOptions, 1)) {
     d40:	be 01       	movw	r22, r28
     d42:	6f 5f       	subi	r22, 0xFF	; 255
     d44:	7f 4f       	sbci	r23, 0xFF	; 255
     d46:	41 e0       	ldi	r20, 0x01	; 1
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	0e 94 0a 05 	call	0xa14	; 0xa14 <FindStringInArray>
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	79 f0       	breq	.+30     	; 0xd72 <switch_Stepper+0x58>
     d54:	82 30       	cpi	r24, 0x02	; 2
     d56:	91 05       	cpc	r25, r1
     d58:	1c f4       	brge	.+6      	; 0xd60 <switch_Stepper+0x46>
     d5a:	89 2b       	or	r24, r25
     d5c:	39 f0       	breq	.+14     	; 0xd6c <switch_Stepper+0x52>
     d5e:	1c c0       	rjmp	.+56     	; 0xd98 <switch_Stepper+0x7e>
     d60:	82 30       	cpi	r24, 0x02	; 2
     d62:	91 05       	cpc	r25, r1
     d64:	89 f0       	breq	.+34     	; 0xd88 <switch_Stepper+0x6e>
     d66:	03 97       	sbiw	r24, 0x03	; 3
     d68:	b9 f4       	brne	.+46     	; 0xd98 <switch_Stepper+0x7e>
     d6a:	11 c0       	rjmp	.+34     	; 0xd8e <switch_Stepper+0x74>
	case 0:
		lcd_puts("Erfolgreich\n");
     d6c:	81 e1       	ldi	r24, 0x11	; 17
     d6e:	93 e0       	ldi	r25, 0x03	; 3
     d70:	10 c0       	rjmp	.+32     	; 0xd92 <switch_Stepper+0x78>
		//uart_put_string("0\n\r", D_RapidForm);
		break;
	case 1:
		lcd_puts("Error\n");
     d72:	8e e1       	ldi	r24, 0x1E	; 30
     d74:	93 e0       	ldi	r25, 0x03	; 3
     d76:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string("1\r\n", D_RapidForm);
     d7a:	85 e2       	ldi	r24, 0x25	; 37
     d7c:	93 e0       	ldi	r25, 0x03	; 3
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
     d86:	10 c0       	rjmp	.+32     	; 0xda8 <inner_1604+0x8>
		break;
	case 2:
		lcd_clrscr();
     d88:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
     d8c:	0d c0       	rjmp	.+26     	; 0xda8 <inner_1604+0x8>
		break;
	case 3:
		lcd_puts("Test bestanden\n");
     d8e:	89 e2       	ldi	r24, 0x29	; 41
     d90:	93 e0       	ldi	r25, 0x03	; 3
     d92:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
     d96:	08 c0       	rjmp	.+16     	; 0xda8 <inner_1604+0x8>
     d98:	8a e0       	ldi	r24, 0x0A	; 10
     d9a:	90 e0       	ldi	r25, 0x00	; 0

00000d9c <outer_1604>:
     d9c:	a0 ed       	ldi	r26, 0xD0	; 208
     d9e:	b7 e0       	ldi	r27, 0x07	; 7

00000da0 <inner_1604>:
     da0:	11 97       	sbiw	r26, 0x01	; 1
     da2:	f1 f7       	brne	.-4      	; 0xda0 <inner_1604>
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	d1 f7       	brne	.-12     	; 0xd9c <outer_1604>
		//lcd_puts("A: ");
		//lcd_puts(str_rx);
		//lcd_puts("!\n");
		//uart_put_string(str_rx, D_RapidForm);
	}
}
     da8:	2a 96       	adiw	r28, 0x0a	; 10
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <switch_Isel>:
void 	switch_Isel			(char * str_rx) {
     dba:	cf 92       	push	r12
     dbc:	df 92       	push	r13
     dbe:	ef 92       	push	r14
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	c7 55       	subi	r28, 0x57	; 87
     dd0:	d0 40       	sbci	r29, 0x00	; 0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61
     ddc:	6c 01       	movw	r12, r24
			"!CLS",    	// 1 - LC-Display l�schen
			"Test", 	// 2 - Test
			"@01",  	// 3 - Achse ausw�hlen
			"@0R", 		// 4 - Status abfrage
			"@0M", 		// 5 - Gehe zu Position MX , +600
			0 };
     dde:	de 01       	movw	r26, r28
     de0:	11 96       	adiw	r26, 0x01	; 1
     de2:	e3 e9       	ldi	r30, 0x93	; 147
     de4:	f7 e0       	ldi	r31, 0x07	; 7
     de6:	8e e0       	ldi	r24, 0x0E	; 14
     de8:	01 90       	ld	r0, Z+
     dea:	0d 92       	st	X+, r0
     dec:	81 50       	subi	r24, 0x01	; 1
     dee:	e1 f7       	brne	.-8      	; 0xde8 <switch_Isel+0x2e>

	int Ret_Val = FindStringInArray(str_rx, pOptions, 3);
     df0:	c6 01       	movw	r24, r12
     df2:	be 01       	movw	r22, r28
     df4:	6f 5f       	subi	r22, 0xFF	; 255
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	43 e0       	ldi	r20, 0x03	; 3
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	0e 94 0a 05 	call	0xa14	; 0xa14 <FindStringInArray>
	switch (Ret_Val) {
     e00:	82 30       	cpi	r24, 0x02	; 2
     e02:	91 05       	cpc	r25, r1
     e04:	c9 f0       	breq	.+50     	; 0xe38 <switch_Isel+0x7e>
     e06:	83 30       	cpi	r24, 0x03	; 3
     e08:	91 05       	cpc	r25, r1
     e0a:	34 f4       	brge	.+12     	; 0xe18 <switch_Isel+0x5e>
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	71 f0       	breq	.+28     	; 0xe2c <switch_Isel+0x72>
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	09 f0       	breq	.+2      	; 0xe16 <switch_Isel+0x5c>
     e14:	fe c0       	rjmp	.+508    	; 0x1012 <inner_1821+0x86>
     e16:	0d c0       	rjmp	.+26     	; 0xe32 <switch_Isel+0x78>
     e18:	84 30       	cpi	r24, 0x04	; 4
     e1a:	91 05       	cpc	r25, r1
     e1c:	f9 f0       	breq	.+62     	; 0xe5c <inner_1698+0xe>
     e1e:	84 30       	cpi	r24, 0x04	; 4
     e20:	91 05       	cpc	r25, r1
     e22:	8c f0       	brlt	.+34     	; 0xe46 <switch_Isel+0x8c>
     e24:	05 97       	sbiw	r24, 0x05	; 5
     e26:	09 f0       	breq	.+2      	; 0xe2a <switch_Isel+0x70>
     e28:	f4 c0       	rjmp	.+488    	; 0x1012 <inner_1821+0x86>
     e2a:	41 c0       	rjmp	.+130    	; 0xeae <inner_1714+0x36>
	case 0: 		// 0 - Reserve
		lcd_puts("Reserve\r\n");
     e2c:	89 e3       	ldi	r24, 0x39	; 57
     e2e:	93 e0       	ldi	r25, 0x03	; 3
     e30:	f5 c0       	rjmp	.+490    	; 0x101c <inner_1821+0x90>
		break;
	case 1: 		// 1 - LC-Display l�schen
		lcd_clrscr();
     e32:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
     e36:	f4 c0       	rjmp	.+488    	; 0x1020 <inner_1821+0x94>
		break;
	case 2:			// 2 - Test
		lcd_puts("Test bestanden\n");
     e38:	89 e2       	ldi	r24, 0x29	; 41
     e3a:	93 e0       	ldi	r25, 0x03	; 3
     e3c:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string("Test bestanden\r\n", D_RapidForm);
     e40:	83 e4       	ldi	r24, 0x43	; 67
     e42:	93 e0       	ldi	r25, 0x03	; 3
     e44:	e1 c0       	rjmp	.+450    	; 0x1008 <inner_1821+0x7c>
     e46:	8a e0       	ldi	r24, 0x0A	; 10
     e48:	90 e0       	ldi	r25, 0x00	; 0

00000e4a <outer_1698>:
     e4a:	a0 ed       	ldi	r26, 0xD0	; 208
     e4c:	b7 e0       	ldi	r27, 0x07	; 7

00000e4e <inner_1698>:
     e4e:	11 97       	sbiw	r26, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <inner_1698>
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	d1 f7       	brne	.-12     	; 0xe4a <outer_1698>
			s_ptr++; // Increase string pointer
		} while( pgm_read_byte( s_ptr ) != 0x00 );  // End of string
		*/

		//lcd_puts( buf );
		lcd_puts("Init");
     e56:	84 e5       	ldi	r24, 0x54	; 84
     e58:	93 e0       	ldi	r25, 0x03	; 3
     e5a:	d2 c0       	rjmp	.+420    	; 0x1000 <inner_1821+0x74>
		//String_zerlegen_Isel(str_rx, Position);
		uart_put_string("0\r\n", D_RapidForm);
		//uart_put_string(Protokoll.Motor[M_ISEL].Befehl[0].Output, D_RapidForm);
		break;
	case 4:			// 4 - Status abfrage
		lcd_puts("Statusabfrage:     \n");
     e5c:	89 e5       	ldi	r24, 0x59	; 89
     e5e:	93 e0       	ldi	r25, 0x03	; 3
     e60:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string("A\n", D_Stepper);
     e64:	8e e6       	ldi	r24, 0x6E	; 110
     e66:	93 e0       	ldi	r25, 0x03	; 3
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
     e70:	82 e3       	ldi	r24, 0x32	; 50
     e72:	90 e0       	ldi	r25, 0x00	; 0

00000e74 <outer_1714>:
     e74:	a0 ed       	ldi	r26, 0xD0	; 208
     e76:	b7 e0       	ldi	r27, 0x07	; 7

00000e78 <inner_1714>:
     e78:	11 97       	sbiw	r26, 0x01	; 1
     e7a:	f1 f7       	brne	.-4      	; 0xe78 <inner_1714>
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	d1 f7       	brne	.-12     	; 0xe74 <outer_1714>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
     e80:	80 91 c8 00 	lds	r24, 0x00C8
     e84:	87 ff       	sbrs	r24, 7
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <inner_1714+0x18>
			uart_rx(D_Stepper);
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 20 08 	call	0x1040	; 0x1040 <uart_rx>
		if (!strcmp(str_rx,"0#"))
     e90:	c6 01       	movw	r24, r12
     e92:	61 e7       	ldi	r22, 0x71	; 113
     e94:	73 e0       	ldi	r23, 0x03	; 3
     e96:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <strcmp>
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	09 f4       	brne	.+2      	; 0xea0 <inner_1714+0x28>
     e9e:	b2 c0       	rjmp	.+356    	; 0x1004 <inner_1821+0x78>
			uart_put_string("0\r\n", D_RapidForm);
		else {
			lcd_puts("Fehlgeschlagen     \n");
     ea0:	84 e7       	ldi	r24, 0x74	; 116
     ea2:	93 e0       	ldi	r25, 0x03	; 3
     ea4:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
			uart_put_string("-1\r\n", D_RapidForm);
     ea8:	89 e8       	ldi	r24, 0x89	; 137
     eaa:	93 e0       	ldi	r25, 0x03	; 3
     eac:	ad c0       	rjmp	.+346    	; 0x1008 <inner_1821+0x7c>
     eae:	8a e0       	ldi	r24, 0x0A	; 10
     eb0:	90 e0       	ldi	r25, 0x00	; 0

00000eb2 <outer_1743>:
     eb2:	a0 ed       	ldi	r26, 0xD0	; 208
     eb4:	b7 e0       	ldi	r27, 0x07	; 7

00000eb6 <inner_1743>:
     eb6:	11 97       	sbiw	r26, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <inner_1743>
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	d1 f7       	brne	.-12     	; 0xeb2 <outer_1743>
		}
		break;
	case 5:			// 5 - Gehe zu Position MX , +600
		ms_spin(10);
		char Position[33];
		memset(Position, '\0', 33);
     ebe:	3f e0       	ldi	r19, 0x0F	; 15
     ec0:	e3 2e       	mov	r14, r19
     ec2:	f1 2c       	mov	r15, r1
     ec4:	ec 0e       	add	r14, r28
     ec6:	fd 1e       	adc	r15, r29
     ec8:	81 e2       	ldi	r24, 0x21	; 33
     eca:	f7 01       	movw	r30, r14
     ecc:	11 92       	st	Z+, r1
     ece:	8a 95       	dec	r24
     ed0:	e9 f7       	brne	.-6      	; 0xecc <inner_1743+0x16>
		String_zerlegen_Isel(str_rx, Position);
     ed2:	c6 01       	movw	r24, r12
     ed4:	b7 01       	movw	r22, r14
     ed6:	0e 94 a7 04 	call	0x94e	; 0x94e <String_zerlegen_Isel>
		char Move_To[40];
		memset(Move_To,  '\0', 40);
     eda:	8e 01       	movw	r16, r28
     edc:	00 5d       	subi	r16, 0xD0	; 208
     ede:	1f 4f       	sbci	r17, 0xFF	; 255
     ee0:	88 e2       	ldi	r24, 0x28	; 40
     ee2:	f8 01       	movw	r30, r16
     ee4:	11 92       	st	Z+, r1
     ee6:	8a 95       	dec	r24
     ee8:	e9 f7       	brne	.-6      	; 0xee4 <inner_1743+0x2e>
		Move_To[0] = 'M';
     eea:	8d e4       	ldi	r24, 0x4D	; 77
     eec:	88 ab       	std	Y+48, r24	; 0x30
		Move_To[1] = 'A';
     eee:	81 e4       	ldi	r24, 0x41	; 65
     ef0:	89 ab       	std	Y+49, r24	; 0x31
		Move_To[2] = ' ';
     ef2:	80 e2       	ldi	r24, 0x20	; 32
     ef4:	8a ab       	std	Y+50, r24	; 0x32
		Move_To[3] = '\0';
     ef6:	1b aa       	std	Y+51, r1	; 0x33
		strcat(Move_To, Position);
     ef8:	c8 01       	movw	r24, r16
     efa:	b7 01       	movw	r22, r14
     efc:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <strcat>
		strcat(Move_To, "\n");
     f00:	c8 01       	movw	r24, r16
     f02:	64 e8       	ldi	r22, 0x84	; 132
     f04:	71 e0       	ldi	r23, 0x01	; 1
     f06:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <strcat>
		lcd_puts("Pos:");
     f0a:	8e e8       	ldi	r24, 0x8E	; 142
     f0c:	93 e0       	ldi	r25, 0x03	; 3
     f0e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(Move_To);
     f12:	c8 01       	movw	r24, r16
     f14:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>

		uart_put_string(Move_To, D_Stepper);
     f18:	c8 01       	movw	r24, r16
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
     f22:	02 e3       	ldi	r16, 0x32	; 50
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	f8 01       	movw	r30, r16

00000f28 <outer_1783>:
     f28:	a0 ed       	ldi	r26, 0xD0	; 208
     f2a:	b7 e0       	ldi	r27, 0x07	; 7

00000f2c <inner_1783>:
     f2c:	11 97       	sbiw	r26, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <inner_1783>
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	d1 f7       	brne	.-12     	; 0xf28 <outer_1783>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
     f34:	80 91 c8 00 	lds	r24, 0x00C8
     f38:	87 ff       	sbrs	r24, 7
     f3a:	72 c0       	rjmp	.+228    	; 0x1020 <inner_1821+0x94>
			uart_rx(D_Stepper);
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 20 08 	call	0x1040	; 0x1040 <uart_rx>
		else {
			//lcd_puts("Befehl n. bestaetig\n");
			break;
		}

		uart_put_string("A\n", D_Stepper);
     f44:	8e e6       	ldi	r24, 0x6E	; 110
     f46:	93 e0       	ldi	r25, 0x03	; 3
     f48:	61 e0       	ldi	r22, 0x01	; 1
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
     f50:	f8 01       	movw	r30, r16

00000f52 <outer_1797>:
     f52:	a0 ed       	ldi	r26, 0xD0	; 208
     f54:	b7 e0       	ldi	r27, 0x07	; 7

00000f56 <inner_1797>:
     f56:	11 97       	sbiw	r26, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <inner_1797>
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	d1 f7       	brne	.-12     	; 0xf52 <outer_1797>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
     f5e:	80 91 c8 00 	lds	r24, 0x00C8
     f62:	87 ff       	sbrs	r24, 7
     f64:	05 c0       	rjmp	.+10     	; 0xf70 <inner_1797+0x1a>
			uart_rx(D_Stepper);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 20 08 	call	0x1040	; 0x1040 <uart_rx>
     f6e:	30 c0       	rjmp	.+96     	; 0xfd0 <inner_1821+0x44>
		else {
			lcd_puts("Keine Bewegung!\n");
     f70:	83 e9       	ldi	r24, 0x93	; 147
     f72:	93 e0       	ldi	r25, 0x03	; 3
     f74:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
     f78:	2b c0       	rjmp	.+86     	; 0xfd0 <inner_1821+0x44>
		}

		while (!strcmp(str_rx,"1#")){
			uart_put_string("A\n", D_Stepper);
     f7a:	8e e6       	ldi	r24, 0x6E	; 110
     f7c:	93 e0       	ldi	r25, 0x03	; 3
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
     f86:	f7 01       	movw	r30, r14

00000f88 <outer_1821>:
     f88:	a0 ed       	ldi	r26, 0xD0	; 208
     f8a:	b7 e0       	ldi	r27, 0x07	; 7

00000f8c <inner_1821>:
     f8c:	11 97       	sbiw	r26, 0x01	; 1
     f8e:	f1 f7       	brne	.-4      	; 0xf8c <inner_1821>
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	d1 f7       	brne	.-12     	; 0xf88 <outer_1821>
			ms_spin(50);
			if ((UCSR1A & (1 << RXC1))){
     f94:	80 91 c8 00 	lds	r24, 0x00C8
     f98:	87 ff       	sbrs	r24, 7
     f9a:	14 c0       	rjmp	.+40     	; 0xfc4 <inner_1821+0x38>
				uart_rx(D_Stepper);
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 20 08 	call	0x1040	; 0x1040 <uart_rx>
				lcd_clrscr();
     fa4:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
				lcd_puts("running to\n");
     fa8:	84 ea       	ldi	r24, 0xA4	; 164
     faa:	93 e0       	ldi	r25, 0x03	; 3
     fac:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
				lcd_puts("Position: ");
     fb0:	80 eb       	ldi	r24, 0xB0	; 176
     fb2:	93 e0       	ldi	r25, 0x03	; 3
     fb4:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
				lcd_puts(Position);
     fb8:	c8 01       	movw	r24, r16
     fba:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
				lcd_puts("\n");
     fbe:	84 e8       	ldi	r24, 0x84	; 132
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <inner_1821+0x3c>
			}
			else {
				lcd_puts("Keine Antwort\n");
     fc4:	8b eb       	ldi	r24, 0xBB	; 187
     fc6:	93 e0       	ldi	r25, 0x03	; 3
     fc8:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
			}
			wdt_reset();
     fcc:	a8 95       	wdr
     fce:	06 c0       	rjmp	.+12     	; 0xfdc <inner_1821+0x50>
     fd0:	22 e3       	ldi	r18, 0x32	; 50
     fd2:	e2 2e       	mov	r14, r18
     fd4:	f1 2c       	mov	r15, r1
			if ((UCSR1A & (1 << RXC1))){
				uart_rx(D_Stepper);
				lcd_clrscr();
				lcd_puts("running to\n");
				lcd_puts("Position: ");
				lcd_puts(Position);
     fd6:	8e 01       	movw	r16, r28
     fd8:	01 5f       	subi	r16, 0xF1	; 241
     fda:	1f 4f       	sbci	r17, 0xFF	; 255
			uart_rx(D_Stepper);
		else {
			lcd_puts("Keine Bewegung!\n");
		}

		while (!strcmp(str_rx,"1#")){
     fdc:	c6 01       	movw	r24, r12
     fde:	6a ec       	ldi	r22, 0xCA	; 202
     fe0:	73 e0       	ldi	r23, 0x03	; 3
     fe2:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <strcmp>
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	09 f4       	brne	.+2      	; 0xfec <inner_1821+0x60>
     fea:	c7 cf       	rjmp	.-114    	; 0xf7a <inner_1797+0x24>
			else {
				lcd_puts("Keine Antwort\n");
			}
			wdt_reset();
		}
		lcd_puts("Position: \n");
     fec:	8d ec       	ldi	r24, 0xCD	; 205
     fee:	93 e0       	ldi	r25, 0x03	; 3
     ff0:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(Position);
     ff4:	ce 01       	movw	r24, r28
     ff6:	0f 96       	adiw	r24, 0x0f	; 15
     ff8:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(" Erreicht\n");
     ffc:	89 ed       	ldi	r24, 0xD9	; 217
     ffe:	93 e0       	ldi	r25, 0x03	; 3
    1000:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string("0\r\n", D_RapidForm);
    1004:	80 ea       	ldi	r24, 0xA0	; 160
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
    1010:	07 c0       	rjmp	.+14     	; 0x1020 <inner_1821+0x94>
		break;
	default:
		lcd_puts("ISEL:    \n");
    1012:	84 ee       	ldi	r24, 0xE4	; 228
    1014:	93 e0       	ldi	r25, 0x03	; 3
    1016:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(str_rx);
    101a:	c6 01       	movw	r24, r12
    101c:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	}
}
    1020:	c9 5a       	subi	r28, 0xA9	; 169
    1022:	df 4f       	sbci	r29, 0xFF	; 255
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	df 90       	pop	r13
    103c:	cf 90       	pop	r12
    103e:	08 95       	ret

00001040 <uart_rx>:
		break;
	default:
		return M_UNK;
	}
}
void 	uart_rx				(int dir) {
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	8c 01       	movw	r16, r24
	uart_get_string(str_rx, dir);
    1046:	8c eb       	ldi	r24, 0xBC	; 188
    1048:	97 e0       	ldi	r25, 0x07	; 7
    104a:	b8 01       	movw	r22, r16
    104c:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_get_string>
	if (dir == D_Stepper)
    1050:	01 30       	cpi	r16, 0x01	; 1
    1052:	11 05       	cpc	r17, r1
    1054:	29 f4       	brne	.+10     	; 0x1060 <uart_rx+0x20>
		switch_Stepper(str_rx);
    1056:	8c eb       	ldi	r24, 0xBC	; 188
    1058:	97 e0       	ldi	r25, 0x07	; 7
    105a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <switch_Stepper>
    105e:	48 c0       	rjmp	.+144    	; 0x10f0 <uart_rx+0xb0>
	else{
		if(Initialized == M_UNK){
    1060:	80 91 cf 06 	lds	r24, 0x06CF
    1064:	90 91 d0 06 	lds	r25, 0x06D0
    1068:	8e 5f       	subi	r24, 0xFE	; 254
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	51 f4       	brne	.+20     	; 0x1082 <uart_rx+0x42>
			lcd_puts("Unbekannter Motor!\n");
    106e:	8f ee       	ldi	r24, 0xEF	; 239
    1070:	93 e0       	ldi	r25, 0x03	; 3
    1072:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
			//lcd_puts(str_rx);
			Initialized = M_NOTI;
    1076:	8f ef       	ldi	r24, 0xFF	; 255
    1078:	9f ef       	ldi	r25, 0xFF	; 255
    107a:	90 93 d0 06 	sts	0x06D0, r25
    107e:	80 93 cf 06 	sts	0x06CF, r24
		}
		if(Initialized == M_NOTI){
    1082:	80 91 cf 06 	lds	r24, 0x06CF
    1086:	90 91 d0 06 	lds	r25, 0x06D0
    108a:	8f 5f       	subi	r24, 0xFF	; 255
    108c:	9f 4f       	sbci	r25, 0xFF	; 255
    108e:	41 f4       	brne	.+16     	; 0x10a0 <uart_rx+0x60>
			Initialized = switch_Motor(str_rx);
    1090:	8c eb       	ldi	r24, 0xBC	; 188
    1092:	97 e0       	ldi	r25, 0x07	; 7
    1094:	0e 94 33 05 	call	0xa66	; 0xa66 <switch_Motor>
    1098:	90 93 d0 06 	sts	0x06D0, r25
    109c:	80 93 cf 06 	sts	0x06CF, r24
		}
		if(Initialized == M_ISEL)
    10a0:	80 91 cf 06 	lds	r24, 0x06CF
    10a4:	90 91 d0 06 	lds	r25, 0x06D0
    10a8:	89 2b       	or	r24, r25
    10aa:	21 f4       	brne	.+8      	; 0x10b4 <uart_rx+0x74>
			switch_Isel(str_rx);
    10ac:	8c eb       	ldi	r24, 0xBC	; 188
    10ae:	97 e0       	ldi	r25, 0x07	; 7
    10b0:	0e 94 dd 06 	call	0xdba	; 0xdba <switch_Isel>
		if(Initialized == M_CSG)
    10b4:	80 91 cf 06 	lds	r24, 0x06CF
    10b8:	90 91 d0 06 	lds	r25, 0x06D0
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	21 f4       	brne	.+8      	; 0x10c8 <uart_rx+0x88>
			switch_csg(str_rx);
    10c0:	8c eb       	ldi	r24, 0xBC	; 188
    10c2:	97 e0       	ldi	r25, 0x07	; 7
    10c4:	0e 94 e5 05 	call	0xbca	; 0xbca <switch_csg>
		if(Initialized == M_ZETA)
    10c8:	80 91 cf 06 	lds	r24, 0x06CF
    10cc:	90 91 d0 06 	lds	r25, 0x06D0
    10d0:	02 97       	sbiw	r24, 0x02	; 2
    10d2:	21 f4       	brne	.+8      	; 0x10dc <uart_rx+0x9c>
			switch_Zeta(str_rx);
    10d4:	8c eb       	ldi	r24, 0xBC	; 188
    10d6:	97 e0       	ldi	r25, 0x07	; 7
    10d8:	0e 94 a6 08 	call	0x114c	; 0x114c <switch_Zeta>
		if(Initialized == M_TERMINAL)
    10dc:	80 91 cf 06 	lds	r24, 0x06CF
    10e0:	90 91 d0 06 	lds	r25, 0x06D0
    10e4:	03 97       	sbiw	r24, 0x03	; 3
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <uart_rx+0xb0>
			switch_Terminal(str_rx);
    10e8:	8c eb       	ldi	r24, 0xBC	; 188
    10ea:	97 e0       	ldi	r25, 0x07	; 7
    10ec:	0e 94 74 05 	call	0xae8	; 0xae8 <switch_Terminal>
	}
}
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	08 95       	ret

000010f6 <menu_puts>:
	lcd_puts("Selected: ");
	lcd_puts(name);

	ms_spin(750);
}
void 	menu_puts			(void *arg, char *name) {
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
    10fa:	8c 01       	movw	r16, r24
	//my_select(arg, name);
	uart_put_string(arg, D_Stepper);
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
	lcd_clrscr();
    1104:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
	lcd_puts("Send: ");
    1108:	83 e0       	ldi	r24, 0x03	; 3
    110a:	94 e0       	ldi	r25, 0x04	; 4
    110c:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts(arg);
    1110:	c8 01       	movw	r24, r16
    1112:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts("\n");
    1116:	84 e8       	ldi	r24, 0x84	; 132
    1118:	91 e0       	ldi	r25, 0x01	; 1
    111a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
    111e:	84 e6       	ldi	r24, 0x64	; 100
    1120:	90 e0       	ldi	r25, 0x00	; 0

00001122 <outer_2008>:
    1122:	a0 ed       	ldi	r26, 0xD0	; 208
    1124:	b7 e0       	ldi	r27, 0x07	; 7

00001126 <inner_2008>:
    1126:	11 97       	sbiw	r26, 0x01	; 1
    1128:	f1 f7       	brne	.-4      	; 0x1126 <inner_2008>
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	d1 f7       	brne	.-12     	; 0x1122 <outer_2008>
	ms_spin(100);
	//if ((UCSR1A & (1 << RXC1)))
	uart_rx(D_Stepper);
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 20 08 	call	0x1040	; 0x1040 <uart_rx>
    1136:	88 ee       	ldi	r24, 0xE8	; 232
    1138:	93 e0       	ldi	r25, 0x03	; 3

0000113a <outer_2016>:
    113a:	a0 ed       	ldi	r26, 0xD0	; 208
    113c:	b7 e0       	ldi	r27, 0x07	; 7

0000113e <inner_2016>:
    113e:	11 97       	sbiw	r26, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <inner_2016>
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	d1 f7       	brne	.-12     	; 0x113a <outer_2016>
	ms_spin(1000);
}
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	08 95       	ret

0000114c <switch_Zeta>:
		lcd_puts("U_B: ");
		lcd_puts(str_rx);
		lcd_puts("!END       \n");
	}
}
void 	switch_Zeta			(char * str_rx) {
    114c:	af 92       	push	r10
    114e:	bf 92       	push	r11
    1150:	cf 92       	push	r12
    1152:	df 92       	push	r13
    1154:	ef 92       	push	r14
    1156:	ff 92       	push	r15
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	c3 56       	subi	r28, 0x63	; 99
    1166:	d0 40       	sbci	r29, 0x00	; 0
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	cd bf       	out	0x3d, r28	; 61
    1172:	7c 01       	movw	r14, r24
			"D1125",// 7 - Position
			"A8", 	// 8 - Accelartion 8
			"V8",	// 9 - Velocity 8
			"ECHO0",// 10 - Echo abschalten
			"PSET0",// 11 - Ursprung setzen
			0 };
    1174:	de 01       	movw	r26, r28
    1176:	11 96       	adiw	r26, 0x01	; 1
    1178:	ee e3       	ldi	r30, 0x3E	; 62
    117a:	f7 e0       	ldi	r31, 0x07	; 7
    117c:	8a e1       	ldi	r24, 0x1A	; 26
    117e:	01 90       	ld	r0, Z+
    1180:	0d 92       	st	X+, r0
    1182:	81 50       	subi	r24, 0x01	; 1
    1184:	e1 f7       	brne	.-8      	; 0x117e <switch_Zeta+0x32>
	char Position[33];
	char Move_To[40];
	memset(Move_To,  '\0', 40);
    1186:	8e 01       	movw	r16, r28
    1188:	04 5c       	subi	r16, 0xC4	; 196
    118a:	1f 4f       	sbci	r17, 0xFF	; 255
    118c:	88 e2       	ldi	r24, 0x28	; 40
    118e:	d8 01       	movw	r26, r16
    1190:	1d 92       	st	X+, r1
    1192:	8a 95       	dec	r24
    1194:	e9 f7       	brne	.-6      	; 0x1190 <switch_Zeta+0x44>
	Move_To[0] = 'M';
    1196:	8d e4       	ldi	r24, 0x4D	; 77
    1198:	8c af       	std	Y+60, r24	; 0x3c
	Move_To[1] = 'A';
    119a:	81 e4       	ldi	r24, 0x41	; 65
    119c:	8d af       	std	Y+61, r24	; 0x3d
	Move_To[2] = ' ';
    119e:	80 e2       	ldi	r24, 0x20	; 32
    11a0:	8e af       	std	Y+62, r24	; 0x3e
	Move_To[3] = '\0';
    11a2:	1f ae       	std	Y+63, r1	; 0x3f
	switch (FindStringInArray(str_rx, pOptions, 1)) {
    11a4:	c7 01       	movw	r24, r14
    11a6:	be 01       	movw	r22, r28
    11a8:	6f 5f       	subi	r22, 0xFF	; 255
    11aa:	7f 4f       	sbci	r23, 0xFF	; 255
    11ac:	41 e0       	ldi	r20, 0x01	; 1
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	0e 94 0a 05 	call	0xa14	; 0xa14 <FindStringInArray>
    11b4:	87 30       	cpi	r24, 0x07	; 7
    11b6:	91 05       	cpc	r25, r1
    11b8:	6c f4       	brge	.+26     	; 0x11d4 <switch_Zeta+0x88>
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	91 05       	cpc	r25, r1
    11be:	0c f0       	brlt	.+2      	; 0x11c2 <switch_Zeta+0x76>
    11c0:	f5 c0       	rjmp	.+490    	; 0x13ac <inner_2223+0xb0>
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	91 05       	cpc	r25, r1
    11c6:	01 f1       	breq	.+64     	; 0x1208 <switch_Zeta+0xbc>
    11c8:	82 30       	cpi	r24, 0x02	; 2
    11ca:	91 05       	cpc	r25, r1
    11cc:	04 f5       	brge	.+64     	; 0x120e <switch_Zeta+0xc2>
    11ce:	89 2b       	or	r24, r25
    11d0:	c1 f0       	breq	.+48     	; 0x1202 <switch_Zeta+0xb6>
    11d2:	e1 c0       	rjmp	.+450    	; 0x1396 <inner_2223+0x9a>
    11d4:	89 30       	cpi	r24, 0x09	; 9
    11d6:	91 05       	cpc	r25, r1
    11d8:	09 f4       	brne	.+2      	; 0x11dc <switch_Zeta+0x90>
    11da:	cf c0       	rjmp	.+414    	; 0x137a <inner_2223+0x7e>
    11dc:	8a 30       	cpi	r24, 0x0A	; 10
    11de:	91 05       	cpc	r25, r1
    11e0:	44 f4       	brge	.+16     	; 0x11f2 <switch_Zeta+0xa6>
    11e2:	87 30       	cpi	r24, 0x07	; 7
    11e4:	91 05       	cpc	r25, r1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <switch_Zeta+0x9e>
    11e8:	bd c0       	rjmp	.+378    	; 0x1364 <inner_2223+0x68>
    11ea:	08 97       	sbiw	r24, 0x08	; 8
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <switch_Zeta+0xa4>
    11ee:	d3 c0       	rjmp	.+422    	; 0x1396 <inner_2223+0x9a>
    11f0:	dd c0       	rjmp	.+442    	; 0x13ac <inner_2223+0xb0>
    11f2:	8a 30       	cpi	r24, 0x0A	; 10
    11f4:	91 05       	cpc	r25, r1
    11f6:	09 f4       	brne	.+2      	; 0x11fa <switch_Zeta+0xae>
    11f8:	cb c0       	rjmp	.+406    	; 0x1390 <inner_2223+0x94>
    11fa:	0b 97       	sbiw	r24, 0x0b	; 11
    11fc:	09 f0       	breq	.+2      	; 0x1200 <switch_Zeta+0xb4>
    11fe:	cb c0       	rjmp	.+406    	; 0x1396 <inner_2223+0x9a>
    1200:	d5 c0       	rjmp	.+426    	; 0x13ac <inner_2223+0xb0>
	case 0: // Display l�schen
		lcd_clrscr();
    1202:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
    1206:	d2 c0       	rjmp	.+420    	; 0x13ac <inner_2223+0xb0>
		break;
	case 1: // Interner Test
		lcd_puts("Test bestanden     \n");
    1208:	83 e6       	ldi	r24, 0x63	; 99
    120a:	92 e0       	ldi	r25, 0x02	; 2
    120c:	cd c0       	rjmp	.+410    	; 0x13a8 <inner_2223+0xac>
    120e:	84 e6       	ldi	r24, 0x64	; 100
    1210:	90 e0       	ldi	r25, 0x00	; 0

00001212 <outer_2129>:
    1212:	a0 ed       	ldi	r26, 0xD0	; 208
    1214:	b7 e0       	ldi	r27, 0x07	; 7

00001216 <inner_2129>:
    1216:	11 97       	sbiw	r26, 0x01	; 1
    1218:	f1 f7       	brne	.-4      	; 0x1216 <inner_2129>
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	d1 f7       	brne	.-12     	; 0x1212 <outer_2129>
		break;
	case 2: // Go
		ms_spin(100);
		strcat(Move_To, Position);
    121e:	c8 01       	movw	r24, r16
    1220:	be 01       	movw	r22, r28
    1222:	65 5e       	subi	r22, 0xE5	; 229
    1224:	7f 4f       	sbci	r23, 0xFF	; 255
    1226:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <strcat>
		strcat(Move_To, "\n");
    122a:	c8 01       	movw	r24, r16
    122c:	64 e8       	ldi	r22, 0x84	; 132
    122e:	71 e0       	ldi	r23, 0x01	; 1
    1230:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <strcat>
		//lcd_puts("Pos:");
		//lcd_puts(Move_To);

		uart_put_string(Move_To, D_Stepper);
    1234:	c8 01       	movw	r24, r16
    1236:	61 e0       	ldi	r22, 0x01	; 1
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
    123e:	02 e3       	ldi	r16, 0x32	; 50
    1240:	10 e0       	ldi	r17, 0x00	; 0
    1242:	f8 01       	movw	r30, r16

00001244 <outer_2146>:
    1244:	a0 ed       	ldi	r26, 0xD0	; 208
    1246:	b7 e0       	ldi	r27, 0x07	; 7

00001248 <inner_2146>:
    1248:	11 97       	sbiw	r26, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <inner_2146>
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	d1 f7       	brne	.-12     	; 0x1244 <outer_2146>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    1250:	80 91 c8 00 	lds	r24, 0x00C8
    1254:	87 ff       	sbrs	r24, 7
    1256:	16 c0       	rjmp	.+44     	; 0x1284 <inner_2160+0x12>
			uart_rx(D_Stepper);
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 94 20 08 	call	0x1040	; 0x1040 <uart_rx>
		else {
			lcd_puts("Befehl n. bestaetig\n");
			break;
		}

		uart_put_string("A\n", D_Stepper);
    1260:	8e e6       	ldi	r24, 0x6E	; 110
    1262:	93 e0       	ldi	r25, 0x03	; 3
    1264:	61 e0       	ldi	r22, 0x01	; 1
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
    126c:	f8 01       	movw	r30, r16

0000126e <outer_2160>:
    126e:	a0 ed       	ldi	r26, 0xD0	; 208
    1270:	b7 e0       	ldi	r27, 0x07	; 7

00001272 <inner_2160>:
    1272:	11 97       	sbiw	r26, 0x01	; 1
    1274:	f1 f7       	brne	.-4      	; 0x1272 <inner_2160>
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	d1 f7       	brne	.-12     	; 0x126e <outer_2160>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    127a:	80 91 c8 00 	lds	r24, 0x00C8
    127e:	88 23       	and	r24, r24
    1280:	4c f4       	brge	.+18     	; 0x1294 <inner_2160+0x22>
    1282:	03 c0       	rjmp	.+6      	; 0x128a <inner_2160+0x18>
		uart_put_string(Move_To, D_Stepper);
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
			uart_rx(D_Stepper);
		else {
			lcd_puts("Befehl n. bestaetig\n");
    1284:	8a e0       	ldi	r24, 0x0A	; 10
    1286:	94 e0       	ldi	r25, 0x04	; 4
    1288:	8f c0       	rjmp	.+286    	; 0x13a8 <inner_2223+0xac>
		}

		uart_put_string("A\n", D_Stepper);
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
			uart_rx(D_Stepper);
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 20 08 	call	0x1040	; 0x1040 <uart_rx>
    1292:	4c c0       	rjmp	.+152    	; 0x132c <inner_2223+0x30>
		else {
			lcd_puts("Keine Bewegung!\n");
    1294:	83 e9       	ldi	r24, 0x93	; 147
    1296:	93 e0       	ldi	r25, 0x03	; 3
    1298:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
    129c:	47 c0       	rjmp	.+142    	; 0x132c <inner_2223+0x30>
		}

		while (!strcmp(str_rx,"1#")){
			uart_put_string("W\n", D_Stepper);
    129e:	8f e1       	ldi	r24, 0x1F	; 31
    12a0:	94 e0       	ldi	r25, 0x04	; 4
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
    12aa:	f5 01       	movw	r30, r10

000012ac <outer_2194>:
    12ac:	a0 ed       	ldi	r26, 0xD0	; 208
    12ae:	b7 e0       	ldi	r27, 0x07	; 7

000012b0 <inner_2194>:
    12b0:	11 97       	sbiw	r26, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <inner_2194>
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	d1 f7       	brne	.-12     	; 0x12ac <outer_2194>
			ms_spin(100);
			if ((UCSR1A & (1 << RXC1))){
    12b8:	80 91 c8 00 	lds	r24, 0x00C8
    12bc:	87 ff       	sbrs	r24, 7
    12be:	10 c0       	rjmp	.+32     	; 0x12e0 <inner_2194+0x30>
				uart_rx(D_Stepper);
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 20 08 	call	0x1040	; 0x1040 <uart_rx>
				lcd_clrscr();
    12c8:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
				lcd_puts("Position(Akt/Ges): \n");
    12cc:	82 e2       	ldi	r24, 0x22	; 34
    12ce:	94 e0       	ldi	r25, 0x04	; 4
    12d0:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
				lcd_puts(str_rx);
    12d4:	c7 01       	movw	r24, r14
    12d6:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
				lcd_puts(" / ");
    12da:	87 e3       	ldi	r24, 0x37	; 55
    12dc:	94 e0       	ldi	r25, 0x04	; 4
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <inner_2194+0x34>
			}
			else {
				lcd_puts("Keine Antwort\n");
    12e0:	8b eb       	ldi	r24, 0xBB	; 187
    12e2:	93 e0       	ldi	r25, 0x03	; 3
    12e4:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
			}
			wdt_reset();
    12e8:	a8 95       	wdr

			uart_put_string("A\n", D_Stepper);
    12ea:	8e e6       	ldi	r24, 0x6E	; 110
    12ec:	93 e0       	ldi	r25, 0x03	; 3
    12ee:	61 e0       	ldi	r22, 0x01	; 1
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
    12f6:	f6 01       	movw	r30, r12

000012f8 <outer_2223>:
    12f8:	a0 ed       	ldi	r26, 0xD0	; 208
    12fa:	b7 e0       	ldi	r27, 0x07	; 7

000012fc <inner_2223>:
    12fc:	11 97       	sbiw	r26, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <inner_2223>
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	d1 f7       	brne	.-12     	; 0x12f8 <outer_2223>
			ms_spin(50);
			if ((UCSR1A & (1 << RXC1))){
    1304:	80 91 c8 00 	lds	r24, 0x00C8
    1308:	87 ff       	sbrs	r24, 7
    130a:	0a c0       	rjmp	.+20     	; 0x1320 <inner_2223+0x24>
				uart_rx(D_Stepper);
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 94 20 08 	call	0x1040	; 0x1040 <uart_rx>
				//lcd_clrscr();
				//lcd_puts("running to\n");
				//lcd_puts("Position: ");
				lcd_puts(Position);
    1314:	c8 01       	movw	r24, r16
    1316:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
				lcd_puts("\n");
    131a:	84 e8       	ldi	r24, 0x84	; 132
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <inner_2223+0x28>
			}
			else {
				lcd_puts("Keine Antwort\n");
    1320:	8b eb       	ldi	r24, 0xBB	; 187
    1322:	93 e0       	ldi	r25, 0x03	; 3
    1324:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
			}
			wdt_reset();
    1328:	a8 95       	wdr
    132a:	09 c0       	rjmp	.+18     	; 0x133e <inner_2223+0x42>
    132c:	54 e6       	ldi	r21, 0x64	; 100
    132e:	a5 2e       	mov	r10, r21
    1330:	b1 2c       	mov	r11, r1
    1332:	42 e3       	ldi	r20, 0x32	; 50
    1334:	c4 2e       	mov	r12, r20
    1336:	d1 2c       	mov	r13, r1
			if ((UCSR1A & (1 << RXC1))){
				uart_rx(D_Stepper);
				//lcd_clrscr();
				//lcd_puts("running to\n");
				//lcd_puts("Position: ");
				lcd_puts(Position);
    1338:	8e 01       	movw	r16, r28
    133a:	05 5e       	subi	r16, 0xE5	; 229
    133c:	1f 4f       	sbci	r17, 0xFF	; 255
			uart_rx(D_Stepper);
		else {
			lcd_puts("Keine Bewegung!\n");
		}

		while (!strcmp(str_rx,"1#")){
    133e:	c7 01       	movw	r24, r14
    1340:	6a ec       	ldi	r22, 0xCA	; 202
    1342:	73 e0       	ldi	r23, 0x03	; 3
    1344:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <strcmp>
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	09 f4       	brne	.+2      	; 0x134e <inner_2223+0x52>
    134c:	a8 cf       	rjmp	.-176    	; 0x129e <inner_2160+0x2c>
			else {
				lcd_puts("Keine Antwort\n");
			}
			wdt_reset();
		}
		lcd_puts("Position: \n");
    134e:	8d ec       	ldi	r24, 0xCD	; 205
    1350:	93 e0       	ldi	r25, 0x03	; 3
    1352:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(Position);
    1356:	ce 01       	movw	r24, r28
    1358:	4b 96       	adiw	r24, 0x1b	; 27
    135a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(" Erreicht\n");
    135e:	89 ed       	ldi	r24, 0xD9	; 217
    1360:	93 e0       	ldi	r25, 0x03	; 3
    1362:	0d c0       	rjmp	.+26     	; 0x137e <inner_2223+0x82>
		break;
	case 6:
		//lcd_puts("MA1 empfangen     \n");
		break;
	case 7: // Position Setzen
		memset(Position, '\0', 33);			// Array mit Nullen bef�llen
    1364:	fe 01       	movw	r30, r28
    1366:	7b 96       	adiw	r30, 0x1b	; 27
    1368:	81 e2       	ldi	r24, 0x21	; 33
    136a:	df 01       	movw	r26, r30
    136c:	1d 92       	st	X+, r1
    136e:	8a 95       	dec	r24
    1370:	e9 f7       	brne	.-6      	; 0x136c <inner_2223+0x70>
		Position_Zeta(Position);
    1372:	cf 01       	movw	r24, r30
    1374:	0e 94 72 04 	call	0x8e4	; 0x8e4 <Position_Zeta>
    1378:	19 c0       	rjmp	.+50     	; 0x13ac <inner_2223+0xb0>
		break;
	case 8:
		break;
	case 9:		//V8
		lcd_puts("Speed set          \n");
    137a:	8c e4       	ldi	r24, 0x4C	; 76
    137c:	94 e0       	ldi	r25, 0x04	; 4
    137e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string(B_Zeta_Return, D_RapidForm);
    1382:	8b e3       	ldi	r24, 0x3B	; 59
    1384:	94 e0       	ldi	r25, 0x04	; 4
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
    138e:	0e c0       	rjmp	.+28     	; 0x13ac <inner_2223+0xb0>
		break;
	case 10:
		lcd_puts("Echo off           \n");
    1390:	81 e6       	ldi	r24, 0x61	; 97
    1392:	94 e0       	ldi	r25, 0x04	; 4
    1394:	09 c0       	rjmp	.+18     	; 0x13a8 <inner_2223+0xac>
		//uart_put_string("ECHO0\r", D_RapidForm);
		break;
	case 11:
		break;
	default:
		lcd_puts("Z:");
    1396:	86 e7       	ldi	r24, 0x76	; 118
    1398:	94 e0       	ldi	r25, 0x04	; 4
    139a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(str_rx);
    139e:	c7 01       	movw	r24, r14
    13a0:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts("   \n");
    13a4:	89 e7       	ldi	r24, 0x79	; 121
    13a6:	94 e0       	ldi	r25, 0x04	; 4
    13a8:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		//Initialized = switch_Inputs(str_rx);
	}
}
    13ac:	cd 59       	subi	r28, 0x9D	; 157
    13ae:	df 4f       	sbci	r29, 0xFF	; 255
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	bf 90       	pop	r11
    13cc:	af 90       	pop	r10
    13ce:	08 95       	ret

000013d0 <main>:
//
//      Hauptschleife
//
//////////////////////////////
int main(void) {
	init();
    13d0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <init>
	while (1) {
		wdt_reset();
    13d4:	a8 95       	wdr
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    13d6:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    13d8:	90 91 20 08 	lds	r25, 0x0820
    13dc:	91 70       	andi	r25, 0x01	; 1
  key_press ^= key_mask;                          // clear key(s)
    13de:	80 91 20 08 	lds	r24, 0x0820
    13e2:	89 27       	eor	r24, r25
    13e4:	80 93 20 08 	sts	0x0820, r24
  sei();
    13e8:	78 94       	sei
		if (get_key_press(1 << KEY0) || get_key_rpt(1 << KEY0))
    13ea:	99 23       	and	r25, r25
    13ec:	61 f4       	brne	.+24     	; 0x1406 <main+0x36>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    13ee:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    13f0:	90 91 bb 07 	lds	r25, 0x07BB
    13f4:	91 70       	andi	r25, 0x01	; 1
  key_rpt ^= key_mask;                            // clear key(s)
    13f6:	80 91 bb 07 	lds	r24, 0x07BB
    13fa:	89 27       	eor	r24, r25
    13fc:	80 93 bb 07 	sts	0x07BB, r24
  sei();
    1400:	78 94       	sei
    1402:	99 23       	and	r25, r25
    1404:	11 f0       	breq	.+4      	; 0x140a <main+0x3a>
			led_lauflicht(); // LED Lauflicht
    1406:	0e 94 db 02 	call	0x5b6	; 0x5b6 <led_lauflicht>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    140a:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    140c:	90 91 20 08 	lds	r25, 0x0820
    1410:	92 70       	andi	r25, 0x02	; 2
  key_press ^= key_mask;                          // clear key(s)
    1412:	80 91 20 08 	lds	r24, 0x0820
    1416:	89 27       	eor	r24, r25
    1418:	80 93 20 08 	sts	0x0820, r24
  sei();
    141c:	78 94       	sei
		if (get_key_press(1 << KEY1))
    141e:	99 23       	and	r25, r25
    1420:	31 f0       	breq	.+12     	; 0x142e <main+0x5e>
			uart_put_string("0\n", D_RapidForm);
    1422:	8e e7       	ldi	r24, 0x7E	; 126
    1424:	94 e0       	ldi	r25, 0x04	; 4
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	0e 94 1e 02 	call	0x43c	; 0x43c <uart_put_string>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    142e:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1430:	90 91 20 08 	lds	r25, 0x0820
    1434:	94 70       	andi	r25, 0x04	; 4
  key_press ^= key_mask;                          // clear key(s)
    1436:	80 91 20 08 	lds	r24, 0x0820
    143a:	89 27       	eor	r24, r25
    143c:	80 93 20 08 	sts	0x0820, r24
  sei();
    1440:	78 94       	sei
		if( get_key_press( 1<<KEY2 ) )
    1442:	99 23       	and	r25, r25
    1444:	11 f0       	breq	.+4      	; 0x144a <main+0x7a>
			lcd_clrscr();
    1446:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    144a:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    144c:	90 91 20 08 	lds	r25, 0x0820
    1450:	98 70       	andi	r25, 0x08	; 8
  key_press ^= key_mask;                          // clear key(s)
    1452:	80 91 20 08 	lds	r24, 0x0820
    1456:	89 27       	eor	r24, r25
    1458:	80 93 20 08 	sts	0x0820, r24
  sei();
    145c:	78 94       	sei


		if (get_key_press(1 << KEY3)) {
    145e:	99 23       	and	r25, r25
    1460:	51 f0       	breq	.+20     	; 0x1476 <main+0xa6>
			lcd_puts("Betrete Men�!\n");
    1462:	81 e8       	ldi	r24, 0x81	; 129
    1464:	94 e0       	ldi	r25, 0x04	; 4
    1466:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
			menu_enter(&menu_context, &menu_main);
    146a:	89 ec       	ldi	r24, 0xC9	; 201
    146c:	96 e0       	ldi	r25, 0x06	; 6
    146e:	6c e7       	ldi	r22, 0x7C	; 124
    1470:	76 e0       	ldi	r23, 0x06	; 6
    1472:	0e 94 37 0b 	call	0x166e	; 0x166e <menu_enter>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1476:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1478:	90 91 20 08 	lds	r25, 0x0820
    147c:	90 71       	andi	r25, 0x10	; 16
  key_press ^= key_mask;                          // clear key(s)
    147e:	80 91 20 08 	lds	r24, 0x0820
    1482:	89 27       	eor	r24, r25
    1484:	80 93 20 08 	sts	0x0820, r24
  sei();
    1488:	78 94       	sei
		}

		if (get_key_press(1 << KEY4))
    148a:	99 23       	and	r25, r25
    148c:	21 f0       	breq	.+8      	; 0x1496 <main+0xc6>
			menu_select(&menu_context); // 4 - Ausw�hlen
    148e:	89 ec       	ldi	r24, 0xC9	; 201
    1490:	96 e0       	ldi	r25, 0x06	; 6
    1492:	0e 94 b2 0b 	call	0x1764	; 0x1764 <menu_select>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1496:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1498:	90 91 20 08 	lds	r25, 0x0820
    149c:	90 72       	andi	r25, 0x20	; 32
  key_press ^= key_mask;                          // clear key(s)
    149e:	80 91 20 08 	lds	r24, 0x0820
    14a2:	89 27       	eor	r24, r25
    14a4:	80 93 20 08 	sts	0x0820, r24
  sei();
    14a8:	78 94       	sei
		if (get_key_press(1 << KEY5) || get_key_rpt(1 << KEY5)) // 5 - Next
    14aa:	99 23       	and	r25, r25
    14ac:	61 f4       	brne	.+24     	; 0x14c6 <main+0xf6>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14ae:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    14b0:	90 91 bb 07 	lds	r25, 0x07BB
    14b4:	90 72       	andi	r25, 0x20	; 32
  key_rpt ^= key_mask;                            // clear key(s)
    14b6:	80 91 bb 07 	lds	r24, 0x07BB
    14ba:	89 27       	eor	r24, r25
    14bc:	80 93 bb 07 	sts	0x07BB, r24
  sei();
    14c0:	78 94       	sei
    14c2:	99 23       	and	r25, r25
    14c4:	21 f0       	breq	.+8      	; 0x14ce <main+0xfe>
			menu_next_entry(&menu_context);
    14c6:	89 ec       	ldi	r24, 0xC9	; 201
    14c8:	96 e0       	ldi	r25, 0x06	; 6
    14ca:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <menu_next_entry>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14ce:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    14d0:	90 91 20 08 	lds	r25, 0x0820
    14d4:	90 74       	andi	r25, 0x40	; 64
  key_press ^= key_mask;                          // clear key(s)
    14d6:	80 91 20 08 	lds	r24, 0x0820
    14da:	89 27       	eor	r24, r25
    14dc:	80 93 20 08 	sts	0x0820, r24
  sei();
    14e0:	78 94       	sei
		if (get_key_press(1 << KEY6) || get_key_rpt(1 << KEY6)) // 6 - Previous
    14e2:	99 23       	and	r25, r25
    14e4:	61 f4       	brne	.+24     	; 0x14fe <main+0x12e>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14e6:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    14e8:	90 91 bb 07 	lds	r25, 0x07BB
    14ec:	90 74       	andi	r25, 0x40	; 64
  key_rpt ^= key_mask;                            // clear key(s)
    14ee:	80 91 bb 07 	lds	r24, 0x07BB
    14f2:	89 27       	eor	r24, r25
    14f4:	80 93 bb 07 	sts	0x07BB, r24
  sei();
    14f8:	78 94       	sei
    14fa:	99 23       	and	r25, r25
    14fc:	21 f0       	breq	.+8      	; 0x1506 <main+0x136>
			menu_prev_entry(&menu_context);
    14fe:	89 ec       	ldi	r24, 0xC9	; 201
    1500:	96 e0       	ldi	r25, 0x06	; 6
    1502:	0e 94 56 0b 	call	0x16ac	; 0x16ac <menu_prev_entry>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1506:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1508:	90 91 20 08 	lds	r25, 0x0820
    150c:	90 78       	andi	r25, 0x80	; 128
  key_press ^= key_mask;                          // clear key(s)
    150e:	80 91 20 08 	lds	r24, 0x0820
    1512:	89 27       	eor	r24, r25
    1514:	80 93 20 08 	sts	0x0820, r24
  sei();
    1518:	78 94       	sei
		if (get_key_press(1 << KEY7))
    151a:	99 23       	and	r25, r25
    151c:	21 f0       	breq	.+8      	; 0x1526 <main+0x156>
			menu_exit(&menu_context); // 7 - Men� zur�ck
    151e:	89 ec       	ldi	r24, 0xC9	; 201
    1520:	96 e0       	ldi	r25, 0x06	; 6
    1522:	0e 94 45 0b 	call	0x168a	; 0x168a <menu_exit>

		if ((UCSR0A & (1 << RXC0)))
    1526:	80 91 c0 00 	lds	r24, 0x00C0
    152a:	87 ff       	sbrs	r24, 7
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <main+0x166>
			uart_rx(D_RapidForm);
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 20 08 	call	0x1040	; 0x1040 <uart_rx>
		if ((UCSR1A & (1 << RXC1)))
    1536:	80 91 c8 00 	lds	r24, 0x00C8
    153a:	87 ff       	sbrs	r24, 7
    153c:	4b cf       	rjmp	.-362    	; 0x13d4 <main+0x4>
			uart_rx(D_Stepper);
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 20 08 	call	0x1040	; 0x1040 <uart_rx>
    1546:	46 cf       	rjmp	.-372    	; 0x13d4 <main+0x4>

00001548 <menu_display>:
/*
 * Display the current menu in the context
 */
 
void menu_display(menu_context_t *context)
{
    1548:	9f 92       	push	r9
    154a:	af 92       	push	r10
    154c:	bf 92       	push	r11
    154e:	cf 92       	push	r12
    1550:	df 92       	push	r13
    1552:	ef 92       	push	r14
    1554:	ff 92       	push	r15
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	7c 01       	movw	r14, r24
	uint8_t i;
	menu_t *menu = context->menu;
    1560:	fc 01       	movw	r30, r24
    1562:	c4 80       	ldd	r12, Z+4	; 0x04
    1564:	d5 80       	ldd	r13, Z+5	; 0x05
    1566:	bb 24       	eor	r11, r11
    1568:	99 24       	eor	r9, r9
    156a:	52 c0       	rjmp	.+164    	; 0x1610 <menu_display+0xc8>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    156c:	e9 2d       	mov	r30, r9
    156e:	f0 e0       	ldi	r31, 0x00	; 0
			if (dindex++ >= menu->num_entries - menu->top_entry)
    1570:	e2 17       	cp	r30, r18
    1572:	f3 07       	cpc	r31, r19
    1574:	0c f0       	brlt	.+2      	; 0x1578 <menu_display+0x30>
    1576:	6b c0       	rjmp	.+214    	; 0x164e <menu_display+0x106>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    1578:	8f 01       	movw	r16, r30
    157a:	04 0f       	add	r16, r20
    157c:	15 1f       	adc	r17, r21
			if (dindex++ >= menu->num_entries - menu->top_entry)
    157e:	93 94       	inc	r9
				goto entries_done;
		} while (disp_entry->flags & MENU_FLAG_HIDDEN);
    1580:	f8 01       	movw	r30, r16
    1582:	ee 0f       	add	r30, r30
    1584:	ff 1f       	adc	r31, r31
    1586:	e0 0f       	add	r30, r16
    1588:	f1 1f       	adc	r31, r17
    158a:	63 e0       	ldi	r22, 0x03	; 3
    158c:	ee 0f       	add	r30, r30
    158e:	ff 1f       	adc	r31, r31
    1590:	6a 95       	dec	r22
    1592:	e1 f7       	brne	.-8      	; 0x158c <menu_display+0x44>
    1594:	ec 0d       	add	r30, r12
    1596:	fd 1d       	adc	r31, r13
    1598:	85 81       	ldd	r24, Z+5	; 0x05
    159a:	81 fd       	sbrc	r24, 1
    159c:	e7 cf       	rjmp	.-50     	; 0x156c <menu_display+0x24>
			return;
#endif

		// Go to correct x,y locations and print the entry

		menu_set_pos(context->x_loc, context->y_loc + i);
    159e:	f7 01       	movw	r30, r14
    15a0:	61 81       	ldd	r22, Z+1	; 0x01
    15a2:	6b 0d       	add	r22, r11
    15a4:	80 81       	ld	r24, Z
    15a6:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
	if (selected)
		menu_set_inverse();
#else
	// No inverse; do workaround

	max_width--;
    15aa:	f7 01       	movw	r30, r14
    15ac:	a3 80       	ldd	r10, Z+3	; 0x03
    15ae:	aa 94       	dec	r10
	if (selected) {
    15b0:	f6 01       	movw	r30, r12
    15b2:	21 81       	ldd	r18, Z+1	; 0x01
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	2f 5f       	subi	r18, 0xFF	; 255
    15b8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ba:	80 81       	ld	r24, Z
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	89 0d       	add	r24, r9
    15c0:	91 1d       	adc	r25, r1
    15c2:	28 17       	cp	r18, r24
    15c4:	39 07       	cpc	r19, r25
    15c6:	11 f4       	brne	.+4      	; 0x15cc <menu_display+0x84>
		menu_putchar('*');
    15c8:	8a e2       	ldi	r24, 0x2A	; 42
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <menu_display+0x86>
	} else {
		menu_putchar(' ');
    15cc:	80 e2       	ldi	r24, 0x20	; 32
    15ce:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_putc>
    15d2:	e8 01       	movw	r28, r16
    15d4:	cc 0f       	add	r28, r28
    15d6:	dd 1f       	adc	r29, r29
    15d8:	c0 0f       	add	r28, r16
    15da:	d1 1f       	adc	r29, r17
    15dc:	21 96       	adiw	r28, 0x01	; 1
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	cc 0f       	add	r28, r28
    15e2:	dd 1f       	adc	r29, r29
    15e4:	8a 95       	dec	r24
    15e6:	e1 f7       	brne	.-8      	; 0x15e0 <menu_display+0x98>
    15e8:	cc 0d       	add	r28, r12
    15ea:	dd 1d       	adc	r29, r13
    15ec:	10 e0       	ldi	r17, 0x00	; 0
    15ee:	06 c0       	rjmp	.+12     	; 0x15fc <menu_display+0xb4>
	
	// Print the characters in the name; fill out to width with
	//  spaces (mainly for inverse)
	
	for (i = 0; i < max_width; i++) {
		if (!entry->name[i])
    15f0:	89 91       	ld	r24, Y+
    15f2:	88 23       	and	r24, r24
    15f4:	31 f0       	breq	.+12     	; 0x1602 <menu_display+0xba>
			break;
			
		menu_putchar(entry->name[i]);
    15f6:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_putc>
#endif		
	
	// Print the characters in the name; fill out to width with
	//  spaces (mainly for inverse)
	
	for (i = 0; i < max_width; i++) {
    15fa:	1f 5f       	subi	r17, 0xFF	; 255
    15fc:	1a 15       	cp	r17, r10
    15fe:	c0 f3       	brcs	.-16     	; 0x15f0 <menu_display+0xa8>
    1600:	06 c0       	rjmp	.+12     	; 0x160e <menu_display+0xc6>
			
		menu_putchar(entry->name[i]);
	}
	
	for (; i < max_width; i++)
		menu_putchar(' ');
    1602:	80 e2       	ldi	r24, 0x20	; 32
    1604:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_putc>
			break;
			
		menu_putchar(entry->name[i]);
	}
	
	for (; i < max_width; i++)
    1608:	1f 5f       	subi	r17, 0xFF	; 255
    160a:	1a 15       	cp	r17, r10
    160c:	d0 f3       	brcs	.-12     	; 0x1602 <menu_display+0xba>
	menu_clear();
#endif

	// Display only those entries that will fit on the display

	for (i = 0; i < context->height; i++) {
    160e:	b3 94       	inc	r11
    1610:	f7 01       	movw	r30, r14
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	b8 16       	cp	r11, r24
    1616:	d8 f4       	brcc	.+54     	; 0x164e <menu_display+0x106>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    1618:	f6 01       	movw	r30, r12
    161a:	80 81       	ld	r24, Z
    161c:	48 2f       	mov	r20, r24
    161e:	50 e0       	ldi	r21, 0x00	; 0
			if (dindex++ >= menu->num_entries - menu->top_entry)
    1620:	82 81       	ldd	r24, Z+2	; 0x02
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	24 1b       	sub	r18, r20
    1628:	35 0b       	sbc	r19, r21
    162a:	a0 cf       	rjmp	.-192    	; 0x156c <menu_display+0x24>

#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
		menu_set_pos(context->x_loc, context->y_loc + i);
    162c:	f7 01       	movw	r30, r14
    162e:	61 81       	ldd	r22, Z+1	; 0x01
    1630:	6b 0d       	add	r22, r11
    1632:	80 81       	ld	r24, Z
    1634:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
    1638:	10 e0       	ldi	r17, 0x00	; 0
    163a:	04 c0       	rjmp	.+8      	; 0x1644 <menu_display+0xfc>
		for (j = 0; j < context->width; j++) {
			menu_putchar(' ');
    163c:	80 e2       	ldi	r24, 0x20	; 32
    163e:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_putc>
#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
		menu_set_pos(context->x_loc, context->y_loc + i);
		for (j = 0; j < context->width; j++) {
    1642:	1f 5f       	subi	r17, 0xFF	; 255
    1644:	f7 01       	movw	r30, r14
    1646:	83 81       	ldd	r24, Z+3	; 0x03
    1648:	18 17       	cp	r17, r24
    164a:	c0 f3       	brcs	.-16     	; 0x163c <menu_display+0xf4>
entries_done:

#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
    164c:	b3 94       	inc	r11
    164e:	f7 01       	movw	r30, r14
    1650:	82 81       	ldd	r24, Z+2	; 0x02
    1652:	b8 16       	cp	r11, r24
    1654:	58 f3       	brcs	.-42     	; 0x162c <menu_display+0xe4>
		for (j = 0; j < context->width; j++) {
			menu_putchar(' ');
		}
	}	
#endif	
}
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	ff 90       	pop	r15
    1660:	ef 90       	pop	r14
    1662:	df 90       	pop	r13
    1664:	cf 90       	pop	r12
    1666:	bf 90       	pop	r11
    1668:	af 90       	pop	r10
    166a:	9f 90       	pop	r9
    166c:	08 95       	ret

0000166e <menu_enter>:
 *  so when we exit we can go back, and update the menu context to
 *  reflect new menu... then display it.
 */

void menu_enter(menu_context_t *context, menu_t *menu)
{
    166e:	fc 01       	movw	r30, r24
    1670:	db 01       	movw	r26, r22
	menu->previous = context->menu;
    1672:	84 81       	ldd	r24, Z+4	; 0x04
    1674:	95 81       	ldd	r25, Z+5	; 0x05
    1676:	14 96       	adiw	r26, 0x04	; 4
    1678:	9c 93       	st	X, r25
    167a:	8e 93       	st	-X, r24
    167c:	13 97       	sbiw	r26, 0x03	; 3
	context->menu = menu;
    167e:	75 83       	std	Z+5, r23	; 0x05
    1680:	64 83       	std	Z+4, r22	; 0x04
	menu_display(context);
    1682:	cf 01       	movw	r24, r30
    1684:	0e 94 a4 0a 	call	0x1548	; 0x1548 <menu_display>
}
    1688:	08 95       	ret

0000168a <menu_exit>:
 * Exit a menu (go to the previous menu) -- if there is no previous
 *  menu, don't do anything.
 */

void menu_exit(menu_context_t *context)
{
    168a:	dc 01       	movw	r26, r24
	if (context->menu->previous) {
    168c:	14 96       	adiw	r26, 0x04	; 4
    168e:	ed 91       	ld	r30, X+
    1690:	fc 91       	ld	r31, X
    1692:	15 97       	sbiw	r26, 0x05	; 5
    1694:	83 81       	ldd	r24, Z+3	; 0x03
    1696:	94 81       	ldd	r25, Z+4	; 0x04
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	39 f0       	breq	.+14     	; 0x16aa <menu_exit+0x20>
		context->menu = context->menu->previous;
    169c:	15 96       	adiw	r26, 0x05	; 5
    169e:	9c 93       	st	X, r25
    16a0:	8e 93       	st	-X, r24
    16a2:	14 97       	sbiw	r26, 0x04	; 4
		menu_display(context);
    16a4:	cd 01       	movw	r24, r26
    16a6:	0e 94 a4 0a 	call	0x1548	; 0x1548 <menu_display>
    16aa:	08 95       	ret

000016ac <menu_prev_entry>:
 *  bounds.  Also adjust current top entry in display if needed to fit new
 *  entry on display.
 */ 

void menu_prev_entry(menu_context_t *context)
{
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	ec 01       	movw	r28, r24
	menu_t *menu = context->menu;
    16b2:	ac 81       	ldd	r26, Y+4	; 0x04
    16b4:	bd 81       	ldd	r27, Y+5	; 0x05
	uint8_t new_entry = menu->current_entry;
    16b6:	11 96       	adiw	r26, 0x01	; 1
    16b8:	2c 91       	ld	r18, X
    16ba:	11 97       	sbiw	r26, 0x01	; 1
	

#ifndef CONFIG_TINYMENU_COMPACT
	while(1) {
		if (new_entry-- == 0) // Watch bounds
    16bc:	22 23       	and	r18, r18
    16be:	e1 f0       	breq	.+56     	; 0x16f8 <menu_prev_entry+0x4c>
    16c0:	21 50       	subi	r18, 0x01	; 1
			return;
			
		if (!(menu->entry[new_entry].flags & MENU_FLAG_HIDDEN))
    16c2:	82 2f       	mov	r24, r18
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	fc 01       	movw	r30, r24
    16c8:	ee 0f       	add	r30, r30
    16ca:	ff 1f       	adc	r31, r31
    16cc:	e8 0f       	add	r30, r24
    16ce:	f9 1f       	adc	r31, r25
    16d0:	83 e0       	ldi	r24, 0x03	; 3
    16d2:	ee 0f       	add	r30, r30
    16d4:	ff 1f       	adc	r31, r31
    16d6:	8a 95       	dec	r24
    16d8:	e1 f7       	brne	.-8      	; 0x16d2 <menu_prev_entry+0x26>
    16da:	ea 0f       	add	r30, r26
    16dc:	fb 1f       	adc	r31, r27
    16de:	85 81       	ldd	r24, Z+5	; 0x05
    16e0:	81 fd       	sbrc	r24, 1
    16e2:	ec cf       	rjmp	.-40     	; 0x16bc <menu_prev_entry+0x10>
#else
	if (new_entry-- == 0)
		return;
#endif
	
	menu->current_entry = new_entry;
    16e4:	11 96       	adiw	r26, 0x01	; 1
    16e6:	2c 93       	st	X, r18
    16e8:	11 97       	sbiw	r26, 0x01	; 1
	
	if (menu->current_entry < menu->top_entry) 
    16ea:	8c 91       	ld	r24, X
    16ec:	28 17       	cp	r18, r24
    16ee:	08 f4       	brcc	.+2      	; 0x16f2 <menu_prev_entry+0x46>
		menu->top_entry = menu->current_entry;
    16f0:	2c 93       	st	X, r18
		
	menu_display(context);
    16f2:	ce 01       	movw	r24, r28
    16f4:	0e 94 a4 0a 	call	0x1548	; 0x1548 <menu_display>
}
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	08 95       	ret

000016fe <menu_next_entry>:
 *  Also adjust current top entry in display if needed to fit new entry
 *  on display
 */
 
void menu_next_entry(menu_context_t *context)
{
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	ec 01       	movw	r28, r24
	menu_t *menu = context->menu;
    1704:	ac 81       	ldd	r26, Y+4	; 0x04
    1706:	bd 81       	ldd	r27, Y+5	; 0x05
	uint8_t new_entry = menu->current_entry;
    1708:	11 96       	adiw	r26, 0x01	; 1
    170a:	2c 91       	ld	r18, X
    170c:	11 97       	sbiw	r26, 0x01	; 1
	

#ifndef CONFIG_TINYMENU_COMPACT
	while(1) {
		if (++new_entry >= menu->num_entries) // watch bounds
    170e:	12 96       	adiw	r26, 0x02	; 2
    1710:	9c 91       	ld	r25, X
    1712:	12 97       	sbiw	r26, 0x02	; 2
    1714:	2f 5f       	subi	r18, 0xFF	; 255
    1716:	29 17       	cp	r18, r25
    1718:	10 f5       	brcc	.+68     	; 0x175e <menu_next_entry+0x60>
			return;
		if (!(menu->entry[new_entry].flags & MENU_FLAG_HIDDEN))
    171a:	42 2f       	mov	r20, r18
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	fa 01       	movw	r30, r20
    1720:	ee 0f       	add	r30, r30
    1722:	ff 1f       	adc	r31, r31
    1724:	e4 0f       	add	r30, r20
    1726:	f5 1f       	adc	r31, r21
    1728:	63 e0       	ldi	r22, 0x03	; 3
    172a:	ee 0f       	add	r30, r30
    172c:	ff 1f       	adc	r31, r31
    172e:	6a 95       	dec	r22
    1730:	e1 f7       	brne	.-8      	; 0x172a <menu_next_entry+0x2c>
    1732:	ea 0f       	add	r30, r26
    1734:	fb 1f       	adc	r31, r27
    1736:	85 81       	ldd	r24, Z+5	; 0x05
    1738:	81 fd       	sbrc	r24, 1
    173a:	ec cf       	rjmp	.-40     	; 0x1714 <menu_next_entry+0x16>
#else
	if (++new_entry >= menu->num_entries)
		return;
#endif
	
	menu->current_entry = new_entry;
    173c:	11 96       	adiw	r26, 0x01	; 1
    173e:	2c 93       	st	X, r18
    1740:	11 97       	sbiw	r26, 0x01	; 1
	
	if (menu->current_entry >= menu->top_entry + context->height)
    1742:	3a 81       	ldd	r19, Y+2	; 0x02
    1744:	8c 91       	ld	r24, X
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	83 0f       	add	r24, r19
    174a:	91 1d       	adc	r25, r1
    174c:	48 17       	cp	r20, r24
    174e:	59 07       	cpc	r21, r25
    1750:	1c f0       	brlt	.+6      	; 0x1758 <menu_next_entry+0x5a>
		menu->top_entry = menu->current_entry - context->height + 1;
    1752:	23 1b       	sub	r18, r19
    1754:	2f 5f       	subi	r18, 0xFF	; 255
    1756:	2c 93       	st	X, r18
	
	menu_display(context);
    1758:	ce 01       	movw	r24, r28
    175a:	0e 94 a4 0a 	call	0x1548	; 0x1548 <menu_display>
}
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	08 95       	ret

00001764 <menu_select>:
 *  enter the submenu)
 *
 */

void menu_select(menu_context_t *context)
{
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	8c 01       	movw	r16, r24
	menu_entry_t *entry;


	entry = &context->menu->entry[context->menu->current_entry];
    176e:	fc 01       	movw	r30, r24
    1770:	c4 81       	ldd	r28, Z+4	; 0x04
    1772:	d5 81       	ldd	r29, Z+5	; 0x05
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	90 e0       	ldi	r25, 0x00	; 0

	if (entry->flags & MENU_FLAG_SUBMENU) {
    1778:	9c 01       	movw	r18, r24
    177a:	22 0f       	add	r18, r18
    177c:	33 1f       	adc	r19, r19
    177e:	28 0f       	add	r18, r24
    1780:	39 1f       	adc	r19, r25
    1782:	d9 01       	movw	r26, r18
    1784:	f3 e0       	ldi	r31, 0x03	; 3
    1786:	aa 0f       	add	r26, r26
    1788:	bb 1f       	adc	r27, r27
    178a:	fa 95       	dec	r31
    178c:	e1 f7       	brne	.-8      	; 0x1786 <menu_select+0x22>
    178e:	ac 0f       	add	r26, r28
    1790:	bd 1f       	adc	r27, r29
    1792:	15 96       	adiw	r26, 0x05	; 5
    1794:	8c 91       	ld	r24, X
    1796:	15 97       	sbiw	r26, 0x05	; 5
    1798:	80 ff       	sbrs	r24, 0
    179a:	08 c0       	rjmp	.+16     	; 0x17ac <menu_select+0x48>
		// Submenu -- enter it
	
		menu_enter(context, (menu_t *)entry->value);
    179c:	5b 96       	adiw	r26, 0x1b	; 27
    179e:	6d 91       	ld	r22, X+
    17a0:	7c 91       	ld	r23, X
    17a2:	5c 97       	sbiw	r26, 0x1c	; 28
    17a4:	c8 01       	movw	r24, r16
    17a6:	0e 94 37 0b 	call	0x166e	; 0x166e <menu_enter>
    17aa:	13 c0       	rjmp	.+38     	; 0x17d2 <menu_select+0x6e>
	} else {
		// Regular entry -- execute function
	
		entry->select(entry->value, entry->name);
    17ac:	c9 01       	movw	r24, r18
    17ae:	01 96       	adiw	r24, 0x01	; 1
    17b0:	e3 e0       	ldi	r30, 0x03	; 3
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	ea 95       	dec	r30
    17b8:	e1 f7       	brne	.-8      	; 0x17b2 <menu_select+0x4e>
    17ba:	c8 0f       	add	r28, r24
    17bc:	d9 1f       	adc	r29, r25
    17be:	16 96       	adiw	r26, 0x06	; 6
    17c0:	ed 91       	ld	r30, X+
    17c2:	fc 91       	ld	r31, X
    17c4:	17 97       	sbiw	r26, 0x07	; 7
    17c6:	5b 96       	adiw	r26, 0x1b	; 27
    17c8:	8d 91       	ld	r24, X+
    17ca:	9c 91       	ld	r25, X
    17cc:	5c 97       	sbiw	r26, 0x1c	; 28
    17ce:	be 01       	movw	r22, r28
    17d0:	09 95       	icall
	}
	
	// Re-display menu on return
	
	menu_display(context);
    17d2:	c8 01       	movw	r24, r16
    17d4:	0e 94 a4 0a 	call	0x1548	; 0x1548 <menu_display>
}
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	08 95       	ret

000017e2 <__mulsi3>:
    17e2:	62 9f       	mul	r22, r18
    17e4:	d0 01       	movw	r26, r0
    17e6:	73 9f       	mul	r23, r19
    17e8:	f0 01       	movw	r30, r0
    17ea:	82 9f       	mul	r24, r18
    17ec:	e0 0d       	add	r30, r0
    17ee:	f1 1d       	adc	r31, r1
    17f0:	64 9f       	mul	r22, r20
    17f2:	e0 0d       	add	r30, r0
    17f4:	f1 1d       	adc	r31, r1
    17f6:	92 9f       	mul	r25, r18
    17f8:	f0 0d       	add	r31, r0
    17fa:	83 9f       	mul	r24, r19
    17fc:	f0 0d       	add	r31, r0
    17fe:	74 9f       	mul	r23, r20
    1800:	f0 0d       	add	r31, r0
    1802:	65 9f       	mul	r22, r21
    1804:	f0 0d       	add	r31, r0
    1806:	99 27       	eor	r25, r25
    1808:	72 9f       	mul	r23, r18
    180a:	b0 0d       	add	r27, r0
    180c:	e1 1d       	adc	r30, r1
    180e:	f9 1f       	adc	r31, r25
    1810:	63 9f       	mul	r22, r19
    1812:	b0 0d       	add	r27, r0
    1814:	e1 1d       	adc	r30, r1
    1816:	f9 1f       	adc	r31, r25
    1818:	bd 01       	movw	r22, r26
    181a:	cf 01       	movw	r24, r30
    181c:	11 24       	eor	r1, r1
    181e:	08 95       	ret

00001820 <__divmodhi4>:
    1820:	97 fb       	bst	r25, 7
    1822:	09 2e       	mov	r0, r25
    1824:	07 26       	eor	r0, r23
    1826:	0a d0       	rcall	.+20     	; 0x183c <__divmodhi4_neg1>
    1828:	77 fd       	sbrc	r23, 7
    182a:	04 d0       	rcall	.+8      	; 0x1834 <__divmodhi4_neg2>
    182c:	27 d0       	rcall	.+78     	; 0x187c <__udivmodhi4>
    182e:	06 d0       	rcall	.+12     	; 0x183c <__divmodhi4_neg1>
    1830:	00 20       	and	r0, r0
    1832:	1a f4       	brpl	.+6      	; 0x183a <__divmodhi4_exit>

00001834 <__divmodhi4_neg2>:
    1834:	70 95       	com	r23
    1836:	61 95       	neg	r22
    1838:	7f 4f       	sbci	r23, 0xFF	; 255

0000183a <__divmodhi4_exit>:
    183a:	08 95       	ret

0000183c <__divmodhi4_neg1>:
    183c:	f6 f7       	brtc	.-4      	; 0x183a <__divmodhi4_exit>
    183e:	90 95       	com	r25
    1840:	81 95       	neg	r24
    1842:	9f 4f       	sbci	r25, 0xFF	; 255
    1844:	08 95       	ret

00001846 <__divmodsi4>:
    1846:	97 fb       	bst	r25, 7
    1848:	09 2e       	mov	r0, r25
    184a:	05 26       	eor	r0, r21
    184c:	0e d0       	rcall	.+28     	; 0x186a <__divmodsi4_neg1>
    184e:	57 fd       	sbrc	r21, 7
    1850:	04 d0       	rcall	.+8      	; 0x185a <__divmodsi4_neg2>
    1852:	28 d0       	rcall	.+80     	; 0x18a4 <__udivmodsi4>
    1854:	0a d0       	rcall	.+20     	; 0x186a <__divmodsi4_neg1>
    1856:	00 1c       	adc	r0, r0
    1858:	38 f4       	brcc	.+14     	; 0x1868 <__divmodsi4_exit>

0000185a <__divmodsi4_neg2>:
    185a:	50 95       	com	r21
    185c:	40 95       	com	r20
    185e:	30 95       	com	r19
    1860:	21 95       	neg	r18
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	4f 4f       	sbci	r20, 0xFF	; 255
    1866:	5f 4f       	sbci	r21, 0xFF	; 255

00001868 <__divmodsi4_exit>:
    1868:	08 95       	ret

0000186a <__divmodsi4_neg1>:
    186a:	f6 f7       	brtc	.-4      	; 0x1868 <__divmodsi4_exit>
    186c:	90 95       	com	r25
    186e:	80 95       	com	r24
    1870:	70 95       	com	r23
    1872:	61 95       	neg	r22
    1874:	7f 4f       	sbci	r23, 0xFF	; 255
    1876:	8f 4f       	sbci	r24, 0xFF	; 255
    1878:	9f 4f       	sbci	r25, 0xFF	; 255
    187a:	08 95       	ret

0000187c <__udivmodhi4>:
    187c:	aa 1b       	sub	r26, r26
    187e:	bb 1b       	sub	r27, r27
    1880:	51 e1       	ldi	r21, 0x11	; 17
    1882:	07 c0       	rjmp	.+14     	; 0x1892 <__udivmodhi4_ep>

00001884 <__udivmodhi4_loop>:
    1884:	aa 1f       	adc	r26, r26
    1886:	bb 1f       	adc	r27, r27
    1888:	a6 17       	cp	r26, r22
    188a:	b7 07       	cpc	r27, r23
    188c:	10 f0       	brcs	.+4      	; 0x1892 <__udivmodhi4_ep>
    188e:	a6 1b       	sub	r26, r22
    1890:	b7 0b       	sbc	r27, r23

00001892 <__udivmodhi4_ep>:
    1892:	88 1f       	adc	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	5a 95       	dec	r21
    1898:	a9 f7       	brne	.-22     	; 0x1884 <__udivmodhi4_loop>
    189a:	80 95       	com	r24
    189c:	90 95       	com	r25
    189e:	bc 01       	movw	r22, r24
    18a0:	cd 01       	movw	r24, r26
    18a2:	08 95       	ret

000018a4 <__udivmodsi4>:
    18a4:	a1 e2       	ldi	r26, 0x21	; 33
    18a6:	1a 2e       	mov	r1, r26
    18a8:	aa 1b       	sub	r26, r26
    18aa:	bb 1b       	sub	r27, r27
    18ac:	fd 01       	movw	r30, r26
    18ae:	0d c0       	rjmp	.+26     	; 0x18ca <__udivmodsi4_ep>

000018b0 <__udivmodsi4_loop>:
    18b0:	aa 1f       	adc	r26, r26
    18b2:	bb 1f       	adc	r27, r27
    18b4:	ee 1f       	adc	r30, r30
    18b6:	ff 1f       	adc	r31, r31
    18b8:	a2 17       	cp	r26, r18
    18ba:	b3 07       	cpc	r27, r19
    18bc:	e4 07       	cpc	r30, r20
    18be:	f5 07       	cpc	r31, r21
    18c0:	20 f0       	brcs	.+8      	; 0x18ca <__udivmodsi4_ep>
    18c2:	a2 1b       	sub	r26, r18
    18c4:	b3 0b       	sbc	r27, r19
    18c6:	e4 0b       	sbc	r30, r20
    18c8:	f5 0b       	sbc	r31, r21

000018ca <__udivmodsi4_ep>:
    18ca:	66 1f       	adc	r22, r22
    18cc:	77 1f       	adc	r23, r23
    18ce:	88 1f       	adc	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	1a 94       	dec	r1
    18d4:	69 f7       	brne	.-38     	; 0x18b0 <__udivmodsi4_loop>
    18d6:	60 95       	com	r22
    18d8:	70 95       	com	r23
    18da:	80 95       	com	r24
    18dc:	90 95       	com	r25
    18de:	9b 01       	movw	r18, r22
    18e0:	ac 01       	movw	r20, r24
    18e2:	bd 01       	movw	r22, r26
    18e4:	cf 01       	movw	r24, r30
    18e6:	08 95       	ret

000018e8 <do_rand>:
    18e8:	a0 e0       	ldi	r26, 0x00	; 0
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	ea e7       	ldi	r30, 0x7A	; 122
    18ee:	fc e0       	ldi	r31, 0x0C	; 12
    18f0:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__prologue_saves__+0x10>
    18f4:	ec 01       	movw	r28, r24
    18f6:	a8 80       	ld	r10, Y
    18f8:	b9 80       	ldd	r11, Y+1	; 0x01
    18fa:	ca 80       	ldd	r12, Y+2	; 0x02
    18fc:	db 80       	ldd	r13, Y+3	; 0x03
    18fe:	a1 14       	cp	r10, r1
    1900:	b1 04       	cpc	r11, r1
    1902:	c1 04       	cpc	r12, r1
    1904:	d1 04       	cpc	r13, r1
    1906:	41 f4       	brne	.+16     	; 0x1918 <do_rand+0x30>
    1908:	84 e2       	ldi	r24, 0x24	; 36
    190a:	a8 2e       	mov	r10, r24
    190c:	89 ed       	ldi	r24, 0xD9	; 217
    190e:	b8 2e       	mov	r11, r24
    1910:	8b e5       	ldi	r24, 0x5B	; 91
    1912:	c8 2e       	mov	r12, r24
    1914:	87 e0       	ldi	r24, 0x07	; 7
    1916:	d8 2e       	mov	r13, r24
    1918:	c6 01       	movw	r24, r12
    191a:	b5 01       	movw	r22, r10
    191c:	2d e1       	ldi	r18, 0x1D	; 29
    191e:	33 ef       	ldi	r19, 0xF3	; 243
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	0e 94 23 0c 	call	0x1846	; 0x1846 <__divmodsi4>
    1928:	27 ea       	ldi	r18, 0xA7	; 167
    192a:	31 e4       	ldi	r19, 0x41	; 65
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	50 e0       	ldi	r21, 0x00	; 0
    1930:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__mulsi3>
    1934:	7b 01       	movw	r14, r22
    1936:	8c 01       	movw	r16, r24
    1938:	c6 01       	movw	r24, r12
    193a:	b5 01       	movw	r22, r10
    193c:	2d e1       	ldi	r18, 0x1D	; 29
    193e:	33 ef       	ldi	r19, 0xF3	; 243
    1940:	41 e0       	ldi	r20, 0x01	; 1
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	0e 94 23 0c 	call	0x1846	; 0x1846 <__divmodsi4>
    1948:	ca 01       	movw	r24, r20
    194a:	b9 01       	movw	r22, r18
    194c:	2c ee       	ldi	r18, 0xEC	; 236
    194e:	34 ef       	ldi	r19, 0xF4	; 244
    1950:	4f ef       	ldi	r20, 0xFF	; 255
    1952:	5f ef       	ldi	r21, 0xFF	; 255
    1954:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__mulsi3>
    1958:	6e 0d       	add	r22, r14
    195a:	7f 1d       	adc	r23, r15
    195c:	80 1f       	adc	r24, r16
    195e:	91 1f       	adc	r25, r17
    1960:	97 ff       	sbrs	r25, 7
    1962:	04 c0       	rjmp	.+8      	; 0x196c <do_rand+0x84>
    1964:	61 50       	subi	r22, 0x01	; 1
    1966:	70 40       	sbci	r23, 0x00	; 0
    1968:	80 40       	sbci	r24, 0x00	; 0
    196a:	90 48       	sbci	r25, 0x80	; 128
    196c:	68 83       	st	Y, r22
    196e:	79 83       	std	Y+1, r23	; 0x01
    1970:	8a 83       	std	Y+2, r24	; 0x02
    1972:	9b 83       	std	Y+3, r25	; 0x03
    1974:	9b 01       	movw	r18, r22
    1976:	3f 77       	andi	r19, 0x7F	; 127
    1978:	c9 01       	movw	r24, r18
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	ea e0       	ldi	r30, 0x0A	; 10
    1980:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__epilogue_restores__+0x10>

00001984 <rand_r>:
    1984:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <do_rand>
    1988:	08 95       	ret

0000198a <rand>:
    198a:	8f ea       	ldi	r24, 0xAF	; 175
    198c:	97 e0       	ldi	r25, 0x07	; 7
    198e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <do_rand>
    1992:	08 95       	ret

00001994 <srand>:
    1994:	a0 e0       	ldi	r26, 0x00	; 0
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	80 93 af 07 	sts	0x07AF, r24
    199c:	90 93 b0 07 	sts	0x07B0, r25
    19a0:	a0 93 b1 07 	sts	0x07B1, r26
    19a4:	b0 93 b2 07 	sts	0x07B2, r27
    19a8:	08 95       	ret

000019aa <atoi>:
    19aa:	fc 01       	movw	r30, r24
    19ac:	88 27       	eor	r24, r24
    19ae:	99 27       	eor	r25, r25
    19b0:	e8 94       	clt
    19b2:	21 91       	ld	r18, Z+
    19b4:	20 32       	cpi	r18, 0x20	; 32
    19b6:	e9 f3       	breq	.-6      	; 0x19b2 <atoi+0x8>
    19b8:	29 30       	cpi	r18, 0x09	; 9
    19ba:	10 f0       	brcs	.+4      	; 0x19c0 <atoi+0x16>
    19bc:	2e 30       	cpi	r18, 0x0E	; 14
    19be:	c8 f3       	brcs	.-14     	; 0x19b2 <atoi+0x8>
    19c0:	2b 32       	cpi	r18, 0x2B	; 43
    19c2:	41 f0       	breq	.+16     	; 0x19d4 <atoi+0x2a>
    19c4:	2d 32       	cpi	r18, 0x2D	; 45
    19c6:	39 f4       	brne	.+14     	; 0x19d6 <atoi+0x2c>
    19c8:	68 94       	set
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <atoi+0x2a>
    19cc:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__mulhi_const_10>
    19d0:	82 0f       	add	r24, r18
    19d2:	91 1d       	adc	r25, r1
    19d4:	21 91       	ld	r18, Z+
    19d6:	20 53       	subi	r18, 0x30	; 48
    19d8:	2a 30       	cpi	r18, 0x0A	; 10
    19da:	c0 f3       	brcs	.-16     	; 0x19cc <atoi+0x22>
    19dc:	1e f4       	brtc	.+6      	; 0x19e4 <atoi+0x3a>
    19de:	90 95       	com	r25
    19e0:	81 95       	neg	r24
    19e2:	9f 4f       	sbci	r25, 0xFF	; 255
    19e4:	08 95       	ret

000019e6 <atol>:
    19e6:	1f 93       	push	r17
    19e8:	fc 01       	movw	r30, r24
    19ea:	99 27       	eor	r25, r25
    19ec:	88 27       	eor	r24, r24
    19ee:	bc 01       	movw	r22, r24
    19f0:	e8 94       	clt
    19f2:	11 91       	ld	r17, Z+
    19f4:	10 32       	cpi	r17, 0x20	; 32
    19f6:	e9 f3       	breq	.-6      	; 0x19f2 <atol+0xc>
    19f8:	19 30       	cpi	r17, 0x09	; 9
    19fa:	10 f0       	brcs	.+4      	; 0x1a00 <atol+0x1a>
    19fc:	1e 30       	cpi	r17, 0x0E	; 14
    19fe:	c8 f3       	brcs	.-14     	; 0x19f2 <atol+0xc>
    1a00:	1b 32       	cpi	r17, 0x2B	; 43
    1a02:	51 f0       	breq	.+20     	; 0x1a18 <atol+0x32>
    1a04:	1d 32       	cpi	r17, 0x2D	; 45
    1a06:	49 f4       	brne	.+18     	; 0x1a1a <atol+0x34>
    1a08:	68 94       	set
    1a0a:	06 c0       	rjmp	.+12     	; 0x1a18 <atol+0x32>
    1a0c:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsi_const_10>
    1a10:	61 0f       	add	r22, r17
    1a12:	71 1d       	adc	r23, r1
    1a14:	81 1d       	adc	r24, r1
    1a16:	91 1d       	adc	r25, r1
    1a18:	11 91       	ld	r17, Z+
    1a1a:	10 53       	subi	r17, 0x30	; 48
    1a1c:	1a 30       	cpi	r17, 0x0A	; 10
    1a1e:	b0 f3       	brcs	.-20     	; 0x1a0c <atol+0x26>
    1a20:	3e f4       	brtc	.+14     	; 0x1a30 <atol+0x4a>
    1a22:	90 95       	com	r25
    1a24:	80 95       	com	r24
    1a26:	70 95       	com	r23
    1a28:	61 95       	neg	r22
    1a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a30:	1f 91       	pop	r17
    1a32:	08 95       	ret

00001a34 <strcat>:
    1a34:	fb 01       	movw	r30, r22
    1a36:	dc 01       	movw	r26, r24
    1a38:	0d 90       	ld	r0, X+
    1a3a:	00 20       	and	r0, r0
    1a3c:	e9 f7       	brne	.-6      	; 0x1a38 <strcat+0x4>
    1a3e:	11 97       	sbiw	r26, 0x01	; 1
    1a40:	01 90       	ld	r0, Z+
    1a42:	0d 92       	st	X+, r0
    1a44:	00 20       	and	r0, r0
    1a46:	e1 f7       	brne	.-8      	; 0x1a40 <strcat+0xc>
    1a48:	08 95       	ret

00001a4a <strcmp>:
    1a4a:	fb 01       	movw	r30, r22
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	8d 91       	ld	r24, X+
    1a50:	01 90       	ld	r0, Z+
    1a52:	80 19       	sub	r24, r0
    1a54:	01 10       	cpse	r0, r1
    1a56:	d9 f3       	breq	.-10     	; 0x1a4e <strcmp+0x4>
    1a58:	99 0b       	sbc	r25, r25
    1a5a:	08 95       	ret

00001a5c <strncmp>:
    1a5c:	fb 01       	movw	r30, r22
    1a5e:	dc 01       	movw	r26, r24
    1a60:	41 50       	subi	r20, 0x01	; 1
    1a62:	50 40       	sbci	r21, 0x00	; 0
    1a64:	30 f0       	brcs	.+12     	; 0x1a72 <strncmp+0x16>
    1a66:	8d 91       	ld	r24, X+
    1a68:	01 90       	ld	r0, Z+
    1a6a:	80 19       	sub	r24, r0
    1a6c:	19 f4       	brne	.+6      	; 0x1a74 <strncmp+0x18>
    1a6e:	00 20       	and	r0, r0
    1a70:	b9 f7       	brne	.-18     	; 0x1a60 <strncmp+0x4>
    1a72:	88 1b       	sub	r24, r24
    1a74:	99 0b       	sbc	r25, r25
    1a76:	08 95       	ret

00001a78 <itoa>:
    1a78:	fb 01       	movw	r30, r22
    1a7a:	9f 01       	movw	r18, r30
    1a7c:	e8 94       	clt
    1a7e:	42 30       	cpi	r20, 0x02	; 2
    1a80:	c4 f0       	brlt	.+48     	; 0x1ab2 <itoa+0x3a>
    1a82:	45 32       	cpi	r20, 0x25	; 37
    1a84:	b4 f4       	brge	.+44     	; 0x1ab2 <itoa+0x3a>
    1a86:	4a 30       	cpi	r20, 0x0A	; 10
    1a88:	29 f4       	brne	.+10     	; 0x1a94 <itoa+0x1c>
    1a8a:	97 fb       	bst	r25, 7
    1a8c:	1e f4       	brtc	.+6      	; 0x1a94 <itoa+0x1c>
    1a8e:	90 95       	com	r25
    1a90:	81 95       	neg	r24
    1a92:	9f 4f       	sbci	r25, 0xFF	; 255
    1a94:	64 2f       	mov	r22, r20
    1a96:	77 27       	eor	r23, r23
    1a98:	0e 94 3e 0c 	call	0x187c	; 0x187c <__udivmodhi4>
    1a9c:	80 5d       	subi	r24, 0xD0	; 208
    1a9e:	8a 33       	cpi	r24, 0x3A	; 58
    1aa0:	0c f0       	brlt	.+2      	; 0x1aa4 <itoa+0x2c>
    1aa2:	89 5d       	subi	r24, 0xD9	; 217
    1aa4:	81 93       	st	Z+, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	a1 f7       	brne	.-24     	; 0x1a94 <itoa+0x1c>
    1aac:	16 f4       	brtc	.+4      	; 0x1ab2 <itoa+0x3a>
    1aae:	5d e2       	ldi	r21, 0x2D	; 45
    1ab0:	51 93       	st	Z+, r21
    1ab2:	10 82       	st	Z, r1
    1ab4:	c9 01       	movw	r24, r18
    1ab6:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <strrev>

00001aba <ltoa>:
    1aba:	fa 01       	movw	r30, r20
    1abc:	cf 93       	push	r28
    1abe:	ff 93       	push	r31
    1ac0:	ef 93       	push	r30
    1ac2:	22 30       	cpi	r18, 0x02	; 2
    1ac4:	44 f1       	brlt	.+80     	; 0x1b16 <ltoa+0x5c>
    1ac6:	25 32       	cpi	r18, 0x25	; 37
    1ac8:	34 f5       	brge	.+76     	; 0x1b16 <ltoa+0x5c>
    1aca:	c2 2f       	mov	r28, r18
    1acc:	e8 94       	clt
    1ace:	ca 30       	cpi	r28, 0x0A	; 10
    1ad0:	49 f4       	brne	.+18     	; 0x1ae4 <ltoa+0x2a>
    1ad2:	97 fb       	bst	r25, 7
    1ad4:	3e f4       	brtc	.+14     	; 0x1ae4 <ltoa+0x2a>
    1ad6:	90 95       	com	r25
    1ad8:	80 95       	com	r24
    1ada:	70 95       	com	r23
    1adc:	61 95       	neg	r22
    1ade:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae4:	2c 2f       	mov	r18, r28
    1ae6:	33 27       	eor	r19, r19
    1ae8:	44 27       	eor	r20, r20
    1aea:	55 27       	eor	r21, r21
    1aec:	ff 93       	push	r31
    1aee:	ef 93       	push	r30
    1af0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__udivmodsi4>
    1af4:	ef 91       	pop	r30
    1af6:	ff 91       	pop	r31
    1af8:	60 5d       	subi	r22, 0xD0	; 208
    1afa:	6a 33       	cpi	r22, 0x3A	; 58
    1afc:	0c f0       	brlt	.+2      	; 0x1b00 <ltoa+0x46>
    1afe:	69 5d       	subi	r22, 0xD9	; 217
    1b00:	61 93       	st	Z+, r22
    1b02:	b9 01       	movw	r22, r18
    1b04:	ca 01       	movw	r24, r20
    1b06:	60 50       	subi	r22, 0x00	; 0
    1b08:	70 40       	sbci	r23, 0x00	; 0
    1b0a:	80 40       	sbci	r24, 0x00	; 0
    1b0c:	90 40       	sbci	r25, 0x00	; 0
    1b0e:	51 f7       	brne	.-44     	; 0x1ae4 <ltoa+0x2a>
    1b10:	16 f4       	brtc	.+4      	; 0x1b16 <ltoa+0x5c>
    1b12:	cd e2       	ldi	r28, 0x2D	; 45
    1b14:	c1 93       	st	Z+, r28
    1b16:	10 82       	st	Z, r1
    1b18:	8f 91       	pop	r24
    1b1a:	9f 91       	pop	r25
    1b1c:	cf 91       	pop	r28
    1b1e:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <strrev>

00001b22 <__mulsi_const_10>:
    1b22:	59 2f       	mov	r21, r25
    1b24:	48 2f       	mov	r20, r24
    1b26:	37 2f       	mov	r19, r23
    1b28:	26 2f       	mov	r18, r22
    1b2a:	66 0f       	add	r22, r22
    1b2c:	77 1f       	adc	r23, r23
    1b2e:	88 1f       	adc	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	66 0f       	add	r22, r22
    1b34:	77 1f       	adc	r23, r23
    1b36:	88 1f       	adc	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	62 0f       	add	r22, r18
    1b3c:	73 1f       	adc	r23, r19
    1b3e:	84 1f       	adc	r24, r20
    1b40:	95 1f       	adc	r25, r21
    1b42:	66 0f       	add	r22, r22
    1b44:	77 1f       	adc	r23, r23
    1b46:	88 1f       	adc	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	08 95       	ret

00001b4c <__mulhi_const_10>:
    1b4c:	7a e0       	ldi	r23, 0x0A	; 10
    1b4e:	97 9f       	mul	r25, r23
    1b50:	90 2d       	mov	r25, r0
    1b52:	87 9f       	mul	r24, r23
    1b54:	80 2d       	mov	r24, r0
    1b56:	91 0d       	add	r25, r1
    1b58:	11 24       	eor	r1, r1
    1b5a:	08 95       	ret

00001b5c <strrev>:
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	fc 01       	movw	r30, r24
    1b60:	67 2f       	mov	r22, r23
    1b62:	71 91       	ld	r23, Z+
    1b64:	77 23       	and	r23, r23
    1b66:	e1 f7       	brne	.-8      	; 0x1b60 <strrev+0x4>
    1b68:	32 97       	sbiw	r30, 0x02	; 2
    1b6a:	04 c0       	rjmp	.+8      	; 0x1b74 <strrev+0x18>
    1b6c:	7c 91       	ld	r23, X
    1b6e:	6d 93       	st	X+, r22
    1b70:	70 83       	st	Z, r23
    1b72:	62 91       	ld	r22, -Z
    1b74:	ae 17       	cp	r26, r30
    1b76:	bf 07       	cpc	r27, r31
    1b78:	c8 f3       	brcs	.-14     	; 0x1b6c <strrev+0x10>
    1b7a:	08 95       	ret

00001b7c <__prologue_saves__>:
    1b7c:	2f 92       	push	r2
    1b7e:	3f 92       	push	r3
    1b80:	4f 92       	push	r4
    1b82:	5f 92       	push	r5
    1b84:	6f 92       	push	r6
    1b86:	7f 92       	push	r7
    1b88:	8f 92       	push	r8
    1b8a:	9f 92       	push	r9
    1b8c:	af 92       	push	r10
    1b8e:	bf 92       	push	r11
    1b90:	cf 92       	push	r12
    1b92:	df 92       	push	r13
    1b94:	ef 92       	push	r14
    1b96:	ff 92       	push	r15
    1b98:	0f 93       	push	r16
    1b9a:	1f 93       	push	r17
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	ca 1b       	sub	r28, r26
    1ba6:	db 0b       	sbc	r29, r27
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	09 94       	ijmp

00001bb4 <__epilogue_restores__>:
    1bb4:	2a 88       	ldd	r2, Y+18	; 0x12
    1bb6:	39 88       	ldd	r3, Y+17	; 0x11
    1bb8:	48 88       	ldd	r4, Y+16	; 0x10
    1bba:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bbc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bbe:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bc0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bc2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bc4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bc6:	b9 84       	ldd	r11, Y+9	; 0x09
    1bc8:	c8 84       	ldd	r12, Y+8	; 0x08
    1bca:	df 80       	ldd	r13, Y+7	; 0x07
    1bcc:	ee 80       	ldd	r14, Y+6	; 0x06
    1bce:	fd 80       	ldd	r15, Y+5	; 0x05
    1bd0:	0c 81       	ldd	r16, Y+4	; 0x04
    1bd2:	1b 81       	ldd	r17, Y+3	; 0x03
    1bd4:	aa 81       	ldd	r26, Y+2	; 0x02
    1bd6:	b9 81       	ldd	r27, Y+1	; 0x01
    1bd8:	ce 0f       	add	r28, r30
    1bda:	d1 1d       	adc	r29, r1
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
    1be6:	ed 01       	movw	r28, r26
    1be8:	08 95       	ret

00001bea <_exit>:
    1bea:	f8 94       	cli

00001bec <__stop_program>:
    1bec:	ff cf       	rjmp	.-2      	; 0x1bec <__stop_program>
