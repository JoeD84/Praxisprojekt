
Translator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006b4  00800100  00001c2c  00001cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  008007b4  008007b4  00002374  2**0
                  ALLOC
  3 .stab         00003ed0  00000000  00000000  00002374  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001573  00000000  00000000  00006244  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_7>
      20:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__vector_8>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_18>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	17 e0       	ldi	r17, 0x07	; 7
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ec e2       	ldi	r30, 0x2C	; 44
      90:	fc e1       	ldi	r31, 0x1C	; 28
      92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
      98:	a4 3b       	cpi	r26, 0xB4	; 180
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
      9e:	18 e0       	ldi	r17, 0x08	; 8
      a0:	a4 eb       	ldi	r26, 0xB4	; 180
      a2:	b7 e0       	ldi	r27, 0x07	; 7
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a2 32       	cpi	r26, 0x22	; 34
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 07 0a 	call	0x140e	; 0x140e <main>
      b2:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
      ba:	66 23       	and	r22, r22
      bc:	11 f0       	breq	.+4      	; 0xc2 <lcd_write+0x8>
       lcd_rs_high();
      be:	46 9a       	sbi	0x08, 6	; 8
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
      c2:	46 98       	cbi	0x08, 6	; 8
    }
    lcd_rw_low();
      c4:	45 98       	cbi	0x08, 5	; 8
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
      c6:	3b 9a       	sbi	0x07, 3	; 7
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
      c8:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
      ca:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
      cc:	38 9a       	sbi	0x07, 0	; 7
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
      ce:	40 98       	cbi	0x08, 0	; 8
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
      d0:	41 98       	cbi	0x08, 1	; 8
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
      d2:	42 98       	cbi	0x08, 2	; 8
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
      d4:	43 98       	cbi	0x08, 3	; 8
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
      d6:	87 fd       	sbrc	r24, 7
      d8:	40 9a       	sbi	0x08, 0	; 8
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
      da:	86 fd       	sbrc	r24, 6
      dc:	41 9a       	sbi	0x08, 1	; 8
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
      de:	85 fd       	sbrc	r24, 5
      e0:	42 9a       	sbi	0x08, 2	; 8
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
      e2:	84 fd       	sbrc	r24, 4
      e4:	43 9a       	sbi	0x08, 3	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
      e6:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
      e8:	00 c0       	rjmp	.+0      	; 0xea <lcd_write+0x30>
    lcd_e_low();
      ea:	44 98       	cbi	0x08, 4	; 8
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
      ec:	40 98       	cbi	0x08, 0	; 8
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
      ee:	41 98       	cbi	0x08, 1	; 8
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
      f0:	42 98       	cbi	0x08, 2	; 8
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
      f2:	43 98       	cbi	0x08, 3	; 8
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
      f4:	83 fd       	sbrc	r24, 3
      f6:	40 9a       	sbi	0x08, 0	; 8
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
      f8:	82 fd       	sbrc	r24, 2
      fa:	41 9a       	sbi	0x08, 1	; 8
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
      fc:	81 fd       	sbrc	r24, 1
      fe:	42 9a       	sbi	0x08, 2	; 8
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     100:	80 fd       	sbrc	r24, 0
     102:	43 9a       	sbi	0x08, 3	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     104:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_write+0x4e>
    lcd_e_low();
     108:	44 98       	cbi	0x08, 4	; 8
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     10a:	43 9a       	sbi	0x08, 3	; 8
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     10c:	42 9a       	sbi	0x08, 2	; 8
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     10e:	41 9a       	sbi	0x08, 1	; 8
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     110:	40 9a       	sbi	0x08, 0	; 8
    }
}
     112:	08 95       	ret

00000114 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
     114:	88 23       	and	r24, r24
     116:	11 f0       	breq	.+4      	; 0x11c <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
     118:	46 9a       	sbi	0x08, 6	; 8
     11a:	01 c0       	rjmp	.+2      	; 0x11e <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     11c:	46 98       	cbi	0x08, 6	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
     11e:	45 9a       	sbi	0x08, 5	; 8
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     120:	3b 98       	cbi	0x07, 3	; 7
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     122:	3a 98       	cbi	0x07, 2	; 7
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     124:	39 98       	cbi	0x07, 1	; 7
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     126:	38 98       	cbi	0x07, 0	; 7
                
        /* read high nibble first */
        lcd_e_high();
     128:	44 9a       	sbi	0x08, 4	; 8
        lcd_e_delay();        
     12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     12c:	33 9b       	sbis	0x06, 3	; 6
     12e:	02 c0       	rjmp	.+4      	; 0x134 <lcd_read+0x20>
     130:	80 e1       	ldi	r24, 0x10	; 16
     132:	01 c0       	rjmp	.+2      	; 0x136 <lcd_read+0x22>
     134:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     136:	32 99       	sbic	0x06, 2	; 6
     138:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     13a:	31 99       	sbic	0x06, 1	; 6
     13c:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     13e:	30 99       	sbic	0x06, 0	; 6
     140:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     142:	44 98       	cbi	0x08, 4	; 8

        lcd_e_delay();                       /* Enable 500ns low       */
     144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
     146:	44 9a       	sbi	0x08, 4	; 8
        lcd_e_delay();
     148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     14a:	33 99       	sbic	0x06, 3	; 6
     14c:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     14e:	32 99       	sbic	0x06, 2	; 6
     150:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     152:	31 99       	sbic	0x06, 1	; 6
     154:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     156:	30 99       	sbic	0x06, 0	; 6
     158:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     15a:	44 98       	cbi	0x08, 4	; 8
    }
    return data;
}
     15c:	08 95       	ret

0000015e <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_read>
     164:	87 fd       	sbrc	r24, 7
     166:	fb cf       	rjmp	.-10     	; 0x15e <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     168:	82 e0       	ldi	r24, 0x02	; 2
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	01 97       	sbiw	r24, 0x01	; 1
     16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_read>
    
}/* lcd_waitbusy */
     176:	08 95       	ret

00000178 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     178:	1f 93       	push	r17
     17a:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     17c:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_waitbusy>
    lcd_write(cmd,0);
     180:	81 2f       	mov	r24, r17
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
}
     188:	1f 91       	pop	r17
     18a:	08 95       	ret

0000018c <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     18c:	1f 93       	push	r17
     18e:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     190:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_waitbusy>
    lcd_write(data,1);
     194:	81 2f       	mov	r24, r17
     196:	61 e0       	ldi	r22, 0x01	; 1
     198:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
}
     19c:	1f 91       	pop	r17
     19e:	08 95       	ret

000001a0 <lcd_gotoxy>:
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
     1a0:	66 23       	and	r22, r22
     1a2:	11 f4       	brne	.+4      	; 0x1a8 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     1a4:	80 58       	subi	r24, 0x80	; 128
     1a6:	09 c0       	rjmp	.+18     	; 0x1ba <lcd_gotoxy+0x1a>
    else if ( y==1)
     1a8:	61 30       	cpi	r22, 0x01	; 1
     1aa:	11 f4       	brne	.+4      	; 0x1b0 <lcd_gotoxy+0x10>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     1ac:	80 54       	subi	r24, 0x40	; 64
     1ae:	05 c0       	rjmp	.+10     	; 0x1ba <lcd_gotoxy+0x1a>
    else if ( y==2)
     1b0:	62 30       	cpi	r22, 0x02	; 2
     1b2:	11 f4       	brne	.+4      	; 0x1b8 <lcd_gotoxy+0x18>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
     1b4:	8c 56       	subi	r24, 0x6C	; 108
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <lcd_gotoxy+0x1a>
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
     1b8:	8c 52       	subi	r24, 0x2C	; 44
     1ba:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
     1be:	08 95       	ret

000001c0 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     1c0:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_waitbusy>
}
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	08 95       	ret

000001c8 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
}
     1ce:	08 95       	ret

000001d0 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
}
     1d6:	08 95       	ret

000001d8 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     1d8:	1f 93       	push	r17
     1da:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     1dc:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_waitbusy>
     1e0:	98 2f       	mov	r25, r24
    if (c=='\n')
     1e2:	1a 30       	cpi	r17, 0x0A	; 10
     1e4:	99 f4       	brne	.+38     	; 0x20c <lcd_putc+0x34>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
     1e6:	84 31       	cpi	r24, 0x14	; 20
     1e8:	10 f4       	brcc	.+4      	; 0x1ee <lcd_putc+0x16>
     1ea:	80 e4       	ldi	r24, 0x40	; 64
     1ec:	0b c0       	rjmp	.+22     	; 0x204 <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
     1ee:	80 54       	subi	r24, 0x40	; 64
     1f0:	84 31       	cpi	r24, 0x14	; 20
     1f2:	10 f4       	brcc	.+4      	; 0x1f8 <lcd_putc+0x20>
     1f4:	84 e1       	ldi	r24, 0x14	; 20
     1f6:	06 c0       	rjmp	.+12     	; 0x204 <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
     1f8:	94 51       	subi	r25, 0x14	; 20
     1fa:	9c 32       	cpi	r25, 0x2C	; 44
     1fc:	10 f0       	brcs	.+4      	; 0x202 <lcd_putc+0x2a>
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	01 c0       	rjmp	.+2      	; 0x204 <lcd_putc+0x2c>
     202:	84 e5       	ldi	r24, 0x54	; 84
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     204:	80 58       	subi	r24, 0x80	; 128
     206:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
     20a:	18 c0       	rjmp	.+48     	; 0x23c <lcd_putc+0x64>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==4
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
     20c:	83 31       	cpi	r24, 0x13	; 19
     20e:	11 f4       	brne	.+4      	; 0x214 <lcd_putc+0x3c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
     210:	80 ec       	ldi	r24, 0xC0	; 192
     212:	0b c0       	rjmp	.+22     	; 0x22a <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
     214:	83 35       	cpi	r24, 0x53	; 83
     216:	11 f4       	brne	.+4      	; 0x21c <lcd_putc+0x44>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
     218:	84 e9       	ldi	r24, 0x94	; 148
     21a:	07 c0       	rjmp	.+14     	; 0x22a <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
     21c:	87 32       	cpi	r24, 0x27	; 39
     21e:	11 f4       	brne	.+4      	; 0x224 <lcd_putc+0x4c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
     220:	84 ed       	ldi	r24, 0xD4	; 212
     222:	03 c0       	rjmp	.+6      	; 0x22a <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
     224:	87 36       	cpi	r24, 0x67	; 103
     226:	21 f4       	brne	.+8      	; 0x230 <lcd_putc+0x58>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
     228:	80 e8       	ldi	r24, 0x80	; 128
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
        }
#endif
        lcd_waitbusy();
     230:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_waitbusy>
#endif
        lcd_write(c, 1);
     234:	81 2f       	mov	r24, r17
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
    }

}/* lcd_putc */
     23c:	1f 91       	pop	r17
     23e:	08 95       	ret

00000240 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	ec 01       	movw	r28, r24
     246:	02 c0       	rjmp	.+4      	; 0x24c <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
     248:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     24c:	89 91       	ld	r24, Y+
     24e:	88 23       	and	r24, r24
     250:	d9 f7       	brne	.-10     	; 0x248 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	08 95       	ret

00000258 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	ec 01       	movw	r28, r24
     25e:	02 c0       	rjmp	.+4      	; 0x264 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
     260:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
     264:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     266:	21 96       	adiw	r28, 0x01	; 1
     268:	84 91       	lpm	r24, Z+
     26a:	88 23       	and	r24, r24
     26c:	c9 f7       	brne	.-14     	; 0x260 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     274:	1f 93       	push	r17
     276:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     278:	3e 9a       	sbi	0x07, 6	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     27a:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     27c:	3c 9a       	sbi	0x07, 4	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     27e:	3b 9a       	sbi	0x07, 3	; 7
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     280:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     282:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     284:	38 9a       	sbi	0x07, 0	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     286:	80 e8       	ldi	r24, 0x80	; 128
     288:	9e e3       	ldi	r25, 0x3E	; 62
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     28e:	42 9a       	sbi	0x08, 2	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     290:	43 9a       	sbi	0x08, 3	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     292:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     294:	00 c0       	rjmp	.+0      	; 0x296 <lcd_init+0x22>
    lcd_e_low();
     296:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     298:	80 e8       	ldi	r24, 0x80	; 128
     29a:	93 e1       	ldi	r25, 0x13	; 19
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     2a0:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <lcd_init+0x30>
    lcd_e_low();
     2a4:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2a6:	80 e4       	ldi	r24, 0x40	; 64
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	fc 01       	movw	r30, r24
     2ac:	31 97       	sbiw	r30, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     2b0:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <lcd_init+0x40>
    lcd_e_low();
     2b4:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2b6:	fc 01       	movw	r30, r24
     2b8:	31 97       	sbiw	r30, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     2bc:	43 98       	cbi	0x08, 3	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     2be:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd_init+0x4e>
    lcd_e_low();
     2c2:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     2c8:	88 e2       	ldi	r24, 0x28	; 40
     2ca:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     2ce:	88 e0       	ldi	r24, 0x08	; 8
     2d0:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     2d4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     2d8:	86 e0       	ldi	r24, 0x06	; 6
     2da:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     2de:	81 2f       	mov	r24, r17
     2e0:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>

}/* lcd_init */
     2e4:	1f 91       	pop	r17
     2e6:	08 95       	ret

000002e8 <__vector_18>:
 
volatile uint8_t key_rpt;                                  // key long press and repeat
 
 
ISR( TIMER0_OVF_vect )                            // every 10ms
{
     2e8:	1f 92       	push	r1
     2ea:	0f 92       	push	r0
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	0f 92       	push	r0
     2f0:	11 24       	eor	r1, r1
     2f2:	2f 93       	push	r18
     2f4:	8f 93       	push	r24
     2f6:	9f 93       	push	r25
  static uint8_t ct0, ct1, rpt;
  uint8_t i;
 
  TCNT0 = (uint8_t)(int16_t)-(F_CPU / 1024 * 10e-3 + 0.5);  // preload for 10ms
     2f8:	82 eb       	ldi	r24, 0xB2	; 178
     2fa:	86 bd       	out	0x26, r24	; 38
 
  i = key_state ^ ~KEY_PIN;                       // key changed ?
     2fc:	80 91 21 08 	lds	r24, 0x0821
     300:	20 b1       	in	r18, 0x00	; 0
     302:	20 95       	com	r18
     304:	28 27       	eor	r18, r24
  ct0 = ~( ct0 & i );                             // reset or count ct0
     306:	80 91 ba 07 	lds	r24, 0x07BA
     30a:	82 23       	and	r24, r18
     30c:	80 95       	com	r24
     30e:	80 93 ba 07 	sts	0x07BA, r24
  ct1 = ct0 ^ (ct1 & i);                          // reset or count ct1
     312:	90 91 b9 07 	lds	r25, 0x07B9
     316:	92 23       	and	r25, r18
     318:	98 27       	eor	r25, r24
     31a:	90 93 b9 07 	sts	0x07B9, r25
  i &= ct0 & ct1;                                 // count until roll over ?
     31e:	82 23       	and	r24, r18
     320:	89 23       	and	r24, r25
  key_state ^= i;                                 // then toggle debounced state
     322:	90 91 21 08 	lds	r25, 0x0821
     326:	98 27       	eor	r25, r24
     328:	90 93 21 08 	sts	0x0821, r25
  key_press |= key_state & i;                     // 0->1: key press detect
     32c:	20 91 20 08 	lds	r18, 0x0820
     330:	90 91 21 08 	lds	r25, 0x0821
     334:	89 23       	and	r24, r25
     336:	82 2b       	or	r24, r18
     338:	80 93 20 08 	sts	0x0820, r24
 
  if( (key_state & REPEAT_MASK) == 0 )            // check repeat function
     33c:	80 91 21 08 	lds	r24, 0x0821
     340:	87 78       	andi	r24, 0x87	; 135
     342:	19 f4       	brne	.+6      	; 0x34a <__vector_18+0x62>
     rpt = REPEAT_START;                          // start delay
     344:	82 e3       	ldi	r24, 0x32	; 50
     346:	80 93 b8 07 	sts	0x07B8, r24
  if( --rpt == 0 ){
     34a:	80 91 b8 07 	lds	r24, 0x07B8
     34e:	81 50       	subi	r24, 0x01	; 1
     350:	80 93 b8 07 	sts	0x07B8, r24
     354:	88 23       	and	r24, r24
     356:	59 f4       	brne	.+22     	; 0x36e <__vector_18+0x86>
    rpt = REPEAT_NEXT;                            // repeat delay
     358:	84 e1       	ldi	r24, 0x14	; 20
     35a:	80 93 b8 07 	sts	0x07B8, r24
    key_rpt |= key_state & REPEAT_MASK;
     35e:	90 91 bb 07 	lds	r25, 0x07BB
     362:	80 91 21 08 	lds	r24, 0x0821
     366:	87 78       	andi	r24, 0x87	; 135
     368:	89 2b       	or	r24, r25
     36a:	80 93 bb 07 	sts	0x07BB, r24
  }
}
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	2f 91       	pop	r18
     374:	0f 90       	pop	r0
     376:	0f be       	out	0x3f, r0	; 63
     378:	0f 90       	pop	r0
     37a:	1f 90       	pop	r1
     37c:	18 95       	reti

0000037e <get_key_press>:
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     37e:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     380:	90 91 20 08 	lds	r25, 0x0820
     384:	89 23       	and	r24, r25
  key_press ^= key_mask;                          // clear key(s)
     386:	90 91 20 08 	lds	r25, 0x0820
     38a:	98 27       	eor	r25, r24
     38c:	90 93 20 08 	sts	0x0820, r25
  sei();
     390:	78 94       	sei
  return key_mask;
}
     392:	08 95       	ret

00000394 <get_key_rpt>:
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     394:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
     396:	90 91 bb 07 	lds	r25, 0x07BB
     39a:	89 23       	and	r24, r25
  key_rpt ^= key_mask;                            // clear key(s)
     39c:	90 91 bb 07 	lds	r25, 0x07BB
     3a0:	98 27       	eor	r25, r24
     3a2:	90 93 bb 07 	sts	0x07BB, r25
  sei();
     3a6:	78 94       	sei
  return key_mask;
}
     3a8:	08 95       	ret

000003aa <get_key_short>:
 
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_short( uint8_t key_mask )
{
  cli();                                          // read key state and key press atomic !
     3aa:	f8 94       	cli
  return get_key_press( ~key_state & key_mask );
     3ac:	90 91 21 08 	lds	r25, 0x0821
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     3b0:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     3b2:	20 91 20 08 	lds	r18, 0x0820
     3b6:	90 95       	com	r25
     3b8:	89 23       	and	r24, r25
     3ba:	82 23       	and	r24, r18
  key_press ^= key_mask;                          // clear key(s)
     3bc:	90 91 20 08 	lds	r25, 0x0820
     3c0:	98 27       	eor	r25, r24
     3c2:	90 93 20 08 	sts	0x0820, r25
  sei();
     3c6:	78 94       	sei
//
uint8_t get_key_short( uint8_t key_mask )
{
  cli();                                          // read key state and key press atomic !
  return get_key_press( ~key_state & key_mask );
}
     3c8:	08 95       	ret

000003ca <get_key_long>:
 
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_long( uint8_t key_mask )
{
     3ca:	98 2f       	mov	r25, r24
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     3cc:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
     3ce:	80 91 bb 07 	lds	r24, 0x07BB
     3d2:	98 23       	and	r25, r24
  key_rpt ^= key_mask;                            // clear key(s)
     3d4:	80 91 bb 07 	lds	r24, 0x07BB
     3d8:	89 27       	eor	r24, r25
     3da:	80 93 bb 07 	sts	0x07BB, r24
  sei();
     3de:	78 94       	sei
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     3e0:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     3e2:	80 91 20 08 	lds	r24, 0x0820
     3e6:	89 23       	and	r24, r25
  key_press ^= key_mask;                          // clear key(s)
     3e8:	90 91 20 08 	lds	r25, 0x0820
     3ec:	98 27       	eor	r25, r24
     3ee:	90 93 20 08 	sts	0x0820, r25
  sei();
     3f2:	78 94       	sei
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_long( uint8_t key_mask )
{
  return get_key_press( get_key_rpt( key_mask ));
}
     3f4:	08 95       	ret

000003f6 <__vector_8>:
//////////////////////////////

// Interrupt Stuff
ISR(WDT_vect)
//Interrupt Service Routine
{
     3f6:	1f 92       	push	r1
     3f8:	0f 92       	push	r0
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	0f 92       	push	r0
     3fe:	11 24       	eor	r1, r1
     400:	8f 93       	push	r24
     402:	9f 93       	push	r25
		LED_PORT ^= (1 << LED0);
     404:	85 b1       	in	r24, 0x05	; 5
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	89 27       	eor	r24, r25
     40a:	85 b9       	out	0x05, r24	; 5
}
     40c:	9f 91       	pop	r25
     40e:	8f 91       	pop	r24
     410:	0f 90       	pop	r0
     412:	0f be       	out	0x3f, r0	; 63
     414:	0f 90       	pop	r0
     416:	1f 90       	pop	r1
     418:	18 95       	reti

0000041a <uart_init>:
	LED_PORT ^= (1 << LED0);
}
// UART Stuff
void 	uart_init			() {
	// UART 0 - IN (Rapidform Software/Terminal)
	UBRR0H = UBRRH_VALUE;
     41a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
     41e:	23 e3       	ldi	r18, 0x33	; 51
     420:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0C = (3 << UCSZ00);
     424:	96 e0       	ldi	r25, 0x06	; 6
     426:	90 93 c2 00 	sts	0x00C2, r25
	UCSR0B |= (1 << TXEN0); //Transmitter Enabled
     42a:	e1 ec       	ldi	r30, 0xC1	; 193
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 81       	ld	r24, Z
     430:	88 60       	ori	r24, 0x08	; 8
     432:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXEN0); // UART RX einschalten
     434:	80 81       	ld	r24, Z
     436:	80 61       	ori	r24, 0x10	; 16
     438:	80 83       	st	Z, r24

	// UART 1 - OUT (Stepper Karte/Drehtisch)
	UBRR1H = UBRRH_VALUE;
     43a:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = UBRRL_VALUE;
     43e:	20 93 cc 00 	sts	0x00CC, r18
	UCSR1C = (3 << UCSZ00);
     442:	90 93 ca 00 	sts	0x00CA, r25
	UCSR1B |= (1 << TXEN1); //Transmitter Enabled
     446:	e9 ec       	ldi	r30, 0xC9	; 201
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	88 60       	ori	r24, 0x08	; 8
     44e:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXEN1); // UART RX einschalten
     450:	80 81       	ld	r24, Z
     452:	80 61       	ori	r24, 0x10	; 16
     454:	80 83       	st	Z, r24

}
     456:	08 95       	ret

00000458 <uart_put_charater>:
void 	uart_put_charater	(unsigned char c, int dir) {
     458:	98 2f       	mov	r25, r24
	// To Rapidform
	if (dir == D_RapidForm) {
     45a:	67 2b       	or	r22, r23
     45c:	39 f4       	brne	.+14     	; 0x46c <uart_put_charater+0x14>
		while (!(UCSR0A & (1 << UDRE0))) //warten bis Senden moeglich
     45e:	80 91 c0 00 	lds	r24, 0x00C0
     462:	85 ff       	sbrs	r24, 5
     464:	fc cf       	rjmp	.-8      	; 0x45e <uart_put_charater+0x6>
		{
		}
		UDR0 = c; // sende Zeichen
     466:	90 93 c6 00 	sts	0x00C6, r25
     46a:	08 95       	ret
	}
	// To Stepper
	else {
		while (!(UCSR1A & (1 << UDRE1))) //warten bis Senden moeglich
     46c:	80 91 c8 00 	lds	r24, 0x00C8
     470:	85 ff       	sbrs	r24, 5
     472:	fc cf       	rjmp	.-8      	; 0x46c <uart_put_charater+0x14>
		{
		}
		UDR1 = c; // sende Zeichen
     474:	90 93 ce 00 	sts	0x00CE, r25
     478:	08 95       	ret

0000047a <uart_put_string>:
	}
	//return 0;
}
void 	uart_put_string		(char *s, int dir) {
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	ec 01       	movw	r28, r24
     484:	8b 01       	movw	r16, r22
     486:	04 c0       	rjmp	.+8      	; 0x490 <uart_put_string+0x16>
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		uart_put_charater(*s, dir);
     488:	b8 01       	movw	r22, r16
     48a:	0e 94 2c 02 	call	0x458	; 0x458 <uart_put_charater>
		s++;
     48e:	21 96       	adiw	r28, 0x01	; 1
		UDR1 = c; // sende Zeichen
	}
	//return 0;
}
void 	uart_put_string		(char *s, int dir) {
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
     490:	88 81       	ld	r24, Y
     492:	88 23       	and	r24, r24
     494:	c9 f7       	brne	.-14     	; 0x488 <uart_put_string+0xe>
	{
		uart_put_charater(*s, dir);
		s++;
	}
}
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	08 95       	ret

000004a0 <__vector_7>:
{
		LED_PORT ^= (1 << LED0);
}
ISR(PCINT3_vect)
//Interrupt Service Routine
{
     4a0:	1f 92       	push	r1
     4a2:	0f 92       	push	r0
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	0f 92       	push	r0
     4a8:	11 24       	eor	r1, r1
     4aa:	2f 93       	push	r18
     4ac:	3f 93       	push	r19
     4ae:	4f 93       	push	r20
     4b0:	5f 93       	push	r21
     4b2:	6f 93       	push	r22
     4b4:	7f 93       	push	r23
     4b6:	8f 93       	push	r24
     4b8:	9f 93       	push	r25
     4ba:	af 93       	push	r26
     4bc:	bf 93       	push	r27
     4be:	ef 93       	push	r30
     4c0:	ff 93       	push	r31
	//led_lauflicht();
	//uart_put_string("2H\n", D_Stepper);
	uart_put_string("1H\n", D_Stepper);
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	61 e0       	ldi	r22, 0x01	; 1
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
	LED_PORT ^= (1 << LED0);
     4ce:	85 b1       	in	r24, 0x05	; 5
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	89 27       	eor	r24, r25
     4d4:	85 b9       	out	0x05, r24	; 5
}
     4d6:	ff 91       	pop	r31
     4d8:	ef 91       	pop	r30
     4da:	bf 91       	pop	r27
     4dc:	af 91       	pop	r26
     4de:	9f 91       	pop	r25
     4e0:	8f 91       	pop	r24
     4e2:	7f 91       	pop	r23
     4e4:	6f 91       	pop	r22
     4e6:	5f 91       	pop	r21
     4e8:	4f 91       	pop	r20
     4ea:	3f 91       	pop	r19
     4ec:	2f 91       	pop	r18
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <uart_get_character>:
		uart_put_charater(*s, dir);
		s++;
	}
}
int 	uart_get_character	(int dir) {
	if (dir == D_RapidForm) {
     4f8:	00 97       	sbiw	r24, 0x00	; 0
     4fa:	39 f4       	brne	.+14     	; 0x50a <uart_get_character+0x12>
		while (!(UCSR0A & (1 << RXC0)))
     4fc:	80 91 c0 00 	lds	r24, 0x00C0
     500:	87 ff       	sbrs	r24, 7
     502:	fc cf       	rjmp	.-8      	; 0x4fc <uart_get_character+0x4>
			// warten bis Zeichen verfuegbar
			;
		return UDR0; // Zeichen aus UDR an Aufrufer zurueckgeben
     504:	80 91 c6 00 	lds	r24, 0x00C6
     508:	0b c0       	rjmp	.+22     	; 0x520 <uart_get_character+0x28>
	}
	if (dir == D_Stepper) {
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	19 f0       	breq	.+6      	; 0x514 <uart_get_character+0x1c>
     50e:	2f ef       	ldi	r18, 0xFF	; 255
     510:	3f ef       	ldi	r19, 0xFF	; 255
     512:	08 c0       	rjmp	.+16     	; 0x524 <uart_get_character+0x2c>
		while (!(UCSR1A & (1 << RXC1)))
     514:	80 91 c8 00 	lds	r24, 0x00C8
     518:	87 ff       	sbrs	r24, 7
     51a:	fc cf       	rjmp	.-8      	; 0x514 <uart_get_character+0x1c>
			// warten bis Zeichen verfuegbar
			;
		return UDR1; // Zeichen aus UDR an Aufrufer zurueckgeben
     51c:	80 91 ce 00 	lds	r24, 0x00CE
     520:	28 2f       	mov	r18, r24
     522:	30 e0       	ldi	r19, 0x00	; 0
	}
	return -1;
}
     524:	c9 01       	movw	r24, r18
     526:	08 95       	ret

00000528 <uart_get_string>:
void 	uart_get_string		(char * string_in, int dir) {
     528:	ef 92       	push	r14
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	8c 01       	movw	r16, r24
     536:	7b 01       	movw	r14, r22
     538:	c0 e0       	ldi	r28, 0x00	; 0
     53a:	d0 e0       	ldi	r29, 0x00	; 0
	char c;
	int i = 0;
	do {
		c = uart_get_character(dir);
     53c:	c7 01       	movw	r24, r14
     53e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <uart_get_character>
		if (c != '\r') {
     542:	8d 30       	cpi	r24, 0x0D	; 13
     544:	21 f0       	breq	.+8      	; 0x54e <uart_get_string+0x26>
			*string_in = c;
     546:	f8 01       	movw	r30, r16
     548:	81 93       	st	Z+, r24
     54a:	8f 01       	movw	r16, r30
			string_in += 1;
			i++;
     54c:	21 96       	adiw	r28, 0x01	; 1
		}
	} while (i < 100 && c != '\r' && c != '\n');
     54e:	c4 36       	cpi	r28, 0x64	; 100
     550:	d1 05       	cpc	r29, r1
     552:	24 f4       	brge	.+8      	; 0x55c <uart_get_string+0x34>
     554:	8d 30       	cpi	r24, 0x0D	; 13
     556:	11 f0       	breq	.+4      	; 0x55c <uart_get_string+0x34>
     558:	8a 30       	cpi	r24, 0x0A	; 10
     55a:	81 f7       	brne	.-32     	; 0x53c <uart_get_string+0x14>
	*string_in = '\0';
     55c:	f8 01       	movw	r30, r16
     55e:	10 82       	st	Z, r1
}
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	ff 90       	pop	r15
     56a:	ef 90       	pop	r14
     56c:	08 95       	ret

0000056e <csg_Status_melden>:
	//uart_put_string("0\n", D_Stepper);
	uart_put_string(B_OK, D_RapidForm);
}
// Hilfs Funktionen
void 	csg_Status_melden	() {
		uart_put_string(" 999999999,         0,K,K,R\r\n", D_RapidForm); // Status an RapidForm zur�ckmelden
     56e:	84 e0       	ldi	r24, 0x04	; 4
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
}
     57a:	08 95       	ret

0000057c <led_spielerein>:
	_delay_ms(500);
	lcd_my_type("Be a Honey Bee!\n");
	_delay_ms(600);
	lcd_clrscr();
}
void 	led_spielerein		(void) {
     57c:	41 e0       	ldi	r20, 0x01	; 1
     57e:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     580:	a8 ec       	ldi	r26, 0xC8	; 200
     582:	b0 e0       	ldi	r27, 0x00	; 0

	for (int i = 1; i < 9; i++) // LEDs durchlaufen
	{
		_delay_ms(80); // Eine Sekunde +/-1/10000 Sekunde warten...
		LED_PORT &= ~((1 << i)); // l�scht Bit an PortB - LED an
     584:	61 e0       	ldi	r22, 0x01	; 1
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	21 c0       	rjmp	.+66     	; 0x5cc <led_spielerein+0x50>
     58a:	fd 01       	movw	r30, r26
     58c:	31 97       	sbiw	r30, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <led_spielerein+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     590:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     592:	d9 f7       	brne	.-10     	; 0x58a <led_spielerein+0xe>
     594:	25 b1       	in	r18, 0x05	; 5
     596:	cb 01       	movw	r24, r22
     598:	04 2e       	mov	r0, r20
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <led_spielerein+0x24>
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	0a 94       	dec	r0
     5a2:	e2 f7       	brpl	.-8      	; 0x59c <led_spielerein+0x20>
     5a4:	80 95       	com	r24
     5a6:	82 23       	and	r24, r18
     5a8:	85 b9       	out	0x05, r24	; 5
		LED_PORT |= ((1 << (i - 1))); // setzt  Bit an PortB - LED aus
     5aa:	25 b1       	in	r18, 0x05	; 5
     5ac:	41 50       	subi	r20, 0x01	; 1
     5ae:	50 40       	sbci	r21, 0x00	; 0
     5b0:	cb 01       	movw	r24, r22
     5b2:	04 2e       	mov	r0, r20
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <led_spielerein+0x3e>
     5b6:	88 0f       	add	r24, r24
     5b8:	99 1f       	adc	r25, r25
     5ba:	0a 94       	dec	r0
     5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <led_spielerein+0x3a>
     5be:	28 2b       	or	r18, r24
     5c0:	25 b9       	out	0x05, r18	; 5
	_delay_ms(600);
	lcd_clrscr();
}
void 	led_spielerein		(void) {

	for (int i = 1; i < 9; i++) // LEDs durchlaufen
     5c2:	4e 5f       	subi	r20, 0xFE	; 254
     5c4:	5f 4f       	sbci	r21, 0xFF	; 255
     5c6:	49 30       	cpi	r20, 0x09	; 9
     5c8:	51 05       	cpc	r21, r1
     5ca:	19 f0       	breq	.+6      	; 0x5d2 <led_spielerein+0x56>
     5cc:	80 e2       	ldi	r24, 0x20	; 32
     5ce:	93 e0       	ldi	r25, 0x03	; 3
     5d0:	dc cf       	rjmp	.-72     	; 0x58a <led_spielerein+0xe>
     5d2:	08 95       	ret

000005d4 <debounce_init>:
}
void 	debounce_init		(void) {
	///////////////// Debounce Stuff ////////////////////

	// Configure debouncing routines
	KEY_DDR &= ~ALL_KEYS; // configure key port for input
     5d4:	81 b1       	in	r24, 0x01	; 1
     5d6:	11 b8       	out	0x01, r1	; 1
	KEY_PORT |= ALL_KEYS; // and turn on pull up resistors
     5d8:	82 b1       	in	r24, 0x02	; 2
     5da:	8f ef       	ldi	r24, 0xFF	; 255
     5dc:	82 b9       	out	0x02, r24	; 2

	TCCR0B = (1 << CS02) | (1 << CS00); // divide by 1024
     5de:	85 e0       	ldi	r24, 0x05	; 5
     5e0:	85 bd       	out	0x25, r24	; 37
	TCNT0 = (uint8_t) (int16_t) -(F_CPU / 1024 * 10 * 10e-3 + 0.5); // preload for 10ms
     5e2:	83 ef       	ldi	r24, 0xF3	; 243
     5e4:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= 1 << TOIE0; // enable timer interrupt
     5e6:	ee e6       	ldi	r30, 0x6E	; 110
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	80 81       	ld	r24, Z
     5ec:	81 60       	ori	r24, 0x01	; 1
     5ee:	80 83       	st	Z, r24

	sei();
     5f0:	78 94       	sei
	///////////////// Debounce Stuff ////////////////////
}
     5f2:	08 95       	ret

000005f4 <led_lauflicht>:
void 	led_lauflicht		(void) {
	uint8_t i = LED_PORT;
     5f4:	85 b1       	in	r24, 0x05	; 5
	i = (i & 0x07) | ((i << 1) & 0xF0);
     5f6:	98 2f       	mov	r25, r24
     5f8:	99 0f       	add	r25, r25
     5fa:	90 7f       	andi	r25, 0xF0	; 240
     5fc:	87 70       	andi	r24, 0x07	; 7
     5fe:	98 2b       	or	r25, r24
	if (i < 0xF0)
     600:	90 3f       	cpi	r25, 0xF0	; 240
     602:	08 f4       	brcc	.+2      	; 0x606 <led_lauflicht+0x12>
		i |= 0x08;
     604:	98 60       	ori	r25, 0x08	; 8
	LED_PORT = i;
     606:	95 b9       	out	0x05, r25	; 5
}
     608:	08 95       	ret

0000060a <init_WDT>:
	ms_spin(1000);
}

// Init Stuff
void init_WDT(void) {
	cli();
     60a:	f8 94       	cli
	wdt_reset();
     60c:	a8 95       	wdr
	WDTCSR |= (1 << WDCE) | (1 << WDE);
     60e:	e0 e6       	ldi	r30, 0x60	; 96
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 81       	ld	r24, Z
     614:	88 61       	ori	r24, 0x18	; 24
     616:	80 83       	st	Z, r24
	WDTCSR = (1 << WDE) | (1 << WDIE) | (1 << WDP3) | (1 << WDP0); //Watchdog 8s
     618:	89 e6       	ldi	r24, 0x69	; 105
     61a:	80 83       	st	Z, r24
	//WDTCSR = 0x0F; //Watchdog Off
	sei();
     61c:	78 94       	sei
}
     61e:	08 95       	ret

00000620 <init>:
void init() {
	// Watchdog Initialisieren oder Abschalten
	init_WDT();
     620:	0e 94 05 03 	call	0x60a	; 0x60a <init_WDT>
	// LED Port definieren
	LED_DDR = 0xFF;
     624:	8f ef       	ldi	r24, 0xFF	; 255
     626:	84 b9       	out	0x04, r24	; 4
	LED_PORT = 0xFF;
     628:	85 b9       	out	0x05, r24	; 5
	// Interrupts definieren
	PCMSK3 |= (1 << PCINT28); // PD4 als Interrupt zulassen
     62a:	e3 e7       	ldi	r30, 0x73	; 115
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	80 81       	ld	r24, Z
     630:	80 61       	ori	r24, 0x10	; 16
     632:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE3); //Pin Change Interrupt Control Register - PCIE3 setzen f�r PCINT30
     634:	e8 e6       	ldi	r30, 0x68	; 104
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	80 81       	ld	r24, Z
     63a:	88 60       	ori	r24, 0x08	; 8
     63c:	80 83       	st	Z, r24
	// Startup kennzeichnen
	led_spielerein();
     63e:	0e 94 be 02 	call	0x57c	; 0x57c <led_spielerein>
	// LC Display initialisieren
	lcd_init(LCD_DISP_ON_CURSOR);
     642:	8e e0       	ldi	r24, 0x0E	; 14
     644:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_init>
	lcd_clrscr();
     648:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
	lcd_home();
     64c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_home>
	//lcd_spielereien();
	// Taster entprellen
	debounce_init();
     650:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <debounce_init>
	// RS-232 Verbindung initialisieren
	uart_init();
     654:	0e 94 0d 02 	call	0x41a	; 0x41a <uart_init>
	//menu_enter(&menu_context, &menu_main);
}
     658:	08 95       	ret

0000065a <my_select>:
	lcd_puts("Aufnahme starten\n");
	lcd_puts("Nach Aufnahme SW3 dr�cken!\n");
	if (get_key_press(1 << KEY3))
		uart_put_string("M 16000\r", D_Stepper);
}
void 	my_select			(void *arg, char *name) {
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	8b 01       	movw	r16, r22
	lcd_clrscr();
     660:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
	lcd_puts("Selected: ");
     664:	82 e2       	ldi	r24, 0x22	; 34
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(name);
     66c:	c8 01       	movw	r24, r16
     66e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
 */


static inline void ms_spin(unsigned short ms) {
	if (ms) {
		__asm__ __volatile__ (
     672:	8e ee       	ldi	r24, 0xEE	; 238
     674:	92 e0       	ldi	r25, 0x02	; 2

00000676 <outer_592>:
     676:	a0 ed       	ldi	r26, 0xD0	; 208
     678:	b7 e0       	ldi	r27, 0x07	; 7

0000067a <inner_592>:
     67a:	11 97       	sbiw	r26, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <inner_592>
     67e:	01 97       	sbiw	r24, 0x01	; 1
     680:	d1 f7       	brne	.-12     	; 0x676 <outer_592>

	ms_spin(750);
}
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	08 95       	ret

00000688 <mod_manual>:
	LED_PORT = i;
}

// Menu Stuff
void 	mod_manual			(void *arg, void *name) {
	lcd_puts("Manueller Modus\n");
     688:	8d e2       	ldi	r24, 0x2D	; 45
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("Aufnahme starten\n");
     690:	8e e3       	ldi	r24, 0x3E	; 62
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("Nach Aufnahme SW3 dr�cken!\n");
     698:	80 e5       	ldi	r24, 0x50	; 80
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     6a0:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     6a2:	90 91 20 08 	lds	r25, 0x0820
     6a6:	98 70       	andi	r25, 0x08	; 8
  key_press ^= key_mask;                          // clear key(s)
     6a8:	80 91 20 08 	lds	r24, 0x0820
     6ac:	89 27       	eor	r24, r25
     6ae:	80 93 20 08 	sts	0x0820, r24
  sei();
     6b2:	78 94       	sei
	if (get_key_press(1 << KEY3))
     6b4:	99 23       	and	r25, r25
     6b6:	31 f0       	breq	.+12     	; 0x6c4 <mod_manual+0x3c>
		uart_put_string("M 16000\r", D_Stepper);
     6b8:	8e e6       	ldi	r24, 0x6E	; 110
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	61 e0       	ldi	r22, 0x01	; 1
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
     6c4:	08 95       	ret

000006c6 <String_zerlegen_csg>:
	ltoa(z,Position,10);
	//lcd_puts("Position: ");
	//lcd_puts(Position);
	//lcd_puts("\n");
}
void 	String_zerlegen_csg	(char * str_rx) {
     6c6:	cf 92       	push	r12
     6c8:	df 92       	push	r13
     6ca:	ef 92       	push	r14
     6cc:	ff 92       	push	r15
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	df 93       	push	r29
     6d4:	cf 93       	push	r28
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	61 97       	sbiw	r28, 0x11	; 17
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	6c 01       	movw	r12, r24
	int i = 4; // Index Input String | Bei 4. Zeichen Beginnen. Die ersten 3 Zeichen sind Fix.
	int j = 0; // Index Variable
	char c; // Zu kopierendes Zeichen
	// Variablen Deklaration und Initialisierung mit Defaultwerten
	char Speed_Range[2] = "2";
	char ONE_Min_Speed[6] = "200";
     6e8:	82 e3       	ldi	r24, 0x32	; 50
     6ea:	90 e3       	ldi	r25, 0x30	; 48
     6ec:	a0 e3       	ldi	r26, 0x30	; 48
     6ee:	b0 e0       	ldi	r27, 0x00	; 0
     6f0:	8e 83       	std	Y+6, r24	; 0x06
     6f2:	9f 83       	std	Y+7, r25	; 0x07
     6f4:	a8 87       	std	Y+8, r26	; 0x08
     6f6:	b9 87       	std	Y+9, r27	; 0x09
     6f8:	1b 86       	std	Y+11, r1	; 0x0b
     6fa:	1a 86       	std	Y+10, r1	; 0x0a
	char ONE_Max_Speed[6] = "2000";
     6fc:	de 01       	movw	r26, r28
     6fe:	1c 96       	adiw	r26, 0x0c	; 12
     700:	e4 ea       	ldi	r30, 0xA4	; 164
     702:	f1 e0       	ldi	r31, 0x01	; 1
     704:	85 e0       	ldi	r24, 0x05	; 5
     706:	01 90       	ld	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	81 50       	subi	r24, 0x01	; 1
     70c:	e1 f7       	brne	.-8      	; 0x706 <String_zerlegen_csg+0x40>
     70e:	19 8a       	std	Y+17, r1	; 0x11
	char ONE_Acc_Speed[5] = "200";
     710:	82 e3       	ldi	r24, 0x32	; 50
     712:	90 e3       	ldi	r25, 0x30	; 48
     714:	a0 e3       	ldi	r26, 0x30	; 48
     716:	b0 e0       	ldi	r27, 0x00	; 0
     718:	89 83       	std	Y+1, r24	; 0x01
     71a:	9a 83       	std	Y+2, r25	; 0x02
     71c:	ab 83       	std	Y+3, r26	; 0x03
     71e:	bc 83       	std	Y+4, r27	; 0x04
     720:	1d 82       	std	Y+5, r1	; 0x05
     722:	84 e0       	ldi	r24, 0x04	; 4
     724:	e8 2e       	mov	r14, r24
     726:	f1 2c       	mov	r15, r1
     728:	a0 e0       	ldi	r26, 0x00	; 0
     72a:	b0 e0       	ldi	r27, 0x00	; 0
	//
	////////////////////////
	do {
		c = str_rx[i];
		if (c != 'F') {
			ONE_Min_Speed[j] = c;
     72c:	9e 01       	movw	r18, r28
     72e:	2a 5f       	subi	r18, 0xFA	; 250
     730:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	//  Min Speed (50 - 20000)
	//
	////////////////////////
	do {
		c = str_rx[i];
     732:	f6 01       	movw	r30, r12
     734:	ee 0d       	add	r30, r14
     736:	ff 1d       	adc	r31, r15
     738:	80 81       	ld	r24, Z
		if (c != 'F') {
     73a:	86 34       	cpi	r24, 0x46	; 70
     73c:	41 f0       	breq	.+16     	; 0x74e <String_zerlegen_csg+0x88>
			ONE_Min_Speed[j] = c;
     73e:	f9 01       	movw	r30, r18
     740:	ea 0f       	add	r30, r26
     742:	fb 1f       	adc	r31, r27
     744:	80 83       	st	Z, r24
			j++;
     746:	11 96       	adiw	r26, 0x01	; 1
			i++;
     748:	08 94       	sec
     74a:	e1 1c       	adc	r14, r1
     74c:	f1 1c       	adc	r15, r1
		}
	} while (j < 6 && c != '\0' && c != 'F');
     74e:	a6 30       	cpi	r26, 0x06	; 6
     750:	b1 05       	cpc	r27, r1
     752:	24 f4       	brge	.+8      	; 0x75c <String_zerlegen_csg+0x96>
     754:	88 23       	and	r24, r24
     756:	11 f0       	breq	.+4      	; 0x75c <String_zerlegen_csg+0x96>
     758:	86 34       	cpi	r24, 0x46	; 70
     75a:	59 f7       	brne	.-42     	; 0x732 <String_zerlegen_csg+0x6c>
	ONE_Min_Speed[j] = '\0';
     75c:	8e 01       	movw	r16, r28
     75e:	0a 5f       	subi	r16, 0xFA	; 250
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	a0 0f       	add	r26, r16
     764:	b1 1f       	adc	r27, r17
     766:	1c 92       	st	X, r1

	lcd_puts("1_MIN_SPEED:");
     768:	87 e7       	ldi	r24, 0x77	; 119
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(ONE_Min_Speed);
     770:	c8 01       	movw	r24, r16
     772:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("\n");
     776:	84 e8       	ldi	r24, 0x84	; 132
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	////////////////////////
	//
	//  Max Speed (50 - 20000)
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
     77e:	08 94       	sec
     780:	e1 1c       	adc	r14, r1
     782:	f1 1c       	adc	r15, r1
     784:	a0 e0       	ldi	r26, 0x00	; 0
     786:	b0 e0       	ldi	r27, 0x00	; 0
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
		if (c != 'R') {
			ONE_Max_Speed[j] = c;
     788:	9e 01       	movw	r18, r28
     78a:	24 5f       	subi	r18, 0xF4	; 244
     78c:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
     78e:	f6 01       	movw	r30, r12
     790:	ee 0d       	add	r30, r14
     792:	ff 1d       	adc	r31, r15
     794:	80 81       	ld	r24, Z
		if (c != 'R') {
     796:	82 35       	cpi	r24, 0x52	; 82
     798:	41 f0       	breq	.+16     	; 0x7aa <String_zerlegen_csg+0xe4>
			ONE_Max_Speed[j] = c;
     79a:	f9 01       	movw	r30, r18
     79c:	ea 0f       	add	r30, r26
     79e:	fb 1f       	adc	r31, r27
     7a0:	80 83       	st	Z, r24
			i++;
     7a2:	08 94       	sec
     7a4:	e1 1c       	adc	r14, r1
     7a6:	f1 1c       	adc	r15, r1
			j++;
     7a8:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (j < 6 && c != '\0' && c != 'R');
     7aa:	a6 30       	cpi	r26, 0x06	; 6
     7ac:	b1 05       	cpc	r27, r1
     7ae:	24 f4       	brge	.+8      	; 0x7b8 <String_zerlegen_csg+0xf2>
     7b0:	88 23       	and	r24, r24
     7b2:	11 f0       	breq	.+4      	; 0x7b8 <String_zerlegen_csg+0xf2>
     7b4:	82 35       	cpi	r24, 0x52	; 82
     7b6:	59 f7       	brne	.-42     	; 0x78e <String_zerlegen_csg+0xc8>
	ONE_Max_Speed[j] = '\0';
     7b8:	8e 01       	movw	r16, r28
     7ba:	04 5f       	subi	r16, 0xF4	; 244
     7bc:	1f 4f       	sbci	r17, 0xFF	; 255
     7be:	a0 0f       	add	r26, r16
     7c0:	b1 1f       	adc	r27, r17
     7c2:	1c 92       	st	X, r1

	lcd_puts("1_MAX_SPEED:");
     7c4:	86 e8       	ldi	r24, 0x86	; 134
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(ONE_Max_Speed);
     7cc:	c8 01       	movw	r24, r16
     7ce:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("\n");
     7d2:	84 e8       	ldi	r24, 0x84	; 132
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	////////////////////////
	//
	//  Acceleration (0 - 1000)
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
     7da:	c7 01       	movw	r24, r14
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	a0 e0       	ldi	r26, 0x00	; 0
     7e0:	b0 e0       	ldi	r27, 0x00	; 0
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
		if (c != 'S') {
			ONE_Acc_Speed[j] = c;
     7e2:	ae 01       	movw	r20, r28
     7e4:	4f 5f       	subi	r20, 0xFF	; 255
     7e6:	5f 4f       	sbci	r21, 0xFF	; 255
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
     7e8:	f6 01       	movw	r30, r12
     7ea:	e8 0f       	add	r30, r24
     7ec:	f9 1f       	adc	r31, r25
     7ee:	20 81       	ld	r18, Z
		if (c != 'S') {
     7f0:	23 35       	cpi	r18, 0x53	; 83
     7f2:	31 f0       	breq	.+12     	; 0x800 <String_zerlegen_csg+0x13a>
			ONE_Acc_Speed[j] = c;
     7f4:	fa 01       	movw	r30, r20
     7f6:	ea 0f       	add	r30, r26
     7f8:	fb 1f       	adc	r31, r27
     7fa:	20 83       	st	Z, r18
			i++;
     7fc:	01 96       	adiw	r24, 0x01	; 1
			j++;
     7fe:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (j < 4 && c != '\0' && c != 'S');
     800:	a4 30       	cpi	r26, 0x04	; 4
     802:	b1 05       	cpc	r27, r1
     804:	24 f4       	brge	.+8      	; 0x80e <String_zerlegen_csg+0x148>
     806:	22 23       	and	r18, r18
     808:	11 f0       	breq	.+4      	; 0x80e <String_zerlegen_csg+0x148>
     80a:	23 35       	cpi	r18, 0x53	; 83
     80c:	69 f7       	brne	.-38     	; 0x7e8 <String_zerlegen_csg+0x122>
	ONE_Acc_Speed[j] = '\0';
     80e:	8e 01       	movw	r16, r28
     810:	0f 5f       	subi	r16, 0xFF	; 255
     812:	1f 4f       	sbci	r17, 0xFF	; 255
     814:	a0 0f       	add	r26, r16
     816:	b1 1f       	adc	r27, r17
     818:	1c 92       	st	X, r1

	lcd_puts("1_ACC_SPEED:");
     81a:	83 e9       	ldi	r24, 0x93	; 147
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(ONE_Acc_Speed);
     822:	c8 01       	movw	r24, r16
     824:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("\n");
     828:	84 e8       	ldi	r24, 0x84	; 132
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>

	//uart_put_string("0\n", D_Stepper);
	uart_put_string(B_OK, D_RapidForm);
     830:	80 ea       	ldi	r24, 0xA0	; 160
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
}
     83c:	61 96       	adiw	r28, 0x11	; 17
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
     848:	cf 91       	pop	r28
     84a:	df 91       	pop	r29
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	df 90       	pop	r13
     856:	cf 90       	pop	r12
     858:	08 95       	ret

0000085a <lcd_my_type>:
			switch_Terminal(str_rx);
	}
}

// LCD und LED Stuff
void 	lcd_my_type			(char *s) {
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	ec 01       	movw	r28, r24
	srand(TCNT0);
     868:	86 b5       	in	r24, 0x26	; 38
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <srand>
     870:	90 ed       	ldi	r25, 0xD0	; 208
     872:	e9 2e       	mov	r14, r25
     874:	97 e0       	ldi	r25, 0x07	; 7
     876:	f9 2e       	mov	r15, r25
     878:	17 c0       	rjmp	.+46     	; 0x8a8 <lcd_my_type+0x4e>
	int min = 10;
	int max = 250;
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		erg = (rand() % (max - min + 1) + min);
     87a:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <rand>
     87e:	61 ef       	ldi	r22, 0xF1	; 241
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	0e 94 2f 0c 	call	0x185e	; 0x185e <__divmodhi4>
     886:	8c 01       	movw	r16, r24
     888:	06 5f       	subi	r16, 0xF6	; 246
     88a:	1f 4f       	sbci	r17, 0xFF	; 255
		lcd_putc(*s);
     88c:	88 81       	ld	r24, Y
     88e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	04 c0       	rjmp	.+8      	; 0x8a0 <lcd_my_type+0x46>
     898:	f7 01       	movw	r30, r14
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	f1 f7       	brne	.-4      	; 0x89a <lcd_my_type+0x40>
		s++;
		for (int i = 0; i < erg; i++)
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	80 17       	cp	r24, r16
     8a2:	91 07       	cpc	r25, r17
     8a4:	cc f3       	brlt	.-14     	; 0x898 <lcd_my_type+0x3e>
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		erg = (rand() % (max - min + 1) + min);
		lcd_putc(*s);
		s++;
     8a6:	21 96       	adiw	r28, 0x01	; 1
void 	lcd_my_type			(char *s) {
	srand(TCNT0);
	int min = 10;
	int max = 250;
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
     8a8:	88 81       	ld	r24, Y
     8aa:	88 23       	and	r24, r24
     8ac:	31 f7       	brne	.-52     	; 0x87a <lcd_my_type+0x20>
		lcd_putc(*s);
		s++;
		for (int i = 0; i < erg; i++)
			_delay_ms(1);
	}
}
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	ff 90       	pop	r15
     8b8:	ef 90       	pop	r14
     8ba:	08 95       	ret

000008bc <lcd_spielereien>:
void 	lcd_spielereien		(void) {
     8bc:	88 ee       	ldi	r24, 0xE8	; 232
     8be:	93 e0       	ldi	r25, 0x03	; 3
     8c0:	28 ec       	ldi	r18, 0xC8	; 200
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	f9 01       	movw	r30, r18
     8c6:	31 97       	sbiw	r30, 0x01	; 1
     8c8:	f1 f7       	brne	.-4      	; 0x8c6 <lcd_spielereien+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8cc:	d9 f7       	brne	.-10     	; 0x8c4 <lcd_spielereien+0x8>
	_delay_ms(100);
	lcd_my_type("Hello Joe!\n");
     8ce:	8a ea       	ldi	r24, 0xAA	; 170
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	0e 94 2d 04 	call	0x85a	; 0x85a <lcd_my_type>
     8d6:	80 ed       	ldi	r24, 0xD0	; 208
     8d8:	97 e0       	ldi	r25, 0x07	; 7
     8da:	28 ec       	ldi	r18, 0xC8	; 200
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	f9 01       	movw	r30, r18
     8e0:	31 97       	sbiw	r30, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <lcd_spielereien+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8e6:	d9 f7       	brne	.-10     	; 0x8de <lcd_spielereien+0x22>
	_delay_ms(200);
	lcd_my_type("Have a nice Day!\n");
     8e8:	86 eb       	ldi	r24, 0xB6	; 182
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	0e 94 2d 04 	call	0x85a	; 0x85a <lcd_my_type>
     8f0:	88 e8       	ldi	r24, 0x88	; 136
     8f2:	93 e1       	ldi	r25, 0x13	; 19
     8f4:	28 ec       	ldi	r18, 0xC8	; 200
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	f9 01       	movw	r30, r18
     8fa:	31 97       	sbiw	r30, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <lcd_spielereien+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     900:	d9 f7       	brne	.-10     	; 0x8f8 <lcd_spielereien+0x3c>
	_delay_ms(500);
	lcd_my_type("Be a Honey Bee!\n");
     902:	88 ec       	ldi	r24, 0xC8	; 200
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	0e 94 2d 04 	call	0x85a	; 0x85a <lcd_my_type>
     90a:	80 e7       	ldi	r24, 0x70	; 112
     90c:	97 e1       	ldi	r25, 0x17	; 23
     90e:	28 ec       	ldi	r18, 0xC8	; 200
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	f9 01       	movw	r30, r18
     914:	31 97       	sbiw	r30, 0x01	; 1
     916:	f1 f7       	brne	.-4      	; 0x914 <__stack+0x15>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     918:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     91a:	d9 f7       	brne	.-10     	; 0x912 <__stack+0x13>
	_delay_ms(600);
	lcd_clrscr();
     91c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
}
     920:	08 95       	ret

00000922 <Position_Zeta>:
}
// Hilfs Funktionen
void 	csg_Status_melden	() {
		uart_put_string(" 999999999,         0,K,K,R\r\n", D_RapidForm); // Status an RapidForm zur�ckmelden
}
void 	Position_Zeta		(char * Position) {
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	8c 01       	movw	r16, r24
     92c:	c0 e0       	ldi	r28, 0x00	; 0
     92e:	d0 e0       	ldi	r29, 0x00	; 0
    char c;
    int i = 0;
    do{
        c = str_rx[i + 1];
     930:	de 01       	movw	r26, r28
     932:	11 96       	adiw	r26, 0x01	; 1
     934:	fd 01       	movw	r30, r26
     936:	e4 54       	subi	r30, 0x44	; 68
     938:	f8 4f       	sbci	r31, 0xF8	; 248
     93a:	e0 81       	ld	r30, Z
        if(c != ','){
     93c:	ec 32       	cpi	r30, 0x2C	; 44
     93e:	11 f4       	brne	.+4      	; 0x944 <Position_Zeta+0x22>
     940:	de 01       	movw	r26, r28
     942:	03 c0       	rjmp	.+6      	; 0x94a <Position_Zeta+0x28>
            Position[i] = c;
     944:	c0 0f       	add	r28, r16
     946:	d1 1f       	adc	r29, r17
     948:	e8 83       	st	Y, r30
            i++;
        }
    }
     while(i < 20 && c != '\0' && c != ',');
     94a:	a4 31       	cpi	r26, 0x14	; 20
     94c:	b1 05       	cpc	r27, r1
     94e:	34 f4       	brge	.+12     	; 0x95c <Position_Zeta+0x3a>
     950:	ee 23       	and	r30, r30
     952:	21 f0       	breq	.+8      	; 0x95c <Position_Zeta+0x3a>
     954:	ec 32       	cpi	r30, 0x2C	; 44
     956:	11 f0       	breq	.+4      	; 0x95c <Position_Zeta+0x3a>
     958:	ed 01       	movw	r28, r26
     95a:	ea cf       	rjmp	.-44     	; 0x930 <Position_Zeta+0xe>
    Position[i] = '\0';
     95c:	a0 0f       	add	r26, r16
     95e:	b1 1f       	adc	r27, r17
     960:	1c 92       	st	X, r1
	int32_t z;
	z = atol(Position);
     962:	c8 01       	movw	r24, r16
     964:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <atol>
	z = z/9;
	ltoa(z,Position,10);
     968:	29 e0       	ldi	r18, 0x09	; 9
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	0e 94 42 0c 	call	0x1884	; 0x1884 <__divmodsi4>
     974:	ca 01       	movw	r24, r20
     976:	b9 01       	movw	r22, r18
     978:	a8 01       	movw	r20, r16
     97a:	2a e0       	ldi	r18, 0x0A	; 10
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ltoa>
}
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	08 95       	ret

0000098c <String_zerlegen_Isel>:
			return n;
		}
	}
	return 99;
}
void 	String_zerlegen_Isel(char * str_rx, char * Position) {
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	8c 01       	movw	r16, r24
     996:	eb 01       	movw	r28, r22
	//0M5200, +600
	//Achse M Position, +Geschwindigkeit
	char * Achse="0";
	Achse[0] = str_rx[1];
	Achse[1] = '\0';
	if(atoi(Achse)==0){
     998:	89 ed       	ldi	r24, 0xD9	; 217
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <atoi>
     9a0:	89 2b       	or	r24, r25
     9a2:	61 f4       	brne	.+24     	; 0x9bc <String_zerlegen_Isel+0x30>
		lcd_puts("Achse: ");
     9a4:	8b ed       	ldi	r24, 0xDB	; 219
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(Achse);
     9ac:	89 ed       	ldi	r24, 0xD9	; 217
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(" (Rotation)\n");
     9b4:	83 ee       	ldi	r24, 0xE3	; 227
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	}
	if(atoi(Achse)==1){
     9bc:	89 ed       	ldi	r24, 0xD9	; 217
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <atoi>
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	61 f4       	brne	.+24     	; 0x9e0 <String_zerlegen_Isel+0x54>
		lcd_puts("Achse: ");
     9c8:	8b ed       	ldi	r24, 0xDB	; 219
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(Achse);
     9d0:	89 ed       	ldi	r24, 0xD9	; 217
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(" (Hoehe)   \n");
     9d8:	80 ef       	ldi	r24, 0xF0	; 240
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	}
	lcd_puts("Test: ");
     9e0:	8d ef       	ldi	r24, 0xFD	; 253
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(Position);
     9e8:	ce 01       	movw	r24, r28
     9ea:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
	char c;
	int i = 0;
	do {
		c = str_rx[i + 3];
     9f2:	f8 01       	movw	r30, r16
     9f4:	ea 0f       	add	r30, r26
     9f6:	fb 1f       	adc	r31, r27
     9f8:	83 81       	ldd	r24, Z+3	; 0x03
		if (c != ',') {
     9fa:	8c 32       	cpi	r24, 0x2C	; 44
     9fc:	29 f0       	breq	.+10     	; 0xa08 <String_zerlegen_Isel+0x7c>
			Position[i] = c;
     9fe:	fe 01       	movw	r30, r28
     a00:	ea 0f       	add	r30, r26
     a02:	fb 1f       	adc	r31, r27
     a04:	80 83       	st	Z, r24
			i++;
     a06:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (i < 20 && c != '\0' && c != ',');
     a08:	a4 31       	cpi	r26, 0x14	; 20
     a0a:	b1 05       	cpc	r27, r1
     a0c:	24 f4       	brge	.+8      	; 0xa16 <String_zerlegen_Isel+0x8a>
     a0e:	88 23       	and	r24, r24
     a10:	11 f0       	breq	.+4      	; 0xa16 <String_zerlegen_Isel+0x8a>
     a12:	8c 32       	cpi	r24, 0x2C	; 44
     a14:	71 f7       	brne	.-36     	; 0x9f2 <String_zerlegen_Isel+0x66>
	Position[i] = '\0';
     a16:	ac 0f       	add	r26, r28
     a18:	bd 1f       	adc	r27, r29
     a1a:	1c 92       	st	X, r1
	int32_t z;
	z = atol(Position);
     a1c:	ce 01       	movw	r24, r28
     a1e:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <atol>
	z = (z * 71111)  /1024;
     a22:	27 ec       	ldi	r18, 0xC7	; 199
     a24:	35 e1       	ldi	r19, 0x15	; 21
     a26:	41 e0       	ldi	r20, 0x01	; 1
     a28:	50 e0       	ldi	r21, 0x00	; 0
     a2a:	0e 94 10 0c 	call	0x1820	; 0x1820 <__mulsi3>
	ltoa(z,Position,10);
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	34 e0       	ldi	r19, 0x04	; 4
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	0e 94 42 0c 	call	0x1884	; 0x1884 <__divmodsi4>
     a3a:	ca 01       	movw	r24, r20
     a3c:	b9 01       	movw	r22, r18
     a3e:	ae 01       	movw	r20, r28
     a40:	2a e0       	ldi	r18, 0x0A	; 10
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ltoa>
	//lcd_puts("Position: ");
	//lcd_puts(Position);
	//lcd_puts("\n");
}
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	08 95       	ret

00000a52 <FindStringInArray>:
			.Befehl = progmem_Befehl,
	}
};
*/

int 	FindStringInArray	(const char* pInput, const char* pOptions[], int cmp_length) {
     a52:	cf 92       	push	r12
     a54:	df 92       	push	r13
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	6c 01       	movw	r12, r24
     a64:	7a 01       	movw	r14, r20
     a66:	8b 01       	movw	r16, r22
     a68:	cf ef       	ldi	r28, 0xFF	; 255
     a6a:	df ef       	ldi	r29, 0xFF	; 255
     a6c:	08 c0       	rjmp	.+16     	; 0xa7e <FindStringInArray+0x2c>
	int n = -1;
	while (pOptions[++n]) {
		//lcd_puts(pOptions[n]);
		//lcd_puts("\n");
		if (!strncmp(pInput, pOptions[n], cmp_length)){
     a6e:	c6 01       	movw	r24, r12
     a70:	a7 01       	movw	r20, r14
     a72:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <strncmp>
     a76:	0e 5f       	subi	r16, 0xFE	; 254
     a78:	1f 4f       	sbci	r17, 0xFF	; 255
     a7a:	00 97       	sbiw	r24, 0x00	; 0
     a7c:	49 f0       	breq	.+18     	; 0xa90 <FindStringInArray+0x3e>
};
*/

int 	FindStringInArray	(const char* pInput, const char* pOptions[], int cmp_length) {
	int n = -1;
	while (pOptions[++n]) {
     a7e:	21 96       	adiw	r28, 0x01	; 1
     a80:	f8 01       	movw	r30, r16
     a82:	60 81       	ld	r22, Z
     a84:	71 81       	ldd	r23, Z+1	; 0x01
     a86:	61 15       	cp	r22, r1
     a88:	71 05       	cpc	r23, r1
     a8a:	89 f7       	brne	.-30     	; 0xa6e <FindStringInArray+0x1c>
     a8c:	c3 e6       	ldi	r28, 0x63	; 99
     a8e:	d0 e0       	ldi	r29, 0x00	; 0
		if (!strncmp(pInput, pOptions[n], cmp_length)){
			return n;
		}
	}
	return 99;
}
     a90:	ce 01       	movw	r24, r28
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	df 90       	pop	r13
     aa0:	cf 90       	pop	r12
     aa2:	08 95       	ret

00000aa4 <switch_Motor>:
		uart_put_string(str_rx,D_Stepper);
		uart_put_string("\n",D_Stepper);
	}
}

int 	switch_Motor		(char * str_rx) {
     aa4:	df 93       	push	r29
     aa6:	cf 93       	push	r28
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	2a 97       	sbiw	r28, 0x0a	; 10
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
	const char* pOptions[] = {
			"@01", 		// 0 - Isel
			"Q:",    	// 1 - CSG
			"ECHO0", 	// 2 - Zeta
			"!Terminal",	// 3 - Terminal ansteuerung!
			0 };
     ab8:	de 01       	movw	r26, r28
     aba:	11 96       	adiw	r26, 0x01	; 1
     abc:	e8 ee       	ldi	r30, 0xE8	; 232
     abe:	f6 e0       	ldi	r31, 0x06	; 6
     ac0:	2a e0       	ldi	r18, 0x0A	; 10
     ac2:	01 90       	ld	r0, Z+
     ac4:	0d 92       	st	X+, r0
     ac6:	21 50       	subi	r18, 0x01	; 1
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <switch_Motor+0x1e>
	switch (FindStringInArray(str_rx, pOptions, 3)) {
     aca:	be 01       	movw	r22, r28
     acc:	6f 5f       	subi	r22, 0xFF	; 255
     ace:	7f 4f       	sbci	r23, 0xFF	; 255
     ad0:	43 e0       	ldi	r20, 0x03	; 3
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	0e 94 29 05 	call	0xa52	; 0xa52 <FindStringInArray>
     ad8:	81 30       	cpi	r24, 0x01	; 1
     ada:	91 05       	cpc	r25, r1
     adc:	61 f0       	breq	.+24     	; 0xaf6 <switch_Motor+0x52>
     ade:	82 30       	cpi	r24, 0x02	; 2
     ae0:	91 05       	cpc	r25, r1
     ae2:	1c f4       	brge	.+6      	; 0xaea <switch_Motor+0x46>
     ae4:	89 2b       	or	r24, r25
     ae6:	51 f0       	breq	.+20     	; 0xafc <switch_Motor+0x58>
     ae8:	12 c0       	rjmp	.+36     	; 0xb0e <switch_Motor+0x6a>
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	91 05       	cpc	r25, r1
     aee:	49 f0       	breq	.+18     	; 0xb02 <switch_Motor+0x5e>
     af0:	03 97       	sbiw	r24, 0x03	; 3
     af2:	69 f4       	brne	.+26     	; 0xb0e <switch_Motor+0x6a>
     af4:	09 c0       	rjmp	.+18     	; 0xb08 <switch_Motor+0x64>
     af6:	21 e0       	ldi	r18, 0x01	; 1
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	0b c0       	rjmp	.+22     	; 0xb12 <switch_Motor+0x6e>
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	08 c0       	rjmp	.+16     	; 0xb12 <switch_Motor+0x6e>
     b02:	22 e0       	ldi	r18, 0x02	; 2
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	05 c0       	rjmp	.+10     	; 0xb12 <switch_Motor+0x6e>
		break;
	case 1: 		// 1 - CSG
		return M_CSG;
		break;
	case 2:			// 2 - Zeta
		return M_ZETA;
     b08:	23 e0       	ldi	r18, 0x03	; 3
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <switch_Motor+0x6e>
		break;
	case 3:			// 3 - Terminal ansteuerung
		return M_TERMINAL;
     b0e:	2e ef       	ldi	r18, 0xFE	; 254
     b10:	3f ef       	ldi	r19, 0xFF	; 255
		break;
	default:
		return M_UNK;
	}
}
     b12:	c9 01       	movw	r24, r18
     b14:	2a 96       	adiw	r28, 0x0a	; 10
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	cf 91       	pop	r28
     b22:	df 91       	pop	r29
     b24:	08 95       	ret

00000b26 <switch_Terminal>:
		lcd_puts("   \n");
		//Initialized = switch_Inputs(str_rx);
	}
}

void 	switch_Terminal			(char * str_rx) {
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	df 93       	push	r29
     b2c:	cf 93       	push	r28
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
     b32:	2a 97       	sbiw	r28, 0x0a	; 10
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	8c 01       	movw	r16, r24
	const char* pOptions[] = {
			"!CLS", // 0 - LC-Display l�schen
			"Test",	// 1 - Test
			"!Manual",// 2 - Ignorieren
			"!YYYY",// 3 - Wait till motor stops
			0 };
     b40:	de 01       	movw	r26, r28
     b42:	11 96       	adiw	r26, 0x01	; 1
     b44:	ea e0       	ldi	r30, 0x0A	; 10
     b46:	f7 e0       	ldi	r31, 0x07	; 7
     b48:	8a e0       	ldi	r24, 0x0A	; 10
     b4a:	01 90       	ld	r0, Z+
     b4c:	0d 92       	st	X+, r0
     b4e:	81 50       	subi	r24, 0x01	; 1
     b50:	e1 f7       	brne	.-8      	; 0xb4a <switch_Terminal+0x24>

	if (init_T == 0){
     b52:	80 91 b6 07 	lds	r24, 0x07B6
     b56:	90 91 b7 07 	lds	r25, 0x07B7
     b5a:	89 2b       	or	r24, r25
     b5c:	c1 f4       	brne	.+48     	; 0xb8e <switch_Terminal+0x68>
		init_T = 1;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	90 93 b7 07 	sts	0x07B7, r25
     b66:	80 93 b6 07 	sts	0x07B6, r24
		uart_put_string("Willkommen im Terminal Modus\r\n",D_RapidForm);
     b6a:	84 e0       	ldi	r24, 0x04	; 4
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
		uart_put_string("m�gliche Befehle sind: \r\n",D_RapidForm);
     b76:	83 e2       	ldi	r24, 0x23	; 35
     b78:	92 e0       	ldi	r25, 0x02	; 2
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
		uart_put_string(" A - Motorstatus\r\n M - Move Steps\r\n", D_RapidForm);
     b82:	8f e3       	ldi	r24, 0x3F	; 63
     b84:	92 e0       	ldi	r25, 0x02	; 2
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
	}
	switch (FindStringInArray(str_rx, pOptions, 2)) {
     b8e:	c8 01       	movw	r24, r16
     b90:	be 01       	movw	r22, r28
     b92:	6f 5f       	subi	r22, 0xFF	; 255
     b94:	7f 4f       	sbci	r23, 0xFF	; 255
     b96:	42 e0       	ldi	r20, 0x02	; 2
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	0e 94 29 05 	call	0xa52	; 0xa52 <FindStringInArray>
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	91 05       	cpc	r25, r1
     ba2:	61 f0       	breq	.+24     	; 0xbbc <switch_Terminal+0x96>
     ba4:	82 30       	cpi	r24, 0x02	; 2
     ba6:	91 05       	cpc	r25, r1
     ba8:	1c f4       	brge	.+6      	; 0xbb0 <switch_Terminal+0x8a>
     baa:	89 2b       	or	r24, r25
     bac:	21 f0       	breq	.+8      	; 0xbb6 <switch_Terminal+0x90>
     bae:	0f c0       	rjmp	.+30     	; 0xbce <switch_Terminal+0xa8>
     bb0:	04 97       	sbiw	r24, 0x04	; 4
     bb2:	6c f4       	brge	.+26     	; 0xbce <switch_Terminal+0xa8>
     bb4:	1e c0       	rjmp	.+60     	; 0xbf2 <switch_Terminal+0xcc>
	case 0: // Display l�schen
		lcd_clrscr();
     bb6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
     bba:	1b c0       	rjmp	.+54     	; 0xbf2 <switch_Terminal+0xcc>
		break;
	case 1: // Interner Test
		lcd_puts("Test bestanden     \n");
     bbc:	83 e6       	ldi	r24, 0x63	; 99
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("Test bestanden", D_RapidForm);
     bc4:	88 e7       	ldi	r24, 0x78	; 120
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	10 c0       	rjmp	.+32     	; 0xbee <switch_Terminal+0xc8>
	case 3: // Reserve 2

		break;
	default:
		//lcd_puts("Z:");
		lcd_puts(str_rx);
     bce:	c8 01       	movw	r24, r16
     bd0:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts("       \n");
     bd4:	87 e8       	ldi	r24, 0x87	; 135
     bd6:	92 e0       	ldi	r25, 0x02	; 2
     bd8:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string(str_rx,D_Stepper);
     bdc:	c8 01       	movw	r24, r16
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
		uart_put_string("\n",D_Stepper);
     be6:	84 e8       	ldi	r24, 0x84	; 132
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
	}
}
     bf2:	2a 96       	adiw	r28, 0x0a	; 10
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	f8 94       	cli
     bf8:	de bf       	out	0x3e, r29	; 62
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	cd bf       	out	0x3d, r28	; 61
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	08 95       	ret

00000c08 <switch_csg>:
	default:
		lcd_puts("ISEL:    \n");
		lcd_puts(str_rx);
	}
}
void 	switch_csg			(char * str_rx) {
     c08:	0f 93       	push	r16
     c0a:	1f 93       	push	r17
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	a0 97       	sbiw	r28, 0x20	; 32
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	8c 01       	movw	r16, r24
			"H:", // 5 - H:
			"G", // 6 - Motor starten
			"M:", // 7 - Move by Pulses
			"!", // 8 - Busy Ready ?
			"H1",
			0 };
     c22:	de 01       	movw	r26, r28
     c24:	1b 96       	adiw	r26, 0x0b	; 11
     c26:	ed e6       	ldi	r30, 0x6D	; 109
     c28:	f7 e0       	ldi	r31, 0x07	; 7
     c2a:	86 e1       	ldi	r24, 0x16	; 22
     c2c:	01 90       	ld	r0, Z+
     c2e:	0d 92       	st	X+, r0
     c30:	81 50       	subi	r24, 0x01	; 1
     c32:	e1 f7       	brne	.-8      	; 0xc2c <switch_csg+0x24>
	switch (FindStringInArray(str_rx, pOptions, 2)) {
     c34:	c8 01       	movw	r24, r16
     c36:	be 01       	movw	r22, r28
     c38:	65 5f       	subi	r22, 0xF5	; 245
     c3a:	7f 4f       	sbci	r23, 0xFF	; 255
     c3c:	42 e0       	ldi	r20, 0x02	; 2
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	0e 94 29 05 	call	0xa52	; 0xa52 <FindStringInArray>
     c44:	84 30       	cpi	r24, 0x04	; 4
     c46:	91 05       	cpc	r25, r1
     c48:	c1 f1       	breq	.+112    	; 0xcba <switch_csg+0xb2>
     c4a:	85 30       	cpi	r24, 0x05	; 5
     c4c:	91 05       	cpc	r25, r1
     c4e:	84 f4       	brge	.+32     	; 0xc70 <switch_csg+0x68>
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	91 05       	cpc	r25, r1
     c54:	29 f1       	breq	.+74     	; 0xca0 <switch_csg+0x98>
     c56:	82 30       	cpi	r24, 0x02	; 2
     c58:	91 05       	cpc	r25, r1
     c5a:	1c f4       	brge	.+6      	; 0xc62 <switch_csg+0x5a>
     c5c:	89 2b       	or	r24, r25
     c5e:	e9 f0       	breq	.+58     	; 0xc9a <switch_csg+0x92>
     c60:	65 c0       	rjmp	.+202    	; 0xd2c <switch_csg+0x124>
     c62:	82 30       	cpi	r24, 0x02	; 2
     c64:	91 05       	cpc	r25, r1
     c66:	f9 f0       	breq	.+62     	; 0xca6 <switch_csg+0x9e>
     c68:	03 97       	sbiw	r24, 0x03	; 3
     c6a:	09 f0       	breq	.+2      	; 0xc6e <switch_csg+0x66>
     c6c:	5f c0       	rjmp	.+190    	; 0xd2c <switch_csg+0x124>
     c6e:	1e c0       	rjmp	.+60     	; 0xcac <switch_csg+0xa4>
     c70:	87 30       	cpi	r24, 0x07	; 7
     c72:	91 05       	cpc	r25, r1
     c74:	81 f1       	breq	.+96     	; 0xcd6 <switch_csg+0xce>
     c76:	88 30       	cpi	r24, 0x08	; 8
     c78:	91 05       	cpc	r25, r1
     c7a:	3c f4       	brge	.+14     	; 0xc8a <switch_csg+0x82>
     c7c:	85 30       	cpi	r24, 0x05	; 5
     c7e:	91 05       	cpc	r25, r1
     c80:	01 f1       	breq	.+64     	; 0xcc2 <switch_csg+0xba>
     c82:	06 97       	sbiw	r24, 0x06	; 6
     c84:	09 f0       	breq	.+2      	; 0xc88 <switch_csg+0x80>
     c86:	52 c0       	rjmp	.+164    	; 0xd2c <switch_csg+0x124>
     c88:	23 c0       	rjmp	.+70     	; 0xcd0 <switch_csg+0xc8>
     c8a:	88 30       	cpi	r24, 0x08	; 8
     c8c:	91 05       	cpc	r25, r1
     c8e:	09 f4       	brne	.+2      	; 0xc92 <switch_csg+0x8a>
     c90:	3f c0       	rjmp	.+126    	; 0xd10 <switch_csg+0x108>
     c92:	09 97       	sbiw	r24, 0x09	; 9
     c94:	09 f0       	breq	.+2      	; 0xc98 <switch_csg+0x90>
     c96:	4a c0       	rjmp	.+148    	; 0xd2c <switch_csg+0x124>
     c98:	46 c0       	rjmp	.+140    	; 0xd26 <switch_csg+0x11e>
	case 0: // Motorkarte Erfolgreich angesprochen
		lcd_puts("!");
     c9a:	80 e9       	ldi	r24, 0x90	; 144
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	4f c0       	rjmp	.+158    	; 0xd3e <switch_csg+0x136>
		break;
	case 1: // Display l�schen
		lcd_clrscr();
     ca0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
     ca4:	4e c0       	rjmp	.+156    	; 0xd42 <switch_csg+0x13a>
		break;
	case 2: // Interner Test
		lcd_puts("!T");
     ca6:	82 e9       	ldi	r24, 0x92	; 146
     ca8:	92 e0       	ldi	r25, 0x02	; 2
     caa:	49 c0       	rjmp	.+146    	; 0xd3e <switch_csg+0x136>
		//uart_puts("Test bestanden\n\r");
		break;
	case 3: // Status abfrage von Software
		lcd_puts("Statusabfrage     \n");
     cac:	85 e9       	ldi	r24, 0x95	; 149
     cae:	92 e0       	ldi	r25, 0x02	; 2
     cb0:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		csg_Status_melden();
     cb4:	0e 94 b7 02 	call	0x56e	; 0x56e <csg_Status_melden>
     cb8:	44 c0       	rjmp	.+136    	; 0xd42 <switch_csg+0x13a>
		break;
	case 4:
		String_zerlegen_csg(str_rx);
     cba:	c8 01       	movw	r24, r16
     cbc:	0e 94 63 03 	call	0x6c6	; 0x6c6 <String_zerlegen_csg>
     cc0:	40 c0       	rjmp	.+128    	; 0xd42 <switch_csg+0x13a>

		break;
	case 5:
		lcd_puts("H:                 \n");
     cc2:	89 ea       	ldi	r24, 0xA9	; 169
     cc4:	92 e0       	ldi	r25, 0x02	; 2
     cc6:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string(B_OK, D_RapidForm);
     cca:	80 ea       	ldi	r24, 0xA0	; 160
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	26 c0       	rjmp	.+76     	; 0xd1c <switch_csg+0x114>
		break;
	case 6:
		lcd_puts("Motor starten\n");
     cd0:	8e eb       	ldi	r24, 0xBE	; 190
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	34 c0       	rjmp	.+104    	; 0xd3e <switch_csg+0x136>
		//uart_put_string(B_OK, D_RapidForm);
		break;
	case 7:
		move++;
     cd6:	80 91 b4 07 	lds	r24, 0x07B4
     cda:	90 91 b5 07 	lds	r25, 0x07B5
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	90 93 b5 07 	sts	0x07B5, r25
     ce4:	80 93 b4 07 	sts	0x07B4, r24
		char it[10];
		itoa(move, it, 10);
     ce8:	8e 01       	movw	r16, r28
     cea:	0f 5f       	subi	r16, 0xFF	; 255
     cec:	1f 4f       	sbci	r17, 0xFF	; 255
     cee:	b8 01       	movw	r22, r16
     cf0:	4a e0       	ldi	r20, 0x0A	; 10
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <itoa>
		lcd_puts(it);
     cf8:	c8 01       	movw	r24, r16
     cfa:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts("_Move!\n");
     cfe:	8d ec       	ldi	r24, 0xCD	; 205
     d00:	92 e0       	ldi	r25, 0x02	; 2
     d02:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("M 160000\r\n",D_Stepper);
     d06:	85 ed       	ldi	r24, 0xD5	; 213
     d08:	92 e0       	ldi	r25, 0x02	; 2
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	08 c0       	rjmp	.+16     	; 0xd20 <switch_csg+0x118>

		break;
	case 8:
		lcd_puts("R/B?");
     d10:	80 ee       	ldi	r24, 0xE0	; 224
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("R\r\n", D_RapidForm);
     d18:	85 ee       	ldi	r24, 0xE5	; 229
     d1a:	92 e0       	ldi	r25, 0x02	; 2
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
     d24:	0e c0       	rjmp	.+28     	; 0xd42 <switch_csg+0x13a>
		break;
	case 9:
		lcd_puts("H1 empfangen       \n");
     d26:	89 ee       	ldi	r24, 0xE9	; 233
     d28:	92 e0       	ldi	r25, 0x02	; 2
     d2a:	09 c0       	rjmp	.+18     	; 0xd3e <switch_csg+0x136>
		break;
	default:
		lcd_puts("U_B: ");
     d2c:	8e ef       	ldi	r24, 0xFE	; 254
     d2e:	92 e0       	ldi	r25, 0x02	; 2
     d30:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(str_rx);
     d34:	c8 01       	movw	r24, r16
     d36:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts("!END       \n");
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	93 e0       	ldi	r25, 0x03	; 3
     d3e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	}
}
     d42:	a0 96       	adiw	r28, 0x20	; 32
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	08 95       	ret

00000d58 <switch_Stepper>:
	ltoa(z,Position,10);
}
// Vearbeitungs Logik

int Initialized = M_NOTI;
void 	switch_Stepper		(char * str_rx) {
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	2a 97       	sbiw	r28, 0x0a	; 10
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
	const char* pOptions[] = {
			"#", 	// 0 - Stepper Karte Befehl erkannt
			"E", 	// 1 - Error
			"!CLS", // 2 - Clear Screen
			"Test", // 3 - Test
			0 };
     d6c:	de 01       	movw	r26, r28
     d6e:	11 96       	adiw	r26, 0x01	; 1
     d70:	e5 ea       	ldi	r30, 0xA5	; 165
     d72:	f7 e0       	ldi	r31, 0x07	; 7
     d74:	2a e0       	ldi	r18, 0x0A	; 10
     d76:	01 90       	ld	r0, Z+
     d78:	0d 92       	st	X+, r0
     d7a:	21 50       	subi	r18, 0x01	; 1
     d7c:	e1 f7       	brne	.-8      	; 0xd76 <switch_Stepper+0x1e>
	switch (FindStringInArray(str_rx, pOptions, 1)) {
     d7e:	be 01       	movw	r22, r28
     d80:	6f 5f       	subi	r22, 0xFF	; 255
     d82:	7f 4f       	sbci	r23, 0xFF	; 255
     d84:	41 e0       	ldi	r20, 0x01	; 1
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	0e 94 29 05 	call	0xa52	; 0xa52 <FindStringInArray>
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	91 05       	cpc	r25, r1
     d90:	79 f0       	breq	.+30     	; 0xdb0 <switch_Stepper+0x58>
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	91 05       	cpc	r25, r1
     d96:	1c f4       	brge	.+6      	; 0xd9e <switch_Stepper+0x46>
     d98:	89 2b       	or	r24, r25
     d9a:	39 f0       	breq	.+14     	; 0xdaa <switch_Stepper+0x52>
     d9c:	1c c0       	rjmp	.+56     	; 0xdd6 <switch_Stepper+0x7e>
     d9e:	82 30       	cpi	r24, 0x02	; 2
     da0:	91 05       	cpc	r25, r1
     da2:	89 f0       	breq	.+34     	; 0xdc6 <switch_Stepper+0x6e>
     da4:	03 97       	sbiw	r24, 0x03	; 3
     da6:	b9 f4       	brne	.+46     	; 0xdd6 <switch_Stepper+0x7e>
     da8:	11 c0       	rjmp	.+34     	; 0xdcc <switch_Stepper+0x74>
	case 0:
		lcd_puts("Erfolgreich\n");
     daa:	81 e1       	ldi	r24, 0x11	; 17
     dac:	93 e0       	ldi	r25, 0x03	; 3
     dae:	10 c0       	rjmp	.+32     	; 0xdd0 <switch_Stepper+0x78>
		//uart_put_string("0\n\r", D_RapidForm);
		break;
	case 1:
		lcd_puts("Error\n");
     db0:	8e e1       	ldi	r24, 0x1E	; 30
     db2:	93 e0       	ldi	r25, 0x03	; 3
     db4:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("1\r\n", D_RapidForm);
     db8:	85 e2       	ldi	r24, 0x25	; 37
     dba:	93 e0       	ldi	r25, 0x03	; 3
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
     dc4:	10 c0       	rjmp	.+32     	; 0xde6 <inner_1604+0x8>
		break;
	case 2:
		lcd_clrscr();
     dc6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
     dca:	0d c0       	rjmp	.+26     	; 0xde6 <inner_1604+0x8>
		break;
	case 3:
		lcd_puts("Test bestanden\n");
     dcc:	89 e2       	ldi	r24, 0x29	; 41
     dce:	93 e0       	ldi	r25, 0x03	; 3
     dd0:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
     dd4:	08 c0       	rjmp	.+16     	; 0xde6 <inner_1604+0x8>
     dd6:	8a e0       	ldi	r24, 0x0A	; 10
     dd8:	90 e0       	ldi	r25, 0x00	; 0

00000dda <outer_1604>:
     dda:	a0 ed       	ldi	r26, 0xD0	; 208
     ddc:	b7 e0       	ldi	r27, 0x07	; 7

00000dde <inner_1604>:
     dde:	11 97       	sbiw	r26, 0x01	; 1
     de0:	f1 f7       	brne	.-4      	; 0xdde <inner_1604>
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	d1 f7       	brne	.-12     	; 0xdda <outer_1604>
		//lcd_puts("A: ");
		//lcd_puts(str_rx);
		//lcd_puts("!\n");
		//uart_put_string(str_rx, D_RapidForm);
	}
}
     de6:	2a 96       	adiw	r28, 0x0a	; 10
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <switch_Isel>:
void 	switch_Isel			(char * str_rx) {
     df8:	cf 92       	push	r12
     dfa:	df 92       	push	r13
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	c7 55       	subi	r28, 0x57	; 87
     e0e:	d0 40       	sbci	r29, 0x00	; 0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	6c 01       	movw	r12, r24
			"!CLS",    	// 1 - LC-Display l�schen
			"Test", 	// 2 - Test
			"@01",  	// 3 - Achse ausw�hlen
			"@0R", 		// 4 - Status abfrage
			"@0M", 		// 5 - Gehe zu Position MX , +600
			0 };
     e1c:	de 01       	movw	r26, r28
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	e3 e9       	ldi	r30, 0x93	; 147
     e22:	f7 e0       	ldi	r31, 0x07	; 7
     e24:	8e e0       	ldi	r24, 0x0E	; 14
     e26:	01 90       	ld	r0, Z+
     e28:	0d 92       	st	X+, r0
     e2a:	81 50       	subi	r24, 0x01	; 1
     e2c:	e1 f7       	brne	.-8      	; 0xe26 <switch_Isel+0x2e>

	int Ret_Val = FindStringInArray(str_rx, pOptions, 3);
     e2e:	c6 01       	movw	r24, r12
     e30:	be 01       	movw	r22, r28
     e32:	6f 5f       	subi	r22, 0xFF	; 255
     e34:	7f 4f       	sbci	r23, 0xFF	; 255
     e36:	43 e0       	ldi	r20, 0x03	; 3
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	0e 94 29 05 	call	0xa52	; 0xa52 <FindStringInArray>
	switch (Ret_Val) {
     e3e:	82 30       	cpi	r24, 0x02	; 2
     e40:	91 05       	cpc	r25, r1
     e42:	c9 f0       	breq	.+50     	; 0xe76 <switch_Isel+0x7e>
     e44:	83 30       	cpi	r24, 0x03	; 3
     e46:	91 05       	cpc	r25, r1
     e48:	34 f4       	brge	.+12     	; 0xe56 <switch_Isel+0x5e>
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	71 f0       	breq	.+28     	; 0xe6a <switch_Isel+0x72>
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	09 f0       	breq	.+2      	; 0xe54 <switch_Isel+0x5c>
     e52:	fe c0       	rjmp	.+508    	; 0x1050 <inner_1821+0x86>
     e54:	0d c0       	rjmp	.+26     	; 0xe70 <switch_Isel+0x78>
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	91 05       	cpc	r25, r1
     e5a:	f9 f0       	breq	.+62     	; 0xe9a <inner_1698+0xe>
     e5c:	84 30       	cpi	r24, 0x04	; 4
     e5e:	91 05       	cpc	r25, r1
     e60:	8c f0       	brlt	.+34     	; 0xe84 <switch_Isel+0x8c>
     e62:	05 97       	sbiw	r24, 0x05	; 5
     e64:	09 f0       	breq	.+2      	; 0xe68 <switch_Isel+0x70>
     e66:	f4 c0       	rjmp	.+488    	; 0x1050 <inner_1821+0x86>
     e68:	41 c0       	rjmp	.+130    	; 0xeec <inner_1714+0x36>
	case 0: 		// 0 - Reserve
		lcd_puts("Reserve\r\n");
     e6a:	89 e3       	ldi	r24, 0x39	; 57
     e6c:	93 e0       	ldi	r25, 0x03	; 3
     e6e:	f5 c0       	rjmp	.+490    	; 0x105a <inner_1821+0x90>
		break;
	case 1: 		// 1 - LC-Display l�schen
		lcd_clrscr();
     e70:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
     e74:	f4 c0       	rjmp	.+488    	; 0x105e <inner_1821+0x94>
		break;
	case 2:			// 2 - Test
		lcd_puts("Test bestanden\n");
     e76:	89 e2       	ldi	r24, 0x29	; 41
     e78:	93 e0       	ldi	r25, 0x03	; 3
     e7a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("Test bestanden\r\n", D_RapidForm);
     e7e:	83 e4       	ldi	r24, 0x43	; 67
     e80:	93 e0       	ldi	r25, 0x03	; 3
     e82:	e1 c0       	rjmp	.+450    	; 0x1046 <inner_1821+0x7c>
     e84:	8a e0       	ldi	r24, 0x0A	; 10
     e86:	90 e0       	ldi	r25, 0x00	; 0

00000e88 <outer_1698>:
     e88:	a0 ed       	ldi	r26, 0xD0	; 208
     e8a:	b7 e0       	ldi	r27, 0x07	; 7

00000e8c <inner_1698>:
     e8c:	11 97       	sbiw	r26, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <inner_1698>
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	d1 f7       	brne	.-12     	; 0xe88 <outer_1698>
			s_ptr++; // Increase string pointer
		} while( pgm_read_byte( s_ptr ) != 0x00 );  // End of string
		*/

		//lcd_puts( buf );
		lcd_puts("Init");
     e94:	84 e5       	ldi	r24, 0x54	; 84
     e96:	93 e0       	ldi	r25, 0x03	; 3
     e98:	d2 c0       	rjmp	.+420    	; 0x103e <inner_1821+0x74>
		//String_zerlegen_Isel(str_rx, Position);
		uart_put_string("0\r\n", D_RapidForm);
		//uart_put_string(Protokoll.Motor[M_ISEL].Befehl[0].Output, D_RapidForm);
		break;
	case 4:			// 4 - Status abfrage
		lcd_puts("Statusabfrage:     \n");
     e9a:	89 e5       	ldi	r24, 0x59	; 89
     e9c:	93 e0       	ldi	r25, 0x03	; 3
     e9e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("A\n", D_Stepper);
     ea2:	8e e6       	ldi	r24, 0x6E	; 110
     ea4:	93 e0       	ldi	r25, 0x03	; 3
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
     eae:	82 e3       	ldi	r24, 0x32	; 50
     eb0:	90 e0       	ldi	r25, 0x00	; 0

00000eb2 <outer_1714>:
     eb2:	a0 ed       	ldi	r26, 0xD0	; 208
     eb4:	b7 e0       	ldi	r27, 0x07	; 7

00000eb6 <inner_1714>:
     eb6:	11 97       	sbiw	r26, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <inner_1714>
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	d1 f7       	brne	.-12     	; 0xeb2 <outer_1714>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
     ebe:	80 91 c8 00 	lds	r24, 0x00C8
     ec2:	87 ff       	sbrs	r24, 7
     ec4:	04 c0       	rjmp	.+8      	; 0xece <inner_1714+0x18>
			uart_rx(D_Stepper);
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 3f 08 	call	0x107e	; 0x107e <uart_rx>
		if (!strcmp(str_rx,"0#"))
     ece:	c6 01       	movw	r24, r12
     ed0:	61 e7       	ldi	r22, 0x71	; 113
     ed2:	73 e0       	ldi	r23, 0x03	; 3
     ed4:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <strcmp>
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	09 f4       	brne	.+2      	; 0xede <inner_1714+0x28>
     edc:	b2 c0       	rjmp	.+356    	; 0x1042 <inner_1821+0x78>
			uart_put_string("0\r\n", D_RapidForm);
		else {
			lcd_puts("Fehlgeschlagen     \n");
     ede:	84 e7       	ldi	r24, 0x74	; 116
     ee0:	93 e0       	ldi	r25, 0x03	; 3
     ee2:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			uart_put_string("-1\r\n", D_RapidForm);
     ee6:	89 e8       	ldi	r24, 0x89	; 137
     ee8:	93 e0       	ldi	r25, 0x03	; 3
     eea:	ad c0       	rjmp	.+346    	; 0x1046 <inner_1821+0x7c>
     eec:	8a e0       	ldi	r24, 0x0A	; 10
     eee:	90 e0       	ldi	r25, 0x00	; 0

00000ef0 <outer_1743>:
     ef0:	a0 ed       	ldi	r26, 0xD0	; 208
     ef2:	b7 e0       	ldi	r27, 0x07	; 7

00000ef4 <inner_1743>:
     ef4:	11 97       	sbiw	r26, 0x01	; 1
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <inner_1743>
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	d1 f7       	brne	.-12     	; 0xef0 <outer_1743>
		}
		break;
	case 5:			// 5 - Gehe zu Position MX , +600
		ms_spin(10);
		char Position[33];
		memset(Position, '\0', 33);
     efc:	3f e0       	ldi	r19, 0x0F	; 15
     efe:	e3 2e       	mov	r14, r19
     f00:	f1 2c       	mov	r15, r1
     f02:	ec 0e       	add	r14, r28
     f04:	fd 1e       	adc	r15, r29
     f06:	81 e2       	ldi	r24, 0x21	; 33
     f08:	f7 01       	movw	r30, r14
     f0a:	11 92       	st	Z+, r1
     f0c:	8a 95       	dec	r24
     f0e:	e9 f7       	brne	.-6      	; 0xf0a <inner_1743+0x16>
		String_zerlegen_Isel(str_rx, Position);
     f10:	c6 01       	movw	r24, r12
     f12:	b7 01       	movw	r22, r14
     f14:	0e 94 c6 04 	call	0x98c	; 0x98c <String_zerlegen_Isel>
		char Move_To[40];
		memset(Move_To,  '\0', 40);
     f18:	8e 01       	movw	r16, r28
     f1a:	00 5d       	subi	r16, 0xD0	; 208
     f1c:	1f 4f       	sbci	r17, 0xFF	; 255
     f1e:	88 e2       	ldi	r24, 0x28	; 40
     f20:	f8 01       	movw	r30, r16
     f22:	11 92       	st	Z+, r1
     f24:	8a 95       	dec	r24
     f26:	e9 f7       	brne	.-6      	; 0xf22 <inner_1743+0x2e>
		Move_To[0] = 'M';
     f28:	8d e4       	ldi	r24, 0x4D	; 77
     f2a:	88 ab       	std	Y+48, r24	; 0x30
		Move_To[1] = 'A';
     f2c:	81 e4       	ldi	r24, 0x41	; 65
     f2e:	89 ab       	std	Y+49, r24	; 0x31
		Move_To[2] = ' ';
     f30:	80 e2       	ldi	r24, 0x20	; 32
     f32:	8a ab       	std	Y+50, r24	; 0x32
		Move_To[3] = '\0';
     f34:	1b aa       	std	Y+51, r1	; 0x33
		strcat(Move_To, Position);
     f36:	c8 01       	movw	r24, r16
     f38:	b7 01       	movw	r22, r14
     f3a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <strcat>
		strcat(Move_To, "\n");
     f3e:	c8 01       	movw	r24, r16
     f40:	64 e8       	ldi	r22, 0x84	; 132
     f42:	71 e0       	ldi	r23, 0x01	; 1
     f44:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <strcat>
		lcd_puts("Pos:");
     f48:	8e e8       	ldi	r24, 0x8E	; 142
     f4a:	93 e0       	ldi	r25, 0x03	; 3
     f4c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(Move_To);
     f50:	c8 01       	movw	r24, r16
     f52:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>

		uart_put_string(Move_To, D_Stepper);
     f56:	c8 01       	movw	r24, r16
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
     f60:	02 e3       	ldi	r16, 0x32	; 50
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	f8 01       	movw	r30, r16

00000f66 <outer_1783>:
     f66:	a0 ed       	ldi	r26, 0xD0	; 208
     f68:	b7 e0       	ldi	r27, 0x07	; 7

00000f6a <inner_1783>:
     f6a:	11 97       	sbiw	r26, 0x01	; 1
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <inner_1783>
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	d1 f7       	brne	.-12     	; 0xf66 <outer_1783>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
     f72:	80 91 c8 00 	lds	r24, 0x00C8
     f76:	87 ff       	sbrs	r24, 7
     f78:	72 c0       	rjmp	.+228    	; 0x105e <inner_1821+0x94>
			uart_rx(D_Stepper);
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 3f 08 	call	0x107e	; 0x107e <uart_rx>
		else {
			//lcd_puts("Befehl n. bestaetig\n");
			break;
		}

		uart_put_string("A\n", D_Stepper);
     f82:	8e e6       	ldi	r24, 0x6E	; 110
     f84:	93 e0       	ldi	r25, 0x03	; 3
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
     f8e:	f8 01       	movw	r30, r16

00000f90 <outer_1797>:
     f90:	a0 ed       	ldi	r26, 0xD0	; 208
     f92:	b7 e0       	ldi	r27, 0x07	; 7

00000f94 <inner_1797>:
     f94:	11 97       	sbiw	r26, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <inner_1797>
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	d1 f7       	brne	.-12     	; 0xf90 <outer_1797>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
     f9c:	80 91 c8 00 	lds	r24, 0x00C8
     fa0:	87 ff       	sbrs	r24, 7
     fa2:	05 c0       	rjmp	.+10     	; 0xfae <inner_1797+0x1a>
			uart_rx(D_Stepper);
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 3f 08 	call	0x107e	; 0x107e <uart_rx>
     fac:	30 c0       	rjmp	.+96     	; 0x100e <inner_1821+0x44>
		else {
			lcd_puts("Keine Bewegung!\n");
     fae:	83 e9       	ldi	r24, 0x93	; 147
     fb0:	93 e0       	ldi	r25, 0x03	; 3
     fb2:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
     fb6:	2b c0       	rjmp	.+86     	; 0x100e <inner_1821+0x44>
		}

		while (!strcmp(str_rx,"1#")){
			uart_put_string("A\n", D_Stepper);
     fb8:	8e e6       	ldi	r24, 0x6E	; 110
     fba:	93 e0       	ldi	r25, 0x03	; 3
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
     fc4:	f7 01       	movw	r30, r14

00000fc6 <outer_1821>:
     fc6:	a0 ed       	ldi	r26, 0xD0	; 208
     fc8:	b7 e0       	ldi	r27, 0x07	; 7

00000fca <inner_1821>:
     fca:	11 97       	sbiw	r26, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <inner_1821>
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	d1 f7       	brne	.-12     	; 0xfc6 <outer_1821>
			ms_spin(50);
			if ((UCSR1A & (1 << RXC1))){
     fd2:	80 91 c8 00 	lds	r24, 0x00C8
     fd6:	87 ff       	sbrs	r24, 7
     fd8:	14 c0       	rjmp	.+40     	; 0x1002 <inner_1821+0x38>
				uart_rx(D_Stepper);
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 3f 08 	call	0x107e	; 0x107e <uart_rx>
				lcd_clrscr();
     fe2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
				lcd_puts("running to\n");
     fe6:	84 ea       	ldi	r24, 0xA4	; 164
     fe8:	93 e0       	ldi	r25, 0x03	; 3
     fea:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
				lcd_puts("Position: ");
     fee:	80 eb       	ldi	r24, 0xB0	; 176
     ff0:	93 e0       	ldi	r25, 0x03	; 3
     ff2:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
				lcd_puts(Position);
     ff6:	c8 01       	movw	r24, r16
     ff8:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
				lcd_puts("\n");
     ffc:	84 e8       	ldi	r24, 0x84	; 132
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <inner_1821+0x3c>
			}
			else {
				lcd_puts("Keine Antwort\n");
    1002:	8b eb       	ldi	r24, 0xBB	; 187
    1004:	93 e0       	ldi	r25, 0x03	; 3
    1006:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			}
			wdt_reset();
    100a:	a8 95       	wdr
    100c:	06 c0       	rjmp	.+12     	; 0x101a <inner_1821+0x50>
    100e:	22 e3       	ldi	r18, 0x32	; 50
    1010:	e2 2e       	mov	r14, r18
    1012:	f1 2c       	mov	r15, r1
			if ((UCSR1A & (1 << RXC1))){
				uart_rx(D_Stepper);
				lcd_clrscr();
				lcd_puts("running to\n");
				lcd_puts("Position: ");
				lcd_puts(Position);
    1014:	8e 01       	movw	r16, r28
    1016:	01 5f       	subi	r16, 0xF1	; 241
    1018:	1f 4f       	sbci	r17, 0xFF	; 255
			uart_rx(D_Stepper);
		else {
			lcd_puts("Keine Bewegung!\n");
		}

		while (!strcmp(str_rx,"1#")){
    101a:	c6 01       	movw	r24, r12
    101c:	6a ec       	ldi	r22, 0xCA	; 202
    101e:	73 e0       	ldi	r23, 0x03	; 3
    1020:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <strcmp>
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	09 f4       	brne	.+2      	; 0x102a <inner_1821+0x60>
    1028:	c7 cf       	rjmp	.-114    	; 0xfb8 <inner_1797+0x24>
			else {
				lcd_puts("Keine Antwort\n");
			}
			wdt_reset();
		}
		lcd_puts("Position: \n");
    102a:	8d ec       	ldi	r24, 0xCD	; 205
    102c:	93 e0       	ldi	r25, 0x03	; 3
    102e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(Position);
    1032:	ce 01       	movw	r24, r28
    1034:	0f 96       	adiw	r24, 0x0f	; 15
    1036:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(" Erreicht\n");
    103a:	89 ed       	ldi	r24, 0xD9	; 217
    103c:	93 e0       	ldi	r25, 0x03	; 3
    103e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("0\r\n", D_RapidForm);
    1042:	80 ea       	ldi	r24, 0xA0	; 160
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
    104e:	07 c0       	rjmp	.+14     	; 0x105e <inner_1821+0x94>
		break;
	default:
		lcd_puts("ISEL:    \n");
    1050:	84 ee       	ldi	r24, 0xE4	; 228
    1052:	93 e0       	ldi	r25, 0x03	; 3
    1054:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(str_rx);
    1058:	c6 01       	movw	r24, r12
    105a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	}
}
    105e:	c9 5a       	subi	r28, 0xA9	; 169
    1060:	df 4f       	sbci	r29, 0xFF	; 255
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	df 90       	pop	r13
    107a:	cf 90       	pop	r12
    107c:	08 95       	ret

0000107e <uart_rx>:
		break;
	default:
		return M_UNK;
	}
}
void 	uart_rx				(int dir) {
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	8c 01       	movw	r16, r24
	uart_get_string(str_rx, dir);
    1084:	8c eb       	ldi	r24, 0xBC	; 188
    1086:	97 e0       	ldi	r25, 0x07	; 7
    1088:	b8 01       	movw	r22, r16
    108a:	0e 94 94 02 	call	0x528	; 0x528 <uart_get_string>
	if (dir == D_Stepper)
    108e:	01 30       	cpi	r16, 0x01	; 1
    1090:	11 05       	cpc	r17, r1
    1092:	29 f4       	brne	.+10     	; 0x109e <uart_rx+0x20>
		switch_Stepper(str_rx);
    1094:	8c eb       	ldi	r24, 0xBC	; 188
    1096:	97 e0       	ldi	r25, 0x07	; 7
    1098:	0e 94 ac 06 	call	0xd58	; 0xd58 <switch_Stepper>
    109c:	48 c0       	rjmp	.+144    	; 0x112e <uart_rx+0xb0>
	else{
		if(Initialized == M_UNK){
    109e:	80 91 cf 06 	lds	r24, 0x06CF
    10a2:	90 91 d0 06 	lds	r25, 0x06D0
    10a6:	8e 5f       	subi	r24, 0xFE	; 254
    10a8:	9f 4f       	sbci	r25, 0xFF	; 255
    10aa:	51 f4       	brne	.+20     	; 0x10c0 <uart_rx+0x42>
			lcd_puts("Unbekannter Motor!\n");
    10ac:	8f ee       	ldi	r24, 0xEF	; 239
    10ae:	93 e0       	ldi	r25, 0x03	; 3
    10b0:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			//lcd_puts(str_rx);
			Initialized = M_NOTI;
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	9f ef       	ldi	r25, 0xFF	; 255
    10b8:	90 93 d0 06 	sts	0x06D0, r25
    10bc:	80 93 cf 06 	sts	0x06CF, r24
		}
		if(Initialized == M_NOTI){
    10c0:	80 91 cf 06 	lds	r24, 0x06CF
    10c4:	90 91 d0 06 	lds	r25, 0x06D0
    10c8:	8f 5f       	subi	r24, 0xFF	; 255
    10ca:	9f 4f       	sbci	r25, 0xFF	; 255
    10cc:	41 f4       	brne	.+16     	; 0x10de <uart_rx+0x60>
			Initialized = switch_Motor(str_rx);
    10ce:	8c eb       	ldi	r24, 0xBC	; 188
    10d0:	97 e0       	ldi	r25, 0x07	; 7
    10d2:	0e 94 52 05 	call	0xaa4	; 0xaa4 <switch_Motor>
    10d6:	90 93 d0 06 	sts	0x06D0, r25
    10da:	80 93 cf 06 	sts	0x06CF, r24
		}
		if(Initialized == M_ISEL)
    10de:	80 91 cf 06 	lds	r24, 0x06CF
    10e2:	90 91 d0 06 	lds	r25, 0x06D0
    10e6:	89 2b       	or	r24, r25
    10e8:	21 f4       	brne	.+8      	; 0x10f2 <uart_rx+0x74>
			switch_Isel(str_rx);
    10ea:	8c eb       	ldi	r24, 0xBC	; 188
    10ec:	97 e0       	ldi	r25, 0x07	; 7
    10ee:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <switch_Isel>
		if(Initialized == M_CSG)
    10f2:	80 91 cf 06 	lds	r24, 0x06CF
    10f6:	90 91 d0 06 	lds	r25, 0x06D0
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	21 f4       	brne	.+8      	; 0x1106 <uart_rx+0x88>
			switch_csg(str_rx);
    10fe:	8c eb       	ldi	r24, 0xBC	; 188
    1100:	97 e0       	ldi	r25, 0x07	; 7
    1102:	0e 94 04 06 	call	0xc08	; 0xc08 <switch_csg>
		if(Initialized == M_ZETA)
    1106:	80 91 cf 06 	lds	r24, 0x06CF
    110a:	90 91 d0 06 	lds	r25, 0x06D0
    110e:	02 97       	sbiw	r24, 0x02	; 2
    1110:	21 f4       	brne	.+8      	; 0x111a <uart_rx+0x9c>
			switch_Zeta(str_rx);
    1112:	8c eb       	ldi	r24, 0xBC	; 188
    1114:	97 e0       	ldi	r25, 0x07	; 7
    1116:	0e 94 c5 08 	call	0x118a	; 0x118a <switch_Zeta>
		if(Initialized == M_TERMINAL)
    111a:	80 91 cf 06 	lds	r24, 0x06CF
    111e:	90 91 d0 06 	lds	r25, 0x06D0
    1122:	03 97       	sbiw	r24, 0x03	; 3
    1124:	21 f4       	brne	.+8      	; 0x112e <uart_rx+0xb0>
			switch_Terminal(str_rx);
    1126:	8c eb       	ldi	r24, 0xBC	; 188
    1128:	97 e0       	ldi	r25, 0x07	; 7
    112a:	0e 94 93 05 	call	0xb26	; 0xb26 <switch_Terminal>
	}
}
    112e:	1f 91       	pop	r17
    1130:	0f 91       	pop	r16
    1132:	08 95       	ret

00001134 <menu_puts>:
	lcd_puts("Selected: ");
	lcd_puts(name);

	ms_spin(750);
}
void 	menu_puts			(void *arg, char *name) {
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	8c 01       	movw	r16, r24
	//my_select(arg, name);
	uart_put_string(arg, D_Stepper);
    113a:	61 e0       	ldi	r22, 0x01	; 1
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
	lcd_clrscr();
    1142:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
	lcd_puts("Send: ");
    1146:	83 e0       	ldi	r24, 0x03	; 3
    1148:	94 e0       	ldi	r25, 0x04	; 4
    114a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(arg);
    114e:	c8 01       	movw	r24, r16
    1150:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("\n");
    1154:	84 e8       	ldi	r24, 0x84	; 132
    1156:	91 e0       	ldi	r25, 0x01	; 1
    1158:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
    115c:	84 e6       	ldi	r24, 0x64	; 100
    115e:	90 e0       	ldi	r25, 0x00	; 0

00001160 <outer_2008>:
    1160:	a0 ed       	ldi	r26, 0xD0	; 208
    1162:	b7 e0       	ldi	r27, 0x07	; 7

00001164 <inner_2008>:
    1164:	11 97       	sbiw	r26, 0x01	; 1
    1166:	f1 f7       	brne	.-4      	; 0x1164 <inner_2008>
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	d1 f7       	brne	.-12     	; 0x1160 <outer_2008>
	ms_spin(100);
	//if ((UCSR1A & (1 << RXC1)))
	uart_rx(D_Stepper);
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 3f 08 	call	0x107e	; 0x107e <uart_rx>
    1174:	88 ee       	ldi	r24, 0xE8	; 232
    1176:	93 e0       	ldi	r25, 0x03	; 3

00001178 <outer_2016>:
    1178:	a0 ed       	ldi	r26, 0xD0	; 208
    117a:	b7 e0       	ldi	r27, 0x07	; 7

0000117c <inner_2016>:
    117c:	11 97       	sbiw	r26, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <inner_2016>
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	d1 f7       	brne	.-12     	; 0x1178 <outer_2016>
	ms_spin(1000);
}
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	08 95       	ret

0000118a <switch_Zeta>:
		lcd_puts("U_B: ");
		lcd_puts(str_rx);
		lcd_puts("!END       \n");
	}
}
void 	switch_Zeta			(char * str_rx) {
    118a:	af 92       	push	r10
    118c:	bf 92       	push	r11
    118e:	cf 92       	push	r12
    1190:	df 92       	push	r13
    1192:	ef 92       	push	r14
    1194:	ff 92       	push	r15
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	c3 56       	subi	r28, 0x63	; 99
    11a4:	d0 40       	sbci	r29, 0x00	; 0
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	7c 01       	movw	r14, r24
			"D1125",// 7 - Position
			"A8", 	// 8 - Accelartion 8
			"V8",	// 9 - Velocity 8
			"ECHO0",// 10 - Echo abschalten
			"PSET0",// 11 - Ursprung setzen
			0 };
    11b2:	de 01       	movw	r26, r28
    11b4:	11 96       	adiw	r26, 0x01	; 1
    11b6:	ee e3       	ldi	r30, 0x3E	; 62
    11b8:	f7 e0       	ldi	r31, 0x07	; 7
    11ba:	8a e1       	ldi	r24, 0x1A	; 26
    11bc:	01 90       	ld	r0, Z+
    11be:	0d 92       	st	X+, r0
    11c0:	81 50       	subi	r24, 0x01	; 1
    11c2:	e1 f7       	brne	.-8      	; 0x11bc <switch_Zeta+0x32>
	char Position[33];
	char Move_To[40];
	memset(Move_To,  '\0', 40);
    11c4:	8e 01       	movw	r16, r28
    11c6:	04 5c       	subi	r16, 0xC4	; 196
    11c8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ca:	88 e2       	ldi	r24, 0x28	; 40
    11cc:	d8 01       	movw	r26, r16
    11ce:	1d 92       	st	X+, r1
    11d0:	8a 95       	dec	r24
    11d2:	e9 f7       	brne	.-6      	; 0x11ce <switch_Zeta+0x44>
	Move_To[0] = 'M';
    11d4:	8d e4       	ldi	r24, 0x4D	; 77
    11d6:	8c af       	std	Y+60, r24	; 0x3c
	Move_To[1] = 'A';
    11d8:	81 e4       	ldi	r24, 0x41	; 65
    11da:	8d af       	std	Y+61, r24	; 0x3d
	Move_To[2] = ' ';
    11dc:	80 e2       	ldi	r24, 0x20	; 32
    11de:	8e af       	std	Y+62, r24	; 0x3e
	Move_To[3] = '\0';
    11e0:	1f ae       	std	Y+63, r1	; 0x3f
	switch (FindStringInArray(str_rx, pOptions, 1)) {
    11e2:	c7 01       	movw	r24, r14
    11e4:	be 01       	movw	r22, r28
    11e6:	6f 5f       	subi	r22, 0xFF	; 255
    11e8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ea:	41 e0       	ldi	r20, 0x01	; 1
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	0e 94 29 05 	call	0xa52	; 0xa52 <FindStringInArray>
    11f2:	87 30       	cpi	r24, 0x07	; 7
    11f4:	91 05       	cpc	r25, r1
    11f6:	6c f4       	brge	.+26     	; 0x1212 <switch_Zeta+0x88>
    11f8:	83 30       	cpi	r24, 0x03	; 3
    11fa:	91 05       	cpc	r25, r1
    11fc:	0c f0       	brlt	.+2      	; 0x1200 <switch_Zeta+0x76>
    11fe:	f5 c0       	rjmp	.+490    	; 0x13ea <inner_2223+0xb0>
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	91 05       	cpc	r25, r1
    1204:	01 f1       	breq	.+64     	; 0x1246 <switch_Zeta+0xbc>
    1206:	82 30       	cpi	r24, 0x02	; 2
    1208:	91 05       	cpc	r25, r1
    120a:	04 f5       	brge	.+64     	; 0x124c <switch_Zeta+0xc2>
    120c:	89 2b       	or	r24, r25
    120e:	c1 f0       	breq	.+48     	; 0x1240 <switch_Zeta+0xb6>
    1210:	e1 c0       	rjmp	.+450    	; 0x13d4 <inner_2223+0x9a>
    1212:	89 30       	cpi	r24, 0x09	; 9
    1214:	91 05       	cpc	r25, r1
    1216:	09 f4       	brne	.+2      	; 0x121a <switch_Zeta+0x90>
    1218:	cf c0       	rjmp	.+414    	; 0x13b8 <inner_2223+0x7e>
    121a:	8a 30       	cpi	r24, 0x0A	; 10
    121c:	91 05       	cpc	r25, r1
    121e:	44 f4       	brge	.+16     	; 0x1230 <switch_Zeta+0xa6>
    1220:	87 30       	cpi	r24, 0x07	; 7
    1222:	91 05       	cpc	r25, r1
    1224:	09 f4       	brne	.+2      	; 0x1228 <switch_Zeta+0x9e>
    1226:	bd c0       	rjmp	.+378    	; 0x13a2 <inner_2223+0x68>
    1228:	08 97       	sbiw	r24, 0x08	; 8
    122a:	09 f0       	breq	.+2      	; 0x122e <switch_Zeta+0xa4>
    122c:	d3 c0       	rjmp	.+422    	; 0x13d4 <inner_2223+0x9a>
    122e:	dd c0       	rjmp	.+442    	; 0x13ea <inner_2223+0xb0>
    1230:	8a 30       	cpi	r24, 0x0A	; 10
    1232:	91 05       	cpc	r25, r1
    1234:	09 f4       	brne	.+2      	; 0x1238 <switch_Zeta+0xae>
    1236:	cb c0       	rjmp	.+406    	; 0x13ce <inner_2223+0x94>
    1238:	0b 97       	sbiw	r24, 0x0b	; 11
    123a:	09 f0       	breq	.+2      	; 0x123e <switch_Zeta+0xb4>
    123c:	cb c0       	rjmp	.+406    	; 0x13d4 <inner_2223+0x9a>
    123e:	d5 c0       	rjmp	.+426    	; 0x13ea <inner_2223+0xb0>
	case 0: // Display l�schen
		lcd_clrscr();
    1240:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
    1244:	d2 c0       	rjmp	.+420    	; 0x13ea <inner_2223+0xb0>
		break;
	case 1: // Interner Test
		lcd_puts("Test bestanden     \n");
    1246:	83 e6       	ldi	r24, 0x63	; 99
    1248:	92 e0       	ldi	r25, 0x02	; 2
    124a:	cd c0       	rjmp	.+410    	; 0x13e6 <inner_2223+0xac>
    124c:	84 e6       	ldi	r24, 0x64	; 100
    124e:	90 e0       	ldi	r25, 0x00	; 0

00001250 <outer_2129>:
    1250:	a0 ed       	ldi	r26, 0xD0	; 208
    1252:	b7 e0       	ldi	r27, 0x07	; 7

00001254 <inner_2129>:
    1254:	11 97       	sbiw	r26, 0x01	; 1
    1256:	f1 f7       	brne	.-4      	; 0x1254 <inner_2129>
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	d1 f7       	brne	.-12     	; 0x1250 <outer_2129>
		break;
	case 2: // Go
		ms_spin(100);
		strcat(Move_To, Position);
    125c:	c8 01       	movw	r24, r16
    125e:	be 01       	movw	r22, r28
    1260:	65 5e       	subi	r22, 0xE5	; 229
    1262:	7f 4f       	sbci	r23, 0xFF	; 255
    1264:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <strcat>
		strcat(Move_To, "\n");
    1268:	c8 01       	movw	r24, r16
    126a:	64 e8       	ldi	r22, 0x84	; 132
    126c:	71 e0       	ldi	r23, 0x01	; 1
    126e:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <strcat>
		//lcd_puts("Pos:");
		//lcd_puts(Move_To);

		uart_put_string(Move_To, D_Stepper);
    1272:	c8 01       	movw	r24, r16
    1274:	61 e0       	ldi	r22, 0x01	; 1
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
    127c:	02 e3       	ldi	r16, 0x32	; 50
    127e:	10 e0       	ldi	r17, 0x00	; 0
    1280:	f8 01       	movw	r30, r16

00001282 <outer_2146>:
    1282:	a0 ed       	ldi	r26, 0xD0	; 208
    1284:	b7 e0       	ldi	r27, 0x07	; 7

00001286 <inner_2146>:
    1286:	11 97       	sbiw	r26, 0x01	; 1
    1288:	f1 f7       	brne	.-4      	; 0x1286 <inner_2146>
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	d1 f7       	brne	.-12     	; 0x1282 <outer_2146>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    128e:	80 91 c8 00 	lds	r24, 0x00C8
    1292:	87 ff       	sbrs	r24, 7
    1294:	16 c0       	rjmp	.+44     	; 0x12c2 <inner_2160+0x12>
			uart_rx(D_Stepper);
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 3f 08 	call	0x107e	; 0x107e <uart_rx>
		else {
			lcd_puts("Befehl n. bestaetig\n");
			break;
		}

		uart_put_string("A\n", D_Stepper);
    129e:	8e e6       	ldi	r24, 0x6E	; 110
    12a0:	93 e0       	ldi	r25, 0x03	; 3
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
    12aa:	f8 01       	movw	r30, r16

000012ac <outer_2160>:
    12ac:	a0 ed       	ldi	r26, 0xD0	; 208
    12ae:	b7 e0       	ldi	r27, 0x07	; 7

000012b0 <inner_2160>:
    12b0:	11 97       	sbiw	r26, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <inner_2160>
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	d1 f7       	brne	.-12     	; 0x12ac <outer_2160>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    12b8:	80 91 c8 00 	lds	r24, 0x00C8
    12bc:	88 23       	and	r24, r24
    12be:	4c f4       	brge	.+18     	; 0x12d2 <inner_2160+0x22>
    12c0:	03 c0       	rjmp	.+6      	; 0x12c8 <inner_2160+0x18>
		uart_put_string(Move_To, D_Stepper);
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
			uart_rx(D_Stepper);
		else {
			lcd_puts("Befehl n. bestaetig\n");
    12c2:	8a e0       	ldi	r24, 0x0A	; 10
    12c4:	94 e0       	ldi	r25, 0x04	; 4
    12c6:	8f c0       	rjmp	.+286    	; 0x13e6 <inner_2223+0xac>
		}

		uart_put_string("A\n", D_Stepper);
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
			uart_rx(D_Stepper);
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 94 3f 08 	call	0x107e	; 0x107e <uart_rx>
    12d0:	4c c0       	rjmp	.+152    	; 0x136a <inner_2223+0x30>
		else {
			lcd_puts("Keine Bewegung!\n");
    12d2:	83 e9       	ldi	r24, 0x93	; 147
    12d4:	93 e0       	ldi	r25, 0x03	; 3
    12d6:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
    12da:	47 c0       	rjmp	.+142    	; 0x136a <inner_2223+0x30>
		}

		while (!strcmp(str_rx,"1#")){
			uart_put_string("W\n", D_Stepper);
    12dc:	8f e1       	ldi	r24, 0x1F	; 31
    12de:	94 e0       	ldi	r25, 0x04	; 4
    12e0:	61 e0       	ldi	r22, 0x01	; 1
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
    12e8:	f5 01       	movw	r30, r10

000012ea <outer_2194>:
    12ea:	a0 ed       	ldi	r26, 0xD0	; 208
    12ec:	b7 e0       	ldi	r27, 0x07	; 7

000012ee <inner_2194>:
    12ee:	11 97       	sbiw	r26, 0x01	; 1
    12f0:	f1 f7       	brne	.-4      	; 0x12ee <inner_2194>
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	d1 f7       	brne	.-12     	; 0x12ea <outer_2194>
			ms_spin(100);
			if ((UCSR1A & (1 << RXC1))){
    12f6:	80 91 c8 00 	lds	r24, 0x00C8
    12fa:	87 ff       	sbrs	r24, 7
    12fc:	10 c0       	rjmp	.+32     	; 0x131e <inner_2194+0x30>
				uart_rx(D_Stepper);
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 3f 08 	call	0x107e	; 0x107e <uart_rx>
				lcd_clrscr();
    1306:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
				lcd_puts("Position(Akt/Ges): \n");
    130a:	82 e2       	ldi	r24, 0x22	; 34
    130c:	94 e0       	ldi	r25, 0x04	; 4
    130e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
				lcd_puts(str_rx);
    1312:	c7 01       	movw	r24, r14
    1314:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
				lcd_puts(" / ");
    1318:	87 e3       	ldi	r24, 0x37	; 55
    131a:	94 e0       	ldi	r25, 0x04	; 4
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <inner_2194+0x34>
			}
			else {
				lcd_puts("Keine Antwort\n");
    131e:	8b eb       	ldi	r24, 0xBB	; 187
    1320:	93 e0       	ldi	r25, 0x03	; 3
    1322:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			}
			wdt_reset();
    1326:	a8 95       	wdr

			uart_put_string("A\n", D_Stepper);
    1328:	8e e6       	ldi	r24, 0x6E	; 110
    132a:	93 e0       	ldi	r25, 0x03	; 3
    132c:	61 e0       	ldi	r22, 0x01	; 1
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
    1334:	f6 01       	movw	r30, r12

00001336 <outer_2223>:
    1336:	a0 ed       	ldi	r26, 0xD0	; 208
    1338:	b7 e0       	ldi	r27, 0x07	; 7

0000133a <inner_2223>:
    133a:	11 97       	sbiw	r26, 0x01	; 1
    133c:	f1 f7       	brne	.-4      	; 0x133a <inner_2223>
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	d1 f7       	brne	.-12     	; 0x1336 <outer_2223>
			ms_spin(50);
			if ((UCSR1A & (1 << RXC1))){
    1342:	80 91 c8 00 	lds	r24, 0x00C8
    1346:	87 ff       	sbrs	r24, 7
    1348:	0a c0       	rjmp	.+20     	; 0x135e <inner_2223+0x24>
				uart_rx(D_Stepper);
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 3f 08 	call	0x107e	; 0x107e <uart_rx>
				//lcd_clrscr();
				//lcd_puts("running to\n");
				//lcd_puts("Position: ");
				lcd_puts(Position);
    1352:	c8 01       	movw	r24, r16
    1354:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
				lcd_puts("\n");
    1358:	84 e8       	ldi	r24, 0x84	; 132
    135a:	91 e0       	ldi	r25, 0x01	; 1
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <inner_2223+0x28>
			}
			else {
				lcd_puts("Keine Antwort\n");
    135e:	8b eb       	ldi	r24, 0xBB	; 187
    1360:	93 e0       	ldi	r25, 0x03	; 3
    1362:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			}
			wdt_reset();
    1366:	a8 95       	wdr
    1368:	09 c0       	rjmp	.+18     	; 0x137c <inner_2223+0x42>
    136a:	54 e6       	ldi	r21, 0x64	; 100
    136c:	a5 2e       	mov	r10, r21
    136e:	b1 2c       	mov	r11, r1
    1370:	42 e3       	ldi	r20, 0x32	; 50
    1372:	c4 2e       	mov	r12, r20
    1374:	d1 2c       	mov	r13, r1
			if ((UCSR1A & (1 << RXC1))){
				uart_rx(D_Stepper);
				//lcd_clrscr();
				//lcd_puts("running to\n");
				//lcd_puts("Position: ");
				lcd_puts(Position);
    1376:	8e 01       	movw	r16, r28
    1378:	05 5e       	subi	r16, 0xE5	; 229
    137a:	1f 4f       	sbci	r17, 0xFF	; 255
			uart_rx(D_Stepper);
		else {
			lcd_puts("Keine Bewegung!\n");
		}

		while (!strcmp(str_rx,"1#")){
    137c:	c7 01       	movw	r24, r14
    137e:	6a ec       	ldi	r22, 0xCA	; 202
    1380:	73 e0       	ldi	r23, 0x03	; 3
    1382:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <strcmp>
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	09 f4       	brne	.+2      	; 0x138c <inner_2223+0x52>
    138a:	a8 cf       	rjmp	.-176    	; 0x12dc <inner_2160+0x2c>
			else {
				lcd_puts("Keine Antwort\n");
			}
			wdt_reset();
		}
		lcd_puts("Position: \n");
    138c:	8d ec       	ldi	r24, 0xCD	; 205
    138e:	93 e0       	ldi	r25, 0x03	; 3
    1390:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(Position);
    1394:	ce 01       	movw	r24, r28
    1396:	4b 96       	adiw	r24, 0x1b	; 27
    1398:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(" Erreicht\n");
    139c:	89 ed       	ldi	r24, 0xD9	; 217
    139e:	93 e0       	ldi	r25, 0x03	; 3
    13a0:	0d c0       	rjmp	.+26     	; 0x13bc <inner_2223+0x82>
		break;
	case 6:
		//lcd_puts("MA1 empfangen     \n");
		break;
	case 7: // Position Setzen
		memset(Position, '\0', 33);			// Array mit Nullen bef�llen
    13a2:	fe 01       	movw	r30, r28
    13a4:	7b 96       	adiw	r30, 0x1b	; 27
    13a6:	81 e2       	ldi	r24, 0x21	; 33
    13a8:	df 01       	movw	r26, r30
    13aa:	1d 92       	st	X+, r1
    13ac:	8a 95       	dec	r24
    13ae:	e9 f7       	brne	.-6      	; 0x13aa <inner_2223+0x70>
		Position_Zeta(Position);
    13b0:	cf 01       	movw	r24, r30
    13b2:	0e 94 91 04 	call	0x922	; 0x922 <Position_Zeta>
    13b6:	19 c0       	rjmp	.+50     	; 0x13ea <inner_2223+0xb0>
		break;
	case 8:
		break;
	case 9:		//V8
		lcd_puts("Speed set          \n");
    13b8:	8c e4       	ldi	r24, 0x4C	; 76
    13ba:	94 e0       	ldi	r25, 0x04	; 4
    13bc:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string(B_Zeta_Return, D_RapidForm);
    13c0:	8b e3       	ldi	r24, 0x3B	; 59
    13c2:	94 e0       	ldi	r25, 0x04	; 4
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
    13cc:	0e c0       	rjmp	.+28     	; 0x13ea <inner_2223+0xb0>
		break;
	case 10:
		lcd_puts("Echo off           \n");
    13ce:	81 e6       	ldi	r24, 0x61	; 97
    13d0:	94 e0       	ldi	r25, 0x04	; 4
    13d2:	09 c0       	rjmp	.+18     	; 0x13e6 <inner_2223+0xac>
		//uart_put_string("ECHO0\r", D_RapidForm);
		break;
	case 11:
		break;
	default:
		lcd_puts("Z:");
    13d4:	86 e7       	ldi	r24, 0x76	; 118
    13d6:	94 e0       	ldi	r25, 0x04	; 4
    13d8:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(str_rx);
    13dc:	c7 01       	movw	r24, r14
    13de:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts("   \n");
    13e2:	89 e7       	ldi	r24, 0x79	; 121
    13e4:	94 e0       	ldi	r25, 0x04	; 4
    13e6:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		//Initialized = switch_Inputs(str_rx);
	}
}
    13ea:	cd 59       	subi	r28, 0x9D	; 157
    13ec:	df 4f       	sbci	r29, 0xFF	; 255
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	ff 90       	pop	r15
    1402:	ef 90       	pop	r14
    1404:	df 90       	pop	r13
    1406:	cf 90       	pop	r12
    1408:	bf 90       	pop	r11
    140a:	af 90       	pop	r10
    140c:	08 95       	ret

0000140e <main>:
//
//      Hauptschleife
//
//////////////////////////////
int main(void) {
	init();
    140e:	0e 94 10 03 	call	0x620	; 0x620 <init>
	while (1) {
		wdt_reset();
    1412:	a8 95       	wdr
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1414:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1416:	90 91 20 08 	lds	r25, 0x0820
    141a:	91 70       	andi	r25, 0x01	; 1
  key_press ^= key_mask;                          // clear key(s)
    141c:	80 91 20 08 	lds	r24, 0x0820
    1420:	89 27       	eor	r24, r25
    1422:	80 93 20 08 	sts	0x0820, r24
  sei();
    1426:	78 94       	sei
		if (get_key_press(1 << KEY0) || get_key_rpt(1 << KEY0))
    1428:	99 23       	and	r25, r25
    142a:	61 f4       	brne	.+24     	; 0x1444 <main+0x36>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    142c:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    142e:	90 91 bb 07 	lds	r25, 0x07BB
    1432:	91 70       	andi	r25, 0x01	; 1
  key_rpt ^= key_mask;                            // clear key(s)
    1434:	80 91 bb 07 	lds	r24, 0x07BB
    1438:	89 27       	eor	r24, r25
    143a:	80 93 bb 07 	sts	0x07BB, r24
  sei();
    143e:	78 94       	sei
    1440:	99 23       	and	r25, r25
    1442:	11 f0       	breq	.+4      	; 0x1448 <main+0x3a>
			led_lauflicht(); // LED Lauflicht
    1444:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <led_lauflicht>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1448:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    144a:	90 91 20 08 	lds	r25, 0x0820
    144e:	92 70       	andi	r25, 0x02	; 2
  key_press ^= key_mask;                          // clear key(s)
    1450:	80 91 20 08 	lds	r24, 0x0820
    1454:	89 27       	eor	r24, r25
    1456:	80 93 20 08 	sts	0x0820, r24
  sei();
    145a:	78 94       	sei
		if (get_key_press(1 << KEY1))
    145c:	99 23       	and	r25, r25
    145e:	31 f0       	breq	.+12     	; 0x146c <main+0x5e>
			uart_put_string("0\n", D_RapidForm);
    1460:	8e e7       	ldi	r24, 0x7E	; 126
    1462:	94 e0       	ldi	r25, 0x04	; 4
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	0e 94 3d 02 	call	0x47a	; 0x47a <uart_put_string>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    146c:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    146e:	90 91 20 08 	lds	r25, 0x0820
    1472:	94 70       	andi	r25, 0x04	; 4
  key_press ^= key_mask;                          // clear key(s)
    1474:	80 91 20 08 	lds	r24, 0x0820
    1478:	89 27       	eor	r24, r25
    147a:	80 93 20 08 	sts	0x0820, r24
  sei();
    147e:	78 94       	sei
		if( get_key_press( 1<<KEY2 ) )
    1480:	99 23       	and	r25, r25
    1482:	11 f0       	breq	.+4      	; 0x1488 <main+0x7a>
			lcd_clrscr();
    1484:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1488:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    148a:	90 91 20 08 	lds	r25, 0x0820
    148e:	98 70       	andi	r25, 0x08	; 8
  key_press ^= key_mask;                          // clear key(s)
    1490:	80 91 20 08 	lds	r24, 0x0820
    1494:	89 27       	eor	r24, r25
    1496:	80 93 20 08 	sts	0x0820, r24
  sei();
    149a:	78 94       	sei


		if (get_key_press(1 << KEY3)) {
    149c:	99 23       	and	r25, r25
    149e:	51 f0       	breq	.+20     	; 0x14b4 <main+0xa6>
			lcd_puts("Betrete Men�!\n");
    14a0:	81 e8       	ldi	r24, 0x81	; 129
    14a2:	94 e0       	ldi	r25, 0x04	; 4
    14a4:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			menu_enter(&menu_context, &menu_main);
    14a8:	89 ec       	ldi	r24, 0xC9	; 201
    14aa:	96 e0       	ldi	r25, 0x06	; 6
    14ac:	6c e7       	ldi	r22, 0x7C	; 124
    14ae:	76 e0       	ldi	r23, 0x06	; 6
    14b0:	0e 94 56 0b 	call	0x16ac	; 0x16ac <menu_enter>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14b4:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    14b6:	90 91 20 08 	lds	r25, 0x0820
    14ba:	90 71       	andi	r25, 0x10	; 16
  key_press ^= key_mask;                          // clear key(s)
    14bc:	80 91 20 08 	lds	r24, 0x0820
    14c0:	89 27       	eor	r24, r25
    14c2:	80 93 20 08 	sts	0x0820, r24
  sei();
    14c6:	78 94       	sei
		}

		if (get_key_press(1 << KEY4))
    14c8:	99 23       	and	r25, r25
    14ca:	21 f0       	breq	.+8      	; 0x14d4 <main+0xc6>
			menu_select(&menu_context); // 4 - Ausw�hlen
    14cc:	89 ec       	ldi	r24, 0xC9	; 201
    14ce:	96 e0       	ldi	r25, 0x06	; 6
    14d0:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <menu_select>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14d4:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    14d6:	90 91 20 08 	lds	r25, 0x0820
    14da:	90 72       	andi	r25, 0x20	; 32
  key_press ^= key_mask;                          // clear key(s)
    14dc:	80 91 20 08 	lds	r24, 0x0820
    14e0:	89 27       	eor	r24, r25
    14e2:	80 93 20 08 	sts	0x0820, r24
  sei();
    14e6:	78 94       	sei
		if (get_key_press(1 << KEY5) || get_key_rpt(1 << KEY5)) // 5 - Next
    14e8:	99 23       	and	r25, r25
    14ea:	61 f4       	brne	.+24     	; 0x1504 <main+0xf6>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14ec:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    14ee:	90 91 bb 07 	lds	r25, 0x07BB
    14f2:	90 72       	andi	r25, 0x20	; 32
  key_rpt ^= key_mask;                            // clear key(s)
    14f4:	80 91 bb 07 	lds	r24, 0x07BB
    14f8:	89 27       	eor	r24, r25
    14fa:	80 93 bb 07 	sts	0x07BB, r24
  sei();
    14fe:	78 94       	sei
    1500:	99 23       	and	r25, r25
    1502:	21 f0       	breq	.+8      	; 0x150c <main+0xfe>
			menu_next_entry(&menu_context);
    1504:	89 ec       	ldi	r24, 0xC9	; 201
    1506:	96 e0       	ldi	r25, 0x06	; 6
    1508:	0e 94 9e 0b 	call	0x173c	; 0x173c <menu_next_entry>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    150c:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    150e:	90 91 20 08 	lds	r25, 0x0820
    1512:	90 74       	andi	r25, 0x40	; 64
  key_press ^= key_mask;                          // clear key(s)
    1514:	80 91 20 08 	lds	r24, 0x0820
    1518:	89 27       	eor	r24, r25
    151a:	80 93 20 08 	sts	0x0820, r24
  sei();
    151e:	78 94       	sei
		if (get_key_press(1 << KEY6) || get_key_rpt(1 << KEY6)) // 6 - Previous
    1520:	99 23       	and	r25, r25
    1522:	61 f4       	brne	.+24     	; 0x153c <main+0x12e>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1524:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    1526:	90 91 bb 07 	lds	r25, 0x07BB
    152a:	90 74       	andi	r25, 0x40	; 64
  key_rpt ^= key_mask;                            // clear key(s)
    152c:	80 91 bb 07 	lds	r24, 0x07BB
    1530:	89 27       	eor	r24, r25
    1532:	80 93 bb 07 	sts	0x07BB, r24
  sei();
    1536:	78 94       	sei
    1538:	99 23       	and	r25, r25
    153a:	21 f0       	breq	.+8      	; 0x1544 <main+0x136>
			menu_prev_entry(&menu_context);
    153c:	89 ec       	ldi	r24, 0xC9	; 201
    153e:	96 e0       	ldi	r25, 0x06	; 6
    1540:	0e 94 75 0b 	call	0x16ea	; 0x16ea <menu_prev_entry>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1544:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1546:	90 91 20 08 	lds	r25, 0x0820
    154a:	90 78       	andi	r25, 0x80	; 128
  key_press ^= key_mask;                          // clear key(s)
    154c:	80 91 20 08 	lds	r24, 0x0820
    1550:	89 27       	eor	r24, r25
    1552:	80 93 20 08 	sts	0x0820, r24
  sei();
    1556:	78 94       	sei
		if (get_key_press(1 << KEY7))
    1558:	99 23       	and	r25, r25
    155a:	21 f0       	breq	.+8      	; 0x1564 <main+0x156>
			menu_exit(&menu_context); // 7 - Men� zur�ck
    155c:	89 ec       	ldi	r24, 0xC9	; 201
    155e:	96 e0       	ldi	r25, 0x06	; 6
    1560:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <menu_exit>

		if ((UCSR0A & (1 << RXC0)))
    1564:	80 91 c0 00 	lds	r24, 0x00C0
    1568:	87 ff       	sbrs	r24, 7
    156a:	04 c0       	rjmp	.+8      	; 0x1574 <main+0x166>
			uart_rx(D_RapidForm);
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0e 94 3f 08 	call	0x107e	; 0x107e <uart_rx>
		if ((UCSR1A & (1 << RXC1)))
    1574:	80 91 c8 00 	lds	r24, 0x00C8
    1578:	87 ff       	sbrs	r24, 7
    157a:	4b cf       	rjmp	.-362    	; 0x1412 <main+0x4>
			uart_rx(D_Stepper);
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 3f 08 	call	0x107e	; 0x107e <uart_rx>
    1584:	46 cf       	rjmp	.-372    	; 0x1412 <main+0x4>

00001586 <menu_display>:
/*
 * Display the current menu in the context
 */
 
void menu_display(menu_context_t *context)
{
    1586:	9f 92       	push	r9
    1588:	af 92       	push	r10
    158a:	bf 92       	push	r11
    158c:	cf 92       	push	r12
    158e:	df 92       	push	r13
    1590:	ef 92       	push	r14
    1592:	ff 92       	push	r15
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	7c 01       	movw	r14, r24
	uint8_t i;
	menu_t *menu = context->menu;
    159e:	fc 01       	movw	r30, r24
    15a0:	c4 80       	ldd	r12, Z+4	; 0x04
    15a2:	d5 80       	ldd	r13, Z+5	; 0x05
    15a4:	bb 24       	eor	r11, r11
    15a6:	99 24       	eor	r9, r9
    15a8:	52 c0       	rjmp	.+164    	; 0x164e <menu_display+0xc8>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    15aa:	e9 2d       	mov	r30, r9
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
			if (dindex++ >= menu->num_entries - menu->top_entry)
    15ae:	e2 17       	cp	r30, r18
    15b0:	f3 07       	cpc	r31, r19
    15b2:	0c f0       	brlt	.+2      	; 0x15b6 <menu_display+0x30>
    15b4:	6b c0       	rjmp	.+214    	; 0x168c <menu_display+0x106>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    15b6:	8f 01       	movw	r16, r30
    15b8:	04 0f       	add	r16, r20
    15ba:	15 1f       	adc	r17, r21
			if (dindex++ >= menu->num_entries - menu->top_entry)
    15bc:	93 94       	inc	r9
				goto entries_done;
		} while (disp_entry->flags & MENU_FLAG_HIDDEN);
    15be:	f8 01       	movw	r30, r16
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	e0 0f       	add	r30, r16
    15c6:	f1 1f       	adc	r31, r17
    15c8:	63 e0       	ldi	r22, 0x03	; 3
    15ca:	ee 0f       	add	r30, r30
    15cc:	ff 1f       	adc	r31, r31
    15ce:	6a 95       	dec	r22
    15d0:	e1 f7       	brne	.-8      	; 0x15ca <menu_display+0x44>
    15d2:	ec 0d       	add	r30, r12
    15d4:	fd 1d       	adc	r31, r13
    15d6:	85 81       	ldd	r24, Z+5	; 0x05
    15d8:	81 fd       	sbrc	r24, 1
    15da:	e7 cf       	rjmp	.-50     	; 0x15aa <menu_display+0x24>
			return;
#endif

		// Go to correct x,y locations and print the entry

		menu_set_pos(context->x_loc, context->y_loc + i);
    15dc:	f7 01       	movw	r30, r14
    15de:	61 81       	ldd	r22, Z+1	; 0x01
    15e0:	6b 0d       	add	r22, r11
    15e2:	80 81       	ld	r24, Z
    15e4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_gotoxy>
	if (selected)
		menu_set_inverse();
#else
	// No inverse; do workaround

	max_width--;
    15e8:	f7 01       	movw	r30, r14
    15ea:	a3 80       	ldd	r10, Z+3	; 0x03
    15ec:	aa 94       	dec	r10
	if (selected) {
    15ee:	f6 01       	movw	r30, r12
    15f0:	21 81       	ldd	r18, Z+1	; 0x01
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	2f 5f       	subi	r18, 0xFF	; 255
    15f6:	3f 4f       	sbci	r19, 0xFF	; 255
    15f8:	80 81       	ld	r24, Z
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	89 0d       	add	r24, r9
    15fe:	91 1d       	adc	r25, r1
    1600:	28 17       	cp	r18, r24
    1602:	39 07       	cpc	r19, r25
    1604:	11 f4       	brne	.+4      	; 0x160a <menu_display+0x84>
		menu_putchar('*');
    1606:	8a e2       	ldi	r24, 0x2A	; 42
    1608:	01 c0       	rjmp	.+2      	; 0x160c <menu_display+0x86>
	} else {
		menu_putchar(' ');
    160a:	80 e2       	ldi	r24, 0x20	; 32
    160c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
    1610:	e8 01       	movw	r28, r16
    1612:	cc 0f       	add	r28, r28
    1614:	dd 1f       	adc	r29, r29
    1616:	c0 0f       	add	r28, r16
    1618:	d1 1f       	adc	r29, r17
    161a:	21 96       	adiw	r28, 0x01	; 1
    161c:	83 e0       	ldi	r24, 0x03	; 3
    161e:	cc 0f       	add	r28, r28
    1620:	dd 1f       	adc	r29, r29
    1622:	8a 95       	dec	r24
    1624:	e1 f7       	brne	.-8      	; 0x161e <menu_display+0x98>
    1626:	cc 0d       	add	r28, r12
    1628:	dd 1d       	adc	r29, r13
    162a:	10 e0       	ldi	r17, 0x00	; 0
    162c:	06 c0       	rjmp	.+12     	; 0x163a <menu_display+0xb4>
	
	// Print the characters in the name; fill out to width with
	//  spaces (mainly for inverse)
	
	for (i = 0; i < max_width; i++) {
		if (!entry->name[i])
    162e:	89 91       	ld	r24, Y+
    1630:	88 23       	and	r24, r24
    1632:	31 f0       	breq	.+12     	; 0x1640 <menu_display+0xba>
			break;
			
		menu_putchar(entry->name[i]);
    1634:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
#endif		
	
	// Print the characters in the name; fill out to width with
	//  spaces (mainly for inverse)
	
	for (i = 0; i < max_width; i++) {
    1638:	1f 5f       	subi	r17, 0xFF	; 255
    163a:	1a 15       	cp	r17, r10
    163c:	c0 f3       	brcs	.-16     	; 0x162e <menu_display+0xa8>
    163e:	06 c0       	rjmp	.+12     	; 0x164c <menu_display+0xc6>
			
		menu_putchar(entry->name[i]);
	}
	
	for (; i < max_width; i++)
		menu_putchar(' ');
    1640:	80 e2       	ldi	r24, 0x20	; 32
    1642:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
			break;
			
		menu_putchar(entry->name[i]);
	}
	
	for (; i < max_width; i++)
    1646:	1f 5f       	subi	r17, 0xFF	; 255
    1648:	1a 15       	cp	r17, r10
    164a:	d0 f3       	brcs	.-12     	; 0x1640 <menu_display+0xba>
	menu_clear();
#endif

	// Display only those entries that will fit on the display

	for (i = 0; i < context->height; i++) {
    164c:	b3 94       	inc	r11
    164e:	f7 01       	movw	r30, r14
    1650:	82 81       	ldd	r24, Z+2	; 0x02
    1652:	b8 16       	cp	r11, r24
    1654:	d8 f4       	brcc	.+54     	; 0x168c <menu_display+0x106>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    1656:	f6 01       	movw	r30, r12
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	50 e0       	ldi	r21, 0x00	; 0
			if (dindex++ >= menu->num_entries - menu->top_entry)
    165e:	82 81       	ldd	r24, Z+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	24 1b       	sub	r18, r20
    1666:	35 0b       	sbc	r19, r21
    1668:	a0 cf       	rjmp	.-192    	; 0x15aa <menu_display+0x24>

#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
		menu_set_pos(context->x_loc, context->y_loc + i);
    166a:	f7 01       	movw	r30, r14
    166c:	61 81       	ldd	r22, Z+1	; 0x01
    166e:	6b 0d       	add	r22, r11
    1670:	80 81       	ld	r24, Z
    1672:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_gotoxy>
    1676:	10 e0       	ldi	r17, 0x00	; 0
    1678:	04 c0       	rjmp	.+8      	; 0x1682 <menu_display+0xfc>
		for (j = 0; j < context->width; j++) {
			menu_putchar(' ');
    167a:	80 e2       	ldi	r24, 0x20	; 32
    167c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
		menu_set_pos(context->x_loc, context->y_loc + i);
		for (j = 0; j < context->width; j++) {
    1680:	1f 5f       	subi	r17, 0xFF	; 255
    1682:	f7 01       	movw	r30, r14
    1684:	83 81       	ldd	r24, Z+3	; 0x03
    1686:	18 17       	cp	r17, r24
    1688:	c0 f3       	brcs	.-16     	; 0x167a <menu_display+0xf4>
entries_done:

#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
    168a:	b3 94       	inc	r11
    168c:	f7 01       	movw	r30, r14
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	b8 16       	cp	r11, r24
    1692:	58 f3       	brcs	.-42     	; 0x166a <menu_display+0xe4>
		for (j = 0; j < context->width; j++) {
			menu_putchar(' ');
		}
	}	
#endif	
}
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	1f 91       	pop	r17
    169a:	0f 91       	pop	r16
    169c:	ff 90       	pop	r15
    169e:	ef 90       	pop	r14
    16a0:	df 90       	pop	r13
    16a2:	cf 90       	pop	r12
    16a4:	bf 90       	pop	r11
    16a6:	af 90       	pop	r10
    16a8:	9f 90       	pop	r9
    16aa:	08 95       	ret

000016ac <menu_enter>:
 *  so when we exit we can go back, and update the menu context to
 *  reflect new menu... then display it.
 */

void menu_enter(menu_context_t *context, menu_t *menu)
{
    16ac:	fc 01       	movw	r30, r24
    16ae:	db 01       	movw	r26, r22
	menu->previous = context->menu;
    16b0:	84 81       	ldd	r24, Z+4	; 0x04
    16b2:	95 81       	ldd	r25, Z+5	; 0x05
    16b4:	14 96       	adiw	r26, 0x04	; 4
    16b6:	9c 93       	st	X, r25
    16b8:	8e 93       	st	-X, r24
    16ba:	13 97       	sbiw	r26, 0x03	; 3
	context->menu = menu;
    16bc:	75 83       	std	Z+5, r23	; 0x05
    16be:	64 83       	std	Z+4, r22	; 0x04
	menu_display(context);
    16c0:	cf 01       	movw	r24, r30
    16c2:	0e 94 c3 0a 	call	0x1586	; 0x1586 <menu_display>
}
    16c6:	08 95       	ret

000016c8 <menu_exit>:
 * Exit a menu (go to the previous menu) -- if there is no previous
 *  menu, don't do anything.
 */

void menu_exit(menu_context_t *context)
{
    16c8:	dc 01       	movw	r26, r24
	if (context->menu->previous) {
    16ca:	14 96       	adiw	r26, 0x04	; 4
    16cc:	ed 91       	ld	r30, X+
    16ce:	fc 91       	ld	r31, X
    16d0:	15 97       	sbiw	r26, 0x05	; 5
    16d2:	83 81       	ldd	r24, Z+3	; 0x03
    16d4:	94 81       	ldd	r25, Z+4	; 0x04
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	39 f0       	breq	.+14     	; 0x16e8 <menu_exit+0x20>
		context->menu = context->menu->previous;
    16da:	15 96       	adiw	r26, 0x05	; 5
    16dc:	9c 93       	st	X, r25
    16de:	8e 93       	st	-X, r24
    16e0:	14 97       	sbiw	r26, 0x04	; 4
		menu_display(context);
    16e2:	cd 01       	movw	r24, r26
    16e4:	0e 94 c3 0a 	call	0x1586	; 0x1586 <menu_display>
    16e8:	08 95       	ret

000016ea <menu_prev_entry>:
 *  bounds.  Also adjust current top entry in display if needed to fit new
 *  entry on display.
 */ 

void menu_prev_entry(menu_context_t *context)
{
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	ec 01       	movw	r28, r24
	menu_t *menu = context->menu;
    16f0:	ac 81       	ldd	r26, Y+4	; 0x04
    16f2:	bd 81       	ldd	r27, Y+5	; 0x05
	uint8_t new_entry = menu->current_entry;
    16f4:	11 96       	adiw	r26, 0x01	; 1
    16f6:	2c 91       	ld	r18, X
    16f8:	11 97       	sbiw	r26, 0x01	; 1
	

#ifndef CONFIG_TINYMENU_COMPACT
	while(1) {
		if (new_entry-- == 0) // Watch bounds
    16fa:	22 23       	and	r18, r18
    16fc:	e1 f0       	breq	.+56     	; 0x1736 <menu_prev_entry+0x4c>
    16fe:	21 50       	subi	r18, 0x01	; 1
			return;
			
		if (!(menu->entry[new_entry].flags & MENU_FLAG_HIDDEN))
    1700:	82 2f       	mov	r24, r18
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	fc 01       	movw	r30, r24
    1706:	ee 0f       	add	r30, r30
    1708:	ff 1f       	adc	r31, r31
    170a:	e8 0f       	add	r30, r24
    170c:	f9 1f       	adc	r31, r25
    170e:	83 e0       	ldi	r24, 0x03	; 3
    1710:	ee 0f       	add	r30, r30
    1712:	ff 1f       	adc	r31, r31
    1714:	8a 95       	dec	r24
    1716:	e1 f7       	brne	.-8      	; 0x1710 <menu_prev_entry+0x26>
    1718:	ea 0f       	add	r30, r26
    171a:	fb 1f       	adc	r31, r27
    171c:	85 81       	ldd	r24, Z+5	; 0x05
    171e:	81 fd       	sbrc	r24, 1
    1720:	ec cf       	rjmp	.-40     	; 0x16fa <menu_prev_entry+0x10>
#else
	if (new_entry-- == 0)
		return;
#endif
	
	menu->current_entry = new_entry;
    1722:	11 96       	adiw	r26, 0x01	; 1
    1724:	2c 93       	st	X, r18
    1726:	11 97       	sbiw	r26, 0x01	; 1
	
	if (menu->current_entry < menu->top_entry) 
    1728:	8c 91       	ld	r24, X
    172a:	28 17       	cp	r18, r24
    172c:	08 f4       	brcc	.+2      	; 0x1730 <menu_prev_entry+0x46>
		menu->top_entry = menu->current_entry;
    172e:	2c 93       	st	X, r18
		
	menu_display(context);
    1730:	ce 01       	movw	r24, r28
    1732:	0e 94 c3 0a 	call	0x1586	; 0x1586 <menu_display>
}
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <menu_next_entry>:
 *  Also adjust current top entry in display if needed to fit new entry
 *  on display
 */
 
void menu_next_entry(menu_context_t *context)
{
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	ec 01       	movw	r28, r24
	menu_t *menu = context->menu;
    1742:	ac 81       	ldd	r26, Y+4	; 0x04
    1744:	bd 81       	ldd	r27, Y+5	; 0x05
	uint8_t new_entry = menu->current_entry;
    1746:	11 96       	adiw	r26, 0x01	; 1
    1748:	2c 91       	ld	r18, X
    174a:	11 97       	sbiw	r26, 0x01	; 1
	

#ifndef CONFIG_TINYMENU_COMPACT
	while(1) {
		if (++new_entry >= menu->num_entries) // watch bounds
    174c:	12 96       	adiw	r26, 0x02	; 2
    174e:	9c 91       	ld	r25, X
    1750:	12 97       	sbiw	r26, 0x02	; 2
    1752:	2f 5f       	subi	r18, 0xFF	; 255
    1754:	29 17       	cp	r18, r25
    1756:	10 f5       	brcc	.+68     	; 0x179c <menu_next_entry+0x60>
			return;
		if (!(menu->entry[new_entry].flags & MENU_FLAG_HIDDEN))
    1758:	42 2f       	mov	r20, r18
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	fa 01       	movw	r30, r20
    175e:	ee 0f       	add	r30, r30
    1760:	ff 1f       	adc	r31, r31
    1762:	e4 0f       	add	r30, r20
    1764:	f5 1f       	adc	r31, r21
    1766:	63 e0       	ldi	r22, 0x03	; 3
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	6a 95       	dec	r22
    176e:	e1 f7       	brne	.-8      	; 0x1768 <menu_next_entry+0x2c>
    1770:	ea 0f       	add	r30, r26
    1772:	fb 1f       	adc	r31, r27
    1774:	85 81       	ldd	r24, Z+5	; 0x05
    1776:	81 fd       	sbrc	r24, 1
    1778:	ec cf       	rjmp	.-40     	; 0x1752 <menu_next_entry+0x16>
#else
	if (++new_entry >= menu->num_entries)
		return;
#endif
	
	menu->current_entry = new_entry;
    177a:	11 96       	adiw	r26, 0x01	; 1
    177c:	2c 93       	st	X, r18
    177e:	11 97       	sbiw	r26, 0x01	; 1
	
	if (menu->current_entry >= menu->top_entry + context->height)
    1780:	3a 81       	ldd	r19, Y+2	; 0x02
    1782:	8c 91       	ld	r24, X
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	83 0f       	add	r24, r19
    1788:	91 1d       	adc	r25, r1
    178a:	48 17       	cp	r20, r24
    178c:	59 07       	cpc	r21, r25
    178e:	1c f0       	brlt	.+6      	; 0x1796 <menu_next_entry+0x5a>
		menu->top_entry = menu->current_entry - context->height + 1;
    1790:	23 1b       	sub	r18, r19
    1792:	2f 5f       	subi	r18, 0xFF	; 255
    1794:	2c 93       	st	X, r18
	
	menu_display(context);
    1796:	ce 01       	movw	r24, r28
    1798:	0e 94 c3 0a 	call	0x1586	; 0x1586 <menu_display>
}
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	08 95       	ret

000017a2 <menu_select>:
 *  enter the submenu)
 *
 */

void menu_select(menu_context_t *context)
{
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	8c 01       	movw	r16, r24
	menu_entry_t *entry;


	entry = &context->menu->entry[context->menu->current_entry];
    17ac:	fc 01       	movw	r30, r24
    17ae:	c4 81       	ldd	r28, Z+4	; 0x04
    17b0:	d5 81       	ldd	r29, Z+5	; 0x05
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	90 e0       	ldi	r25, 0x00	; 0

	if (entry->flags & MENU_FLAG_SUBMENU) {
    17b6:	9c 01       	movw	r18, r24
    17b8:	22 0f       	add	r18, r18
    17ba:	33 1f       	adc	r19, r19
    17bc:	28 0f       	add	r18, r24
    17be:	39 1f       	adc	r19, r25
    17c0:	d9 01       	movw	r26, r18
    17c2:	f3 e0       	ldi	r31, 0x03	; 3
    17c4:	aa 0f       	add	r26, r26
    17c6:	bb 1f       	adc	r27, r27
    17c8:	fa 95       	dec	r31
    17ca:	e1 f7       	brne	.-8      	; 0x17c4 <menu_select+0x22>
    17cc:	ac 0f       	add	r26, r28
    17ce:	bd 1f       	adc	r27, r29
    17d0:	15 96       	adiw	r26, 0x05	; 5
    17d2:	8c 91       	ld	r24, X
    17d4:	15 97       	sbiw	r26, 0x05	; 5
    17d6:	80 ff       	sbrs	r24, 0
    17d8:	08 c0       	rjmp	.+16     	; 0x17ea <menu_select+0x48>
		// Submenu -- enter it
	
		menu_enter(context, (menu_t *)entry->value);
    17da:	5b 96       	adiw	r26, 0x1b	; 27
    17dc:	6d 91       	ld	r22, X+
    17de:	7c 91       	ld	r23, X
    17e0:	5c 97       	sbiw	r26, 0x1c	; 28
    17e2:	c8 01       	movw	r24, r16
    17e4:	0e 94 56 0b 	call	0x16ac	; 0x16ac <menu_enter>
    17e8:	13 c0       	rjmp	.+38     	; 0x1810 <menu_select+0x6e>
	} else {
		// Regular entry -- execute function
	
		entry->select(entry->value, entry->name);
    17ea:	c9 01       	movw	r24, r18
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	e3 e0       	ldi	r30, 0x03	; 3
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	ea 95       	dec	r30
    17f6:	e1 f7       	brne	.-8      	; 0x17f0 <menu_select+0x4e>
    17f8:	c8 0f       	add	r28, r24
    17fa:	d9 1f       	adc	r29, r25
    17fc:	16 96       	adiw	r26, 0x06	; 6
    17fe:	ed 91       	ld	r30, X+
    1800:	fc 91       	ld	r31, X
    1802:	17 97       	sbiw	r26, 0x07	; 7
    1804:	5b 96       	adiw	r26, 0x1b	; 27
    1806:	8d 91       	ld	r24, X+
    1808:	9c 91       	ld	r25, X
    180a:	5c 97       	sbiw	r26, 0x1c	; 28
    180c:	be 01       	movw	r22, r28
    180e:	09 95       	icall
	}
	
	// Re-display menu on return
	
	menu_display(context);
    1810:	c8 01       	movw	r24, r16
    1812:	0e 94 c3 0a 	call	0x1586	; 0x1586 <menu_display>
}
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	08 95       	ret

00001820 <__mulsi3>:
    1820:	62 9f       	mul	r22, r18
    1822:	d0 01       	movw	r26, r0
    1824:	73 9f       	mul	r23, r19
    1826:	f0 01       	movw	r30, r0
    1828:	82 9f       	mul	r24, r18
    182a:	e0 0d       	add	r30, r0
    182c:	f1 1d       	adc	r31, r1
    182e:	64 9f       	mul	r22, r20
    1830:	e0 0d       	add	r30, r0
    1832:	f1 1d       	adc	r31, r1
    1834:	92 9f       	mul	r25, r18
    1836:	f0 0d       	add	r31, r0
    1838:	83 9f       	mul	r24, r19
    183a:	f0 0d       	add	r31, r0
    183c:	74 9f       	mul	r23, r20
    183e:	f0 0d       	add	r31, r0
    1840:	65 9f       	mul	r22, r21
    1842:	f0 0d       	add	r31, r0
    1844:	99 27       	eor	r25, r25
    1846:	72 9f       	mul	r23, r18
    1848:	b0 0d       	add	r27, r0
    184a:	e1 1d       	adc	r30, r1
    184c:	f9 1f       	adc	r31, r25
    184e:	63 9f       	mul	r22, r19
    1850:	b0 0d       	add	r27, r0
    1852:	e1 1d       	adc	r30, r1
    1854:	f9 1f       	adc	r31, r25
    1856:	bd 01       	movw	r22, r26
    1858:	cf 01       	movw	r24, r30
    185a:	11 24       	eor	r1, r1
    185c:	08 95       	ret

0000185e <__divmodhi4>:
    185e:	97 fb       	bst	r25, 7
    1860:	09 2e       	mov	r0, r25
    1862:	07 26       	eor	r0, r23
    1864:	0a d0       	rcall	.+20     	; 0x187a <__divmodhi4_neg1>
    1866:	77 fd       	sbrc	r23, 7
    1868:	04 d0       	rcall	.+8      	; 0x1872 <__divmodhi4_neg2>
    186a:	27 d0       	rcall	.+78     	; 0x18ba <__udivmodhi4>
    186c:	06 d0       	rcall	.+12     	; 0x187a <__divmodhi4_neg1>
    186e:	00 20       	and	r0, r0
    1870:	1a f4       	brpl	.+6      	; 0x1878 <__divmodhi4_exit>

00001872 <__divmodhi4_neg2>:
    1872:	70 95       	com	r23
    1874:	61 95       	neg	r22
    1876:	7f 4f       	sbci	r23, 0xFF	; 255

00001878 <__divmodhi4_exit>:
    1878:	08 95       	ret

0000187a <__divmodhi4_neg1>:
    187a:	f6 f7       	brtc	.-4      	; 0x1878 <__divmodhi4_exit>
    187c:	90 95       	com	r25
    187e:	81 95       	neg	r24
    1880:	9f 4f       	sbci	r25, 0xFF	; 255
    1882:	08 95       	ret

00001884 <__divmodsi4>:
    1884:	97 fb       	bst	r25, 7
    1886:	09 2e       	mov	r0, r25
    1888:	05 26       	eor	r0, r21
    188a:	0e d0       	rcall	.+28     	; 0x18a8 <__divmodsi4_neg1>
    188c:	57 fd       	sbrc	r21, 7
    188e:	04 d0       	rcall	.+8      	; 0x1898 <__divmodsi4_neg2>
    1890:	28 d0       	rcall	.+80     	; 0x18e2 <__udivmodsi4>
    1892:	0a d0       	rcall	.+20     	; 0x18a8 <__divmodsi4_neg1>
    1894:	00 1c       	adc	r0, r0
    1896:	38 f4       	brcc	.+14     	; 0x18a6 <__divmodsi4_exit>

00001898 <__divmodsi4_neg2>:
    1898:	50 95       	com	r21
    189a:	40 95       	com	r20
    189c:	30 95       	com	r19
    189e:	21 95       	neg	r18
    18a0:	3f 4f       	sbci	r19, 0xFF	; 255
    18a2:	4f 4f       	sbci	r20, 0xFF	; 255
    18a4:	5f 4f       	sbci	r21, 0xFF	; 255

000018a6 <__divmodsi4_exit>:
    18a6:	08 95       	ret

000018a8 <__divmodsi4_neg1>:
    18a8:	f6 f7       	brtc	.-4      	; 0x18a6 <__divmodsi4_exit>
    18aa:	90 95       	com	r25
    18ac:	80 95       	com	r24
    18ae:	70 95       	com	r23
    18b0:	61 95       	neg	r22
    18b2:	7f 4f       	sbci	r23, 0xFF	; 255
    18b4:	8f 4f       	sbci	r24, 0xFF	; 255
    18b6:	9f 4f       	sbci	r25, 0xFF	; 255
    18b8:	08 95       	ret

000018ba <__udivmodhi4>:
    18ba:	aa 1b       	sub	r26, r26
    18bc:	bb 1b       	sub	r27, r27
    18be:	51 e1       	ldi	r21, 0x11	; 17
    18c0:	07 c0       	rjmp	.+14     	; 0x18d0 <__udivmodhi4_ep>

000018c2 <__udivmodhi4_loop>:
    18c2:	aa 1f       	adc	r26, r26
    18c4:	bb 1f       	adc	r27, r27
    18c6:	a6 17       	cp	r26, r22
    18c8:	b7 07       	cpc	r27, r23
    18ca:	10 f0       	brcs	.+4      	; 0x18d0 <__udivmodhi4_ep>
    18cc:	a6 1b       	sub	r26, r22
    18ce:	b7 0b       	sbc	r27, r23

000018d0 <__udivmodhi4_ep>:
    18d0:	88 1f       	adc	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	5a 95       	dec	r21
    18d6:	a9 f7       	brne	.-22     	; 0x18c2 <__udivmodhi4_loop>
    18d8:	80 95       	com	r24
    18da:	90 95       	com	r25
    18dc:	bc 01       	movw	r22, r24
    18de:	cd 01       	movw	r24, r26
    18e0:	08 95       	ret

000018e2 <__udivmodsi4>:
    18e2:	a1 e2       	ldi	r26, 0x21	; 33
    18e4:	1a 2e       	mov	r1, r26
    18e6:	aa 1b       	sub	r26, r26
    18e8:	bb 1b       	sub	r27, r27
    18ea:	fd 01       	movw	r30, r26
    18ec:	0d c0       	rjmp	.+26     	; 0x1908 <__udivmodsi4_ep>

000018ee <__udivmodsi4_loop>:
    18ee:	aa 1f       	adc	r26, r26
    18f0:	bb 1f       	adc	r27, r27
    18f2:	ee 1f       	adc	r30, r30
    18f4:	ff 1f       	adc	r31, r31
    18f6:	a2 17       	cp	r26, r18
    18f8:	b3 07       	cpc	r27, r19
    18fa:	e4 07       	cpc	r30, r20
    18fc:	f5 07       	cpc	r31, r21
    18fe:	20 f0       	brcs	.+8      	; 0x1908 <__udivmodsi4_ep>
    1900:	a2 1b       	sub	r26, r18
    1902:	b3 0b       	sbc	r27, r19
    1904:	e4 0b       	sbc	r30, r20
    1906:	f5 0b       	sbc	r31, r21

00001908 <__udivmodsi4_ep>:
    1908:	66 1f       	adc	r22, r22
    190a:	77 1f       	adc	r23, r23
    190c:	88 1f       	adc	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	1a 94       	dec	r1
    1912:	69 f7       	brne	.-38     	; 0x18ee <__udivmodsi4_loop>
    1914:	60 95       	com	r22
    1916:	70 95       	com	r23
    1918:	80 95       	com	r24
    191a:	90 95       	com	r25
    191c:	9b 01       	movw	r18, r22
    191e:	ac 01       	movw	r20, r24
    1920:	bd 01       	movw	r22, r26
    1922:	cf 01       	movw	r24, r30
    1924:	08 95       	ret

00001926 <do_rand>:
    1926:	a0 e0       	ldi	r26, 0x00	; 0
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e9 e9       	ldi	r30, 0x99	; 153
    192c:	fc e0       	ldi	r31, 0x0C	; 12
    192e:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__prologue_saves__+0x10>
    1932:	ec 01       	movw	r28, r24
    1934:	a8 80       	ld	r10, Y
    1936:	b9 80       	ldd	r11, Y+1	; 0x01
    1938:	ca 80       	ldd	r12, Y+2	; 0x02
    193a:	db 80       	ldd	r13, Y+3	; 0x03
    193c:	a1 14       	cp	r10, r1
    193e:	b1 04       	cpc	r11, r1
    1940:	c1 04       	cpc	r12, r1
    1942:	d1 04       	cpc	r13, r1
    1944:	41 f4       	brne	.+16     	; 0x1956 <do_rand+0x30>
    1946:	84 e2       	ldi	r24, 0x24	; 36
    1948:	a8 2e       	mov	r10, r24
    194a:	89 ed       	ldi	r24, 0xD9	; 217
    194c:	b8 2e       	mov	r11, r24
    194e:	8b e5       	ldi	r24, 0x5B	; 91
    1950:	c8 2e       	mov	r12, r24
    1952:	87 e0       	ldi	r24, 0x07	; 7
    1954:	d8 2e       	mov	r13, r24
    1956:	c6 01       	movw	r24, r12
    1958:	b5 01       	movw	r22, r10
    195a:	2d e1       	ldi	r18, 0x1D	; 29
    195c:	33 ef       	ldi	r19, 0xF3	; 243
    195e:	41 e0       	ldi	r20, 0x01	; 1
    1960:	50 e0       	ldi	r21, 0x00	; 0
    1962:	0e 94 42 0c 	call	0x1884	; 0x1884 <__divmodsi4>
    1966:	27 ea       	ldi	r18, 0xA7	; 167
    1968:	31 e4       	ldi	r19, 0x41	; 65
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	50 e0       	ldi	r21, 0x00	; 0
    196e:	0e 94 10 0c 	call	0x1820	; 0x1820 <__mulsi3>
    1972:	7b 01       	movw	r14, r22
    1974:	8c 01       	movw	r16, r24
    1976:	c6 01       	movw	r24, r12
    1978:	b5 01       	movw	r22, r10
    197a:	2d e1       	ldi	r18, 0x1D	; 29
    197c:	33 ef       	ldi	r19, 0xF3	; 243
    197e:	41 e0       	ldi	r20, 0x01	; 1
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	0e 94 42 0c 	call	0x1884	; 0x1884 <__divmodsi4>
    1986:	ca 01       	movw	r24, r20
    1988:	b9 01       	movw	r22, r18
    198a:	2c ee       	ldi	r18, 0xEC	; 236
    198c:	34 ef       	ldi	r19, 0xF4	; 244
    198e:	4f ef       	ldi	r20, 0xFF	; 255
    1990:	5f ef       	ldi	r21, 0xFF	; 255
    1992:	0e 94 10 0c 	call	0x1820	; 0x1820 <__mulsi3>
    1996:	6e 0d       	add	r22, r14
    1998:	7f 1d       	adc	r23, r15
    199a:	80 1f       	adc	r24, r16
    199c:	91 1f       	adc	r25, r17
    199e:	97 ff       	sbrs	r25, 7
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <do_rand+0x84>
    19a2:	61 50       	subi	r22, 0x01	; 1
    19a4:	70 40       	sbci	r23, 0x00	; 0
    19a6:	80 40       	sbci	r24, 0x00	; 0
    19a8:	90 48       	sbci	r25, 0x80	; 128
    19aa:	68 83       	st	Y, r22
    19ac:	79 83       	std	Y+1, r23	; 0x01
    19ae:	8a 83       	std	Y+2, r24	; 0x02
    19b0:	9b 83       	std	Y+3, r25	; 0x03
    19b2:	9b 01       	movw	r18, r22
    19b4:	3f 77       	andi	r19, 0x7F	; 127
    19b6:	c9 01       	movw	r24, r18
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	ea e0       	ldi	r30, 0x0A	; 10
    19be:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__epilogue_restores__+0x10>

000019c2 <rand_r>:
    19c2:	0e 94 93 0c 	call	0x1926	; 0x1926 <do_rand>
    19c6:	08 95       	ret

000019c8 <rand>:
    19c8:	8f ea       	ldi	r24, 0xAF	; 175
    19ca:	97 e0       	ldi	r25, 0x07	; 7
    19cc:	0e 94 93 0c 	call	0x1926	; 0x1926 <do_rand>
    19d0:	08 95       	ret

000019d2 <srand>:
    19d2:	a0 e0       	ldi	r26, 0x00	; 0
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	80 93 af 07 	sts	0x07AF, r24
    19da:	90 93 b0 07 	sts	0x07B0, r25
    19de:	a0 93 b1 07 	sts	0x07B1, r26
    19e2:	b0 93 b2 07 	sts	0x07B2, r27
    19e6:	08 95       	ret

000019e8 <atoi>:
    19e8:	fc 01       	movw	r30, r24
    19ea:	88 27       	eor	r24, r24
    19ec:	99 27       	eor	r25, r25
    19ee:	e8 94       	clt
    19f0:	21 91       	ld	r18, Z+
    19f2:	20 32       	cpi	r18, 0x20	; 32
    19f4:	e9 f3       	breq	.-6      	; 0x19f0 <atoi+0x8>
    19f6:	29 30       	cpi	r18, 0x09	; 9
    19f8:	10 f0       	brcs	.+4      	; 0x19fe <atoi+0x16>
    19fa:	2e 30       	cpi	r18, 0x0E	; 14
    19fc:	c8 f3       	brcs	.-14     	; 0x19f0 <atoi+0x8>
    19fe:	2b 32       	cpi	r18, 0x2B	; 43
    1a00:	41 f0       	breq	.+16     	; 0x1a12 <atoi+0x2a>
    1a02:	2d 32       	cpi	r18, 0x2D	; 45
    1a04:	39 f4       	brne	.+14     	; 0x1a14 <atoi+0x2c>
    1a06:	68 94       	set
    1a08:	04 c0       	rjmp	.+8      	; 0x1a12 <atoi+0x2a>
    1a0a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__mulhi_const_10>
    1a0e:	82 0f       	add	r24, r18
    1a10:	91 1d       	adc	r25, r1
    1a12:	21 91       	ld	r18, Z+
    1a14:	20 53       	subi	r18, 0x30	; 48
    1a16:	2a 30       	cpi	r18, 0x0A	; 10
    1a18:	c0 f3       	brcs	.-16     	; 0x1a0a <atoi+0x22>
    1a1a:	1e f4       	brtc	.+6      	; 0x1a22 <atoi+0x3a>
    1a1c:	90 95       	com	r25
    1a1e:	81 95       	neg	r24
    1a20:	9f 4f       	sbci	r25, 0xFF	; 255
    1a22:	08 95       	ret

00001a24 <atol>:
    1a24:	1f 93       	push	r17
    1a26:	fc 01       	movw	r30, r24
    1a28:	99 27       	eor	r25, r25
    1a2a:	88 27       	eor	r24, r24
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	e8 94       	clt
    1a30:	11 91       	ld	r17, Z+
    1a32:	10 32       	cpi	r17, 0x20	; 32
    1a34:	e9 f3       	breq	.-6      	; 0x1a30 <atol+0xc>
    1a36:	19 30       	cpi	r17, 0x09	; 9
    1a38:	10 f0       	brcs	.+4      	; 0x1a3e <atol+0x1a>
    1a3a:	1e 30       	cpi	r17, 0x0E	; 14
    1a3c:	c8 f3       	brcs	.-14     	; 0x1a30 <atol+0xc>
    1a3e:	1b 32       	cpi	r17, 0x2B	; 43
    1a40:	51 f0       	breq	.+20     	; 0x1a56 <atol+0x32>
    1a42:	1d 32       	cpi	r17, 0x2D	; 45
    1a44:	49 f4       	brne	.+18     	; 0x1a58 <atol+0x34>
    1a46:	68 94       	set
    1a48:	06 c0       	rjmp	.+12     	; 0x1a56 <atol+0x32>
    1a4a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <__mulsi_const_10>
    1a4e:	61 0f       	add	r22, r17
    1a50:	71 1d       	adc	r23, r1
    1a52:	81 1d       	adc	r24, r1
    1a54:	91 1d       	adc	r25, r1
    1a56:	11 91       	ld	r17, Z+
    1a58:	10 53       	subi	r17, 0x30	; 48
    1a5a:	1a 30       	cpi	r17, 0x0A	; 10
    1a5c:	b0 f3       	brcs	.-20     	; 0x1a4a <atol+0x26>
    1a5e:	3e f4       	brtc	.+14     	; 0x1a6e <atol+0x4a>
    1a60:	90 95       	com	r25
    1a62:	80 95       	com	r24
    1a64:	70 95       	com	r23
    1a66:	61 95       	neg	r22
    1a68:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	1f 91       	pop	r17
    1a70:	08 95       	ret

00001a72 <strcat>:
    1a72:	fb 01       	movw	r30, r22
    1a74:	dc 01       	movw	r26, r24
    1a76:	0d 90       	ld	r0, X+
    1a78:	00 20       	and	r0, r0
    1a7a:	e9 f7       	brne	.-6      	; 0x1a76 <strcat+0x4>
    1a7c:	11 97       	sbiw	r26, 0x01	; 1
    1a7e:	01 90       	ld	r0, Z+
    1a80:	0d 92       	st	X+, r0
    1a82:	00 20       	and	r0, r0
    1a84:	e1 f7       	brne	.-8      	; 0x1a7e <strcat+0xc>
    1a86:	08 95       	ret

00001a88 <strcmp>:
    1a88:	fb 01       	movw	r30, r22
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	8d 91       	ld	r24, X+
    1a8e:	01 90       	ld	r0, Z+
    1a90:	80 19       	sub	r24, r0
    1a92:	01 10       	cpse	r0, r1
    1a94:	d9 f3       	breq	.-10     	; 0x1a8c <strcmp+0x4>
    1a96:	99 0b       	sbc	r25, r25
    1a98:	08 95       	ret

00001a9a <strncmp>:
    1a9a:	fb 01       	movw	r30, r22
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	41 50       	subi	r20, 0x01	; 1
    1aa0:	50 40       	sbci	r21, 0x00	; 0
    1aa2:	30 f0       	brcs	.+12     	; 0x1ab0 <strncmp+0x16>
    1aa4:	8d 91       	ld	r24, X+
    1aa6:	01 90       	ld	r0, Z+
    1aa8:	80 19       	sub	r24, r0
    1aaa:	19 f4       	brne	.+6      	; 0x1ab2 <strncmp+0x18>
    1aac:	00 20       	and	r0, r0
    1aae:	b9 f7       	brne	.-18     	; 0x1a9e <strncmp+0x4>
    1ab0:	88 1b       	sub	r24, r24
    1ab2:	99 0b       	sbc	r25, r25
    1ab4:	08 95       	ret

00001ab6 <itoa>:
    1ab6:	fb 01       	movw	r30, r22
    1ab8:	9f 01       	movw	r18, r30
    1aba:	e8 94       	clt
    1abc:	42 30       	cpi	r20, 0x02	; 2
    1abe:	c4 f0       	brlt	.+48     	; 0x1af0 <itoa+0x3a>
    1ac0:	45 32       	cpi	r20, 0x25	; 37
    1ac2:	b4 f4       	brge	.+44     	; 0x1af0 <itoa+0x3a>
    1ac4:	4a 30       	cpi	r20, 0x0A	; 10
    1ac6:	29 f4       	brne	.+10     	; 0x1ad2 <itoa+0x1c>
    1ac8:	97 fb       	bst	r25, 7
    1aca:	1e f4       	brtc	.+6      	; 0x1ad2 <itoa+0x1c>
    1acc:	90 95       	com	r25
    1ace:	81 95       	neg	r24
    1ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad2:	64 2f       	mov	r22, r20
    1ad4:	77 27       	eor	r23, r23
    1ad6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__udivmodhi4>
    1ada:	80 5d       	subi	r24, 0xD0	; 208
    1adc:	8a 33       	cpi	r24, 0x3A	; 58
    1ade:	0c f0       	brlt	.+2      	; 0x1ae2 <itoa+0x2c>
    1ae0:	89 5d       	subi	r24, 0xD9	; 217
    1ae2:	81 93       	st	Z+, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	a1 f7       	brne	.-24     	; 0x1ad2 <itoa+0x1c>
    1aea:	16 f4       	brtc	.+4      	; 0x1af0 <itoa+0x3a>
    1aec:	5d e2       	ldi	r21, 0x2D	; 45
    1aee:	51 93       	st	Z+, r21
    1af0:	10 82       	st	Z, r1
    1af2:	c9 01       	movw	r24, r18
    1af4:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <strrev>

00001af8 <ltoa>:
    1af8:	fa 01       	movw	r30, r20
    1afa:	cf 93       	push	r28
    1afc:	ff 93       	push	r31
    1afe:	ef 93       	push	r30
    1b00:	22 30       	cpi	r18, 0x02	; 2
    1b02:	44 f1       	brlt	.+80     	; 0x1b54 <ltoa+0x5c>
    1b04:	25 32       	cpi	r18, 0x25	; 37
    1b06:	34 f5       	brge	.+76     	; 0x1b54 <ltoa+0x5c>
    1b08:	c2 2f       	mov	r28, r18
    1b0a:	e8 94       	clt
    1b0c:	ca 30       	cpi	r28, 0x0A	; 10
    1b0e:	49 f4       	brne	.+18     	; 0x1b22 <ltoa+0x2a>
    1b10:	97 fb       	bst	r25, 7
    1b12:	3e f4       	brtc	.+14     	; 0x1b22 <ltoa+0x2a>
    1b14:	90 95       	com	r25
    1b16:	80 95       	com	r24
    1b18:	70 95       	com	r23
    1b1a:	61 95       	neg	r22
    1b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b20:	9f 4f       	sbci	r25, 0xFF	; 255
    1b22:	2c 2f       	mov	r18, r28
    1b24:	33 27       	eor	r19, r19
    1b26:	44 27       	eor	r20, r20
    1b28:	55 27       	eor	r21, r21
    1b2a:	ff 93       	push	r31
    1b2c:	ef 93       	push	r30
    1b2e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__udivmodsi4>
    1b32:	ef 91       	pop	r30
    1b34:	ff 91       	pop	r31
    1b36:	60 5d       	subi	r22, 0xD0	; 208
    1b38:	6a 33       	cpi	r22, 0x3A	; 58
    1b3a:	0c f0       	brlt	.+2      	; 0x1b3e <ltoa+0x46>
    1b3c:	69 5d       	subi	r22, 0xD9	; 217
    1b3e:	61 93       	st	Z+, r22
    1b40:	b9 01       	movw	r22, r18
    1b42:	ca 01       	movw	r24, r20
    1b44:	60 50       	subi	r22, 0x00	; 0
    1b46:	70 40       	sbci	r23, 0x00	; 0
    1b48:	80 40       	sbci	r24, 0x00	; 0
    1b4a:	90 40       	sbci	r25, 0x00	; 0
    1b4c:	51 f7       	brne	.-44     	; 0x1b22 <ltoa+0x2a>
    1b4e:	16 f4       	brtc	.+4      	; 0x1b54 <ltoa+0x5c>
    1b50:	cd e2       	ldi	r28, 0x2D	; 45
    1b52:	c1 93       	st	Z+, r28
    1b54:	10 82       	st	Z, r1
    1b56:	8f 91       	pop	r24
    1b58:	9f 91       	pop	r25
    1b5a:	cf 91       	pop	r28
    1b5c:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <strrev>

00001b60 <__mulsi_const_10>:
    1b60:	59 2f       	mov	r21, r25
    1b62:	48 2f       	mov	r20, r24
    1b64:	37 2f       	mov	r19, r23
    1b66:	26 2f       	mov	r18, r22
    1b68:	66 0f       	add	r22, r22
    1b6a:	77 1f       	adc	r23, r23
    1b6c:	88 1f       	adc	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	66 0f       	add	r22, r22
    1b72:	77 1f       	adc	r23, r23
    1b74:	88 1f       	adc	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	62 0f       	add	r22, r18
    1b7a:	73 1f       	adc	r23, r19
    1b7c:	84 1f       	adc	r24, r20
    1b7e:	95 1f       	adc	r25, r21
    1b80:	66 0f       	add	r22, r22
    1b82:	77 1f       	adc	r23, r23
    1b84:	88 1f       	adc	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	08 95       	ret

00001b8a <__mulhi_const_10>:
    1b8a:	7a e0       	ldi	r23, 0x0A	; 10
    1b8c:	97 9f       	mul	r25, r23
    1b8e:	90 2d       	mov	r25, r0
    1b90:	87 9f       	mul	r24, r23
    1b92:	80 2d       	mov	r24, r0
    1b94:	91 0d       	add	r25, r1
    1b96:	11 24       	eor	r1, r1
    1b98:	08 95       	ret

00001b9a <strrev>:
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	67 2f       	mov	r22, r23
    1ba0:	71 91       	ld	r23, Z+
    1ba2:	77 23       	and	r23, r23
    1ba4:	e1 f7       	brne	.-8      	; 0x1b9e <strrev+0x4>
    1ba6:	32 97       	sbiw	r30, 0x02	; 2
    1ba8:	04 c0       	rjmp	.+8      	; 0x1bb2 <strrev+0x18>
    1baa:	7c 91       	ld	r23, X
    1bac:	6d 93       	st	X+, r22
    1bae:	70 83       	st	Z, r23
    1bb0:	62 91       	ld	r22, -Z
    1bb2:	ae 17       	cp	r26, r30
    1bb4:	bf 07       	cpc	r27, r31
    1bb6:	c8 f3       	brcs	.-14     	; 0x1baa <strrev+0x10>
    1bb8:	08 95       	ret

00001bba <__prologue_saves__>:
    1bba:	2f 92       	push	r2
    1bbc:	3f 92       	push	r3
    1bbe:	4f 92       	push	r4
    1bc0:	5f 92       	push	r5
    1bc2:	6f 92       	push	r6
    1bc4:	7f 92       	push	r7
    1bc6:	8f 92       	push	r8
    1bc8:	9f 92       	push	r9
    1bca:	af 92       	push	r10
    1bcc:	bf 92       	push	r11
    1bce:	cf 92       	push	r12
    1bd0:	df 92       	push	r13
    1bd2:	ef 92       	push	r14
    1bd4:	ff 92       	push	r15
    1bd6:	0f 93       	push	r16
    1bd8:	1f 93       	push	r17
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	ca 1b       	sub	r28, r26
    1be4:	db 0b       	sbc	r29, r27
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	09 94       	ijmp

00001bf2 <__epilogue_restores__>:
    1bf2:	2a 88       	ldd	r2, Y+18	; 0x12
    1bf4:	39 88       	ldd	r3, Y+17	; 0x11
    1bf6:	48 88       	ldd	r4, Y+16	; 0x10
    1bf8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bfa:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bfc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bfe:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c00:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c02:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c04:	b9 84       	ldd	r11, Y+9	; 0x09
    1c06:	c8 84       	ldd	r12, Y+8	; 0x08
    1c08:	df 80       	ldd	r13, Y+7	; 0x07
    1c0a:	ee 80       	ldd	r14, Y+6	; 0x06
    1c0c:	fd 80       	ldd	r15, Y+5	; 0x05
    1c0e:	0c 81       	ldd	r16, Y+4	; 0x04
    1c10:	1b 81       	ldd	r17, Y+3	; 0x03
    1c12:	aa 81       	ldd	r26, Y+2	; 0x02
    1c14:	b9 81       	ldd	r27, Y+1	; 0x01
    1c16:	ce 0f       	add	r28, r30
    1c18:	d1 1d       	adc	r29, r1
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	ed 01       	movw	r28, r26
    1c26:	08 95       	ret

00001c28 <_exit>:
    1c28:	f8 94       	cli

00001c2a <__stop_program>:
    1c2a:	ff cf       	rjmp	.-2      	; 0x1c2a <__stop_program>
