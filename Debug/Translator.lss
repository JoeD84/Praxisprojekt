
Translator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000668  00800100  00001c38  00001ccc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000070  00800768  00800768  00002334  2**0
                  ALLOC
  3 .stab         00003d50  00000000  00000000  00002334  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016df  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__ctors_end>
       4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
       8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
       c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      10:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      14:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      18:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      1c:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__vector_7>
      20:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_8>
      24:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      28:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      2c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      30:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      34:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      38:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      3c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      40:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      44:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      48:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_18>
      4c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      50:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      54:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      58:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      5c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      60:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      64:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      68:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      6c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      70:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      74:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      78:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>

0000007c <progmem_Befehl>:
      7c:	49 6e 69 74 0a 00 00 00 00 00 00 00 00 00 00 00     Init............
      8c:	00 00 00 40 30 31 00 00 00 00 00 00 00 00 00 00     ...@01..........
	...
      b4:	00 00 00 30 0d 0a 00 00 00 00 00 00 00 00 00 00     ...0............
	...
      dc:	00 00 00 48 6f 6d 65 0a 00 00 00 00 00 00 00 00     ...Home.........
      ec:	00 00 00 00 00 00 40 30 31 00 00 00 00 00 00 00     ......@01.......
	...
     118:	00 00 30 0d 0a 00 00 00 00 00 00 00 00 00 00 00     ..0.............
	...

00000142 <__ctors_end>:
     142:	11 24       	eor	r1, r1
     144:	1f be       	out	0x3f, r1	; 63
     146:	cf ef       	ldi	r28, 0xFF	; 255
     148:	d8 e0       	ldi	r29, 0x08	; 8
     14a:	de bf       	out	0x3e, r29	; 62
     14c:	cd bf       	out	0x3d, r28	; 61

0000014e <__do_copy_data>:
     14e:	17 e0       	ldi	r17, 0x07	; 7
     150:	a0 e0       	ldi	r26, 0x00	; 0
     152:	b1 e0       	ldi	r27, 0x01	; 1
     154:	e8 e3       	ldi	r30, 0x38	; 56
     156:	fc e1       	ldi	r31, 0x1C	; 28
     158:	02 c0       	rjmp	.+4      	; 0x15e <.do_copy_data_start>

0000015a <.do_copy_data_loop>:
     15a:	05 90       	lpm	r0, Z+
     15c:	0d 92       	st	X+, r0

0000015e <.do_copy_data_start>:
     15e:	a8 36       	cpi	r26, 0x68	; 104
     160:	b1 07       	cpc	r27, r17
     162:	d9 f7       	brne	.-10     	; 0x15a <.do_copy_data_loop>

00000164 <__do_clear_bss>:
     164:	17 e0       	ldi	r17, 0x07	; 7
     166:	a8 e6       	ldi	r26, 0x68	; 104
     168:	b7 e0       	ldi	r27, 0x07	; 7
     16a:	01 c0       	rjmp	.+2      	; 0x16e <.do_clear_bss_start>

0000016c <.do_clear_bss_loop>:
     16c:	1d 92       	st	X+, r1

0000016e <.do_clear_bss_start>:
     16e:	a8 3d       	cpi	r26, 0xD8	; 216
     170:	b1 07       	cpc	r27, r17
     172:	e1 f7       	brne	.-8      	; 0x16c <.do_clear_bss_loop>
     174:	0e 94 e5 09 	call	0x13ca	; 0x13ca <main>
     178:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <_exit>

0000017c <__bad_interrupt>:
     17c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000180 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
     180:	28 2f       	mov	r18, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     182:	66 23       	and	r22, r22
     184:	11 f0       	breq	.+4      	; 0x18a <lcd_write+0xa>
       lcd_rs_high();
     186:	46 9a       	sbi	0x08, 6	; 8
     188:	01 c0       	rjmp	.+2      	; 0x18c <lcd_write+0xc>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     18a:	46 98       	cbi	0x08, 6	; 8
    }
    lcd_rw_low();
     18c:	45 98       	cbi	0x08, 5	; 8

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
     18e:	87 b1       	in	r24, 0x07	; 7
     190:	8f 60       	ori	r24, 0x0F	; 15
     192:	87 b9       	out	0x07, r24	; 7

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
     194:	98 b1       	in	r25, 0x08	; 8
     196:	90 7f       	andi	r25, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
     198:	82 2f       	mov	r24, r18
     19a:	82 95       	swap	r24
     19c:	8f 70       	andi	r24, 0x0F	; 15
     19e:	89 2b       	or	r24, r25
     1a0:	88 b9       	out	0x08, r24	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     1a2:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_write+0x26>
    lcd_e_low();
     1a6:	44 98       	cbi	0x08, 4	; 8
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
     1a8:	2f 70       	andi	r18, 0x0F	; 15
     1aa:	29 2b       	or	r18, r25
     1ac:	28 b9       	out	0x08, r18	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     1ae:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_write+0x32>
    lcd_e_low();
     1b2:	44 98       	cbi	0x08, 4	; 8
        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
     1b4:	9f 60       	ori	r25, 0x0F	; 15
     1b6:	98 b9       	out	0x08, r25	; 8
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
     1b8:	08 95       	ret

000001ba <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
     1ba:	88 23       	and	r24, r24
     1bc:	11 f0       	breq	.+4      	; 0x1c2 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
     1be:	46 9a       	sbi	0x08, 6	; 8
     1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     1c2:	46 98       	cbi	0x08, 6	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
     1c4:	45 9a       	sbi	0x08, 5	; 8
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
     1c6:	87 b1       	in	r24, 0x07	; 7
     1c8:	80 7f       	andi	r24, 0xF0	; 240
     1ca:	87 b9       	out	0x07, r24	; 7
        
        lcd_e_high();
     1cc:	44 9a       	sbi	0x08, 4	; 8
        lcd_e_delay();        
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_read+0x16>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
     1d0:	96 b1       	in	r25, 0x06	; 6
        lcd_e_low();
     1d2:	44 98       	cbi	0x08, 4	; 8
        
        lcd_e_delay();                       /* Enable 500ns low       */
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_read+0x1c>
        
        lcd_e_high();
     1d6:	44 9a       	sbi	0x08, 4	; 8
        lcd_e_delay();
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_read+0x20>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
     1da:	86 b1       	in	r24, 0x06	; 6
     1dc:	8f 70       	andi	r24, 0x0F	; 15
     1de:	92 95       	swap	r25
     1e0:	90 7f       	andi	r25, 0xF0	; 240
        lcd_e_low();
     1e2:	44 98       	cbi	0x08, 4	; 8
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
     1e4:	89 2b       	or	r24, r25
     1e6:	08 95       	ret

000001e8 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_read>
     1ee:	87 fd       	sbrc	r24, 7
     1f0:	fb cf       	rjmp	.-10     	; 0x1e8 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_read>
    
}/* lcd_waitbusy */
     200:	08 95       	ret

00000202 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     202:	1f 93       	push	r17
     204:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     206:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_waitbusy>
    lcd_write(cmd,0);
     20a:	81 2f       	mov	r24, r17
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_write>
}
     212:	1f 91       	pop	r17
     214:	08 95       	ret

00000216 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     216:	1f 93       	push	r17
     218:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     21a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_waitbusy>
    lcd_write(data,1);
     21e:	81 2f       	mov	r24, r17
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_write>
}
     226:	1f 91       	pop	r17
     228:	08 95       	ret

0000022a <lcd_gotoxy>:
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
     22a:	66 23       	and	r22, r22
     22c:	11 f4       	brne	.+4      	; 0x232 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     22e:	80 58       	subi	r24, 0x80	; 128
     230:	09 c0       	rjmp	.+18     	; 0x244 <lcd_gotoxy+0x1a>
    else if ( y==1)
     232:	61 30       	cpi	r22, 0x01	; 1
     234:	11 f4       	brne	.+4      	; 0x23a <lcd_gotoxy+0x10>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     236:	80 54       	subi	r24, 0x40	; 64
     238:	05 c0       	rjmp	.+10     	; 0x244 <lcd_gotoxy+0x1a>
    else if ( y==2)
     23a:	62 30       	cpi	r22, 0x02	; 2
     23c:	11 f4       	brne	.+4      	; 0x242 <lcd_gotoxy+0x18>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
     23e:	8c 56       	subi	r24, 0x6C	; 108
     240:	01 c0       	rjmp	.+2      	; 0x244 <lcd_gotoxy+0x1a>
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
     242:	8c 52       	subi	r24, 0x2C	; 44
     244:	0e 94 01 01 	call	0x202	; 0x202 <lcd_command>
     248:	08 95       	ret

0000024a <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     24a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_waitbusy>
}
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	08 95       	ret

00000252 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 01 01 	call	0x202	; 0x202 <lcd_command>
}
     258:	08 95       	ret

0000025a <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	0e 94 01 01 	call	0x202	; 0x202 <lcd_command>
}
     260:	08 95       	ret

00000262 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     262:	1f 93       	push	r17
     264:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     266:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_waitbusy>
     26a:	98 2f       	mov	r25, r24
    if (c=='\n')
     26c:	1a 30       	cpi	r17, 0x0A	; 10
     26e:	99 f4       	brne	.+38     	; 0x296 <lcd_putc+0x34>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
     270:	84 31       	cpi	r24, 0x14	; 20
     272:	10 f4       	brcc	.+4      	; 0x278 <lcd_putc+0x16>
     274:	80 e4       	ldi	r24, 0x40	; 64
     276:	0b c0       	rjmp	.+22     	; 0x28e <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
     278:	80 54       	subi	r24, 0x40	; 64
     27a:	84 31       	cpi	r24, 0x14	; 20
     27c:	10 f4       	brcc	.+4      	; 0x282 <lcd_putc+0x20>
     27e:	84 e1       	ldi	r24, 0x14	; 20
     280:	06 c0       	rjmp	.+12     	; 0x28e <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
     282:	94 51       	subi	r25, 0x14	; 20
     284:	9c 32       	cpi	r25, 0x2C	; 44
     286:	10 f0       	brcs	.+4      	; 0x28c <lcd_putc+0x2a>
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	01 c0       	rjmp	.+2      	; 0x28e <lcd_putc+0x2c>
     28c:	84 e5       	ldi	r24, 0x54	; 84
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     28e:	80 58       	subi	r24, 0x80	; 128
     290:	0e 94 01 01 	call	0x202	; 0x202 <lcd_command>
     294:	18 c0       	rjmp	.+48     	; 0x2c6 <lcd_putc+0x64>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==4
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
     296:	83 31       	cpi	r24, 0x13	; 19
     298:	11 f4       	brne	.+4      	; 0x29e <lcd_putc+0x3c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
     29a:	80 ec       	ldi	r24, 0xC0	; 192
     29c:	0b c0       	rjmp	.+22     	; 0x2b4 <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
     29e:	83 35       	cpi	r24, 0x53	; 83
     2a0:	11 f4       	brne	.+4      	; 0x2a6 <lcd_putc+0x44>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
     2a2:	84 e9       	ldi	r24, 0x94	; 148
     2a4:	07 c0       	rjmp	.+14     	; 0x2b4 <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
     2a6:	87 32       	cpi	r24, 0x27	; 39
     2a8:	11 f4       	brne	.+4      	; 0x2ae <lcd_putc+0x4c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
     2aa:	84 ed       	ldi	r24, 0xD4	; 212
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
     2ae:	87 36       	cpi	r24, 0x67	; 103
     2b0:	21 f4       	brne	.+8      	; 0x2ba <lcd_putc+0x58>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
     2b2:	80 e8       	ldi	r24, 0x80	; 128
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_write>
        }
#endif
        lcd_waitbusy();
     2ba:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_waitbusy>
#endif
        lcd_write(c, 1);
     2be:	81 2f       	mov	r24, r17
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_write>
    }

}/* lcd_putc */
     2c6:	1f 91       	pop	r17
     2c8:	08 95       	ret

000002ca <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	ec 01       	movw	r28, r24
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
     2d2:	0e 94 31 01 	call	0x262	; 0x262 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     2d6:	89 91       	ld	r24, Y+
     2d8:	88 23       	and	r24, r24
     2da:	d9 f7       	brne	.-10     	; 0x2d2 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	ec 01       	movw	r28, r24
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
     2ea:	0e 94 31 01 	call	0x262	; 0x262 <lcd_putc>
     2ee:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     2f0:	21 96       	adiw	r28, 0x01	; 1
     2f2:	84 91       	lpm	r24, Z+
     2f4:	88 23       	and	r24, r24
     2f6:	c9 f7       	brne	.-14     	; 0x2ea <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     2fe:	1f 93       	push	r17
     300:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
     302:	87 b1       	in	r24, 0x07	; 7
     304:	8f 60       	ori	r24, 0x0F	; 15
     306:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     308:	3e 9a       	sbi	0x07, 6	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     30a:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     30c:	3c 9a       	sbi	0x07, 4	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     30e:	80 e8       	ldi	r24, 0x80	; 128
     310:	9e e3       	ldi	r25, 0x3E	; 62
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <lcd_init+0x14>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     316:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     318:	40 9a       	sbi	0x08, 0	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     31a:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     31c:	00 c0       	rjmp	.+0      	; 0x31e <lcd_init+0x20>
    lcd_e_low();
     31e:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     320:	80 e8       	ldi	r24, 0x80	; 128
     322:	93 e1       	ldi	r25, 0x13	; 19
     324:	01 97       	sbiw	r24, 0x01	; 1
     326:	f1 f7       	brne	.-4      	; 0x324 <lcd_init+0x26>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     328:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     32a:	00 c0       	rjmp	.+0      	; 0x32c <lcd_init+0x2e>
    lcd_e_low();
     32c:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     32e:	80 e4       	ldi	r24, 0x40	; 64
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	fc 01       	movw	r30, r24
     334:	31 97       	sbiw	r30, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <lcd_init+0x36>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     338:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     33a:	00 c0       	rjmp	.+0      	; 0x33c <lcd_init+0x3e>
    lcd_e_low();
     33c:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     33e:	fc 01       	movw	r30, r24
     340:	31 97       	sbiw	r30, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     344:	40 98       	cbi	0x08, 0	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     346:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     348:	00 c0       	rjmp	.+0      	; 0x34a <lcd_init+0x4c>
    lcd_e_low();
     34a:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <lcd_init+0x4e>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     350:	88 e2       	ldi	r24, 0x28	; 40
     352:	0e 94 01 01 	call	0x202	; 0x202 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     356:	88 e0       	ldi	r24, 0x08	; 8
     358:	0e 94 01 01 	call	0x202	; 0x202 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     35c:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     360:	86 e0       	ldi	r24, 0x06	; 6
     362:	0e 94 01 01 	call	0x202	; 0x202 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     366:	81 2f       	mov	r24, r17
     368:	0e 94 01 01 	call	0x202	; 0x202 <lcd_command>

}/* lcd_init */
     36c:	1f 91       	pop	r17
     36e:	08 95       	ret

00000370 <__vector_18>:
 
volatile uint8_t key_rpt;                                  // key long press and repeat
 
 
ISR( TIMER0_OVF_vect )                            // every 10ms
{
     370:	1f 92       	push	r1
     372:	0f 92       	push	r0
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	0f 92       	push	r0
     378:	11 24       	eor	r1, r1
     37a:	2f 93       	push	r18
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
  static uint8_t ct0, ct1, rpt;
  uint8_t i;
 
  TCNT0 = (uint8_t)(int16_t)-(F_CPU / 1024 * 10e-3 + 0.5);  // preload for 10ms
     380:	82 eb       	ldi	r24, 0xB2	; 178
     382:	86 bd       	out	0x26, r24	; 38
 
  i = key_state ^ ~KEY_PIN;                       // key changed ?
     384:	80 91 d7 07 	lds	r24, 0x07D7
     388:	20 b1       	in	r18, 0x00	; 0
     38a:	20 95       	com	r18
     38c:	28 27       	eor	r18, r24
  ct0 = ~( ct0 & i );                             // reset or count ct0
     38e:	80 91 70 07 	lds	r24, 0x0770
     392:	82 23       	and	r24, r18
     394:	80 95       	com	r24
     396:	80 93 70 07 	sts	0x0770, r24
  ct1 = ct0 ^ (ct1 & i);                          // reset or count ct1
     39a:	90 91 6f 07 	lds	r25, 0x076F
     39e:	92 23       	and	r25, r18
     3a0:	98 27       	eor	r25, r24
     3a2:	90 93 6f 07 	sts	0x076F, r25
  i &= ct0 & ct1;                                 // count until roll over ?
     3a6:	82 23       	and	r24, r18
     3a8:	89 23       	and	r24, r25
  key_state ^= i;                                 // then toggle debounced state
     3aa:	90 91 d7 07 	lds	r25, 0x07D7
     3ae:	98 27       	eor	r25, r24
     3b0:	90 93 d7 07 	sts	0x07D7, r25
  key_press |= key_state & i;                     // 0->1: key press detect
     3b4:	20 91 d6 07 	lds	r18, 0x07D6
     3b8:	90 91 d7 07 	lds	r25, 0x07D7
     3bc:	89 23       	and	r24, r25
     3be:	82 2b       	or	r24, r18
     3c0:	80 93 d6 07 	sts	0x07D6, r24
 
  if( (key_state & REPEAT_MASK) == 0 )            // check repeat function
     3c4:	80 91 d7 07 	lds	r24, 0x07D7
     3c8:	87 78       	andi	r24, 0x87	; 135
     3ca:	19 f4       	brne	.+6      	; 0x3d2 <__vector_18+0x62>
     rpt = REPEAT_START;                          // start delay
     3cc:	82 e3       	ldi	r24, 0x32	; 50
     3ce:	80 93 6e 07 	sts	0x076E, r24
  if( --rpt == 0 ){
     3d2:	80 91 6e 07 	lds	r24, 0x076E
     3d6:	81 50       	subi	r24, 0x01	; 1
     3d8:	80 93 6e 07 	sts	0x076E, r24
     3dc:	88 23       	and	r24, r24
     3de:	59 f4       	brne	.+22     	; 0x3f6 <__vector_18+0x86>
    rpt = REPEAT_NEXT;                            // repeat delay
     3e0:	84 e1       	ldi	r24, 0x14	; 20
     3e2:	80 93 6e 07 	sts	0x076E, r24
    key_rpt |= key_state & REPEAT_MASK;
     3e6:	90 91 71 07 	lds	r25, 0x0771
     3ea:	80 91 d7 07 	lds	r24, 0x07D7
     3ee:	87 78       	andi	r24, 0x87	; 135
     3f0:	89 2b       	or	r24, r25
     3f2:	80 93 71 07 	sts	0x0771, r24
  }
}
     3f6:	9f 91       	pop	r25
     3f8:	8f 91       	pop	r24
     3fa:	2f 91       	pop	r18
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <get_key_press>:
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     406:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     408:	90 91 d6 07 	lds	r25, 0x07D6
     40c:	89 23       	and	r24, r25
  key_press ^= key_mask;                          // clear key(s)
     40e:	90 91 d6 07 	lds	r25, 0x07D6
     412:	98 27       	eor	r25, r24
     414:	90 93 d6 07 	sts	0x07D6, r25
  sei();
     418:	78 94       	sei
  return key_mask;
}
     41a:	08 95       	ret

0000041c <get_key_rpt>:
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     41c:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
     41e:	90 91 71 07 	lds	r25, 0x0771
     422:	89 23       	and	r24, r25
  key_rpt ^= key_mask;                            // clear key(s)
     424:	90 91 71 07 	lds	r25, 0x0771
     428:	98 27       	eor	r25, r24
     42a:	90 93 71 07 	sts	0x0771, r25
  sei();
     42e:	78 94       	sei
  return key_mask;
}
     430:	08 95       	ret

00000432 <get_key_short>:
 
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_short( uint8_t key_mask )
{
  cli();                                          // read key state and key press atomic !
     432:	f8 94       	cli
  return get_key_press( ~key_state & key_mask );
     434:	90 91 d7 07 	lds	r25, 0x07D7
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     438:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     43a:	20 91 d6 07 	lds	r18, 0x07D6
     43e:	90 95       	com	r25
     440:	89 23       	and	r24, r25
     442:	82 23       	and	r24, r18
  key_press ^= key_mask;                          // clear key(s)
     444:	90 91 d6 07 	lds	r25, 0x07D6
     448:	98 27       	eor	r25, r24
     44a:	90 93 d6 07 	sts	0x07D6, r25
  sei();
     44e:	78 94       	sei
//
uint8_t get_key_short( uint8_t key_mask )
{
  cli();                                          // read key state and key press atomic !
  return get_key_press( ~key_state & key_mask );
}
     450:	08 95       	ret

00000452 <get_key_long>:
 
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_long( uint8_t key_mask )
{
     452:	98 2f       	mov	r25, r24
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     454:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
     456:	80 91 71 07 	lds	r24, 0x0771
     45a:	98 23       	and	r25, r24
  key_rpt ^= key_mask;                            // clear key(s)
     45c:	80 91 71 07 	lds	r24, 0x0771
     460:	89 27       	eor	r24, r25
     462:	80 93 71 07 	sts	0x0771, r24
  sei();
     466:	78 94       	sei
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     468:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     46a:	80 91 d6 07 	lds	r24, 0x07D6
     46e:	89 23       	and	r24, r25
  key_press ^= key_mask;                          // clear key(s)
     470:	90 91 d6 07 	lds	r25, 0x07D6
     474:	98 27       	eor	r25, r24
     476:	90 93 d6 07 	sts	0x07D6, r25
  sei();
     47a:	78 94       	sei
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_long( uint8_t key_mask )
{
  return get_key_press( get_key_rpt( key_mask ));
}
     47c:	08 95       	ret

0000047e <led_spielerein>:
	_delay_ms(500);
	lcd_my_type("Be a Honey Bee!\n");
	_delay_ms(600);
	lcd_clrscr();
}
void 	led_spielerein		(void) {
     47e:	41 e0       	ldi	r20, 0x01	; 1
     480:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     482:	a8 ec       	ldi	r26, 0xC8	; 200
     484:	b0 e0       	ldi	r27, 0x00	; 0

	for (int i = 1; i < 9; i++) // LEDs durchlaufen
	{
		_delay_ms(80); // Eine Sekunde +/-1/10000 Sekunde warten...
		LED_PORT &= ~((1 << i)); // l�scht Bit an PortB - LED an
     486:	61 e0       	ldi	r22, 0x01	; 1
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	21 c0       	rjmp	.+66     	; 0x4ce <led_spielerein+0x50>
     48c:	fd 01       	movw	r30, r26
     48e:	31 97       	sbiw	r30, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <led_spielerein+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     492:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     494:	d9 f7       	brne	.-10     	; 0x48c <led_spielerein+0xe>
     496:	25 b1       	in	r18, 0x05	; 5
     498:	cb 01       	movw	r24, r22
     49a:	04 2e       	mov	r0, r20
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <led_spielerein+0x24>
     49e:	88 0f       	add	r24, r24
     4a0:	99 1f       	adc	r25, r25
     4a2:	0a 94       	dec	r0
     4a4:	e2 f7       	brpl	.-8      	; 0x49e <led_spielerein+0x20>
     4a6:	80 95       	com	r24
     4a8:	82 23       	and	r24, r18
     4aa:	85 b9       	out	0x05, r24	; 5
		LED_PORT |= ((1 << (i - 1))); // setzt  Bit an PortB - LED aus
     4ac:	25 b1       	in	r18, 0x05	; 5
     4ae:	41 50       	subi	r20, 0x01	; 1
     4b0:	50 40       	sbci	r21, 0x00	; 0
     4b2:	cb 01       	movw	r24, r22
     4b4:	04 2e       	mov	r0, r20
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <led_spielerein+0x3e>
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	0a 94       	dec	r0
     4be:	e2 f7       	brpl	.-8      	; 0x4b8 <led_spielerein+0x3a>
     4c0:	28 2b       	or	r18, r24
     4c2:	25 b9       	out	0x05, r18	; 5
	_delay_ms(600);
	lcd_clrscr();
}
void 	led_spielerein		(void) {

	for (int i = 1; i < 9; i++) // LEDs durchlaufen
     4c4:	4e 5f       	subi	r20, 0xFE	; 254
     4c6:	5f 4f       	sbci	r21, 0xFF	; 255
     4c8:	49 30       	cpi	r20, 0x09	; 9
     4ca:	51 05       	cpc	r21, r1
     4cc:	19 f0       	breq	.+6      	; 0x4d4 <led_spielerein+0x56>
     4ce:	80 e2       	ldi	r24, 0x20	; 32
     4d0:	93 e0       	ldi	r25, 0x03	; 3
     4d2:	dc cf       	rjmp	.-72     	; 0x48c <led_spielerein+0xe>
     4d4:	08 95       	ret

000004d6 <debounce_init>:
}
void 	debounce_init		(void) {
	///////////////// Debounce Stuff ////////////////////

	// Configure debouncing routines
	KEY_DDR &= ~ALL_KEYS; // configure key port for input
     4d6:	81 b1       	in	r24, 0x01	; 1
     4d8:	11 b8       	out	0x01, r1	; 1
	KEY_PORT |= ALL_KEYS; // and turn on pull up resistors
     4da:	82 b1       	in	r24, 0x02	; 2
     4dc:	8f ef       	ldi	r24, 0xFF	; 255
     4de:	82 b9       	out	0x02, r24	; 2

	TCCR0B = (1 << CS02) | (1 << CS00); // divide by 1024
     4e0:	85 e0       	ldi	r24, 0x05	; 5
     4e2:	85 bd       	out	0x25, r24	; 37
	TCNT0 = (uint8_t) (int16_t) -(F_CPU / 1024 * 10 * 10e-3 + 0.5); // preload for 10ms
     4e4:	83 ef       	ldi	r24, 0xF3	; 243
     4e6:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= 1 << TOIE0; // enable timer interrupt
     4e8:	ee e6       	ldi	r30, 0x6E	; 110
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	80 81       	ld	r24, Z
     4ee:	81 60       	ori	r24, 0x01	; 1
     4f0:	80 83       	st	Z, r24

	sei();
     4f2:	78 94       	sei
	///////////////// Debounce Stuff ////////////////////
}
     4f4:	08 95       	ret

000004f6 <led_lauflicht>:
void 	led_lauflicht		(void) {
	uint8_t i = LED_PORT;
     4f6:	85 b1       	in	r24, 0x05	; 5
	i = (i & 0x07) | ((i << 1) & 0xF0);
     4f8:	98 2f       	mov	r25, r24
     4fa:	99 0f       	add	r25, r25
     4fc:	90 7f       	andi	r25, 0xF0	; 240
     4fe:	87 70       	andi	r24, 0x07	; 7
     500:	98 2b       	or	r25, r24
	if (i < 0xF0)
     502:	90 3f       	cpi	r25, 0xF0	; 240
     504:	08 f4       	brcc	.+2      	; 0x508 <led_lauflicht+0x12>
		i |= 0x08;
     506:	98 60       	ori	r25, 0x08	; 8
	LED_PORT = i;
     508:	95 b9       	out	0x05, r25	; 5
}
     50a:	08 95       	ret

0000050c <init_WDT>:
}
#include "mymenu.h"

// Init Stuff
void init_WDT(void) {
	cli();
     50c:	f8 94       	cli
	wdt_reset();
     50e:	a8 95       	wdr
	WDTCSR |= (1 << WDCE) | (1 << WDE);
     510:	e0 e6       	ldi	r30, 0x60	; 96
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	80 81       	ld	r24, Z
     516:	88 61       	ori	r24, 0x18	; 24
     518:	80 83       	st	Z, r24
	WDTCSR = (1 << WDE) | (1 << WDIE) | (1 << WDP3) | (1 << WDP0); //Watchdog 8s
     51a:	89 e6       	ldi	r24, 0x69	; 105
     51c:	80 83       	st	Z, r24
	//WDTCSR = 0x0F; //Watchdog Off
	sei();
     51e:	78 94       	sei
}
     520:	08 95       	ret

00000522 <__vector_8>:
//////////////////////////////

// Interrupt Stuff
ISR(WDT_vect)
//Interrupt Service Routine
{
     522:	1f 92       	push	r1
     524:	0f 92       	push	r0
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	0f 92       	push	r0
     52a:	11 24       	eor	r1, r1
     52c:	8f 93       	push	r24
     52e:	9f 93       	push	r25
		LED_PORT ^= (1 << LED0);
     530:	85 b1       	in	r24, 0x05	; 5
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	89 27       	eor	r24, r25
     536:	85 b9       	out	0x05, r24	; 5
}
     538:	9f 91       	pop	r25
     53a:	8f 91       	pop	r24
     53c:	0f 90       	pop	r0
     53e:	0f be       	out	0x3f, r0	; 63
     540:	0f 90       	pop	r0
     542:	1f 90       	pop	r1
     544:	18 95       	reti

00000546 <uart_init>:
	LED_PORT ^= (1 << LED0);
}
// UART Stuff
void 	uart_init			() {
	// UART 0 - IN (Rapidform Software/Terminal)
	UBRR0H = UBRRH_VALUE;
     546:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
     54a:	23 e3       	ldi	r18, 0x33	; 51
     54c:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0C = (3 << UCSZ00);
     550:	96 e0       	ldi	r25, 0x06	; 6
     552:	90 93 c2 00 	sts	0x00C2, r25
	UCSR0B |= (1 << TXEN0); //Transmitter Enabled
     556:	e1 ec       	ldi	r30, 0xC1	; 193
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	88 60       	ori	r24, 0x08	; 8
     55e:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXEN0); // UART RX einschalten
     560:	80 81       	ld	r24, Z
     562:	80 61       	ori	r24, 0x10	; 16
     564:	80 83       	st	Z, r24

	// UART 1 - OUT (Stepper Karte/Drehtisch)
	UBRR1H = UBRRH_VALUE;
     566:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = UBRRL_VALUE;
     56a:	20 93 cc 00 	sts	0x00CC, r18
	UCSR1C = (3 << UCSZ00);
     56e:	90 93 ca 00 	sts	0x00CA, r25
	UCSR1B |= (1 << TXEN1); //Transmitter Enabled
     572:	e9 ec       	ldi	r30, 0xC9	; 201
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	88 60       	ori	r24, 0x08	; 8
     57a:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXEN1); // UART RX einschalten
     57c:	80 81       	ld	r24, Z
     57e:	80 61       	ori	r24, 0x10	; 16
     580:	80 83       	st	Z, r24

}
     582:	08 95       	ret

00000584 <uart_put_charater>:
void 	uart_put_charater	(unsigned char c, int dir) {
     584:	98 2f       	mov	r25, r24
	// To Rapidform
	if (dir == D_RapidForm) {
     586:	67 2b       	or	r22, r23
     588:	39 f4       	brne	.+14     	; 0x598 <uart_put_charater+0x14>
		while (!(UCSR0A & (1 << UDRE0))) //warten bis Senden moeglich
     58a:	80 91 c0 00 	lds	r24, 0x00C0
     58e:	85 ff       	sbrs	r24, 5
     590:	fc cf       	rjmp	.-8      	; 0x58a <uart_put_charater+0x6>
		{
		}
		UDR0 = c; // sende Zeichen
     592:	90 93 c6 00 	sts	0x00C6, r25
     596:	08 95       	ret
	}
	// To Stepper
	else {
		while (!(UCSR1A & (1 << UDRE1))) //warten bis Senden moeglich
     598:	80 91 c8 00 	lds	r24, 0x00C8
     59c:	85 ff       	sbrs	r24, 5
     59e:	fc cf       	rjmp	.-8      	; 0x598 <uart_put_charater+0x14>
		{
		}
		UDR1 = c; // sende Zeichen
     5a0:	90 93 ce 00 	sts	0x00CE, r25
     5a4:	08 95       	ret

000005a6 <uart_put_string>:
	}
	//return 0;
}
void 	uart_put_string		(char *s, int dir) {
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	ec 01       	movw	r28, r24
     5b0:	8b 01       	movw	r16, r22
     5b2:	04 c0       	rjmp	.+8      	; 0x5bc <uart_put_string+0x16>
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		uart_put_charater(*s, dir);
     5b4:	b8 01       	movw	r22, r16
     5b6:	0e 94 c2 02 	call	0x584	; 0x584 <uart_put_charater>
		s++;
     5ba:	21 96       	adiw	r28, 0x01	; 1
		UDR1 = c; // sende Zeichen
	}
	//return 0;
}
void 	uart_put_string		(char *s, int dir) {
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
     5bc:	88 81       	ld	r24, Y
     5be:	88 23       	and	r24, r24
     5c0:	c9 f7       	brne	.-14     	; 0x5b4 <uart_put_string+0xe>
	{
		uart_put_charater(*s, dir);
		s++;
	}
}
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	08 95       	ret

000005cc <__vector_7>:
{
		LED_PORT ^= (1 << LED0);
}
ISR(PCINT3_vect)
//Interrupt Service Routine
{
     5cc:	1f 92       	push	r1
     5ce:	0f 92       	push	r0
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	0f 92       	push	r0
     5d4:	11 24       	eor	r1, r1
     5d6:	2f 93       	push	r18
     5d8:	3f 93       	push	r19
     5da:	4f 93       	push	r20
     5dc:	5f 93       	push	r21
     5de:	6f 93       	push	r22
     5e0:	7f 93       	push	r23
     5e2:	8f 93       	push	r24
     5e4:	9f 93       	push	r25
     5e6:	af 93       	push	r26
     5e8:	bf 93       	push	r27
     5ea:	ef 93       	push	r30
     5ec:	ff 93       	push	r31
	//led_lauflicht();
	//uart_put_string("2H\n", D_Stepper);
	uart_put_string("1H\n", D_Stepper);
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
	LED_PORT ^= (1 << LED0);
     5fa:	85 b1       	in	r24, 0x05	; 5
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	89 27       	eor	r24, r25
     600:	85 b9       	out	0x05, r24	; 5
}
     602:	ff 91       	pop	r31
     604:	ef 91       	pop	r30
     606:	bf 91       	pop	r27
     608:	af 91       	pop	r26
     60a:	9f 91       	pop	r25
     60c:	8f 91       	pop	r24
     60e:	7f 91       	pop	r23
     610:	6f 91       	pop	r22
     612:	5f 91       	pop	r21
     614:	4f 91       	pop	r20
     616:	3f 91       	pop	r19
     618:	2f 91       	pop	r18
     61a:	0f 90       	pop	r0
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	0f 90       	pop	r0
     620:	1f 90       	pop	r1
     622:	18 95       	reti

00000624 <uart_get_character>:
		uart_put_charater(*s, dir);
		s++;
	}
}
int 	uart_get_character	(int dir) {
	if (dir == D_RapidForm) {
     624:	00 97       	sbiw	r24, 0x00	; 0
     626:	39 f4       	brne	.+14     	; 0x636 <uart_get_character+0x12>
		while (!(UCSR0A & (1 << RXC0)))
     628:	80 91 c0 00 	lds	r24, 0x00C0
     62c:	87 ff       	sbrs	r24, 7
     62e:	fc cf       	rjmp	.-8      	; 0x628 <uart_get_character+0x4>
			// warten bis Zeichen verfuegbar
			;
		return UDR0; // Zeichen aus UDR an Aufrufer zurueckgeben
     630:	80 91 c6 00 	lds	r24, 0x00C6
     634:	0b c0       	rjmp	.+22     	; 0x64c <uart_get_character+0x28>
	}
	if (dir == D_Stepper) {
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	19 f0       	breq	.+6      	; 0x640 <uart_get_character+0x1c>
     63a:	2f ef       	ldi	r18, 0xFF	; 255
     63c:	3f ef       	ldi	r19, 0xFF	; 255
     63e:	08 c0       	rjmp	.+16     	; 0x650 <uart_get_character+0x2c>
		while (!(UCSR1A & (1 << RXC1)))
     640:	80 91 c8 00 	lds	r24, 0x00C8
     644:	87 ff       	sbrs	r24, 7
     646:	fc cf       	rjmp	.-8      	; 0x640 <uart_get_character+0x1c>
			// warten bis Zeichen verfuegbar
			;
		return UDR1; // Zeichen aus UDR an Aufrufer zurueckgeben
     648:	80 91 ce 00 	lds	r24, 0x00CE
     64c:	28 2f       	mov	r18, r24
     64e:	30 e0       	ldi	r19, 0x00	; 0
	}
	return -1;
}
     650:	c9 01       	movw	r24, r18
     652:	08 95       	ret

00000654 <uart_get_string>:
void 	uart_get_string		(char * string_in, int dir) {
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	8c 01       	movw	r16, r24
     662:	7b 01       	movw	r14, r22
     664:	c0 e0       	ldi	r28, 0x00	; 0
     666:	d0 e0       	ldi	r29, 0x00	; 0
	char c;
	int i = 0;
	do {
		c = uart_get_character(dir);
     668:	c7 01       	movw	r24, r14
     66a:	0e 94 12 03 	call	0x624	; 0x624 <uart_get_character>
		if (c != '\r') {
     66e:	8d 30       	cpi	r24, 0x0D	; 13
     670:	21 f0       	breq	.+8      	; 0x67a <uart_get_string+0x26>
			*string_in = c;
     672:	f8 01       	movw	r30, r16
     674:	81 93       	st	Z+, r24
     676:	8f 01       	movw	r16, r30
			string_in += 1;
			i++;
     678:	21 96       	adiw	r28, 0x01	; 1
		}
	} while (i < 100 && c != '\r' && c != '\n');
     67a:	c4 36       	cpi	r28, 0x64	; 100
     67c:	d1 05       	cpc	r29, r1
     67e:	24 f4       	brge	.+8      	; 0x688 <uart_get_string+0x34>
     680:	8d 30       	cpi	r24, 0x0D	; 13
     682:	11 f0       	breq	.+4      	; 0x688 <uart_get_string+0x34>
     684:	8a 30       	cpi	r24, 0x0A	; 10
     686:	81 f7       	brne	.-32     	; 0x668 <uart_get_string+0x14>
	*string_in = '\0';
     688:	f8 01       	movw	r30, r16
     68a:	10 82       	st	Z, r1
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	08 95       	ret

0000069a <Position_Zeta>:
		break;
	default:
		uart_put_string(" 999999999,         0,K,K,R\r\n", D_RapidForm); // Status an RapidForm zur�ckmelden
	}
}
void 	Position_Zeta		(char * Position) {
     69a:	a0 e0       	ldi	r26, 0x00	; 0
     69c:	b0 e0       	ldi	r27, 0x00	; 0
    char c;
    int i = 0;
    do{
        c = str_rx[i + 2];
     69e:	fd 01       	movw	r30, r26
     6a0:	ee 58       	subi	r30, 0x8E	; 142
     6a2:	f8 4f       	sbci	r31, 0xF8	; 248
     6a4:	22 81       	ldd	r18, Z+2	; 0x02
        if(c != ','){
     6a6:	2c 32       	cpi	r18, 0x2C	; 44
     6a8:	29 f0       	breq	.+10     	; 0x6b4 <Position_Zeta+0x1a>
            Position[i] = c;
     6aa:	fc 01       	movw	r30, r24
     6ac:	ea 0f       	add	r30, r26
     6ae:	fb 1f       	adc	r31, r27
     6b0:	20 83       	st	Z, r18
            i++;
     6b2:	11 96       	adiw	r26, 0x01	; 1
        }
    }
     while(i < 20 && c != '\0' && c != ',');
     6b4:	a4 31       	cpi	r26, 0x14	; 20
     6b6:	b1 05       	cpc	r27, r1
     6b8:	24 f4       	brge	.+8      	; 0x6c2 <Position_Zeta+0x28>
     6ba:	22 23       	and	r18, r18
     6bc:	11 f0       	breq	.+4      	; 0x6c2 <Position_Zeta+0x28>
     6be:	2c 32       	cpi	r18, 0x2C	; 44
     6c0:	71 f7       	brne	.-36     	; 0x69e <Position_Zeta+0x4>
    Position[i] = '\0';
     6c2:	a8 0f       	add	r26, r24
     6c4:	b9 1f       	adc	r27, r25
     6c6:	1c 92       	st	X, r1

}
     6c8:	08 95       	ret

000006ca <init>:



void init() {
	// Watchdog Initialisieren oder Abschalten
	init_WDT();
     6ca:	0e 94 86 02 	call	0x50c	; 0x50c <init_WDT>
	// LED Port definieren
	LED_DDR = 0xFF;
     6ce:	8f ef       	ldi	r24, 0xFF	; 255
     6d0:	84 b9       	out	0x04, r24	; 4
	LED_PORT = 0xFF;
     6d2:	85 b9       	out	0x05, r24	; 5
	// Interrupts definieren
	PCMSK3 |= (1 << PCINT28); // PD4 als Interrupt zulassen
     6d4:	e3 e7       	ldi	r30, 0x73	; 115
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	80 81       	ld	r24, Z
     6da:	80 61       	ori	r24, 0x10	; 16
     6dc:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE3); //Pin Change Interrupt Control Register - PCIE3 setzen f�r PCINT30
     6de:	e8 e6       	ldi	r30, 0x68	; 104
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	80 81       	ld	r24, Z
     6e4:	88 60       	ori	r24, 0x08	; 8
     6e6:	80 83       	st	Z, r24
	// Startup kennzeichnen
	led_spielerein();
     6e8:	0e 94 3f 02 	call	0x47e	; 0x47e <led_spielerein>
	// LC Display initialisieren
	lcd_init(LCD_DISP_ON_CURSOR);
     6ec:	8e e0       	ldi	r24, 0x0E	; 14
     6ee:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_init>
	lcd_clrscr();
     6f2:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
	lcd_home();
     6f6:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_home>
	//lcd_spielereien();
	// Taster entprellen
	debounce_init();
     6fa:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <debounce_init>
	// RS-232 Verbindung initialisieren
	uart_init();
     6fe:	0e 94 a3 02 	call	0x546	; 0x546 <uart_init>
	//menu_enter(&menu_context, &menu_main);
}
     702:	08 95       	ret

00000704 <csg_Status_melden>:
// Hilfs Funktionen
void 	csg_Status_melden	() {
	int k = 0;
	if (blub < 100000)
		k = 5;
	if (blub < 10000)
     704:	20 91 68 07 	lds	r18, 0x0768
     708:	30 91 69 07 	lds	r19, 0x0769
     70c:	87 e2       	ldi	r24, 0x27	; 39
     70e:	20 31       	cpi	r18, 0x10	; 16
     710:	38 07       	cpc	r19, r24
     712:	0c f0       	brlt	.+2      	; 0x716 <csg_Status_melden+0x12>
     714:	47 c0       	rjmp	.+142    	; 0x7a4 <csg_Status_melden+0xa0>
		k = 4;
	if (blub < 1000)
     716:	83 e0       	ldi	r24, 0x03	; 3
     718:	28 3e       	cpi	r18, 0xE8	; 232
     71a:	38 07       	cpc	r19, r24
     71c:	1c f0       	brlt	.+6      	; 0x724 <csg_Status_melden+0x20>
     71e:	84 e0       	ldi	r24, 0x04	; 4
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	14 c0       	rjmp	.+40     	; 0x74c <csg_Status_melden+0x48>
		k = 3;
	if (blub < 100)
     724:	24 36       	cpi	r18, 0x64	; 100
     726:	31 05       	cpc	r19, r1
     728:	1c f0       	brlt	.+6      	; 0x730 <csg_Status_melden+0x2c>
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e c0       	rjmp	.+28     	; 0x74c <csg_Status_melden+0x48>
		k = 2;
	if (blub < 10)
     730:	2a 30       	cpi	r18, 0x0A	; 10
     732:	31 05       	cpc	r19, r1
     734:	1c f0       	brlt	.+6      	; 0x73c <csg_Status_melden+0x38>
     736:	82 e0       	ldi	r24, 0x02	; 2
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	08 c0       	rjmp	.+16     	; 0x74c <csg_Status_melden+0x48>
		k = 1;
	if (blub == 0)
     73c:	21 15       	cp	r18, r1
     73e:	31 05       	cpc	r19, r1
     740:	19 f4       	brne	.+6      	; 0x748 <csg_Status_melden+0x44>
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	02 c0       	rjmp	.+4      	; 0x74c <csg_Status_melden+0x48>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
		k = 0;
	blub++;
     74c:	2f 5f       	subi	r18, 0xFF	; 255
     74e:	3f 4f       	sbci	r19, 0xFF	; 255
     750:	30 93 69 07 	sts	0x0769, r19
     754:	20 93 68 07 	sts	0x0768, r18
	switch (k) {
     758:	81 30       	cpi	r24, 0x01	; 1
     75a:	91 05       	cpc	r25, r1
     75c:	99 f0       	breq	.+38     	; 0x784 <csg_Status_melden+0x80>
     75e:	82 30       	cpi	r24, 0x02	; 2
     760:	91 05       	cpc	r25, r1
     762:	1c f4       	brge	.+6      	; 0x76a <csg_Status_melden+0x66>
     764:	89 2b       	or	r24, r25
     766:	39 f0       	breq	.+14     	; 0x776 <csg_Status_melden+0x72>
     768:	1a c0       	rjmp	.+52     	; 0x79e <csg_Status_melden+0x9a>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	91 05       	cpc	r25, r1
     76e:	69 f0       	breq	.+26     	; 0x78a <csg_Status_melden+0x86>
     770:	03 97       	sbiw	r24, 0x03	; 3
     772:	a9 f4       	brne	.+42     	; 0x79e <csg_Status_melden+0x9a>
     774:	0d c0       	rjmp	.+26     	; 0x790 <csg_Status_melden+0x8c>
	case 0:
		lcd_puts("Status gemeldet!");
     776:	84 e0       	ldi	r24, 0x04	; 4
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("         0,         0,K,K,R\r\n", D_RapidForm);			// Status an RapidForm zur�ckmelden
     77e:	85 e1       	ldi	r24, 0x15	; 21
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	08 c0       	rjmp	.+16     	; 0x794 <csg_Status_melden+0x90>
		break;
	case 1:
		uart_put_string("         9,         0,K,K,R\r\n", D_RapidForm);			// Status an RapidForm zur�ckmelden
     784:	83 e3       	ldi	r24, 0x33	; 51
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	05 c0       	rjmp	.+10     	; 0x794 <csg_Status_melden+0x90>
		break;
	case 2:
		uart_put_string("        99,         0,K,K,R\r\n", D_RapidForm);			// Status an RapidForm zur�ckmelden
     78a:	81 e5       	ldi	r24, 0x51	; 81
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	02 c0       	rjmp	.+4      	; 0x794 <csg_Status_melden+0x90>
		break;
	case 3:
		uart_put_string("       999,         0,K,K,R\r\n", D_RapidForm);			// Status an RapidForm zur�ckmelden
     790:	8f e6       	ldi	r24, 0x6F	; 111
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
     79c:	08 95       	ret
		break;
	default:
		uart_put_string(" 999999999,         0,K,K,R\r\n", D_RapidForm); // Status an RapidForm zur�ckmelden
     79e:	8d e8       	ldi	r24, 0x8D	; 141
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	f8 cf       	rjmp	.-16     	; 0x794 <csg_Status_melden+0x90>
	}
}
     7a4:	85 e0       	ldi	r24, 0x05	; 5
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	d1 cf       	rjmp	.-94     	; 0x74c <csg_Status_melden+0x48>

000007aa <String_zerlegen_csg>:
	ltoa(z,Position,10);
	//lcd_puts("Position: ");
	//lcd_puts(Position);
	//lcd_puts("\n");
}
void 	String_zerlegen_csg	(char * str_rx) {
     7aa:	cf 92       	push	r12
     7ac:	df 92       	push	r13
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	df 93       	push	r29
     7b8:	cf 93       	push	r28
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	61 97       	sbiw	r28, 0x11	; 17
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
     7ca:	6c 01       	movw	r12, r24
	int i = 4; // Index Input String | Bei 4. Zeichen Beginnen. Die ersten 3 Zeichen sind Fix.
	int j = 0; // Index Variable
	char c; // Zu kopierendes Zeichen
	// Variablen Deklaration und Initialisierung mit Defaultwerten
	char Speed_Range[2] = "2";
	char ONE_Min_Speed[6] = "200";
     7cc:	82 e3       	ldi	r24, 0x32	; 50
     7ce:	90 e3       	ldi	r25, 0x30	; 48
     7d0:	a0 e3       	ldi	r26, 0x30	; 48
     7d2:	b0 e0       	ldi	r27, 0x00	; 0
     7d4:	8e 83       	std	Y+6, r24	; 0x06
     7d6:	9f 83       	std	Y+7, r25	; 0x07
     7d8:	a8 87       	std	Y+8, r26	; 0x08
     7da:	b9 87       	std	Y+9, r27	; 0x09
     7dc:	1b 86       	std	Y+11, r1	; 0x0b
     7de:	1a 86       	std	Y+10, r1	; 0x0a
	char ONE_Max_Speed[6] = "2000";
     7e0:	de 01       	movw	r26, r28
     7e2:	1c 96       	adiw	r26, 0x0c	; 12
     7e4:	e8 ed       	ldi	r30, 0xD8	; 216
     7e6:	f1 e0       	ldi	r31, 0x01	; 1
     7e8:	85 e0       	ldi	r24, 0x05	; 5
     7ea:	01 90       	ld	r0, Z+
     7ec:	0d 92       	st	X+, r0
     7ee:	81 50       	subi	r24, 0x01	; 1
     7f0:	e1 f7       	brne	.-8      	; 0x7ea <String_zerlegen_csg+0x40>
     7f2:	19 8a       	std	Y+17, r1	; 0x11
	char ONE_Acc_Speed[5] = "200";
     7f4:	82 e3       	ldi	r24, 0x32	; 50
     7f6:	90 e3       	ldi	r25, 0x30	; 48
     7f8:	a0 e3       	ldi	r26, 0x30	; 48
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	9a 83       	std	Y+2, r25	; 0x02
     800:	ab 83       	std	Y+3, r26	; 0x03
     802:	bc 83       	std	Y+4, r27	; 0x04
     804:	1d 82       	std	Y+5, r1	; 0x05
     806:	84 e0       	ldi	r24, 0x04	; 4
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	a0 e0       	ldi	r26, 0x00	; 0
     80e:	b0 e0       	ldi	r27, 0x00	; 0
	//
	////////////////////////
	do {
		c = str_rx[i];
		if (c != 'F') {
			ONE_Min_Speed[j] = c;
     810:	9e 01       	movw	r18, r28
     812:	2a 5f       	subi	r18, 0xFA	; 250
     814:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	//  Min Speed (50 - 20000)
	//
	////////////////////////
	do {
		c = str_rx[i];
     816:	f6 01       	movw	r30, r12
     818:	ee 0d       	add	r30, r14
     81a:	ff 1d       	adc	r31, r15
     81c:	80 81       	ld	r24, Z
		if (c != 'F') {
     81e:	86 34       	cpi	r24, 0x46	; 70
     820:	41 f0       	breq	.+16     	; 0x832 <String_zerlegen_csg+0x88>
			ONE_Min_Speed[j] = c;
     822:	f9 01       	movw	r30, r18
     824:	ea 0f       	add	r30, r26
     826:	fb 1f       	adc	r31, r27
     828:	80 83       	st	Z, r24
			j++;
     82a:	11 96       	adiw	r26, 0x01	; 1
			i++;
     82c:	08 94       	sec
     82e:	e1 1c       	adc	r14, r1
     830:	f1 1c       	adc	r15, r1
		}
	} while (j < 6 && c != '\0' && c != 'F');
     832:	a6 30       	cpi	r26, 0x06	; 6
     834:	b1 05       	cpc	r27, r1
     836:	24 f4       	brge	.+8      	; 0x840 <String_zerlegen_csg+0x96>
     838:	88 23       	and	r24, r24
     83a:	11 f0       	breq	.+4      	; 0x840 <String_zerlegen_csg+0x96>
     83c:	86 34       	cpi	r24, 0x46	; 70
     83e:	59 f7       	brne	.-42     	; 0x816 <String_zerlegen_csg+0x6c>
	ONE_Min_Speed[j] = '\0';
     840:	8e 01       	movw	r16, r28
     842:	0a 5f       	subi	r16, 0xFA	; 250
     844:	1f 4f       	sbci	r17, 0xFF	; 255
     846:	a0 0f       	add	r26, r16
     848:	b1 1f       	adc	r27, r17
     84a:	1c 92       	st	X, r1

	lcd_puts("1_MIN_SPEED:");
     84c:	8b ea       	ldi	r24, 0xAB	; 171
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts(ONE_Min_Speed);
     854:	c8 01       	movw	r24, r16
     856:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts("\n");
     85a:	88 eb       	ldi	r24, 0xB8	; 184
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	////////////////////////
	//
	//  Max Speed (50 - 20000)
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
     862:	08 94       	sec
     864:	e1 1c       	adc	r14, r1
     866:	f1 1c       	adc	r15, r1
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
		if (c != 'R') {
			ONE_Max_Speed[j] = c;
     86c:	9e 01       	movw	r18, r28
     86e:	24 5f       	subi	r18, 0xF4	; 244
     870:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
     872:	f6 01       	movw	r30, r12
     874:	ee 0d       	add	r30, r14
     876:	ff 1d       	adc	r31, r15
     878:	80 81       	ld	r24, Z
		if (c != 'R') {
     87a:	82 35       	cpi	r24, 0x52	; 82
     87c:	41 f0       	breq	.+16     	; 0x88e <String_zerlegen_csg+0xe4>
			ONE_Max_Speed[j] = c;
     87e:	f9 01       	movw	r30, r18
     880:	ea 0f       	add	r30, r26
     882:	fb 1f       	adc	r31, r27
     884:	80 83       	st	Z, r24
			i++;
     886:	08 94       	sec
     888:	e1 1c       	adc	r14, r1
     88a:	f1 1c       	adc	r15, r1
			j++;
     88c:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (j < 6 && c != '\0' && c != 'R');
     88e:	a6 30       	cpi	r26, 0x06	; 6
     890:	b1 05       	cpc	r27, r1
     892:	24 f4       	brge	.+8      	; 0x89c <String_zerlegen_csg+0xf2>
     894:	88 23       	and	r24, r24
     896:	11 f0       	breq	.+4      	; 0x89c <String_zerlegen_csg+0xf2>
     898:	82 35       	cpi	r24, 0x52	; 82
     89a:	59 f7       	brne	.-42     	; 0x872 <String_zerlegen_csg+0xc8>
	ONE_Max_Speed[j] = '\0';
     89c:	8e 01       	movw	r16, r28
     89e:	04 5f       	subi	r16, 0xF4	; 244
     8a0:	1f 4f       	sbci	r17, 0xFF	; 255
     8a2:	a0 0f       	add	r26, r16
     8a4:	b1 1f       	adc	r27, r17
     8a6:	1c 92       	st	X, r1

	lcd_puts("1_MAX_SPEED:");
     8a8:	8a eb       	ldi	r24, 0xBA	; 186
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts(ONE_Max_Speed);
     8b0:	c8 01       	movw	r24, r16
     8b2:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts("\n");
     8b6:	88 eb       	ldi	r24, 0xB8	; 184
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	////////////////////////
	//
	//  Acceleration (0 - 1000)
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
     8be:	c7 01       	movw	r24, r14
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	a0 e0       	ldi	r26, 0x00	; 0
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
		if (c != 'S') {
			ONE_Acc_Speed[j] = c;
     8c6:	ae 01       	movw	r20, r28
     8c8:	4f 5f       	subi	r20, 0xFF	; 255
     8ca:	5f 4f       	sbci	r21, 0xFF	; 255
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
     8cc:	f6 01       	movw	r30, r12
     8ce:	e8 0f       	add	r30, r24
     8d0:	f9 1f       	adc	r31, r25
     8d2:	20 81       	ld	r18, Z
		if (c != 'S') {
     8d4:	23 35       	cpi	r18, 0x53	; 83
     8d6:	31 f0       	breq	.+12     	; 0x8e4 <String_zerlegen_csg+0x13a>
			ONE_Acc_Speed[j] = c;
     8d8:	fa 01       	movw	r30, r20
     8da:	ea 0f       	add	r30, r26
     8dc:	fb 1f       	adc	r31, r27
     8de:	20 83       	st	Z, r18
			i++;
     8e0:	01 96       	adiw	r24, 0x01	; 1
			j++;
     8e2:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (j < 4 && c != '\0' && c != 'S');
     8e4:	a4 30       	cpi	r26, 0x04	; 4
     8e6:	b1 05       	cpc	r27, r1
     8e8:	24 f4       	brge	.+8      	; 0x8f2 <String_zerlegen_csg+0x148>
     8ea:	22 23       	and	r18, r18
     8ec:	11 f0       	breq	.+4      	; 0x8f2 <String_zerlegen_csg+0x148>
     8ee:	23 35       	cpi	r18, 0x53	; 83
     8f0:	69 f7       	brne	.-38     	; 0x8cc <String_zerlegen_csg+0x122>
	ONE_Acc_Speed[j] = '\0';
     8f2:	8e 01       	movw	r16, r28
     8f4:	0f 5f       	subi	r16, 0xFF	; 255
     8f6:	1f 4f       	sbci	r17, 0xFF	; 255
     8f8:	a0 0f       	add	r26, r16
     8fa:	b1 1f       	adc	r27, r17
     8fc:	1c 92       	st	X, r1

	lcd_puts("1_ACC_SPEED:");
     8fe:	87 ec       	ldi	r24, 0xC7	; 199
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts(ONE_Acc_Speed);
     906:	c8 01       	movw	r24, r16
     908:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts("\n");
     90c:	88 eb       	ldi	r24, 0xB8	; 184
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	//////////////////////////
	//
	//  Blub um eins hochz�hlen
	//
	//////////////////////////
	blub++;
     914:	80 91 68 07 	lds	r24, 0x0768
     918:	90 91 69 07 	lds	r25, 0x0769
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	90 93 69 07 	sts	0x0769, r25
     922:	80 93 68 07 	sts	0x0768, r24
	//uart_put_string("0\n", D_Stepper);
	uart_put_string(B_OK, D_RapidForm);
     926:	84 ed       	ldi	r24, 0xD4	; 212
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
}
     932:	61 96       	adiw	r28, 0x11	; 17
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	de bf       	out	0x3e, r29	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	cd bf       	out	0x3d, r28	; 61
     93e:	cf 91       	pop	r28
     940:	df 91       	pop	r29
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	df 90       	pop	r13
     94c:	cf 90       	pop	r12
     94e:	08 95       	ret

00000950 <my_select>:
	lcd_puts("Aufnahme starten\n");
	lcd_puts("Nach Aufnahme SW3 dr�cken!\n");
	if (get_key_press(1 << KEY3))
		uart_put_string("M 16000\r", D_Stepper);
}
void 	my_select			(void *arg, char *name) {
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	8b 01       	movw	r16, r22
	lcd_clrscr();
     956:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
	lcd_puts("Selected: ");
     95a:	8e ed       	ldi	r24, 0xDE	; 222
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts(name);
     962:	c8 01       	movw	r24, r16
     964:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
 */


static inline void ms_spin(unsigned short ms) {
	if (ms) {
		__asm__ __volatile__ (
     968:	8e ee       	ldi	r24, 0xEE	; 238
     96a:	92 e0       	ldi	r25, 0x02	; 2

0000096c <outer_889>:
     96c:	a0 ed       	ldi	r26, 0xD0	; 208
     96e:	b7 e0       	ldi	r27, 0x07	; 7

00000970 <inner_889>:
     970:	11 97       	sbiw	r26, 0x01	; 1
     972:	f1 f7       	brne	.-4      	; 0x970 <inner_889>
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	d1 f7       	brne	.-12     	; 0x96c <outer_889>

	ms_spin(750);
}
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	08 95       	ret

0000097e <mod_manual>:
	LED_PORT = i;
}
// Menu Stuff

void 	mod_manual			(void *arg, void *name) {
	lcd_puts("Manueller Modus\n");
     97e:	89 ee       	ldi	r24, 0xE9	; 233
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts("Aufnahme starten\n");
     986:	8a ef       	ldi	r24, 0xFA	; 250
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts("Nach Aufnahme SW3 dr�cken!\n");
     98e:	8c e0       	ldi	r24, 0x0C	; 12
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     996:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     998:	90 91 d6 07 	lds	r25, 0x07D6
     99c:	98 70       	andi	r25, 0x08	; 8
  key_press ^= key_mask;                          // clear key(s)
     99e:	80 91 d6 07 	lds	r24, 0x07D6
     9a2:	89 27       	eor	r24, r25
     9a4:	80 93 d6 07 	sts	0x07D6, r24
  sei();
     9a8:	78 94       	sei
	if (get_key_press(1 << KEY3))
     9aa:	99 23       	and	r25, r25
     9ac:	31 f0       	breq	.+12     	; 0x9ba <mod_manual+0x3c>
		uart_put_string("M 16000\r", D_Stepper);
     9ae:	8a e2       	ldi	r24, 0x2A	; 42
     9b0:	92 e0       	ldi	r25, 0x02	; 2
     9b2:	61 e0       	ldi	r22, 0x01	; 1
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
     9ba:	08 95       	ret

000009bc <String_zerlegen_Isel>:
			return n;
		}
	}
	return 99;
}
void 	String_zerlegen_Isel(char * str_rx, char * Position) {
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	8c 01       	movw	r16, r24
     9c6:	eb 01       	movw	r28, r22
	//0M5200, +600
	//Achse M Position, +Geschwindigkeit
	char * Achse="0";
	Achse[0] = str_rx[1];
	Achse[1] = '\0';
	if(atoi(Achse)==0){
     9c8:	83 e3       	ldi	r24, 0x33	; 51
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <atoi>
     9d0:	89 2b       	or	r24, r25
     9d2:	61 f4       	brne	.+24     	; 0x9ec <String_zerlegen_Isel+0x30>
		lcd_puts("Achse: ");
     9d4:	85 e3       	ldi	r24, 0x35	; 53
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(Achse);
     9dc:	83 e3       	ldi	r24, 0x33	; 51
     9de:	92 e0       	ldi	r25, 0x02	; 2
     9e0:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(" (Rotation)\n");
     9e4:	8d e3       	ldi	r24, 0x3D	; 61
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	}
	if(atoi(Achse)==1){
     9ec:	83 e3       	ldi	r24, 0x33	; 51
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <atoi>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	61 f4       	brne	.+24     	; 0xa10 <String_zerlegen_Isel+0x54>
		lcd_puts("Achse: ");
     9f8:	85 e3       	ldi	r24, 0x35	; 53
     9fa:	92 e0       	ldi	r25, 0x02	; 2
     9fc:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(Achse);
     a00:	83 e3       	ldi	r24, 0x33	; 51
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(" (Hoehe)   \n");
     a08:	8a e4       	ldi	r24, 0x4A	; 74
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	}
	lcd_puts("Test: ");
     a10:	87 e5       	ldi	r24, 0x57	; 87
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts(Position);
     a18:	ce 01       	movw	r24, r28
     a1a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
     a1e:	a0 e0       	ldi	r26, 0x00	; 0
     a20:	b0 e0       	ldi	r27, 0x00	; 0
	char c;
	int i = 0;
	do {
		c = str_rx[i + 3];
     a22:	f8 01       	movw	r30, r16
     a24:	ea 0f       	add	r30, r26
     a26:	fb 1f       	adc	r31, r27
     a28:	83 81       	ldd	r24, Z+3	; 0x03
		if (c != ',') {
     a2a:	8c 32       	cpi	r24, 0x2C	; 44
     a2c:	29 f0       	breq	.+10     	; 0xa38 <String_zerlegen_Isel+0x7c>
			Position[i] = c;
     a2e:	fe 01       	movw	r30, r28
     a30:	ea 0f       	add	r30, r26
     a32:	fb 1f       	adc	r31, r27
     a34:	80 83       	st	Z, r24
			i++;
     a36:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (i < 20 && c != '\0' && c != ',');
     a38:	a4 31       	cpi	r26, 0x14	; 20
     a3a:	b1 05       	cpc	r27, r1
     a3c:	24 f4       	brge	.+8      	; 0xa46 <String_zerlegen_Isel+0x8a>
     a3e:	88 23       	and	r24, r24
     a40:	11 f0       	breq	.+4      	; 0xa46 <String_zerlegen_Isel+0x8a>
     a42:	8c 32       	cpi	r24, 0x2C	; 44
     a44:	71 f7       	brne	.-36     	; 0xa22 <String_zerlegen_Isel+0x66>
	Position[i] = '\0';
     a46:	ac 0f       	add	r26, r28
     a48:	bd 1f       	adc	r27, r29
     a4a:	1c 92       	st	X, r1
	int32_t z;
	z = atoi(Position);
     a4c:	ce 01       	movw	r24, r28
     a4e:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <atoi>
	z = (z * 71111)  /4096;
     a52:	aa 27       	eor	r26, r26
     a54:	97 fd       	sbrc	r25, 7
     a56:	a0 95       	com	r26
     a58:	ba 2f       	mov	r27, r26
     a5a:	bc 01       	movw	r22, r24
     a5c:	cd 01       	movw	r24, r26
     a5e:	27 ec       	ldi	r18, 0xC7	; 199
     a60:	35 e1       	ldi	r19, 0x15	; 21
     a62:	41 e0       	ldi	r20, 0x01	; 1
     a64:	50 e0       	ldi	r21, 0x00	; 0
     a66:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__mulsi3>
	ltoa(z,Position,10);
     a6a:	20 e0       	ldi	r18, 0x00	; 0
     a6c:	30 e1       	ldi	r19, 0x10	; 16
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	0e 94 84 0c 	call	0x1908	; 0x1908 <__divmodsi4>
     a76:	ca 01       	movw	r24, r20
     a78:	b9 01       	movw	r22, r18
     a7a:	ae 01       	movw	r20, r28
     a7c:	2a e0       	ldi	r18, 0x0A	; 10
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <ltoa>
	//lcd_puts("Position: ");
	//lcd_puts(Position);
	//lcd_puts("\n");
}
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	08 95       	ret

00000a8e <FindStringInArray>:
			.Befehl = progmem_Befehl,
	}
};


int 	FindStringInArray	(const char* pInput, const char* pOptions[], int cmp_length) {
     a8e:	cf 92       	push	r12
     a90:	df 92       	push	r13
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	6c 01       	movw	r12, r24
     aa0:	7a 01       	movw	r14, r20
     aa2:	8b 01       	movw	r16, r22
     aa4:	cf ef       	ldi	r28, 0xFF	; 255
     aa6:	df ef       	ldi	r29, 0xFF	; 255
     aa8:	08 c0       	rjmp	.+16     	; 0xaba <FindStringInArray+0x2c>
	int n = -1;
	while (pOptions[++n]) {
		//lcd_puts(pOptions[n]);
		//lcd_puts("\n");
		if (!strncmp(pInput, pOptions[n], cmp_length)){
     aaa:	c6 01       	movw	r24, r12
     aac:	a7 01       	movw	r20, r14
     aae:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <strncmp>
     ab2:	0e 5f       	subi	r16, 0xFE	; 254
     ab4:	1f 4f       	sbci	r17, 0xFF	; 255
     ab6:	00 97       	sbiw	r24, 0x00	; 0
     ab8:	49 f0       	breq	.+18     	; 0xacc <FindStringInArray+0x3e>
};


int 	FindStringInArray	(const char* pInput, const char* pOptions[], int cmp_length) {
	int n = -1;
	while (pOptions[++n]) {
     aba:	21 96       	adiw	r28, 0x01	; 1
     abc:	f8 01       	movw	r30, r16
     abe:	60 81       	ld	r22, Z
     ac0:	71 81       	ldd	r23, Z+1	; 0x01
     ac2:	61 15       	cp	r22, r1
     ac4:	71 05       	cpc	r23, r1
     ac6:	89 f7       	brne	.-30     	; 0xaaa <FindStringInArray+0x1c>
     ac8:	c3 e6       	ldi	r28, 0x63	; 99
     aca:	d0 e0       	ldi	r29, 0x00	; 0
		if (!strncmp(pInput, pOptions[n], cmp_length)){
			return n;
		}
	}
	return 99;
}
     acc:	ce 01       	movw	r24, r28
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	ff 90       	pop	r15
     ad8:	ef 90       	pop	r14
     ada:	df 90       	pop	r13
     adc:	cf 90       	pop	r12
     ade:	08 95       	ret

00000ae0 <switch_Motor>:
		uart_put_string(str_rx,D_Stepper);
		uart_put_string("\n",D_Stepper);
	}
}

int 	switch_Motor		(char * str_rx) {
     ae0:	df 93       	push	r29
     ae2:	cf 93       	push	r28
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
     ae8:	2a 97       	sbiw	r28, 0x0a	; 10
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
	const char* pOptions[] = {
			"@01", 		// 0 - Isel
			"Q:",    	// 1 - CSG
			"ECHO0", 	// 2 - Zeta
			"!Terminal",	// 3 - Terminal ansteuerung!
			0 };
     af4:	de 01       	movw	r26, r28
     af6:	11 96       	adiw	r26, 0x01	; 1
     af8:	ec e9       	ldi	r30, 0x9C	; 156
     afa:	f6 e0       	ldi	r31, 0x06	; 6
     afc:	2a e0       	ldi	r18, 0x0A	; 10
     afe:	01 90       	ld	r0, Z+
     b00:	0d 92       	st	X+, r0
     b02:	21 50       	subi	r18, 0x01	; 1
     b04:	e1 f7       	brne	.-8      	; 0xafe <switch_Motor+0x1e>
	switch (FindStringInArray(str_rx, pOptions, 3)) {
     b06:	be 01       	movw	r22, r28
     b08:	6f 5f       	subi	r22, 0xFF	; 255
     b0a:	7f 4f       	sbci	r23, 0xFF	; 255
     b0c:	43 e0       	ldi	r20, 0x03	; 3
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	0e 94 47 05 	call	0xa8e	; 0xa8e <FindStringInArray>
     b14:	81 30       	cpi	r24, 0x01	; 1
     b16:	91 05       	cpc	r25, r1
     b18:	61 f0       	breq	.+24     	; 0xb32 <switch_Motor+0x52>
     b1a:	82 30       	cpi	r24, 0x02	; 2
     b1c:	91 05       	cpc	r25, r1
     b1e:	1c f4       	brge	.+6      	; 0xb26 <switch_Motor+0x46>
     b20:	89 2b       	or	r24, r25
     b22:	51 f0       	breq	.+20     	; 0xb38 <switch_Motor+0x58>
     b24:	12 c0       	rjmp	.+36     	; 0xb4a <switch_Motor+0x6a>
     b26:	82 30       	cpi	r24, 0x02	; 2
     b28:	91 05       	cpc	r25, r1
     b2a:	49 f0       	breq	.+18     	; 0xb3e <switch_Motor+0x5e>
     b2c:	03 97       	sbiw	r24, 0x03	; 3
     b2e:	69 f4       	brne	.+26     	; 0xb4a <switch_Motor+0x6a>
     b30:	09 c0       	rjmp	.+18     	; 0xb44 <switch_Motor+0x64>
     b32:	21 e0       	ldi	r18, 0x01	; 1
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	0b c0       	rjmp	.+22     	; 0xb4e <switch_Motor+0x6e>
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	08 c0       	rjmp	.+16     	; 0xb4e <switch_Motor+0x6e>
     b3e:	22 e0       	ldi	r18, 0x02	; 2
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	05 c0       	rjmp	.+10     	; 0xb4e <switch_Motor+0x6e>
		break;
	case 1: 		// 1 - CSG
		return M_CSG;
		break;
	case 2:			// 2 - Zeta
		return M_ZETA;
     b44:	23 e0       	ldi	r18, 0x03	; 3
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <switch_Motor+0x6e>
		break;
	case 3:			// 3 - Terminal ansteuerung
		return M_TERMINAL;
     b4a:	2e ef       	ldi	r18, 0xFE	; 254
     b4c:	3f ef       	ldi	r19, 0xFF	; 255
		break;
	default:
		return M_UNK;
	}
}
     b4e:	c9 01       	movw	r24, r18
     b50:	2a 96       	adiw	r28, 0x0a	; 10
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <switch_Terminal>:
		lcd_puts("       \n");
		//Initialized = switch_Inputs(str_rx);
	}
}
int init_T = 0;
void 	switch_Terminal			(char * str_rx) {
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	2a 97       	sbiw	r28, 0x0a	; 10
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	8c 01       	movw	r16, r24
	const char* pOptions[] = {
			"!CLS", // 0 - LC-Display l�schen
			"Test",	// 1 - Test
			"!Manual",// 2 - Ignorieren
			"!YYYY",// 3 - Wait till motor stops
			0 };
     b7c:	de 01       	movw	r26, r28
     b7e:	11 96       	adiw	r26, 0x01	; 1
     b80:	ee eb       	ldi	r30, 0xBE	; 190
     b82:	f6 e0       	ldi	r31, 0x06	; 6
     b84:	8a e0       	ldi	r24, 0x0A	; 10
     b86:	01 90       	ld	r0, Z+
     b88:	0d 92       	st	X+, r0
     b8a:	81 50       	subi	r24, 0x01	; 1
     b8c:	e1 f7       	brne	.-8      	; 0xb86 <switch_Terminal+0x24>

	if (init_T == 0){
     b8e:	80 91 6c 07 	lds	r24, 0x076C
     b92:	90 91 6d 07 	lds	r25, 0x076D
     b96:	89 2b       	or	r24, r25
     b98:	c1 f4       	brne	.+48     	; 0xbca <switch_Terminal+0x68>
		init_T = 1;
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	90 93 6d 07 	sts	0x076D, r25
     ba2:	80 93 6c 07 	sts	0x076C, r24
		uart_put_string("Willkommen im Terminal Modus\r\n",D_RapidForm);
     ba6:	8e e5       	ldi	r24, 0x5E	; 94
     ba8:	92 e0       	ldi	r25, 0x02	; 2
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
		uart_put_string("m�gliche Befehle sind: \r\n",D_RapidForm);
     bb2:	8d e7       	ldi	r24, 0x7D	; 125
     bb4:	92 e0       	ldi	r25, 0x02	; 2
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
		uart_put_string(" A - Motorstatus\r\n M - Move Steps\r\n", D_RapidForm);
     bbe:	89 e9       	ldi	r24, 0x99	; 153
     bc0:	92 e0       	ldi	r25, 0x02	; 2
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
	}
	switch (FindStringInArray(str_rx, pOptions, 2)) {
     bca:	c8 01       	movw	r24, r16
     bcc:	be 01       	movw	r22, r28
     bce:	6f 5f       	subi	r22, 0xFF	; 255
     bd0:	7f 4f       	sbci	r23, 0xFF	; 255
     bd2:	42 e0       	ldi	r20, 0x02	; 2
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	0e 94 47 05 	call	0xa8e	; 0xa8e <FindStringInArray>
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	91 05       	cpc	r25, r1
     bde:	61 f0       	breq	.+24     	; 0xbf8 <switch_Terminal+0x96>
     be0:	82 30       	cpi	r24, 0x02	; 2
     be2:	91 05       	cpc	r25, r1
     be4:	1c f4       	brge	.+6      	; 0xbec <switch_Terminal+0x8a>
     be6:	89 2b       	or	r24, r25
     be8:	21 f0       	breq	.+8      	; 0xbf2 <switch_Terminal+0x90>
     bea:	0f c0       	rjmp	.+30     	; 0xc0a <switch_Terminal+0xa8>
     bec:	04 97       	sbiw	r24, 0x04	; 4
     bee:	6c f4       	brge	.+26     	; 0xc0a <switch_Terminal+0xa8>
     bf0:	1e c0       	rjmp	.+60     	; 0xc2e <switch_Terminal+0xcc>
	case 0: // Display l�schen
		lcd_clrscr();
     bf2:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
     bf6:	1b c0       	rjmp	.+54     	; 0xc2e <switch_Terminal+0xcc>
		break;
	case 1: // Interner Test
		lcd_puts("Test bestanden     \n");
     bf8:	8d eb       	ldi	r24, 0xBD	; 189
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("Test bestanden", D_RapidForm);
     c00:	82 ed       	ldi	r24, 0xD2	; 210
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	10 c0       	rjmp	.+32     	; 0xc2a <switch_Terminal+0xc8>
	case 3: // Reserve 2

		break;
	default:
		//lcd_puts("Z:");
		lcd_puts(str_rx);
     c0a:	c8 01       	movw	r24, r16
     c0c:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts("       \n");
     c10:	81 ee       	ldi	r24, 0xE1	; 225
     c12:	92 e0       	ldi	r25, 0x02	; 2
     c14:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string(str_rx,D_Stepper);
     c18:	c8 01       	movw	r24, r16
     c1a:	61 e0       	ldi	r22, 0x01	; 1
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
		uart_put_string("\n",D_Stepper);
     c22:	88 eb       	ldi	r24, 0xB8	; 184
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
	}
}
     c2e:	2a 96       	adiw	r28, 0x0a	; 10
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	de bf       	out	0x3e, r29	; 62
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	cd bf       	out	0x3d, r28	; 61
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	08 95       	ret

00000c44 <switch_csg>:
	default:
		lcd_puts("ISEL:    \n");
		lcd_puts(str_rx);
	}
}
void 	switch_csg			(char * str_rx) {
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	a0 97       	sbiw	r28, 0x20	; 32
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
     c5c:	8c 01       	movw	r16, r24
			"H:", // 5 - H:
			"G", // 6 - Motor starten
			"M:", // 7 - Move by Pulses
			"!", // 8 - Busy Ready ?
			"H1",
			0 };
     c5e:	de 01       	movw	r26, r28
     c60:	1b 96       	adiw	r26, 0x0b	; 11
     c62:	e1 e2       	ldi	r30, 0x21	; 33
     c64:	f7 e0       	ldi	r31, 0x07	; 7
     c66:	86 e1       	ldi	r24, 0x16	; 22
     c68:	01 90       	ld	r0, Z+
     c6a:	0d 92       	st	X+, r0
     c6c:	81 50       	subi	r24, 0x01	; 1
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <switch_csg+0x24>
	switch (FindStringInArray(str_rx, pOptions, 2)) {
     c70:	c8 01       	movw	r24, r16
     c72:	be 01       	movw	r22, r28
     c74:	65 5f       	subi	r22, 0xF5	; 245
     c76:	7f 4f       	sbci	r23, 0xFF	; 255
     c78:	42 e0       	ldi	r20, 0x02	; 2
     c7a:	50 e0       	ldi	r21, 0x00	; 0
     c7c:	0e 94 47 05 	call	0xa8e	; 0xa8e <FindStringInArray>
     c80:	84 30       	cpi	r24, 0x04	; 4
     c82:	91 05       	cpc	r25, r1
     c84:	c1 f1       	breq	.+112    	; 0xcf6 <switch_csg+0xb2>
     c86:	85 30       	cpi	r24, 0x05	; 5
     c88:	91 05       	cpc	r25, r1
     c8a:	84 f4       	brge	.+32     	; 0xcac <switch_csg+0x68>
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	91 05       	cpc	r25, r1
     c90:	29 f1       	breq	.+74     	; 0xcdc <switch_csg+0x98>
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	91 05       	cpc	r25, r1
     c96:	1c f4       	brge	.+6      	; 0xc9e <switch_csg+0x5a>
     c98:	89 2b       	or	r24, r25
     c9a:	e9 f0       	breq	.+58     	; 0xcd6 <switch_csg+0x92>
     c9c:	65 c0       	rjmp	.+202    	; 0xd68 <switch_csg+0x124>
     c9e:	82 30       	cpi	r24, 0x02	; 2
     ca0:	91 05       	cpc	r25, r1
     ca2:	f9 f0       	breq	.+62     	; 0xce2 <switch_csg+0x9e>
     ca4:	03 97       	sbiw	r24, 0x03	; 3
     ca6:	09 f0       	breq	.+2      	; 0xcaa <switch_csg+0x66>
     ca8:	5f c0       	rjmp	.+190    	; 0xd68 <switch_csg+0x124>
     caa:	1e c0       	rjmp	.+60     	; 0xce8 <switch_csg+0xa4>
     cac:	87 30       	cpi	r24, 0x07	; 7
     cae:	91 05       	cpc	r25, r1
     cb0:	81 f1       	breq	.+96     	; 0xd12 <switch_csg+0xce>
     cb2:	88 30       	cpi	r24, 0x08	; 8
     cb4:	91 05       	cpc	r25, r1
     cb6:	3c f4       	brge	.+14     	; 0xcc6 <switch_csg+0x82>
     cb8:	85 30       	cpi	r24, 0x05	; 5
     cba:	91 05       	cpc	r25, r1
     cbc:	01 f1       	breq	.+64     	; 0xcfe <switch_csg+0xba>
     cbe:	06 97       	sbiw	r24, 0x06	; 6
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <switch_csg+0x80>
     cc2:	52 c0       	rjmp	.+164    	; 0xd68 <switch_csg+0x124>
     cc4:	23 c0       	rjmp	.+70     	; 0xd0c <switch_csg+0xc8>
     cc6:	88 30       	cpi	r24, 0x08	; 8
     cc8:	91 05       	cpc	r25, r1
     cca:	09 f4       	brne	.+2      	; 0xcce <switch_csg+0x8a>
     ccc:	3f c0       	rjmp	.+126    	; 0xd4c <switch_csg+0x108>
     cce:	09 97       	sbiw	r24, 0x09	; 9
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <switch_csg+0x90>
     cd2:	4a c0       	rjmp	.+148    	; 0xd68 <switch_csg+0x124>
     cd4:	46 c0       	rjmp	.+140    	; 0xd62 <switch_csg+0x11e>
	case 0: // Motorkarte Erfolgreich angesprochen
		lcd_puts("!");
     cd6:	8a ee       	ldi	r24, 0xEA	; 234
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	4f c0       	rjmp	.+158    	; 0xd7a <switch_csg+0x136>
		break;
	case 1: // Display l�schen
		lcd_clrscr();
     cdc:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
     ce0:	4e c0       	rjmp	.+156    	; 0xd7e <switch_csg+0x13a>
		break;
	case 2: // Interner Test
		lcd_puts("!T");
     ce2:	8c ee       	ldi	r24, 0xEC	; 236
     ce4:	92 e0       	ldi	r25, 0x02	; 2
     ce6:	49 c0       	rjmp	.+146    	; 0xd7a <switch_csg+0x136>
		//uart_puts("Test bestanden\n\r");
		break;
	case 3: // Status abfrage von Software
		lcd_puts("Statusabfrage     \n");
     ce8:	8f ee       	ldi	r24, 0xEF	; 239
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		csg_Status_melden();
     cf0:	0e 94 82 03 	call	0x704	; 0x704 <csg_Status_melden>
     cf4:	44 c0       	rjmp	.+136    	; 0xd7e <switch_csg+0x13a>
		break;
	case 4:
		String_zerlegen_csg(str_rx);
     cf6:	c8 01       	movw	r24, r16
     cf8:	0e 94 d5 03 	call	0x7aa	; 0x7aa <String_zerlegen_csg>
     cfc:	40 c0       	rjmp	.+128    	; 0xd7e <switch_csg+0x13a>

		break;
	case 5:
		lcd_puts("H:                 \n");
     cfe:	83 e0       	ldi	r24, 0x03	; 3
     d00:	93 e0       	ldi	r25, 0x03	; 3
     d02:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string(B_OK, D_RapidForm);
     d06:	84 ed       	ldi	r24, 0xD4	; 212
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	26 c0       	rjmp	.+76     	; 0xd58 <switch_csg+0x114>
		break;
	case 6:
		lcd_puts("Motor starten\n");
     d0c:	88 e1       	ldi	r24, 0x18	; 24
     d0e:	93 e0       	ldi	r25, 0x03	; 3
     d10:	34 c0       	rjmp	.+104    	; 0xd7a <switch_csg+0x136>
		//uart_put_string(B_OK, D_RapidForm);
		break;
	case 7:
		move++;
     d12:	80 91 6a 07 	lds	r24, 0x076A
     d16:	90 91 6b 07 	lds	r25, 0x076B
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	90 93 6b 07 	sts	0x076B, r25
     d20:	80 93 6a 07 	sts	0x076A, r24
		char it[10];
		itoa(move, it, 10);
     d24:	8e 01       	movw	r16, r28
     d26:	0f 5f       	subi	r16, 0xFF	; 255
     d28:	1f 4f       	sbci	r17, 0xFF	; 255
     d2a:	b8 01       	movw	r22, r16
     d2c:	4a e0       	ldi	r20, 0x0A	; 10
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	0e 94 76 0d 	call	0x1aec	; 0x1aec <itoa>
		lcd_puts(it);
     d34:	c8 01       	movw	r24, r16
     d36:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts("_Move!\n");
     d3a:	87 e2       	ldi	r24, 0x27	; 39
     d3c:	93 e0       	ldi	r25, 0x03	; 3
     d3e:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("M 160000\r\n",D_Stepper);
     d42:	8f e2       	ldi	r24, 0x2F	; 47
     d44:	93 e0       	ldi	r25, 0x03	; 3
     d46:	61 e0       	ldi	r22, 0x01	; 1
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	08 c0       	rjmp	.+16     	; 0xd5c <switch_csg+0x118>

		break;
	case 8:
		lcd_puts("R/B?");
     d4c:	8a e3       	ldi	r24, 0x3A	; 58
     d4e:	93 e0       	ldi	r25, 0x03	; 3
     d50:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("R\r\n", D_RapidForm);
     d54:	8f e3       	ldi	r24, 0x3F	; 63
     d56:	93 e0       	ldi	r25, 0x03	; 3
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
     d60:	0e c0       	rjmp	.+28     	; 0xd7e <switch_csg+0x13a>
		break;
	case 9:
		lcd_puts("H1 empfangen       \n");
     d62:	83 e4       	ldi	r24, 0x43	; 67
     d64:	93 e0       	ldi	r25, 0x03	; 3
     d66:	09 c0       	rjmp	.+18     	; 0xd7a <switch_csg+0x136>
		break;
	default:
		lcd_puts("U_B: ");
     d68:	88 e5       	ldi	r24, 0x58	; 88
     d6a:	93 e0       	ldi	r25, 0x03	; 3
     d6c:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(str_rx);
     d70:	c8 01       	movw	r24, r16
     d72:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts("!END       \n");
     d76:	8e e5       	ldi	r24, 0x5E	; 94
     d78:	93 e0       	ldi	r25, 0x03	; 3
     d7a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	}
}
     d7e:	a0 96       	adiw	r28, 0x20	; 32
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	08 95       	ret

00000d94 <switch_Stepper>:

}
// Vearbeitungs Logik

int Initialized = M_NOTI;
void 	switch_Stepper		(char * str_rx) {
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	2a 97       	sbiw	r28, 0x0a	; 10
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	8c 01       	movw	r16, r24
	const char* pOptions[] = {
			"#", 	// 0 - Stepper Karte Befehl erkannt
			"E", 	// 1 - Error
			"!CLS", // 2 - Clear Screen
			"Test", // 3 - Test
			0 };
     dae:	de 01       	movw	r26, r28
     db0:	11 96       	adiw	r26, 0x01	; 1
     db2:	e9 e5       	ldi	r30, 0x59	; 89
     db4:	f7 e0       	ldi	r31, 0x07	; 7
     db6:	8a e0       	ldi	r24, 0x0A	; 10
     db8:	01 90       	ld	r0, Z+
     dba:	0d 92       	st	X+, r0
     dbc:	81 50       	subi	r24, 0x01	; 1
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <switch_Stepper+0x24>
	switch (FindStringInArray(str_rx, pOptions, 1)) {
     dc0:	c8 01       	movw	r24, r16
     dc2:	be 01       	movw	r22, r28
     dc4:	6f 5f       	subi	r22, 0xFF	; 255
     dc6:	7f 4f       	sbci	r23, 0xFF	; 255
     dc8:	41 e0       	ldi	r20, 0x01	; 1
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	0e 94 47 05 	call	0xa8e	; 0xa8e <FindStringInArray>
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	91 05       	cpc	r25, r1
     dd4:	79 f0       	breq	.+30     	; 0xdf4 <switch_Stepper+0x60>
     dd6:	82 30       	cpi	r24, 0x02	; 2
     dd8:	91 05       	cpc	r25, r1
     dda:	1c f4       	brge	.+6      	; 0xde2 <switch_Stepper+0x4e>
     ddc:	89 2b       	or	r24, r25
     dde:	39 f0       	breq	.+14     	; 0xdee <switch_Stepper+0x5a>
     de0:	1a c0       	rjmp	.+52     	; 0xe16 <switch_Stepper+0x82>
     de2:	82 30       	cpi	r24, 0x02	; 2
     de4:	91 05       	cpc	r25, r1
     de6:	89 f0       	breq	.+34     	; 0xe0a <switch_Stepper+0x76>
     de8:	03 97       	sbiw	r24, 0x03	; 3
     dea:	a9 f4       	brne	.+42     	; 0xe16 <switch_Stepper+0x82>
     dec:	11 c0       	rjmp	.+34     	; 0xe10 <switch_Stepper+0x7c>
	case 0:
		lcd_puts("Erfolgreich\n");
     dee:	8b e6       	ldi	r24, 0x6B	; 107
     df0:	93 e0       	ldi	r25, 0x03	; 3
     df2:	1a c0       	rjmp	.+52     	; 0xe28 <switch_Stepper+0x94>
		//uart_put_string("0\n\r", D_RapidForm);
		break;
	case 1:
		lcd_puts("Error\n");
     df4:	88 e7       	ldi	r24, 0x78	; 120
     df6:	93 e0       	ldi	r25, 0x03	; 3
     df8:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("1\r\n", D_RapidForm);
     dfc:	8f e7       	ldi	r24, 0x7F	; 127
     dfe:	93 e0       	ldi	r25, 0x03	; 3
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
     e08:	11 c0       	rjmp	.+34     	; 0xe2c <switch_Stepper+0x98>
		break;
	case 2:
		lcd_clrscr();
     e0a:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
     e0e:	0e c0       	rjmp	.+28     	; 0xe2c <switch_Stepper+0x98>
		break;
	case 3:
		lcd_puts("Test bestanden\n");
     e10:	83 e8       	ldi	r24, 0x83	; 131
     e12:	93 e0       	ldi	r25, 0x03	; 3
     e14:	09 c0       	rjmp	.+18     	; 0xe28 <switch_Stepper+0x94>
		//uart_put_string("Test bestanden\n\r", D_RapidForm);
		break;
	default:
		lcd_puts("Antwort: ");
     e16:	83 e9       	ldi	r24, 0x93	; 147
     e18:	93 e0       	ldi	r25, 0x03	; 3
     e1a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(str_rx);
     e1e:	c8 01       	movw	r24, r16
     e20:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts("!\n");
     e24:	8d e9       	ldi	r24, 0x9D	; 157
     e26:	93 e0       	ldi	r25, 0x03	; 3
     e28:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		//uart_put_string(str_rx, D_RapidForm);
	}
}
     e2c:	2a 96       	adiw	r28, 0x0a	; 10
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	08 95       	ret

00000e42 <switch_Isel>:
void 	switch_Isel			(char * str_rx) {
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	c7 55       	subi	r28, 0x57	; 87
     e58:	d0 40       	sbci	r29, 0x00	; 0
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	6c 01       	movw	r12, r24
			"!CLS",    	// 1 - LC-Display l�schen
			"Test", 	// 2 - Test
			"@01",  	// 3 - Achse ausw�hlen
			"@0R", 		// 4 - Status abfrage
			"@0M", 		// 5 - Gehe zu Position MX , +600
			0 };
     e66:	de 01       	movw	r26, r28
     e68:	11 96       	adiw	r26, 0x01	; 1
     e6a:	e7 e4       	ldi	r30, 0x47	; 71
     e6c:	f7 e0       	ldi	r31, 0x07	; 7
     e6e:	8e e0       	ldi	r24, 0x0E	; 14
     e70:	01 90       	ld	r0, Z+
     e72:	0d 92       	st	X+, r0
     e74:	81 50       	subi	r24, 0x01	; 1
     e76:	e1 f7       	brne	.-8      	; 0xe70 <switch_Isel+0x2e>

	int Ret_Val = FindStringInArray(str_rx, pOptions, 3);
     e78:	c6 01       	movw	r24, r12
     e7a:	be 01       	movw	r22, r28
     e7c:	6f 5f       	subi	r22, 0xFF	; 255
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	43 e0       	ldi	r20, 0x03	; 3
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	0e 94 47 05 	call	0xa8e	; 0xa8e <FindStringInArray>
	switch (Ret_Val) {
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	91 05       	cpc	r25, r1
     e8c:	c9 f0       	breq	.+50     	; 0xec0 <switch_Isel+0x7e>
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	91 05       	cpc	r25, r1
     e92:	34 f4       	brge	.+12     	; 0xea0 <switch_Isel+0x5e>
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	71 f0       	breq	.+28     	; 0xeb4 <switch_Isel+0x72>
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	09 f0       	breq	.+2      	; 0xe9e <switch_Isel+0x5c>
     e9c:	f9 c0       	rjmp	.+498    	; 0x1090 <inner_1732+0x7c>
     e9e:	0d c0       	rjmp	.+26     	; 0xeba <switch_Isel+0x78>
     ea0:	84 30       	cpi	r24, 0x04	; 4
     ea2:	91 05       	cpc	r25, r1
     ea4:	f9 f0       	breq	.+62     	; 0xee4 <inner_1609+0xe>
     ea6:	84 30       	cpi	r24, 0x04	; 4
     ea8:	91 05       	cpc	r25, r1
     eaa:	8c f0       	brlt	.+34     	; 0xece <switch_Isel+0x8c>
     eac:	05 97       	sbiw	r24, 0x05	; 5
     eae:	09 f0       	breq	.+2      	; 0xeb2 <switch_Isel+0x70>
     eb0:	ef c0       	rjmp	.+478    	; 0x1090 <inner_1732+0x7c>
     eb2:	41 c0       	rjmp	.+130    	; 0xf36 <inner_1625+0x36>
	case 0: 		// 0 - Reserve
		lcd_puts("Reserve\r\n");
     eb4:	80 ea       	ldi	r24, 0xA0	; 160
     eb6:	93 e0       	ldi	r25, 0x03	; 3
     eb8:	f0 c0       	rjmp	.+480    	; 0x109a <inner_1732+0x86>
		break;
	case 1: 		// 1 - LC-Display l�schen
		lcd_clrscr();
     eba:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
     ebe:	ef c0       	rjmp	.+478    	; 0x109e <inner_1732+0x8a>
		break;
	case 2:			// 2 - Test
		lcd_puts("Test bestanden\n");
     ec0:	83 e8       	ldi	r24, 0x83	; 131
     ec2:	93 e0       	ldi	r25, 0x03	; 3
     ec4:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("Test bestanden\r\n", D_RapidForm);
     ec8:	8a ea       	ldi	r24, 0xAA	; 170
     eca:	93 e0       	ldi	r25, 0x03	; 3
     ecc:	dc c0       	rjmp	.+440    	; 0x1086 <inner_1732+0x72>
     ece:	8a e0       	ldi	r24, 0x0A	; 10
     ed0:	90 e0       	ldi	r25, 0x00	; 0

00000ed2 <outer_1609>:
     ed2:	a0 ed       	ldi	r26, 0xD0	; 208
     ed4:	b7 e0       	ldi	r27, 0x07	; 7

00000ed6 <inner_1609>:
     ed6:	11 97       	sbiw	r26, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <inner_1609>
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	d1 f7       	brne	.-12     	; 0xed2 <outer_1609>
			s_ptr++; // Increase string pointer
		} while( pgm_read_byte( s_ptr ) != 0x00 );  // End of string
		*/

		//lcd_puts( buf );
		lcd_puts("Init");
     ede:	8b eb       	ldi	r24, 0xBB	; 187
     ee0:	93 e0       	ldi	r25, 0x03	; 3
     ee2:	cd c0       	rjmp	.+410    	; 0x107e <inner_1732+0x6a>
		//String_zerlegen_Isel(str_rx, Position);
		uart_put_string("0\r\n", D_RapidForm);
		//uart_put_string(Protokoll.Motor[M_ISEL].Befehl[0].Output, D_RapidForm);
		break;
	case 4:			// 4 - Status abfrage
		lcd_puts("Statusabfrage:     \n");
     ee4:	80 ec       	ldi	r24, 0xC0	; 192
     ee6:	93 e0       	ldi	r25, 0x03	; 3
     ee8:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("A\n", D_Stepper);
     eec:	85 ed       	ldi	r24, 0xD5	; 213
     eee:	93 e0       	ldi	r25, 0x03	; 3
     ef0:	61 e0       	ldi	r22, 0x01	; 1
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
     ef8:	82 e3       	ldi	r24, 0x32	; 50
     efa:	90 e0       	ldi	r25, 0x00	; 0

00000efc <outer_1625>:
     efc:	a0 ed       	ldi	r26, 0xD0	; 208
     efe:	b7 e0       	ldi	r27, 0x07	; 7

00000f00 <inner_1625>:
     f00:	11 97       	sbiw	r26, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <inner_1625>
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	d1 f7       	brne	.-12     	; 0xefc <outer_1625>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
     f08:	80 91 c8 00 	lds	r24, 0x00C8
     f0c:	87 ff       	sbrs	r24, 7
     f0e:	04 c0       	rjmp	.+8      	; 0xf18 <inner_1625+0x18>
			uart_rx(D_Stepper);
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 5f 08 	call	0x10be	; 0x10be <uart_rx>
		if (!strcmp(str_rx,"0#"))
     f18:	c6 01       	movw	r24, r12
     f1a:	68 ed       	ldi	r22, 0xD8	; 216
     f1c:	73 e0       	ldi	r23, 0x03	; 3
     f1e:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <strcmp>
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	09 f4       	brne	.+2      	; 0xf28 <inner_1625+0x28>
     f26:	ad c0       	rjmp	.+346    	; 0x1082 <inner_1732+0x6e>
			uart_put_string("0\r\n", D_RapidForm);
		else {
			lcd_puts("Fehlgeschlagen     \n");
     f28:	8b ed       	ldi	r24, 0xDB	; 219
     f2a:	93 e0       	ldi	r25, 0x03	; 3
     f2c:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			uart_put_string("-1\r\n", D_RapidForm);
     f30:	80 ef       	ldi	r24, 0xF0	; 240
     f32:	93 e0       	ldi	r25, 0x03	; 3
     f34:	a8 c0       	rjmp	.+336    	; 0x1086 <inner_1732+0x72>
     f36:	8a e0       	ldi	r24, 0x0A	; 10
     f38:	90 e0       	ldi	r25, 0x00	; 0

00000f3a <outer_1654>:
     f3a:	a0 ed       	ldi	r26, 0xD0	; 208
     f3c:	b7 e0       	ldi	r27, 0x07	; 7

00000f3e <inner_1654>:
     f3e:	11 97       	sbiw	r26, 0x01	; 1
     f40:	f1 f7       	brne	.-4      	; 0xf3e <inner_1654>
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	d1 f7       	brne	.-12     	; 0xf3a <outer_1654>
		}
		break;
	case 5:			// 5 - Gehe zu Position MX , +600
		ms_spin(10);
		char Position[33];
		memset(Position, '\0', 33);
     f46:	2f e0       	ldi	r18, 0x0F	; 15
     f48:	e2 2e       	mov	r14, r18
     f4a:	f1 2c       	mov	r15, r1
     f4c:	ec 0e       	add	r14, r28
     f4e:	fd 1e       	adc	r15, r29
     f50:	81 e2       	ldi	r24, 0x21	; 33
     f52:	f7 01       	movw	r30, r14
     f54:	11 92       	st	Z+, r1
     f56:	8a 95       	dec	r24
     f58:	e9 f7       	brne	.-6      	; 0xf54 <inner_1654+0x16>
		String_zerlegen_Isel(str_rx, Position);
     f5a:	c6 01       	movw	r24, r12
     f5c:	b7 01       	movw	r22, r14
     f5e:	0e 94 de 04 	call	0x9bc	; 0x9bc <String_zerlegen_Isel>
		char Move_To[40];
		memset(Move_To,  '\0', 40);
     f62:	8e 01       	movw	r16, r28
     f64:	00 5d       	subi	r16, 0xD0	; 208
     f66:	1f 4f       	sbci	r17, 0xFF	; 255
     f68:	88 e2       	ldi	r24, 0x28	; 40
     f6a:	f8 01       	movw	r30, r16
     f6c:	11 92       	st	Z+, r1
     f6e:	8a 95       	dec	r24
     f70:	e9 f7       	brne	.-6      	; 0xf6c <inner_1654+0x2e>
		Move_To[0] = 'M';
     f72:	8d e4       	ldi	r24, 0x4D	; 77
     f74:	88 ab       	std	Y+48, r24	; 0x30
		Move_To[1] = 'A';
     f76:	81 e4       	ldi	r24, 0x41	; 65
     f78:	89 ab       	std	Y+49, r24	; 0x31
		Move_To[2] = ' ';
     f7a:	80 e2       	ldi	r24, 0x20	; 32
     f7c:	8a ab       	std	Y+50, r24	; 0x32
		Move_To[3] = '\0';
     f7e:	1b aa       	std	Y+51, r1	; 0x33
		strcat(Move_To, Position);
     f80:	c8 01       	movw	r24, r16
     f82:	b7 01       	movw	r22, r14
     f84:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <strcat>
		strcat(Move_To, "\n");
     f88:	c8 01       	movw	r24, r16
     f8a:	68 eb       	ldi	r22, 0xB8	; 184
     f8c:	71 e0       	ldi	r23, 0x01	; 1
     f8e:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <strcat>
		lcd_puts("Pos:");
     f92:	85 ef       	ldi	r24, 0xF5	; 245
     f94:	93 e0       	ldi	r25, 0x03	; 3
     f96:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(Move_To);
     f9a:	c8 01       	movw	r24, r16
     f9c:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>

		uart_put_string(Move_To, D_Stepper);
     fa0:	c8 01       	movw	r24, r16
     fa2:	61 e0       	ldi	r22, 0x01	; 1
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
     faa:	02 e3       	ldi	r16, 0x32	; 50
     fac:	10 e0       	ldi	r17, 0x00	; 0
     fae:	f8 01       	movw	r30, r16

00000fb0 <outer_1694>:
     fb0:	a0 ed       	ldi	r26, 0xD0	; 208
     fb2:	b7 e0       	ldi	r27, 0x07	; 7

00000fb4 <inner_1694>:
     fb4:	11 97       	sbiw	r26, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <inner_1694>
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	d1 f7       	brne	.-12     	; 0xfb0 <outer_1694>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
     fbc:	80 91 c8 00 	lds	r24, 0x00C8
     fc0:	87 ff       	sbrs	r24, 7
     fc2:	6d c0       	rjmp	.+218    	; 0x109e <inner_1732+0x8a>
			uart_rx(D_Stepper);
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 5f 08 	call	0x10be	; 0x10be <uart_rx>
		else {
			//lcd_puts("Befehl n. bestaetig\n");
			break;
		}

		uart_put_string("A\n", D_Stepper);
     fcc:	85 ed       	ldi	r24, 0xD5	; 213
     fce:	93 e0       	ldi	r25, 0x03	; 3
     fd0:	61 e0       	ldi	r22, 0x01	; 1
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
     fd8:	f8 01       	movw	r30, r16

00000fda <outer_1708>:
     fda:	a0 ed       	ldi	r26, 0xD0	; 208
     fdc:	b7 e0       	ldi	r27, 0x07	; 7

00000fde <inner_1708>:
     fde:	11 97       	sbiw	r26, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <inner_1708>
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	d1 f7       	brne	.-12     	; 0xfda <outer_1708>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
     fe6:	80 91 c8 00 	lds	r24, 0x00C8
     fea:	87 ff       	sbrs	r24, 7
     fec:	05 c0       	rjmp	.+10     	; 0xff8 <inner_1708+0x1a>
			uart_rx(D_Stepper);
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 5f 08 	call	0x10be	; 0x10be <uart_rx>
     ff6:	2c c0       	rjmp	.+88     	; 0x1050 <inner_1732+0x3c>
		else {
			lcd_puts("Keine Bewegung!\n");
     ff8:	8a ef       	ldi	r24, 0xFA	; 250
     ffa:	93 e0       	ldi	r25, 0x03	; 3
     ffc:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
    1000:	27 c0       	rjmp	.+78     	; 0x1050 <inner_1732+0x3c>
		}

		while (!strcmp(str_rx,"1#")){
			uart_put_string("A\n", D_Stepper);
    1002:	85 ed       	ldi	r24, 0xD5	; 213
    1004:	93 e0       	ldi	r25, 0x03	; 3
    1006:	61 e0       	ldi	r22, 0x01	; 1
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
    100e:	f7 01       	movw	r30, r14

00001010 <outer_1732>:
    1010:	a0 ed       	ldi	r26, 0xD0	; 208
    1012:	b7 e0       	ldi	r27, 0x07	; 7

00001014 <inner_1732>:
    1014:	11 97       	sbiw	r26, 0x01	; 1
    1016:	f1 f7       	brne	.-4      	; 0x1014 <inner_1732>
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	d1 f7       	brne	.-12     	; 0x1010 <outer_1732>
			ms_spin(50);
			if ((UCSR1A & (1 << RXC1))){
    101c:	80 91 c8 00 	lds	r24, 0x00C8
    1020:	87 ff       	sbrs	r24, 7
    1022:	10 c0       	rjmp	.+32     	; 0x1044 <inner_1732+0x30>
				uart_rx(D_Stepper);
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 5f 08 	call	0x10be	; 0x10be <uart_rx>
				lcd_clrscr();
    102c:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
				lcd_puts("running to\n");
    1030:	8b e0       	ldi	r24, 0x0B	; 11
    1032:	94 e0       	ldi	r25, 0x04	; 4
    1034:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
				lcd_puts("Position: ");
    1038:	87 e1       	ldi	r24, 0x17	; 23
    103a:	94 e0       	ldi	r25, 0x04	; 4
    103c:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
				lcd_puts(Position);
    1040:	c8 01       	movw	r24, r16
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <inner_1732+0x34>
			}
			else {
				lcd_puts("Keine Antwort\n");
    1044:	82 e2       	ldi	r24, 0x22	; 34
    1046:	94 e0       	ldi	r25, 0x04	; 4
    1048:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			}
			wdt_reset();
    104c:	a8 95       	wdr
    104e:	06 c0       	rjmp	.+12     	; 0x105c <inner_1732+0x48>
    1050:	92 e3       	ldi	r25, 0x32	; 50
    1052:	e9 2e       	mov	r14, r25
    1054:	f1 2c       	mov	r15, r1
			if ((UCSR1A & (1 << RXC1))){
				uart_rx(D_Stepper);
				lcd_clrscr();
				lcd_puts("running to\n");
				lcd_puts("Position: ");
				lcd_puts(Position);
    1056:	8e 01       	movw	r16, r28
    1058:	01 5f       	subi	r16, 0xF1	; 241
    105a:	1f 4f       	sbci	r17, 0xFF	; 255
			uart_rx(D_Stepper);
		else {
			lcd_puts("Keine Bewegung!\n");
		}

		while (!strcmp(str_rx,"1#")){
    105c:	c6 01       	movw	r24, r12
    105e:	61 e3       	ldi	r22, 0x31	; 49
    1060:	74 e0       	ldi	r23, 0x04	; 4
    1062:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <strcmp>
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	61 f2       	breq	.-104    	; 0x1002 <inner_1708+0x24>
			else {
				lcd_puts("Keine Antwort\n");
			}
			wdt_reset();
		}
		lcd_puts("Position: \n");
    106a:	84 e3       	ldi	r24, 0x34	; 52
    106c:	94 e0       	ldi	r25, 0x04	; 4
    106e:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(Position);
    1072:	ce 01       	movw	r24, r28
    1074:	0f 96       	adiw	r24, 0x0f	; 15
    1076:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(" Erreicht\n");
    107a:	80 e4       	ldi	r24, 0x40	; 64
    107c:	94 e0       	ldi	r25, 0x04	; 4
    107e:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("0\r\n", D_RapidForm);
    1082:	84 ed       	ldi	r24, 0xD4	; 212
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
    108e:	07 c0       	rjmp	.+14     	; 0x109e <inner_1732+0x8a>
		break;
	default:
		lcd_puts("ISEL:    \n");
    1090:	8b e4       	ldi	r24, 0x4B	; 75
    1092:	94 e0       	ldi	r25, 0x04	; 4
    1094:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(str_rx);
    1098:	c6 01       	movw	r24, r12
    109a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	}
}
    109e:	c9 5a       	subi	r28, 0xA9	; 169
    10a0:	df 4f       	sbci	r29, 0xFF	; 255
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	df 90       	pop	r13
    10ba:	cf 90       	pop	r12
    10bc:	08 95       	ret

000010be <uart_rx>:
		break;
	default:
		return M_UNK;
	}
}
void 	uart_rx				(int dir) {
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	8c 01       	movw	r16, r24
	uart_get_string(str_rx, dir);
    10c4:	82 e7       	ldi	r24, 0x72	; 114
    10c6:	97 e0       	ldi	r25, 0x07	; 7
    10c8:	b8 01       	movw	r22, r16
    10ca:	0e 94 2a 03 	call	0x654	; 0x654 <uart_get_string>
	if (dir == D_Stepper)
    10ce:	01 30       	cpi	r16, 0x01	; 1
    10d0:	11 05       	cpc	r17, r1
    10d2:	29 f4       	brne	.+10     	; 0x10de <uart_rx+0x20>
		switch_Stepper(str_rx);
    10d4:	82 e7       	ldi	r24, 0x72	; 114
    10d6:	97 e0       	ldi	r25, 0x07	; 7
    10d8:	0e 94 ca 06 	call	0xd94	; 0xd94 <switch_Stepper>
    10dc:	48 c0       	rjmp	.+144    	; 0x116e <uart_rx+0xb0>
	else{
		if(Initialized == M_UNK){
    10de:	80 91 83 06 	lds	r24, 0x0683
    10e2:	90 91 84 06 	lds	r25, 0x0684
    10e6:	8e 5f       	subi	r24, 0xFE	; 254
    10e8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ea:	51 f4       	brne	.+20     	; 0x1100 <uart_rx+0x42>
			lcd_puts("Unbekannter Motor!\n");
    10ec:	86 e5       	ldi	r24, 0x56	; 86
    10ee:	94 e0       	ldi	r25, 0x04	; 4
    10f0:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			//lcd_puts(str_rx);
			Initialized = M_NOTI;
    10f4:	8f ef       	ldi	r24, 0xFF	; 255
    10f6:	9f ef       	ldi	r25, 0xFF	; 255
    10f8:	90 93 84 06 	sts	0x0684, r25
    10fc:	80 93 83 06 	sts	0x0683, r24
		}
		if(Initialized == M_NOTI){
    1100:	80 91 83 06 	lds	r24, 0x0683
    1104:	90 91 84 06 	lds	r25, 0x0684
    1108:	8f 5f       	subi	r24, 0xFF	; 255
    110a:	9f 4f       	sbci	r25, 0xFF	; 255
    110c:	41 f4       	brne	.+16     	; 0x111e <uart_rx+0x60>
			Initialized = switch_Motor(str_rx);
    110e:	82 e7       	ldi	r24, 0x72	; 114
    1110:	97 e0       	ldi	r25, 0x07	; 7
    1112:	0e 94 70 05 	call	0xae0	; 0xae0 <switch_Motor>
    1116:	90 93 84 06 	sts	0x0684, r25
    111a:	80 93 83 06 	sts	0x0683, r24
		}
		if(Initialized == M_ISEL)
    111e:	80 91 83 06 	lds	r24, 0x0683
    1122:	90 91 84 06 	lds	r25, 0x0684
    1126:	89 2b       	or	r24, r25
    1128:	21 f4       	brne	.+8      	; 0x1132 <uart_rx+0x74>
			switch_Isel(str_rx);
    112a:	82 e7       	ldi	r24, 0x72	; 114
    112c:	97 e0       	ldi	r25, 0x07	; 7
    112e:	0e 94 21 07 	call	0xe42	; 0xe42 <switch_Isel>
		if(Initialized == M_CSG)
    1132:	80 91 83 06 	lds	r24, 0x0683
    1136:	90 91 84 06 	lds	r25, 0x0684
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	21 f4       	brne	.+8      	; 0x1146 <uart_rx+0x88>
			switch_csg(str_rx);
    113e:	82 e7       	ldi	r24, 0x72	; 114
    1140:	97 e0       	ldi	r25, 0x07	; 7
    1142:	0e 94 22 06 	call	0xc44	; 0xc44 <switch_csg>
		if(Initialized == M_ZETA)
    1146:	80 91 83 06 	lds	r24, 0x0683
    114a:	90 91 84 06 	lds	r25, 0x0684
    114e:	02 97       	sbiw	r24, 0x02	; 2
    1150:	21 f4       	brne	.+8      	; 0x115a <uart_rx+0x9c>
			switch_Zeta(str_rx);
    1152:	82 e7       	ldi	r24, 0x72	; 114
    1154:	97 e0       	ldi	r25, 0x07	; 7
    1156:	0e 94 ba 08 	call	0x1174	; 0x1174 <switch_Zeta>
		if(Initialized == M_TERMINAL)
    115a:	80 91 83 06 	lds	r24, 0x0683
    115e:	90 91 84 06 	lds	r25, 0x0684
    1162:	03 97       	sbiw	r24, 0x03	; 3
    1164:	21 f4       	brne	.+8      	; 0x116e <uart_rx+0xb0>
			switch_Terminal(str_rx);
    1166:	82 e7       	ldi	r24, 0x72	; 114
    1168:	97 e0       	ldi	r25, 0x07	; 7
    116a:	0e 94 b1 05 	call	0xb62	; 0xb62 <switch_Terminal>
	}
}
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	08 95       	ret

00001174 <switch_Zeta>:
		lcd_puts("U_B: ");
		lcd_puts(str_rx);
		lcd_puts("!END       \n");
	}
}
void 	switch_Zeta			(char * str_rx) {
    1174:	ef 92       	push	r14
    1176:	ff 92       	push	r15
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	c3 56       	subi	r28, 0x63	; 99
    1186:	d0 40       	sbci	r29, 0x00	; 0
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	7c 01       	movw	r14, r24
			"D1125",// 7 - Position
			"A8", 	// 8 - Accelartion 8
			"V8",	// 9 - Velocity 8
			"ECHO0",// 10 - Echo abschalten
			"PSET0",// 11 - Ursprung setzen
			0 };
    1194:	de 01       	movw	r26, r28
    1196:	11 96       	adiw	r26, 0x01	; 1
    1198:	e2 ef       	ldi	r30, 0xF2	; 242
    119a:	f6 e0       	ldi	r31, 0x06	; 6
    119c:	8a e1       	ldi	r24, 0x1A	; 26
    119e:	01 90       	ld	r0, Z+
    11a0:	0d 92       	st	X+, r0
    11a2:	81 50       	subi	r24, 0x01	; 1
    11a4:	e1 f7       	brne	.-8      	; 0x119e <switch_Zeta+0x2a>
	char Position[33];
	char Move_To[40];
	memset(Move_To,  '\0', 40);
    11a6:	8e 01       	movw	r16, r28
    11a8:	04 5c       	subi	r16, 0xC4	; 196
    11aa:	1f 4f       	sbci	r17, 0xFF	; 255
    11ac:	88 e2       	ldi	r24, 0x28	; 40
    11ae:	d8 01       	movw	r26, r16
    11b0:	1d 92       	st	X+, r1
    11b2:	8a 95       	dec	r24
    11b4:	e9 f7       	brne	.-6      	; 0x11b0 <switch_Zeta+0x3c>
	Move_To[0] = 'M';
    11b6:	8d e4       	ldi	r24, 0x4D	; 77
    11b8:	8c af       	std	Y+60, r24	; 0x3c
	Move_To[1] = 'A';
    11ba:	81 e4       	ldi	r24, 0x41	; 65
    11bc:	8d af       	std	Y+61, r24	; 0x3d
	Move_To[2] = ' ';
    11be:	80 e2       	ldi	r24, 0x20	; 32
    11c0:	8e af       	std	Y+62, r24	; 0x3e
	Move_To[3] = '\0';
    11c2:	1f ae       	std	Y+63, r1	; 0x3f
	switch (FindStringInArray(str_rx, pOptions, 1)) {
    11c4:	c7 01       	movw	r24, r14
    11c6:	be 01       	movw	r22, r28
    11c8:	6f 5f       	subi	r22, 0xFF	; 255
    11ca:	7f 4f       	sbci	r23, 0xFF	; 255
    11cc:	41 e0       	ldi	r20, 0x01	; 1
    11ce:	50 e0       	ldi	r21, 0x00	; 0
    11d0:	0e 94 47 05 	call	0xa8e	; 0xa8e <FindStringInArray>
    11d4:	87 30       	cpi	r24, 0x07	; 7
    11d6:	91 05       	cpc	r25, r1
    11d8:	6c f4       	brge	.+26     	; 0x11f4 <switch_Zeta+0x80>
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	91 05       	cpc	r25, r1
    11de:	0c f0       	brlt	.+2      	; 0x11e2 <switch_Zeta+0x6e>
    11e0:	bb c0       	rjmp	.+374    	; 0x1358 <inner_2055+0x98>
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	91 05       	cpc	r25, r1
    11e6:	c1 f0       	breq	.+48     	; 0x1218 <switch_Zeta+0xa4>
    11e8:	82 30       	cpi	r24, 0x02	; 2
    11ea:	91 05       	cpc	r25, r1
    11ec:	c4 f4       	brge	.+48     	; 0x121e <switch_Zeta+0xaa>
    11ee:	89 2b       	or	r24, r25
    11f0:	81 f0       	breq	.+32     	; 0x1212 <switch_Zeta+0x9e>
    11f2:	a7 c0       	rjmp	.+334    	; 0x1342 <inner_2055+0x82>
    11f4:	8a 30       	cpi	r24, 0x0A	; 10
    11f6:	91 05       	cpc	r25, r1
    11f8:	24 f4       	brge	.+8      	; 0x1202 <switch_Zeta+0x8e>
    11fa:	08 97       	sbiw	r24, 0x08	; 8
    11fc:	0c f0       	brlt	.+2      	; 0x1200 <switch_Zeta+0x8c>
    11fe:	ac c0       	rjmp	.+344    	; 0x1358 <inner_2055+0x98>
    1200:	8e c0       	rjmp	.+284    	; 0x131e <inner_2055+0x5e>
    1202:	8a 30       	cpi	r24, 0x0A	; 10
    1204:	91 05       	cpc	r25, r1
    1206:	09 f4       	brne	.+2      	; 0x120a <switch_Zeta+0x96>
    1208:	95 c0       	rjmp	.+298    	; 0x1334 <inner_2055+0x74>
    120a:	0b 97       	sbiw	r24, 0x0b	; 11
    120c:	09 f0       	breq	.+2      	; 0x1210 <switch_Zeta+0x9c>
    120e:	99 c0       	rjmp	.+306    	; 0x1342 <inner_2055+0x82>
    1210:	a3 c0       	rjmp	.+326    	; 0x1358 <inner_2055+0x98>
	case 0: // Display l�schen
		lcd_clrscr();
    1212:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
    1216:	a0 c0       	rjmp	.+320    	; 0x1358 <inner_2055+0x98>
		break;
	case 1: // Interner Test
		lcd_puts("Test bestanden     \n");
    1218:	8d eb       	ldi	r24, 0xBD	; 189
    121a:	92 e0       	ldi	r25, 0x02	; 2
    121c:	9b c0       	rjmp	.+310    	; 0x1354 <inner_2055+0x94>
    121e:	84 e6       	ldi	r24, 0x64	; 100
    1220:	90 e0       	ldi	r25, 0x00	; 0

00001222 <outer_1990>:
    1222:	a0 ed       	ldi	r26, 0xD0	; 208
    1224:	b7 e0       	ldi	r27, 0x07	; 7

00001226 <inner_1990>:
    1226:	11 97       	sbiw	r26, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <inner_1990>
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	d1 f7       	brne	.-12     	; 0x1222 <outer_1990>
		break;
	case 2: // Go
		ms_spin(100);
		strcat(Move_To, Position);
    122e:	c8 01       	movw	r24, r16
    1230:	be 01       	movw	r22, r28
    1232:	65 5e       	subi	r22, 0xE5	; 229
    1234:	7f 4f       	sbci	r23, 0xFF	; 255
    1236:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <strcat>
		strcat(Move_To, "\n");
    123a:	c8 01       	movw	r24, r16
    123c:	68 eb       	ldi	r22, 0xB8	; 184
    123e:	71 e0       	ldi	r23, 0x01	; 1
    1240:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <strcat>
		//lcd_puts("Pos:");
		//lcd_puts(Move_To);

		uart_put_string(Move_To, D_Stepper);
    1244:	c8 01       	movw	r24, r16
    1246:	61 e0       	ldi	r22, 0x01	; 1
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
    124e:	02 e3       	ldi	r16, 0x32	; 50
    1250:	10 e0       	ldi	r17, 0x00	; 0
    1252:	f8 01       	movw	r30, r16

00001254 <outer_2007>:
    1254:	a0 ed       	ldi	r26, 0xD0	; 208
    1256:	b7 e0       	ldi	r27, 0x07	; 7

00001258 <inner_2007>:
    1258:	11 97       	sbiw	r26, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <inner_2007>
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	d1 f7       	brne	.-12     	; 0x1254 <outer_2007>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    1260:	80 91 c8 00 	lds	r24, 0x00C8
    1264:	87 ff       	sbrs	r24, 7
    1266:	16 c0       	rjmp	.+44     	; 0x1294 <inner_2021+0x12>
			uart_rx(D_Stepper);
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	0e 94 5f 08 	call	0x10be	; 0x10be <uart_rx>
		else {
			lcd_puts("Befehl n. bestaetig\n");
			break;
		}

		uart_put_string("A\n", D_Stepper);
    1270:	85 ed       	ldi	r24, 0xD5	; 213
    1272:	93 e0       	ldi	r25, 0x03	; 3
    1274:	61 e0       	ldi	r22, 0x01	; 1
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
    127c:	f8 01       	movw	r30, r16

0000127e <outer_2021>:
    127e:	a0 ed       	ldi	r26, 0xD0	; 208
    1280:	b7 e0       	ldi	r27, 0x07	; 7

00001282 <inner_2021>:
    1282:	11 97       	sbiw	r26, 0x01	; 1
    1284:	f1 f7       	brne	.-4      	; 0x1282 <inner_2021>
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	d1 f7       	brne	.-12     	; 0x127e <outer_2021>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    128a:	80 91 c8 00 	lds	r24, 0x00C8
    128e:	88 23       	and	r24, r24
    1290:	4c f4       	brge	.+18     	; 0x12a4 <inner_2021+0x22>
    1292:	03 c0       	rjmp	.+6      	; 0x129a <inner_2021+0x18>
		uart_put_string(Move_To, D_Stepper);
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
			uart_rx(D_Stepper);
		else {
			lcd_puts("Befehl n. bestaetig\n");
    1294:	8a e6       	ldi	r24, 0x6A	; 106
    1296:	94 e0       	ldi	r25, 0x04	; 4
    1298:	5d c0       	rjmp	.+186    	; 0x1354 <inner_2055+0x94>
		}

		uart_put_string("A\n", D_Stepper);
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
			uart_rx(D_Stepper);
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 5f 08 	call	0x10be	; 0x10be <uart_rx>
    12a2:	25 c0       	rjmp	.+74     	; 0x12ee <inner_2055+0x2e>
		else {
			lcd_puts("Keine Bewegung!\n");
    12a4:	8a ef       	ldi	r24, 0xFA	; 250
    12a6:	93 e0       	ldi	r25, 0x03	; 3
    12a8:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
    12ac:	20 c0       	rjmp	.+64     	; 0x12ee <inner_2055+0x2e>
		}

		while (!strcmp(str_rx,"1#")){
			uart_put_string("A\n", D_Stepper);
    12ae:	85 ed       	ldi	r24, 0xD5	; 213
    12b0:	93 e0       	ldi	r25, 0x03	; 3
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
    12ba:	f8 01       	movw	r30, r16

000012bc <outer_2055>:
    12bc:	a0 ed       	ldi	r26, 0xD0	; 208
    12be:	b7 e0       	ldi	r27, 0x07	; 7

000012c0 <inner_2055>:
    12c0:	11 97       	sbiw	r26, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <inner_2055>
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	d1 f7       	brne	.-12     	; 0x12bc <outer_2055>
			ms_spin(50);
			if ((UCSR1A & (1 << RXC1))){
    12c8:	80 91 c8 00 	lds	r24, 0x00C8
    12cc:	87 ff       	sbrs	r24, 7
    12ce:	09 c0       	rjmp	.+18     	; 0x12e2 <inner_2055+0x22>
				uart_rx(D_Stepper);
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 5f 08 	call	0x10be	; 0x10be <uart_rx>
				lcd_clrscr();
    12d8:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
				lcd_puts("running\n");
    12dc:	8f e7       	ldi	r24, 0x7F	; 127
    12de:	94 e0       	ldi	r25, 0x04	; 4
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <inner_2055+0x26>
			}
			else {
				lcd_puts("Keine Antwort\n");
    12e2:	82 e2       	ldi	r24, 0x22	; 34
    12e4:	94 e0       	ldi	r25, 0x04	; 4
    12e6:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			}
			wdt_reset();
    12ea:	a8 95       	wdr
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <inner_2055+0x32>
    12ee:	02 e3       	ldi	r16, 0x32	; 50
    12f0:	10 e0       	ldi	r17, 0x00	; 0
			uart_rx(D_Stepper);
		else {
			lcd_puts("Keine Bewegung!\n");
		}

		while (!strcmp(str_rx,"1#")){
    12f2:	c7 01       	movw	r24, r14
    12f4:	61 e3       	ldi	r22, 0x31	; 49
    12f6:	74 e0       	ldi	r23, 0x04	; 4
    12f8:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <strcmp>
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	b9 f2       	breq	.-82     	; 0x12ae <inner_2021+0x2c>
			else {
				lcd_puts("Keine Antwort\n");
			}
			wdt_reset();
		}
		lcd_puts("Position: \n");
    1300:	84 e3       	ldi	r24, 0x34	; 52
    1302:	94 e0       	ldi	r25, 0x04	; 4
    1304:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(Position);
    1308:	ce 01       	movw	r24, r28
    130a:	4b 96       	adiw	r24, 0x1b	; 27
    130c:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(" Erreicht\n");
    1310:	80 e4       	ldi	r24, 0x40	; 64
    1312:	94 e0       	ldi	r25, 0x04	; 4
    1314:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		uart_put_string("\r\n>\040\r\n>\040\r\n>\040\r\n>\040", D_RapidForm);
    1318:	88 e8       	ldi	r24, 0x88	; 136
    131a:	94 e0       	ldi	r25, 0x04	; 4
    131c:	0d c0       	rjmp	.+26     	; 0x1338 <inner_2055+0x78>
		break;
	case 6:
		//lcd_puts("MA1 empfangen     \n");
		break;
	case 7: // Position Setzen
		memset(Position, '\0', 33);			// Array mit Nullen bef�llen
    131e:	fe 01       	movw	r30, r28
    1320:	7b 96       	adiw	r30, 0x1b	; 27
    1322:	81 e2       	ldi	r24, 0x21	; 33
    1324:	df 01       	movw	r26, r30
    1326:	1d 92       	st	X+, r1
    1328:	8a 95       	dec	r24
    132a:	e9 f7       	brne	.-6      	; 0x1326 <inner_2055+0x66>
		Position_Zeta(Position);
    132c:	cf 01       	movw	r24, r30
    132e:	0e 94 4d 03 	call	0x69a	; 0x69a <Position_Zeta>
    1332:	12 c0       	rjmp	.+36     	; 0x1358 <inner_2055+0x98>
		//lcd_puts("Speed set");
		break;
	case 10:
		//lcd_puts("Echo off           \n");
		//uart_put_string(str_rx, D_RapidForm);
		uart_put_string("ECHO0\r", D_RapidForm);
    1334:	89 e9       	ldi	r24, 0x99	; 153
    1336:	94 e0       	ldi	r25, 0x04	; 4
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
    1340:	0b c0       	rjmp	.+22     	; 0x1358 <inner_2055+0x98>
		break;
	case 11:
		break;
	default:
		lcd_puts("Z:");
    1342:	80 ea       	ldi	r24, 0xA0	; 160
    1344:	94 e0       	ldi	r25, 0x04	; 4
    1346:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts(str_rx);
    134a:	c7 01       	movw	r24, r14
    134c:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		lcd_puts("       \n");
    1350:	81 ee       	ldi	r24, 0xE1	; 225
    1352:	92 e0       	ldi	r25, 0x02	; 2
    1354:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
		//Initialized = switch_Inputs(str_rx);
	}
}
    1358:	cd 59       	subi	r28, 0x9D	; 157
    135a:	df 4f       	sbci	r29, 0xFF	; 255
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	ff 90       	pop	r15
    1370:	ef 90       	pop	r14
    1372:	08 95       	ret

00001374 <menu_puts>:
	lcd_puts("Selected: ");
	lcd_puts(name);

	ms_spin(750);
}
void 	menu_puts			(void *arg, char *name) {
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	8c 01       	movw	r16, r24
	//my_select(arg, name);
	uart_put_string(arg, D_Stepper);
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
	lcd_clrscr();
    1382:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
	lcd_puts("Send: ");
    1386:	83 ea       	ldi	r24, 0xA3	; 163
    1388:	94 e0       	ldi	r25, 0x04	; 4
    138a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts(arg);
    138e:	c8 01       	movw	r24, r16
    1390:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	lcd_puts("\n");
    1394:	88 eb       	ldi	r24, 0xB8	; 184
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
    139c:	84 e6       	ldi	r24, 0x64	; 100
    139e:	90 e0       	ldi	r25, 0x00	; 0

000013a0 <outer_2168>:
    13a0:	a0 ed       	ldi	r26, 0xD0	; 208
    13a2:	b7 e0       	ldi	r27, 0x07	; 7

000013a4 <inner_2168>:
    13a4:	11 97       	sbiw	r26, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <inner_2168>
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	d1 f7       	brne	.-12     	; 0x13a0 <outer_2168>
	ms_spin(100);
	//if ((UCSR1A & (1 << RXC1)))
	uart_rx(D_Stepper);
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 5f 08 	call	0x10be	; 0x10be <uart_rx>
    13b4:	88 ee       	ldi	r24, 0xE8	; 232
    13b6:	93 e0       	ldi	r25, 0x03	; 3

000013b8 <outer_2176>:
    13b8:	a0 ed       	ldi	r26, 0xD0	; 208
    13ba:	b7 e0       	ldi	r27, 0x07	; 7

000013bc <inner_2176>:
    13bc:	11 97       	sbiw	r26, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <inner_2176>
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	d1 f7       	brne	.-12     	; 0x13b8 <outer_2176>
	ms_spin(1000);
}
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	08 95       	ret

000013ca <main>:
//
//      Hauptschleife
//
//////////////////////////////
int main(void) {
	init();
    13ca:	0e 94 65 03 	call	0x6ca	; 0x6ca <init>
	while (1) {
		wdt_reset();
    13ce:	a8 95       	wdr
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    13d0:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    13d2:	90 91 d6 07 	lds	r25, 0x07D6
    13d6:	91 70       	andi	r25, 0x01	; 1
  key_press ^= key_mask;                          // clear key(s)
    13d8:	80 91 d6 07 	lds	r24, 0x07D6
    13dc:	89 27       	eor	r24, r25
    13de:	80 93 d6 07 	sts	0x07D6, r24
  sei();
    13e2:	78 94       	sei
		if (get_key_press(1 << KEY0) || get_key_rpt(1 << KEY0))
    13e4:	99 23       	and	r25, r25
    13e6:	61 f4       	brne	.+24     	; 0x1400 <main+0x36>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    13e8:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    13ea:	90 91 71 07 	lds	r25, 0x0771
    13ee:	91 70       	andi	r25, 0x01	; 1
  key_rpt ^= key_mask;                            // clear key(s)
    13f0:	80 91 71 07 	lds	r24, 0x0771
    13f4:	89 27       	eor	r24, r25
    13f6:	80 93 71 07 	sts	0x0771, r24
  sei();
    13fa:	78 94       	sei
    13fc:	99 23       	and	r25, r25
    13fe:	11 f0       	breq	.+4      	; 0x1404 <main+0x3a>
			led_lauflicht(); // LED Lauflicht
    1400:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <led_lauflicht>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1404:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1406:	90 91 d6 07 	lds	r25, 0x07D6
    140a:	92 70       	andi	r25, 0x02	; 2
  key_press ^= key_mask;                          // clear key(s)
    140c:	80 91 d6 07 	lds	r24, 0x07D6
    1410:	89 27       	eor	r24, r25
    1412:	80 93 d6 07 	sts	0x07D6, r24
  sei();
    1416:	78 94       	sei
		if (get_key_press(1 << KEY1))
    1418:	99 23       	and	r25, r25
    141a:	31 f0       	breq	.+12     	; 0x1428 <main+0x5e>
			uart_put_string("0\n", D_RapidForm);
    141c:	8a ea       	ldi	r24, 0xAA	; 170
    141e:	94 e0       	ldi	r25, 0x04	; 4
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_put_string>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1428:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    142a:	90 91 d6 07 	lds	r25, 0x07D6
    142e:	94 70       	andi	r25, 0x04	; 4
  key_press ^= key_mask;                          // clear key(s)
    1430:	80 91 d6 07 	lds	r24, 0x07D6
    1434:	89 27       	eor	r24, r25
    1436:	80 93 d6 07 	sts	0x07D6, r24
  sei();
    143a:	78 94       	sei
		if( get_key_press( 1<<KEY2 ) )
    143c:	99 23       	and	r25, r25
    143e:	11 f0       	breq	.+4      	; 0x1444 <main+0x7a>
			lcd_clrscr();
    1440:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1444:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1446:	90 91 d6 07 	lds	r25, 0x07D6
    144a:	98 70       	andi	r25, 0x08	; 8
  key_press ^= key_mask;                          // clear key(s)
    144c:	80 91 d6 07 	lds	r24, 0x07D6
    1450:	89 27       	eor	r24, r25
    1452:	80 93 d6 07 	sts	0x07D6, r24
  sei();
    1456:	78 94       	sei


		if (get_key_press(1 << KEY3)) {
    1458:	99 23       	and	r25, r25
    145a:	51 f0       	breq	.+20     	; 0x1470 <main+0xa6>
			lcd_puts("Betrete Men�!\n");
    145c:	8d ea       	ldi	r24, 0xAD	; 173
    145e:	94 e0       	ldi	r25, 0x04	; 4
    1460:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			menu_enter(&menu_context, &menu_main);
    1464:	80 e7       	ldi	r24, 0x70	; 112
    1466:	96 e0       	ldi	r25, 0x06	; 6
    1468:	63 e2       	ldi	r22, 0x23	; 35
    146a:	76 e0       	ldi	r23, 0x06	; 6
    146c:	0e 94 98 0b 	call	0x1730	; 0x1730 <menu_enter>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1470:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1472:	90 91 d6 07 	lds	r25, 0x07D6
    1476:	90 71       	andi	r25, 0x10	; 16
  key_press ^= key_mask;                          // clear key(s)
    1478:	80 91 d6 07 	lds	r24, 0x07D6
    147c:	89 27       	eor	r24, r25
    147e:	80 93 d6 07 	sts	0x07D6, r24
  sei();
    1482:	78 94       	sei
		}

		if (get_key_press(1 << KEY4))
    1484:	99 23       	and	r25, r25
    1486:	21 f0       	breq	.+8      	; 0x1490 <main+0xc6>
			menu_select(&menu_context); // 4 - Ausw�hlen
    1488:	80 e7       	ldi	r24, 0x70	; 112
    148a:	96 e0       	ldi	r25, 0x06	; 6
    148c:	0e 94 13 0c 	call	0x1826	; 0x1826 <menu_select>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1490:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1492:	90 91 d6 07 	lds	r25, 0x07D6
    1496:	90 72       	andi	r25, 0x20	; 32
  key_press ^= key_mask;                          // clear key(s)
    1498:	80 91 d6 07 	lds	r24, 0x07D6
    149c:	89 27       	eor	r24, r25
    149e:	80 93 d6 07 	sts	0x07D6, r24
  sei();
    14a2:	78 94       	sei
		if (get_key_press(1 << KEY5) || get_key_rpt(1 << KEY5)) // 5 - Next
    14a4:	99 23       	and	r25, r25
    14a6:	61 f4       	brne	.+24     	; 0x14c0 <main+0xf6>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14a8:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    14aa:	90 91 71 07 	lds	r25, 0x0771
    14ae:	90 72       	andi	r25, 0x20	; 32
  key_rpt ^= key_mask;                            // clear key(s)
    14b0:	80 91 71 07 	lds	r24, 0x0771
    14b4:	89 27       	eor	r24, r25
    14b6:	80 93 71 07 	sts	0x0771, r24
  sei();
    14ba:	78 94       	sei
    14bc:	99 23       	and	r25, r25
    14be:	21 f0       	breq	.+8      	; 0x14c8 <main+0xfe>
			menu_next_entry(&menu_context);
    14c0:	80 e7       	ldi	r24, 0x70	; 112
    14c2:	96 e0       	ldi	r25, 0x06	; 6
    14c4:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <menu_next_entry>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14c8:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    14ca:	90 91 d6 07 	lds	r25, 0x07D6
    14ce:	90 74       	andi	r25, 0x40	; 64
  key_press ^= key_mask;                          // clear key(s)
    14d0:	80 91 d6 07 	lds	r24, 0x07D6
    14d4:	89 27       	eor	r24, r25
    14d6:	80 93 d6 07 	sts	0x07D6, r24
  sei();
    14da:	78 94       	sei
		if (get_key_press(1 << KEY6) || get_key_rpt(1 << KEY6)) // 6 - Previous
    14dc:	99 23       	and	r25, r25
    14de:	61 f4       	brne	.+24     	; 0x14f8 <main+0x12e>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14e0:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    14e2:	90 91 71 07 	lds	r25, 0x0771
    14e6:	90 74       	andi	r25, 0x40	; 64
  key_rpt ^= key_mask;                            // clear key(s)
    14e8:	80 91 71 07 	lds	r24, 0x0771
    14ec:	89 27       	eor	r24, r25
    14ee:	80 93 71 07 	sts	0x0771, r24
  sei();
    14f2:	78 94       	sei
    14f4:	99 23       	and	r25, r25
    14f6:	21 f0       	breq	.+8      	; 0x1500 <main+0x136>
			menu_prev_entry(&menu_context);
    14f8:	80 e7       	ldi	r24, 0x70	; 112
    14fa:	96 e0       	ldi	r25, 0x06	; 6
    14fc:	0e 94 b7 0b 	call	0x176e	; 0x176e <menu_prev_entry>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1500:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1502:	90 91 d6 07 	lds	r25, 0x07D6
    1506:	90 78       	andi	r25, 0x80	; 128
  key_press ^= key_mask;                          // clear key(s)
    1508:	80 91 d6 07 	lds	r24, 0x07D6
    150c:	89 27       	eor	r24, r25
    150e:	80 93 d6 07 	sts	0x07D6, r24
  sei();
    1512:	78 94       	sei
		if (get_key_press(1 << KEY7))
    1514:	99 23       	and	r25, r25
    1516:	21 f0       	breq	.+8      	; 0x1520 <main+0x156>
			menu_exit(&menu_context); // 7 - Men� zur�ck
    1518:	80 e7       	ldi	r24, 0x70	; 112
    151a:	96 e0       	ldi	r25, 0x06	; 6
    151c:	0e 94 a6 0b 	call	0x174c	; 0x174c <menu_exit>

		if ((UCSR0A & (1 << RXC0)))
    1520:	80 91 c0 00 	lds	r24, 0x00C0
    1524:	87 ff       	sbrs	r24, 7
    1526:	04 c0       	rjmp	.+8      	; 0x1530 <main+0x166>
			uart_rx(D_RapidForm);
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 5f 08 	call	0x10be	; 0x10be <uart_rx>
		if ((UCSR1A & (1 << RXC1)))
    1530:	80 91 c8 00 	lds	r24, 0x00C8
    1534:	87 ff       	sbrs	r24, 7
    1536:	4b cf       	rjmp	.-362    	; 0x13ce <main+0x4>
			uart_rx(D_Stepper);
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 5f 08 	call	0x10be	; 0x10be <uart_rx>
    1540:	46 cf       	rjmp	.-372    	; 0x13ce <main+0x4>

00001542 <lcd_my_type>:
int 	switch_Motor		(char * str_rx);
void 	switch_Stepper		(char * str_rx);
void 	switch_Isel			(char * str_rx);
void 	switch_csg			(char * str_rx);
// LCD und LED Stuff
void 	lcd_my_type			(char *s) {
    1542:	ef 92       	push	r14
    1544:	ff 92       	push	r15
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	ec 01       	movw	r28, r24
	srand(TCNT0);
    1550:	86 b5       	in	r24, 0x26	; 38
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <srand>
    1558:	30 ed       	ldi	r19, 0xD0	; 208
    155a:	e3 2e       	mov	r14, r19
    155c:	37 e0       	ldi	r19, 0x07	; 7
    155e:	f3 2e       	mov	r15, r19
    1560:	17 c0       	rjmp	.+46     	; 0x1590 <lcd_my_type+0x4e>
	int min = 10;
	int max = 250;
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		erg = (rand() % (max - min + 1) + min);
    1562:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <rand>
    1566:	61 ef       	ldi	r22, 0xF1	; 241
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__divmodhi4>
    156e:	8c 01       	movw	r16, r24
    1570:	06 5f       	subi	r16, 0xF6	; 246
    1572:	1f 4f       	sbci	r17, 0xFF	; 255
		lcd_putc(*s);
    1574:	88 81       	ld	r24, Y
    1576:	0e 94 31 01 	call	0x262	; 0x262 <lcd_putc>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	04 c0       	rjmp	.+8      	; 0x1588 <lcd_my_type+0x46>
    1580:	f7 01       	movw	r30, r14
    1582:	31 97       	sbiw	r30, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <lcd_my_type+0x40>
		s++;
		for (int i = 0; i < erg; i++)
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	80 17       	cp	r24, r16
    158a:	91 07       	cpc	r25, r17
    158c:	cc f3       	brlt	.-14     	; 0x1580 <lcd_my_type+0x3e>
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		erg = (rand() % (max - min + 1) + min);
		lcd_putc(*s);
		s++;
    158e:	21 96       	adiw	r28, 0x01	; 1
void 	lcd_my_type			(char *s) {
	srand(TCNT0);
	int min = 10;
	int max = 250;
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
    1590:	88 81       	ld	r24, Y
    1592:	88 23       	and	r24, r24
    1594:	31 f7       	brne	.-52     	; 0x1562 <lcd_my_type+0x20>
		lcd_putc(*s);
		s++;
		for (int i = 0; i < erg; i++)
			_delay_ms(1);
	}
}
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	ff 90       	pop	r15
    15a0:	ef 90       	pop	r14
    15a2:	08 95       	ret

000015a4 <lcd_spielereien>:
void 	lcd_spielereien		(void) {
    15a4:	88 ee       	ldi	r24, 0xE8	; 232
    15a6:	93 e0       	ldi	r25, 0x03	; 3
    15a8:	28 ec       	ldi	r18, 0xC8	; 200
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	f9 01       	movw	r30, r18
    15ae:	31 97       	sbiw	r30, 0x01	; 1
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <lcd_spielereien+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b4:	d9 f7       	brne	.-10     	; 0x15ac <lcd_spielereien+0x8>
	_delay_ms(100);
	lcd_my_type("Hello Joe!\n");
    15b6:	8e eb       	ldi	r24, 0xBE	; 190
    15b8:	94 e0       	ldi	r25, 0x04	; 4
    15ba:	0e 94 a1 0a 	call	0x1542	; 0x1542 <lcd_my_type>
    15be:	80 ed       	ldi	r24, 0xD0	; 208
    15c0:	97 e0       	ldi	r25, 0x07	; 7
    15c2:	28 ec       	ldi	r18, 0xC8	; 200
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	f9 01       	movw	r30, r18
    15c8:	31 97       	sbiw	r30, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <lcd_spielereien+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ce:	d9 f7       	brne	.-10     	; 0x15c6 <lcd_spielereien+0x22>
	_delay_ms(200);
	lcd_my_type("Have a nice Day!\n");
    15d0:	8a ec       	ldi	r24, 0xCA	; 202
    15d2:	94 e0       	ldi	r25, 0x04	; 4
    15d4:	0e 94 a1 0a 	call	0x1542	; 0x1542 <lcd_my_type>
    15d8:	88 e8       	ldi	r24, 0x88	; 136
    15da:	93 e1       	ldi	r25, 0x13	; 19
    15dc:	28 ec       	ldi	r18, 0xC8	; 200
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	f9 01       	movw	r30, r18
    15e2:	31 97       	sbiw	r30, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <lcd_spielereien+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e8:	d9 f7       	brne	.-10     	; 0x15e0 <lcd_spielereien+0x3c>
	_delay_ms(500);
	lcd_my_type("Be a Honey Bee!\n");
    15ea:	8c ed       	ldi	r24, 0xDC	; 220
    15ec:	94 e0       	ldi	r25, 0x04	; 4
    15ee:	0e 94 a1 0a 	call	0x1542	; 0x1542 <lcd_my_type>
    15f2:	80 e7       	ldi	r24, 0x70	; 112
    15f4:	97 e1       	ldi	r25, 0x17	; 23
    15f6:	28 ec       	ldi	r18, 0xC8	; 200
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	f9 01       	movw	r30, r18
    15fc:	31 97       	sbiw	r30, 0x01	; 1
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <lcd_spielereien+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1600:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1602:	d9 f7       	brne	.-10     	; 0x15fa <lcd_spielereien+0x56>
	_delay_ms(600);
	lcd_clrscr();
    1604:	0e 94 29 01 	call	0x252	; 0x252 <lcd_clrscr>
}
    1608:	08 95       	ret

0000160a <menu_display>:
/*
 * Display the current menu in the context
 */
 
void menu_display(menu_context_t *context)
{
    160a:	9f 92       	push	r9
    160c:	af 92       	push	r10
    160e:	bf 92       	push	r11
    1610:	cf 92       	push	r12
    1612:	df 92       	push	r13
    1614:	ef 92       	push	r14
    1616:	ff 92       	push	r15
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	7c 01       	movw	r14, r24
	uint8_t i;
	menu_t *menu = context->menu;
    1622:	fc 01       	movw	r30, r24
    1624:	c4 80       	ldd	r12, Z+4	; 0x04
    1626:	d5 80       	ldd	r13, Z+5	; 0x05
    1628:	bb 24       	eor	r11, r11
    162a:	99 24       	eor	r9, r9
    162c:	52 c0       	rjmp	.+164    	; 0x16d2 <menu_display+0xc8>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    162e:	e9 2d       	mov	r30, r9
    1630:	f0 e0       	ldi	r31, 0x00	; 0
			if (dindex++ >= menu->num_entries - menu->top_entry)
    1632:	e2 17       	cp	r30, r18
    1634:	f3 07       	cpc	r31, r19
    1636:	0c f0       	brlt	.+2      	; 0x163a <menu_display+0x30>
    1638:	6b c0       	rjmp	.+214    	; 0x1710 <menu_display+0x106>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    163a:	8f 01       	movw	r16, r30
    163c:	04 0f       	add	r16, r20
    163e:	15 1f       	adc	r17, r21
			if (dindex++ >= menu->num_entries - menu->top_entry)
    1640:	93 94       	inc	r9
				goto entries_done;
		} while (disp_entry->flags & MENU_FLAG_HIDDEN);
    1642:	f8 01       	movw	r30, r16
    1644:	ee 0f       	add	r30, r30
    1646:	ff 1f       	adc	r31, r31
    1648:	e0 0f       	add	r30, r16
    164a:	f1 1f       	adc	r31, r17
    164c:	63 e0       	ldi	r22, 0x03	; 3
    164e:	ee 0f       	add	r30, r30
    1650:	ff 1f       	adc	r31, r31
    1652:	6a 95       	dec	r22
    1654:	e1 f7       	brne	.-8      	; 0x164e <menu_display+0x44>
    1656:	ec 0d       	add	r30, r12
    1658:	fd 1d       	adc	r31, r13
    165a:	85 81       	ldd	r24, Z+5	; 0x05
    165c:	81 fd       	sbrc	r24, 1
    165e:	e7 cf       	rjmp	.-50     	; 0x162e <menu_display+0x24>
			return;
#endif

		// Go to correct x,y locations and print the entry

		menu_set_pos(context->x_loc, context->y_loc + i);
    1660:	f7 01       	movw	r30, r14
    1662:	61 81       	ldd	r22, Z+1	; 0x01
    1664:	6b 0d       	add	r22, r11
    1666:	80 81       	ld	r24, Z
    1668:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_gotoxy>
	if (selected)
		menu_set_inverse();
#else
	// No inverse; do workaround

	max_width--;
    166c:	f7 01       	movw	r30, r14
    166e:	a3 80       	ldd	r10, Z+3	; 0x03
    1670:	aa 94       	dec	r10
	if (selected) {
    1672:	f6 01       	movw	r30, r12
    1674:	21 81       	ldd	r18, Z+1	; 0x01
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	2f 5f       	subi	r18, 0xFF	; 255
    167a:	3f 4f       	sbci	r19, 0xFF	; 255
    167c:	80 81       	ld	r24, Z
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	89 0d       	add	r24, r9
    1682:	91 1d       	adc	r25, r1
    1684:	28 17       	cp	r18, r24
    1686:	39 07       	cpc	r19, r25
    1688:	11 f4       	brne	.+4      	; 0x168e <menu_display+0x84>
		menu_putchar('*');
    168a:	8a e2       	ldi	r24, 0x2A	; 42
    168c:	01 c0       	rjmp	.+2      	; 0x1690 <menu_display+0x86>
	} else {
		menu_putchar(' ');
    168e:	80 e2       	ldi	r24, 0x20	; 32
    1690:	0e 94 31 01 	call	0x262	; 0x262 <lcd_putc>
    1694:	e8 01       	movw	r28, r16
    1696:	cc 0f       	add	r28, r28
    1698:	dd 1f       	adc	r29, r29
    169a:	c0 0f       	add	r28, r16
    169c:	d1 1f       	adc	r29, r17
    169e:	21 96       	adiw	r28, 0x01	; 1
    16a0:	83 e0       	ldi	r24, 0x03	; 3
    16a2:	cc 0f       	add	r28, r28
    16a4:	dd 1f       	adc	r29, r29
    16a6:	8a 95       	dec	r24
    16a8:	e1 f7       	brne	.-8      	; 0x16a2 <menu_display+0x98>
    16aa:	cc 0d       	add	r28, r12
    16ac:	dd 1d       	adc	r29, r13
    16ae:	10 e0       	ldi	r17, 0x00	; 0
    16b0:	06 c0       	rjmp	.+12     	; 0x16be <menu_display+0xb4>
	
	// Print the characters in the name; fill out to width with
	//  spaces (mainly for inverse)
	
	for (i = 0; i < max_width; i++) {
		if (!entry->name[i])
    16b2:	89 91       	ld	r24, Y+
    16b4:	88 23       	and	r24, r24
    16b6:	31 f0       	breq	.+12     	; 0x16c4 <menu_display+0xba>
			break;
			
		menu_putchar(entry->name[i]);
    16b8:	0e 94 31 01 	call	0x262	; 0x262 <lcd_putc>
#endif		
	
	// Print the characters in the name; fill out to width with
	//  spaces (mainly for inverse)
	
	for (i = 0; i < max_width; i++) {
    16bc:	1f 5f       	subi	r17, 0xFF	; 255
    16be:	1a 15       	cp	r17, r10
    16c0:	c0 f3       	brcs	.-16     	; 0x16b2 <menu_display+0xa8>
    16c2:	06 c0       	rjmp	.+12     	; 0x16d0 <menu_display+0xc6>
			
		menu_putchar(entry->name[i]);
	}
	
	for (; i < max_width; i++)
		menu_putchar(' ');
    16c4:	80 e2       	ldi	r24, 0x20	; 32
    16c6:	0e 94 31 01 	call	0x262	; 0x262 <lcd_putc>
			break;
			
		menu_putchar(entry->name[i]);
	}
	
	for (; i < max_width; i++)
    16ca:	1f 5f       	subi	r17, 0xFF	; 255
    16cc:	1a 15       	cp	r17, r10
    16ce:	d0 f3       	brcs	.-12     	; 0x16c4 <menu_display+0xba>
	menu_clear();
#endif

	// Display only those entries that will fit on the display

	for (i = 0; i < context->height; i++) {
    16d0:	b3 94       	inc	r11
    16d2:	f7 01       	movw	r30, r14
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	b8 16       	cp	r11, r24
    16d8:	d8 f4       	brcc	.+54     	; 0x1710 <menu_display+0x106>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    16da:	f6 01       	movw	r30, r12
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	50 e0       	ldi	r21, 0x00	; 0
			if (dindex++ >= menu->num_entries - menu->top_entry)
    16e2:	82 81       	ldd	r24, Z+2	; 0x02
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	24 1b       	sub	r18, r20
    16ea:	35 0b       	sbc	r19, r21
    16ec:	a0 cf       	rjmp	.-192    	; 0x162e <menu_display+0x24>

#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
		menu_set_pos(context->x_loc, context->y_loc + i);
    16ee:	f7 01       	movw	r30, r14
    16f0:	61 81       	ldd	r22, Z+1	; 0x01
    16f2:	6b 0d       	add	r22, r11
    16f4:	80 81       	ld	r24, Z
    16f6:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_gotoxy>
    16fa:	10 e0       	ldi	r17, 0x00	; 0
    16fc:	04 c0       	rjmp	.+8      	; 0x1706 <menu_display+0xfc>
		for (j = 0; j < context->width; j++) {
			menu_putchar(' ');
    16fe:	80 e2       	ldi	r24, 0x20	; 32
    1700:	0e 94 31 01 	call	0x262	; 0x262 <lcd_putc>
#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
		menu_set_pos(context->x_loc, context->y_loc + i);
		for (j = 0; j < context->width; j++) {
    1704:	1f 5f       	subi	r17, 0xFF	; 255
    1706:	f7 01       	movw	r30, r14
    1708:	83 81       	ldd	r24, Z+3	; 0x03
    170a:	18 17       	cp	r17, r24
    170c:	c0 f3       	brcs	.-16     	; 0x16fe <menu_display+0xf4>
entries_done:

#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
    170e:	b3 94       	inc	r11
    1710:	f7 01       	movw	r30, r14
    1712:	82 81       	ldd	r24, Z+2	; 0x02
    1714:	b8 16       	cp	r11, r24
    1716:	58 f3       	brcs	.-42     	; 0x16ee <menu_display+0xe4>
		for (j = 0; j < context->width; j++) {
			menu_putchar(' ');
		}
	}	
#endif	
}
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	ff 90       	pop	r15
    1722:	ef 90       	pop	r14
    1724:	df 90       	pop	r13
    1726:	cf 90       	pop	r12
    1728:	bf 90       	pop	r11
    172a:	af 90       	pop	r10
    172c:	9f 90       	pop	r9
    172e:	08 95       	ret

00001730 <menu_enter>:
 *  so when we exit we can go back, and update the menu context to
 *  reflect new menu... then display it.
 */

void menu_enter(menu_context_t *context, menu_t *menu)
{
    1730:	fc 01       	movw	r30, r24
    1732:	db 01       	movw	r26, r22
	menu->previous = context->menu;
    1734:	84 81       	ldd	r24, Z+4	; 0x04
    1736:	95 81       	ldd	r25, Z+5	; 0x05
    1738:	14 96       	adiw	r26, 0x04	; 4
    173a:	9c 93       	st	X, r25
    173c:	8e 93       	st	-X, r24
    173e:	13 97       	sbiw	r26, 0x03	; 3
	context->menu = menu;
    1740:	75 83       	std	Z+5, r23	; 0x05
    1742:	64 83       	std	Z+4, r22	; 0x04
	menu_display(context);
    1744:	cf 01       	movw	r24, r30
    1746:	0e 94 05 0b 	call	0x160a	; 0x160a <menu_display>
}
    174a:	08 95       	ret

0000174c <menu_exit>:
 * Exit a menu (go to the previous menu) -- if there is no previous
 *  menu, don't do anything.
 */

void menu_exit(menu_context_t *context)
{
    174c:	dc 01       	movw	r26, r24
	if (context->menu->previous) {
    174e:	14 96       	adiw	r26, 0x04	; 4
    1750:	ed 91       	ld	r30, X+
    1752:	fc 91       	ld	r31, X
    1754:	15 97       	sbiw	r26, 0x05	; 5
    1756:	83 81       	ldd	r24, Z+3	; 0x03
    1758:	94 81       	ldd	r25, Z+4	; 0x04
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	39 f0       	breq	.+14     	; 0x176c <menu_exit+0x20>
		context->menu = context->menu->previous;
    175e:	15 96       	adiw	r26, 0x05	; 5
    1760:	9c 93       	st	X, r25
    1762:	8e 93       	st	-X, r24
    1764:	14 97       	sbiw	r26, 0x04	; 4
		menu_display(context);
    1766:	cd 01       	movw	r24, r26
    1768:	0e 94 05 0b 	call	0x160a	; 0x160a <menu_display>
    176c:	08 95       	ret

0000176e <menu_prev_entry>:
 *  bounds.  Also adjust current top entry in display if needed to fit new
 *  entry on display.
 */ 

void menu_prev_entry(menu_context_t *context)
{
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	ec 01       	movw	r28, r24
	menu_t *menu = context->menu;
    1774:	ac 81       	ldd	r26, Y+4	; 0x04
    1776:	bd 81       	ldd	r27, Y+5	; 0x05
	uint8_t new_entry = menu->current_entry;
    1778:	11 96       	adiw	r26, 0x01	; 1
    177a:	2c 91       	ld	r18, X
    177c:	11 97       	sbiw	r26, 0x01	; 1
	

#ifndef CONFIG_TINYMENU_COMPACT
	while(1) {
		if (new_entry-- == 0) // Watch bounds
    177e:	22 23       	and	r18, r18
    1780:	e1 f0       	breq	.+56     	; 0x17ba <menu_prev_entry+0x4c>
    1782:	21 50       	subi	r18, 0x01	; 1
			return;
			
		if (!(menu->entry[new_entry].flags & MENU_FLAG_HIDDEN))
    1784:	82 2f       	mov	r24, r18
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	fc 01       	movw	r30, r24
    178a:	ee 0f       	add	r30, r30
    178c:	ff 1f       	adc	r31, r31
    178e:	e8 0f       	add	r30, r24
    1790:	f9 1f       	adc	r31, r25
    1792:	83 e0       	ldi	r24, 0x03	; 3
    1794:	ee 0f       	add	r30, r30
    1796:	ff 1f       	adc	r31, r31
    1798:	8a 95       	dec	r24
    179a:	e1 f7       	brne	.-8      	; 0x1794 <menu_prev_entry+0x26>
    179c:	ea 0f       	add	r30, r26
    179e:	fb 1f       	adc	r31, r27
    17a0:	85 81       	ldd	r24, Z+5	; 0x05
    17a2:	81 fd       	sbrc	r24, 1
    17a4:	ec cf       	rjmp	.-40     	; 0x177e <menu_prev_entry+0x10>
#else
	if (new_entry-- == 0)
		return;
#endif
	
	menu->current_entry = new_entry;
    17a6:	11 96       	adiw	r26, 0x01	; 1
    17a8:	2c 93       	st	X, r18
    17aa:	11 97       	sbiw	r26, 0x01	; 1
	
	if (menu->current_entry < menu->top_entry) 
    17ac:	8c 91       	ld	r24, X
    17ae:	28 17       	cp	r18, r24
    17b0:	08 f4       	brcc	.+2      	; 0x17b4 <menu_prev_entry+0x46>
		menu->top_entry = menu->current_entry;
    17b2:	2c 93       	st	X, r18
		
	menu_display(context);
    17b4:	ce 01       	movw	r24, r28
    17b6:	0e 94 05 0b 	call	0x160a	; 0x160a <menu_display>
}
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	08 95       	ret

000017c0 <menu_next_entry>:
 *  Also adjust current top entry in display if needed to fit new entry
 *  on display
 */
 
void menu_next_entry(menu_context_t *context)
{
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	ec 01       	movw	r28, r24
	menu_t *menu = context->menu;
    17c6:	ac 81       	ldd	r26, Y+4	; 0x04
    17c8:	bd 81       	ldd	r27, Y+5	; 0x05
	uint8_t new_entry = menu->current_entry;
    17ca:	11 96       	adiw	r26, 0x01	; 1
    17cc:	2c 91       	ld	r18, X
    17ce:	11 97       	sbiw	r26, 0x01	; 1
	

#ifndef CONFIG_TINYMENU_COMPACT
	while(1) {
		if (++new_entry >= menu->num_entries) // watch bounds
    17d0:	12 96       	adiw	r26, 0x02	; 2
    17d2:	9c 91       	ld	r25, X
    17d4:	12 97       	sbiw	r26, 0x02	; 2
    17d6:	2f 5f       	subi	r18, 0xFF	; 255
    17d8:	29 17       	cp	r18, r25
    17da:	10 f5       	brcc	.+68     	; 0x1820 <menu_next_entry+0x60>
			return;
		if (!(menu->entry[new_entry].flags & MENU_FLAG_HIDDEN))
    17dc:	42 2f       	mov	r20, r18
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	fa 01       	movw	r30, r20
    17e2:	ee 0f       	add	r30, r30
    17e4:	ff 1f       	adc	r31, r31
    17e6:	e4 0f       	add	r30, r20
    17e8:	f5 1f       	adc	r31, r21
    17ea:	63 e0       	ldi	r22, 0x03	; 3
    17ec:	ee 0f       	add	r30, r30
    17ee:	ff 1f       	adc	r31, r31
    17f0:	6a 95       	dec	r22
    17f2:	e1 f7       	brne	.-8      	; 0x17ec <menu_next_entry+0x2c>
    17f4:	ea 0f       	add	r30, r26
    17f6:	fb 1f       	adc	r31, r27
    17f8:	85 81       	ldd	r24, Z+5	; 0x05
    17fa:	81 fd       	sbrc	r24, 1
    17fc:	ec cf       	rjmp	.-40     	; 0x17d6 <menu_next_entry+0x16>
#else
	if (++new_entry >= menu->num_entries)
		return;
#endif
	
	menu->current_entry = new_entry;
    17fe:	11 96       	adiw	r26, 0x01	; 1
    1800:	2c 93       	st	X, r18
    1802:	11 97       	sbiw	r26, 0x01	; 1
	
	if (menu->current_entry >= menu->top_entry + context->height)
    1804:	3a 81       	ldd	r19, Y+2	; 0x02
    1806:	8c 91       	ld	r24, X
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	83 0f       	add	r24, r19
    180c:	91 1d       	adc	r25, r1
    180e:	48 17       	cp	r20, r24
    1810:	59 07       	cpc	r21, r25
    1812:	1c f0       	brlt	.+6      	; 0x181a <menu_next_entry+0x5a>
		menu->top_entry = menu->current_entry - context->height + 1;
    1814:	23 1b       	sub	r18, r19
    1816:	2f 5f       	subi	r18, 0xFF	; 255
    1818:	2c 93       	st	X, r18
	
	menu_display(context);
    181a:	ce 01       	movw	r24, r28
    181c:	0e 94 05 0b 	call	0x160a	; 0x160a <menu_display>
}
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	08 95       	ret

00001826 <menu_select>:
 *  enter the submenu)
 *
 */

void menu_select(menu_context_t *context)
{
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	8c 01       	movw	r16, r24
	menu_entry_t *entry;


	entry = &context->menu->entry[context->menu->current_entry];
    1830:	fc 01       	movw	r30, r24
    1832:	c4 81       	ldd	r28, Z+4	; 0x04
    1834:	d5 81       	ldd	r29, Z+5	; 0x05
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	90 e0       	ldi	r25, 0x00	; 0

	if (entry->flags & MENU_FLAG_SUBMENU) {
    183a:	9c 01       	movw	r18, r24
    183c:	22 0f       	add	r18, r18
    183e:	33 1f       	adc	r19, r19
    1840:	28 0f       	add	r18, r24
    1842:	39 1f       	adc	r19, r25
    1844:	d9 01       	movw	r26, r18
    1846:	f3 e0       	ldi	r31, 0x03	; 3
    1848:	aa 0f       	add	r26, r26
    184a:	bb 1f       	adc	r27, r27
    184c:	fa 95       	dec	r31
    184e:	e1 f7       	brne	.-8      	; 0x1848 <menu_select+0x22>
    1850:	ac 0f       	add	r26, r28
    1852:	bd 1f       	adc	r27, r29
    1854:	15 96       	adiw	r26, 0x05	; 5
    1856:	8c 91       	ld	r24, X
    1858:	15 97       	sbiw	r26, 0x05	; 5
    185a:	80 ff       	sbrs	r24, 0
    185c:	08 c0       	rjmp	.+16     	; 0x186e <menu_select+0x48>
		// Submenu -- enter it
	
		menu_enter(context, (menu_t *)entry->value);
    185e:	5b 96       	adiw	r26, 0x1b	; 27
    1860:	6d 91       	ld	r22, X+
    1862:	7c 91       	ld	r23, X
    1864:	5c 97       	sbiw	r26, 0x1c	; 28
    1866:	c8 01       	movw	r24, r16
    1868:	0e 94 98 0b 	call	0x1730	; 0x1730 <menu_enter>
    186c:	13 c0       	rjmp	.+38     	; 0x1894 <menu_select+0x6e>
	} else {
		// Regular entry -- execute function
	
		entry->select(entry->value, entry->name);
    186e:	c9 01       	movw	r24, r18
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	e3 e0       	ldi	r30, 0x03	; 3
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	ea 95       	dec	r30
    187a:	e1 f7       	brne	.-8      	; 0x1874 <menu_select+0x4e>
    187c:	c8 0f       	add	r28, r24
    187e:	d9 1f       	adc	r29, r25
    1880:	16 96       	adiw	r26, 0x06	; 6
    1882:	ed 91       	ld	r30, X+
    1884:	fc 91       	ld	r31, X
    1886:	17 97       	sbiw	r26, 0x07	; 7
    1888:	5b 96       	adiw	r26, 0x1b	; 27
    188a:	8d 91       	ld	r24, X+
    188c:	9c 91       	ld	r25, X
    188e:	5c 97       	sbiw	r26, 0x1c	; 28
    1890:	be 01       	movw	r22, r28
    1892:	09 95       	icall
	}
	
	// Re-display menu on return
	
	menu_display(context);
    1894:	c8 01       	movw	r24, r16
    1896:	0e 94 05 0b 	call	0x160a	; 0x160a <menu_display>
}
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	08 95       	ret

000018a4 <__mulsi3>:
    18a4:	62 9f       	mul	r22, r18
    18a6:	d0 01       	movw	r26, r0
    18a8:	73 9f       	mul	r23, r19
    18aa:	f0 01       	movw	r30, r0
    18ac:	82 9f       	mul	r24, r18
    18ae:	e0 0d       	add	r30, r0
    18b0:	f1 1d       	adc	r31, r1
    18b2:	64 9f       	mul	r22, r20
    18b4:	e0 0d       	add	r30, r0
    18b6:	f1 1d       	adc	r31, r1
    18b8:	92 9f       	mul	r25, r18
    18ba:	f0 0d       	add	r31, r0
    18bc:	83 9f       	mul	r24, r19
    18be:	f0 0d       	add	r31, r0
    18c0:	74 9f       	mul	r23, r20
    18c2:	f0 0d       	add	r31, r0
    18c4:	65 9f       	mul	r22, r21
    18c6:	f0 0d       	add	r31, r0
    18c8:	99 27       	eor	r25, r25
    18ca:	72 9f       	mul	r23, r18
    18cc:	b0 0d       	add	r27, r0
    18ce:	e1 1d       	adc	r30, r1
    18d0:	f9 1f       	adc	r31, r25
    18d2:	63 9f       	mul	r22, r19
    18d4:	b0 0d       	add	r27, r0
    18d6:	e1 1d       	adc	r30, r1
    18d8:	f9 1f       	adc	r31, r25
    18da:	bd 01       	movw	r22, r26
    18dc:	cf 01       	movw	r24, r30
    18de:	11 24       	eor	r1, r1
    18e0:	08 95       	ret

000018e2 <__divmodhi4>:
    18e2:	97 fb       	bst	r25, 7
    18e4:	09 2e       	mov	r0, r25
    18e6:	07 26       	eor	r0, r23
    18e8:	0a d0       	rcall	.+20     	; 0x18fe <__divmodhi4_neg1>
    18ea:	77 fd       	sbrc	r23, 7
    18ec:	04 d0       	rcall	.+8      	; 0x18f6 <__divmodhi4_neg2>
    18ee:	27 d0       	rcall	.+78     	; 0x193e <__udivmodhi4>
    18f0:	06 d0       	rcall	.+12     	; 0x18fe <__divmodhi4_neg1>
    18f2:	00 20       	and	r0, r0
    18f4:	1a f4       	brpl	.+6      	; 0x18fc <__divmodhi4_exit>

000018f6 <__divmodhi4_neg2>:
    18f6:	70 95       	com	r23
    18f8:	61 95       	neg	r22
    18fa:	7f 4f       	sbci	r23, 0xFF	; 255

000018fc <__divmodhi4_exit>:
    18fc:	08 95       	ret

000018fe <__divmodhi4_neg1>:
    18fe:	f6 f7       	brtc	.-4      	; 0x18fc <__divmodhi4_exit>
    1900:	90 95       	com	r25
    1902:	81 95       	neg	r24
    1904:	9f 4f       	sbci	r25, 0xFF	; 255
    1906:	08 95       	ret

00001908 <__divmodsi4>:
    1908:	97 fb       	bst	r25, 7
    190a:	09 2e       	mov	r0, r25
    190c:	05 26       	eor	r0, r21
    190e:	0e d0       	rcall	.+28     	; 0x192c <__divmodsi4_neg1>
    1910:	57 fd       	sbrc	r21, 7
    1912:	04 d0       	rcall	.+8      	; 0x191c <__divmodsi4_neg2>
    1914:	28 d0       	rcall	.+80     	; 0x1966 <__udivmodsi4>
    1916:	0a d0       	rcall	.+20     	; 0x192c <__divmodsi4_neg1>
    1918:	00 1c       	adc	r0, r0
    191a:	38 f4       	brcc	.+14     	; 0x192a <__divmodsi4_exit>

0000191c <__divmodsi4_neg2>:
    191c:	50 95       	com	r21
    191e:	40 95       	com	r20
    1920:	30 95       	com	r19
    1922:	21 95       	neg	r18
    1924:	3f 4f       	sbci	r19, 0xFF	; 255
    1926:	4f 4f       	sbci	r20, 0xFF	; 255
    1928:	5f 4f       	sbci	r21, 0xFF	; 255

0000192a <__divmodsi4_exit>:
    192a:	08 95       	ret

0000192c <__divmodsi4_neg1>:
    192c:	f6 f7       	brtc	.-4      	; 0x192a <__divmodsi4_exit>
    192e:	90 95       	com	r25
    1930:	80 95       	com	r24
    1932:	70 95       	com	r23
    1934:	61 95       	neg	r22
    1936:	7f 4f       	sbci	r23, 0xFF	; 255
    1938:	8f 4f       	sbci	r24, 0xFF	; 255
    193a:	9f 4f       	sbci	r25, 0xFF	; 255
    193c:	08 95       	ret

0000193e <__udivmodhi4>:
    193e:	aa 1b       	sub	r26, r26
    1940:	bb 1b       	sub	r27, r27
    1942:	51 e1       	ldi	r21, 0x11	; 17
    1944:	07 c0       	rjmp	.+14     	; 0x1954 <__udivmodhi4_ep>

00001946 <__udivmodhi4_loop>:
    1946:	aa 1f       	adc	r26, r26
    1948:	bb 1f       	adc	r27, r27
    194a:	a6 17       	cp	r26, r22
    194c:	b7 07       	cpc	r27, r23
    194e:	10 f0       	brcs	.+4      	; 0x1954 <__udivmodhi4_ep>
    1950:	a6 1b       	sub	r26, r22
    1952:	b7 0b       	sbc	r27, r23

00001954 <__udivmodhi4_ep>:
    1954:	88 1f       	adc	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	5a 95       	dec	r21
    195a:	a9 f7       	brne	.-22     	; 0x1946 <__udivmodhi4_loop>
    195c:	80 95       	com	r24
    195e:	90 95       	com	r25
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	08 95       	ret

00001966 <__udivmodsi4>:
    1966:	a1 e2       	ldi	r26, 0x21	; 33
    1968:	1a 2e       	mov	r1, r26
    196a:	aa 1b       	sub	r26, r26
    196c:	bb 1b       	sub	r27, r27
    196e:	fd 01       	movw	r30, r26
    1970:	0d c0       	rjmp	.+26     	; 0x198c <__udivmodsi4_ep>

00001972 <__udivmodsi4_loop>:
    1972:	aa 1f       	adc	r26, r26
    1974:	bb 1f       	adc	r27, r27
    1976:	ee 1f       	adc	r30, r30
    1978:	ff 1f       	adc	r31, r31
    197a:	a2 17       	cp	r26, r18
    197c:	b3 07       	cpc	r27, r19
    197e:	e4 07       	cpc	r30, r20
    1980:	f5 07       	cpc	r31, r21
    1982:	20 f0       	brcs	.+8      	; 0x198c <__udivmodsi4_ep>
    1984:	a2 1b       	sub	r26, r18
    1986:	b3 0b       	sbc	r27, r19
    1988:	e4 0b       	sbc	r30, r20
    198a:	f5 0b       	sbc	r31, r21

0000198c <__udivmodsi4_ep>:
    198c:	66 1f       	adc	r22, r22
    198e:	77 1f       	adc	r23, r23
    1990:	88 1f       	adc	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	1a 94       	dec	r1
    1996:	69 f7       	brne	.-38     	; 0x1972 <__udivmodsi4_loop>
    1998:	60 95       	com	r22
    199a:	70 95       	com	r23
    199c:	80 95       	com	r24
    199e:	90 95       	com	r25
    19a0:	9b 01       	movw	r18, r22
    19a2:	ac 01       	movw	r20, r24
    19a4:	bd 01       	movw	r22, r26
    19a6:	cf 01       	movw	r24, r30
    19a8:	08 95       	ret

000019aa <do_rand>:
    19aa:	a0 e0       	ldi	r26, 0x00	; 0
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	eb ed       	ldi	r30, 0xDB	; 219
    19b0:	fc e0       	ldi	r31, 0x0C	; 12
    19b2:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__prologue_saves__+0x10>
    19b6:	ec 01       	movw	r28, r24
    19b8:	a8 80       	ld	r10, Y
    19ba:	b9 80       	ldd	r11, Y+1	; 0x01
    19bc:	ca 80       	ldd	r12, Y+2	; 0x02
    19be:	db 80       	ldd	r13, Y+3	; 0x03
    19c0:	a1 14       	cp	r10, r1
    19c2:	b1 04       	cpc	r11, r1
    19c4:	c1 04       	cpc	r12, r1
    19c6:	d1 04       	cpc	r13, r1
    19c8:	41 f4       	brne	.+16     	; 0x19da <do_rand+0x30>
    19ca:	84 e2       	ldi	r24, 0x24	; 36
    19cc:	a8 2e       	mov	r10, r24
    19ce:	89 ed       	ldi	r24, 0xD9	; 217
    19d0:	b8 2e       	mov	r11, r24
    19d2:	8b e5       	ldi	r24, 0x5B	; 91
    19d4:	c8 2e       	mov	r12, r24
    19d6:	87 e0       	ldi	r24, 0x07	; 7
    19d8:	d8 2e       	mov	r13, r24
    19da:	c6 01       	movw	r24, r12
    19dc:	b5 01       	movw	r22, r10
    19de:	2d e1       	ldi	r18, 0x1D	; 29
    19e0:	33 ef       	ldi	r19, 0xF3	; 243
    19e2:	41 e0       	ldi	r20, 0x01	; 1
    19e4:	50 e0       	ldi	r21, 0x00	; 0
    19e6:	0e 94 84 0c 	call	0x1908	; 0x1908 <__divmodsi4>
    19ea:	27 ea       	ldi	r18, 0xA7	; 167
    19ec:	31 e4       	ldi	r19, 0x41	; 65
    19ee:	40 e0       	ldi	r20, 0x00	; 0
    19f0:	50 e0       	ldi	r21, 0x00	; 0
    19f2:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__mulsi3>
    19f6:	7b 01       	movw	r14, r22
    19f8:	8c 01       	movw	r16, r24
    19fa:	c6 01       	movw	r24, r12
    19fc:	b5 01       	movw	r22, r10
    19fe:	2d e1       	ldi	r18, 0x1D	; 29
    1a00:	33 ef       	ldi	r19, 0xF3	; 243
    1a02:	41 e0       	ldi	r20, 0x01	; 1
    1a04:	50 e0       	ldi	r21, 0x00	; 0
    1a06:	0e 94 84 0c 	call	0x1908	; 0x1908 <__divmodsi4>
    1a0a:	ca 01       	movw	r24, r20
    1a0c:	b9 01       	movw	r22, r18
    1a0e:	2c ee       	ldi	r18, 0xEC	; 236
    1a10:	34 ef       	ldi	r19, 0xF4	; 244
    1a12:	4f ef       	ldi	r20, 0xFF	; 255
    1a14:	5f ef       	ldi	r21, 0xFF	; 255
    1a16:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__mulsi3>
    1a1a:	6e 0d       	add	r22, r14
    1a1c:	7f 1d       	adc	r23, r15
    1a1e:	80 1f       	adc	r24, r16
    1a20:	91 1f       	adc	r25, r17
    1a22:	97 ff       	sbrs	r25, 7
    1a24:	04 c0       	rjmp	.+8      	; 0x1a2e <do_rand+0x84>
    1a26:	61 50       	subi	r22, 0x01	; 1
    1a28:	70 40       	sbci	r23, 0x00	; 0
    1a2a:	80 40       	sbci	r24, 0x00	; 0
    1a2c:	90 48       	sbci	r25, 0x80	; 128
    1a2e:	68 83       	st	Y, r22
    1a30:	79 83       	std	Y+1, r23	; 0x01
    1a32:	8a 83       	std	Y+2, r24	; 0x02
    1a34:	9b 83       	std	Y+3, r25	; 0x03
    1a36:	9b 01       	movw	r18, r22
    1a38:	3f 77       	andi	r19, 0x7F	; 127
    1a3a:	c9 01       	movw	r24, r18
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	ea e0       	ldi	r30, 0x0A	; 10
    1a42:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__epilogue_restores__+0x10>

00001a46 <rand_r>:
    1a46:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <do_rand>
    1a4a:	08 95       	ret

00001a4c <rand>:
    1a4c:	83 e6       	ldi	r24, 0x63	; 99
    1a4e:	97 e0       	ldi	r25, 0x07	; 7
    1a50:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <do_rand>
    1a54:	08 95       	ret

00001a56 <srand>:
    1a56:	a0 e0       	ldi	r26, 0x00	; 0
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	80 93 63 07 	sts	0x0763, r24
    1a5e:	90 93 64 07 	sts	0x0764, r25
    1a62:	a0 93 65 07 	sts	0x0765, r26
    1a66:	b0 93 66 07 	sts	0x0766, r27
    1a6a:	08 95       	ret

00001a6c <atoi>:
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	88 27       	eor	r24, r24
    1a70:	99 27       	eor	r25, r25
    1a72:	e8 94       	clt
    1a74:	21 91       	ld	r18, Z+
    1a76:	20 32       	cpi	r18, 0x20	; 32
    1a78:	e9 f3       	breq	.-6      	; 0x1a74 <atoi+0x8>
    1a7a:	29 30       	cpi	r18, 0x09	; 9
    1a7c:	10 f0       	brcs	.+4      	; 0x1a82 <atoi+0x16>
    1a7e:	2e 30       	cpi	r18, 0x0E	; 14
    1a80:	c8 f3       	brcs	.-14     	; 0x1a74 <atoi+0x8>
    1a82:	2b 32       	cpi	r18, 0x2B	; 43
    1a84:	41 f0       	breq	.+16     	; 0x1a96 <atoi+0x2a>
    1a86:	2d 32       	cpi	r18, 0x2D	; 45
    1a88:	39 f4       	brne	.+14     	; 0x1a98 <atoi+0x2c>
    1a8a:	68 94       	set
    1a8c:	04 c0       	rjmp	.+8      	; 0x1a96 <atoi+0x2a>
    1a8e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulhi_const_10>
    1a92:	82 0f       	add	r24, r18
    1a94:	91 1d       	adc	r25, r1
    1a96:	21 91       	ld	r18, Z+
    1a98:	20 53       	subi	r18, 0x30	; 48
    1a9a:	2a 30       	cpi	r18, 0x0A	; 10
    1a9c:	c0 f3       	brcs	.-16     	; 0x1a8e <atoi+0x22>
    1a9e:	1e f4       	brtc	.+6      	; 0x1aa6 <atoi+0x3a>
    1aa0:	90 95       	com	r25
    1aa2:	81 95       	neg	r24
    1aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa6:	08 95       	ret

00001aa8 <strcat>:
    1aa8:	fb 01       	movw	r30, r22
    1aaa:	dc 01       	movw	r26, r24
    1aac:	0d 90       	ld	r0, X+
    1aae:	00 20       	and	r0, r0
    1ab0:	e9 f7       	brne	.-6      	; 0x1aac <strcat+0x4>
    1ab2:	11 97       	sbiw	r26, 0x01	; 1
    1ab4:	01 90       	ld	r0, Z+
    1ab6:	0d 92       	st	X+, r0
    1ab8:	00 20       	and	r0, r0
    1aba:	e1 f7       	brne	.-8      	; 0x1ab4 <strcat+0xc>
    1abc:	08 95       	ret

00001abe <strcmp>:
    1abe:	fb 01       	movw	r30, r22
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	8d 91       	ld	r24, X+
    1ac4:	01 90       	ld	r0, Z+
    1ac6:	80 19       	sub	r24, r0
    1ac8:	01 10       	cpse	r0, r1
    1aca:	d9 f3       	breq	.-10     	; 0x1ac2 <strcmp+0x4>
    1acc:	99 0b       	sbc	r25, r25
    1ace:	08 95       	ret

00001ad0 <strncmp>:
    1ad0:	fb 01       	movw	r30, r22
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	41 50       	subi	r20, 0x01	; 1
    1ad6:	50 40       	sbci	r21, 0x00	; 0
    1ad8:	30 f0       	brcs	.+12     	; 0x1ae6 <strncmp+0x16>
    1ada:	8d 91       	ld	r24, X+
    1adc:	01 90       	ld	r0, Z+
    1ade:	80 19       	sub	r24, r0
    1ae0:	19 f4       	brne	.+6      	; 0x1ae8 <strncmp+0x18>
    1ae2:	00 20       	and	r0, r0
    1ae4:	b9 f7       	brne	.-18     	; 0x1ad4 <strncmp+0x4>
    1ae6:	88 1b       	sub	r24, r24
    1ae8:	99 0b       	sbc	r25, r25
    1aea:	08 95       	ret

00001aec <itoa>:
    1aec:	fb 01       	movw	r30, r22
    1aee:	9f 01       	movw	r18, r30
    1af0:	e8 94       	clt
    1af2:	42 30       	cpi	r20, 0x02	; 2
    1af4:	c4 f0       	brlt	.+48     	; 0x1b26 <itoa+0x3a>
    1af6:	45 32       	cpi	r20, 0x25	; 37
    1af8:	b4 f4       	brge	.+44     	; 0x1b26 <itoa+0x3a>
    1afa:	4a 30       	cpi	r20, 0x0A	; 10
    1afc:	29 f4       	brne	.+10     	; 0x1b08 <itoa+0x1c>
    1afe:	97 fb       	bst	r25, 7
    1b00:	1e f4       	brtc	.+6      	; 0x1b08 <itoa+0x1c>
    1b02:	90 95       	com	r25
    1b04:	81 95       	neg	r24
    1b06:	9f 4f       	sbci	r25, 0xFF	; 255
    1b08:	64 2f       	mov	r22, r20
    1b0a:	77 27       	eor	r23, r23
    1b0c:	0e 94 9f 0c 	call	0x193e	; 0x193e <__udivmodhi4>
    1b10:	80 5d       	subi	r24, 0xD0	; 208
    1b12:	8a 33       	cpi	r24, 0x3A	; 58
    1b14:	0c f0       	brlt	.+2      	; 0x1b18 <itoa+0x2c>
    1b16:	89 5d       	subi	r24, 0xD9	; 217
    1b18:	81 93       	st	Z+, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	a1 f7       	brne	.-24     	; 0x1b08 <itoa+0x1c>
    1b20:	16 f4       	brtc	.+4      	; 0x1b26 <itoa+0x3a>
    1b22:	5d e2       	ldi	r21, 0x2D	; 45
    1b24:	51 93       	st	Z+, r21
    1b26:	10 82       	st	Z, r1
    1b28:	c9 01       	movw	r24, r18
    1b2a:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <strrev>

00001b2e <ltoa>:
    1b2e:	fa 01       	movw	r30, r20
    1b30:	cf 93       	push	r28
    1b32:	ff 93       	push	r31
    1b34:	ef 93       	push	r30
    1b36:	22 30       	cpi	r18, 0x02	; 2
    1b38:	44 f1       	brlt	.+80     	; 0x1b8a <ltoa+0x5c>
    1b3a:	25 32       	cpi	r18, 0x25	; 37
    1b3c:	34 f5       	brge	.+76     	; 0x1b8a <ltoa+0x5c>
    1b3e:	c2 2f       	mov	r28, r18
    1b40:	e8 94       	clt
    1b42:	ca 30       	cpi	r28, 0x0A	; 10
    1b44:	49 f4       	brne	.+18     	; 0x1b58 <ltoa+0x2a>
    1b46:	97 fb       	bst	r25, 7
    1b48:	3e f4       	brtc	.+14     	; 0x1b58 <ltoa+0x2a>
    1b4a:	90 95       	com	r25
    1b4c:	80 95       	com	r24
    1b4e:	70 95       	com	r23
    1b50:	61 95       	neg	r22
    1b52:	7f 4f       	sbci	r23, 0xFF	; 255
    1b54:	8f 4f       	sbci	r24, 0xFF	; 255
    1b56:	9f 4f       	sbci	r25, 0xFF	; 255
    1b58:	2c 2f       	mov	r18, r28
    1b5a:	33 27       	eor	r19, r19
    1b5c:	44 27       	eor	r20, r20
    1b5e:	55 27       	eor	r21, r21
    1b60:	ff 93       	push	r31
    1b62:	ef 93       	push	r30
    1b64:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__udivmodsi4>
    1b68:	ef 91       	pop	r30
    1b6a:	ff 91       	pop	r31
    1b6c:	60 5d       	subi	r22, 0xD0	; 208
    1b6e:	6a 33       	cpi	r22, 0x3A	; 58
    1b70:	0c f0       	brlt	.+2      	; 0x1b74 <ltoa+0x46>
    1b72:	69 5d       	subi	r22, 0xD9	; 217
    1b74:	61 93       	st	Z+, r22
    1b76:	b9 01       	movw	r22, r18
    1b78:	ca 01       	movw	r24, r20
    1b7a:	60 50       	subi	r22, 0x00	; 0
    1b7c:	70 40       	sbci	r23, 0x00	; 0
    1b7e:	80 40       	sbci	r24, 0x00	; 0
    1b80:	90 40       	sbci	r25, 0x00	; 0
    1b82:	51 f7       	brne	.-44     	; 0x1b58 <ltoa+0x2a>
    1b84:	16 f4       	brtc	.+4      	; 0x1b8a <ltoa+0x5c>
    1b86:	cd e2       	ldi	r28, 0x2D	; 45
    1b88:	c1 93       	st	Z+, r28
    1b8a:	10 82       	st	Z, r1
    1b8c:	8f 91       	pop	r24
    1b8e:	9f 91       	pop	r25
    1b90:	cf 91       	pop	r28
    1b92:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <strrev>

00001b96 <__mulhi_const_10>:
    1b96:	7a e0       	ldi	r23, 0x0A	; 10
    1b98:	97 9f       	mul	r25, r23
    1b9a:	90 2d       	mov	r25, r0
    1b9c:	87 9f       	mul	r24, r23
    1b9e:	80 2d       	mov	r24, r0
    1ba0:	91 0d       	add	r25, r1
    1ba2:	11 24       	eor	r1, r1
    1ba4:	08 95       	ret

00001ba6 <strrev>:
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	fc 01       	movw	r30, r24
    1baa:	67 2f       	mov	r22, r23
    1bac:	71 91       	ld	r23, Z+
    1bae:	77 23       	and	r23, r23
    1bb0:	e1 f7       	brne	.-8      	; 0x1baa <strrev+0x4>
    1bb2:	32 97       	sbiw	r30, 0x02	; 2
    1bb4:	04 c0       	rjmp	.+8      	; 0x1bbe <strrev+0x18>
    1bb6:	7c 91       	ld	r23, X
    1bb8:	6d 93       	st	X+, r22
    1bba:	70 83       	st	Z, r23
    1bbc:	62 91       	ld	r22, -Z
    1bbe:	ae 17       	cp	r26, r30
    1bc0:	bf 07       	cpc	r27, r31
    1bc2:	c8 f3       	brcs	.-14     	; 0x1bb6 <strrev+0x10>
    1bc4:	08 95       	ret

00001bc6 <__prologue_saves__>:
    1bc6:	2f 92       	push	r2
    1bc8:	3f 92       	push	r3
    1bca:	4f 92       	push	r4
    1bcc:	5f 92       	push	r5
    1bce:	6f 92       	push	r6
    1bd0:	7f 92       	push	r7
    1bd2:	8f 92       	push	r8
    1bd4:	9f 92       	push	r9
    1bd6:	af 92       	push	r10
    1bd8:	bf 92       	push	r11
    1bda:	cf 92       	push	r12
    1bdc:	df 92       	push	r13
    1bde:	ef 92       	push	r14
    1be0:	ff 92       	push	r15
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	ca 1b       	sub	r28, r26
    1bf0:	db 0b       	sbc	r29, r27
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	09 94       	ijmp

00001bfe <__epilogue_restores__>:
    1bfe:	2a 88       	ldd	r2, Y+18	; 0x12
    1c00:	39 88       	ldd	r3, Y+17	; 0x11
    1c02:	48 88       	ldd	r4, Y+16	; 0x10
    1c04:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c06:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c08:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c10:	b9 84       	ldd	r11, Y+9	; 0x09
    1c12:	c8 84       	ldd	r12, Y+8	; 0x08
    1c14:	df 80       	ldd	r13, Y+7	; 0x07
    1c16:	ee 80       	ldd	r14, Y+6	; 0x06
    1c18:	fd 80       	ldd	r15, Y+5	; 0x05
    1c1a:	0c 81       	ldd	r16, Y+4	; 0x04
    1c1c:	1b 81       	ldd	r17, Y+3	; 0x03
    1c1e:	aa 81       	ldd	r26, Y+2	; 0x02
    1c20:	b9 81       	ldd	r27, Y+1	; 0x01
    1c22:	ce 0f       	add	r28, r30
    1c24:	d1 1d       	adc	r29, r1
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	ed 01       	movw	r28, r26
    1c32:	08 95       	ret

00001c34 <_exit>:
    1c34:	f8 94       	cli

00001c36 <__stop_program>:
    1c36:	ff cf       	rjmp	.-2      	; 0x1c36 <__stop_program>
