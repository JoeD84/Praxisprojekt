
Translator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006ea  00800100  00001c6e  00001d02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  008007ea  008007ea  000023ec  2**0
                  ALLOC
  3 .stab         00003cf0  00000000  00000000  000023ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015a3  00000000  00000000  000060dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__vector_6>
      1c:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__vector_7>
      20:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__vector_8>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_18>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	17 e0       	ldi	r17, 0x07	; 7
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ee e6       	ldi	r30, 0x6E	; 110
      90:	fc e1       	ldi	r31, 0x1C	; 28
      92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
      9e:	18 e0       	ldi	r17, 0x08	; 8
      a0:	aa ee       	ldi	r26, 0xEA	; 234
      a2:	b7 e0       	ldi	r27, 0x07	; 7
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a8 35       	cpi	r26, 0x58	; 88
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <main>
      b2:	0c 94 35 0e 	jmp	0x1c6a	; 0x1c6a <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
      ba:	66 23       	and	r22, r22
      bc:	11 f0       	breq	.+4      	; 0xc2 <lcd_write+0x8>
       lcd_rs_high();
      be:	46 9a       	sbi	0x08, 6	; 8
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
      c2:	46 98       	cbi	0x08, 6	; 8
    }
    lcd_rw_low();
      c4:	45 98       	cbi	0x08, 5	; 8
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
      c6:	3b 9a       	sbi	0x07, 3	; 7
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
      c8:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
      ca:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
      cc:	38 9a       	sbi	0x07, 0	; 7
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
      ce:	40 98       	cbi	0x08, 0	; 8
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
      d0:	41 98       	cbi	0x08, 1	; 8
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
      d2:	42 98       	cbi	0x08, 2	; 8
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
      d4:	43 98       	cbi	0x08, 3	; 8
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
      d6:	87 fd       	sbrc	r24, 7
      d8:	40 9a       	sbi	0x08, 0	; 8
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
      da:	86 fd       	sbrc	r24, 6
      dc:	41 9a       	sbi	0x08, 1	; 8
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
      de:	85 fd       	sbrc	r24, 5
      e0:	42 9a       	sbi	0x08, 2	; 8
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
      e2:	84 fd       	sbrc	r24, 4
      e4:	43 9a       	sbi	0x08, 3	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
      e6:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
      e8:	00 c0       	rjmp	.+0      	; 0xea <lcd_write+0x30>
    lcd_e_low();
      ea:	44 98       	cbi	0x08, 4	; 8
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
      ec:	40 98       	cbi	0x08, 0	; 8
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
      ee:	41 98       	cbi	0x08, 1	; 8
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
      f0:	42 98       	cbi	0x08, 2	; 8
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
      f2:	43 98       	cbi	0x08, 3	; 8
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
      f4:	83 fd       	sbrc	r24, 3
      f6:	40 9a       	sbi	0x08, 0	; 8
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
      f8:	82 fd       	sbrc	r24, 2
      fa:	41 9a       	sbi	0x08, 1	; 8
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
      fc:	81 fd       	sbrc	r24, 1
      fe:	42 9a       	sbi	0x08, 2	; 8
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     100:	80 fd       	sbrc	r24, 0
     102:	43 9a       	sbi	0x08, 3	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     104:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_write+0x4e>
    lcd_e_low();
     108:	44 98       	cbi	0x08, 4	; 8
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     10a:	43 9a       	sbi	0x08, 3	; 8
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     10c:	42 9a       	sbi	0x08, 2	; 8
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     10e:	41 9a       	sbi	0x08, 1	; 8
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     110:	40 9a       	sbi	0x08, 0	; 8
    }
}
     112:	08 95       	ret

00000114 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
     114:	88 23       	and	r24, r24
     116:	11 f0       	breq	.+4      	; 0x11c <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
     118:	46 9a       	sbi	0x08, 6	; 8
     11a:	01 c0       	rjmp	.+2      	; 0x11e <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     11c:	46 98       	cbi	0x08, 6	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
     11e:	45 9a       	sbi	0x08, 5	; 8
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     120:	3b 98       	cbi	0x07, 3	; 7
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     122:	3a 98       	cbi	0x07, 2	; 7
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     124:	39 98       	cbi	0x07, 1	; 7
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     126:	38 98       	cbi	0x07, 0	; 7
                
        /* read high nibble first */
        lcd_e_high();
     128:	44 9a       	sbi	0x08, 4	; 8
        lcd_e_delay();        
     12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     12c:	33 9b       	sbis	0x06, 3	; 6
     12e:	02 c0       	rjmp	.+4      	; 0x134 <lcd_read+0x20>
     130:	80 e1       	ldi	r24, 0x10	; 16
     132:	01 c0       	rjmp	.+2      	; 0x136 <lcd_read+0x22>
     134:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     136:	32 99       	sbic	0x06, 2	; 6
     138:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     13a:	31 99       	sbic	0x06, 1	; 6
     13c:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     13e:	30 99       	sbic	0x06, 0	; 6
     140:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     142:	44 98       	cbi	0x08, 4	; 8

        lcd_e_delay();                       /* Enable 500ns low       */
     144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
     146:	44 9a       	sbi	0x08, 4	; 8
        lcd_e_delay();
     148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     14a:	33 99       	sbic	0x06, 3	; 6
     14c:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     14e:	32 99       	sbic	0x06, 2	; 6
     150:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     152:	31 99       	sbic	0x06, 1	; 6
     154:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     156:	30 99       	sbic	0x06, 0	; 6
     158:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     15a:	44 98       	cbi	0x08, 4	; 8
    }
    return data;
}
     15c:	08 95       	ret

0000015e <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_read>
     164:	87 fd       	sbrc	r24, 7
     166:	fb cf       	rjmp	.-10     	; 0x15e <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     168:	82 e0       	ldi	r24, 0x02	; 2
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	01 97       	sbiw	r24, 0x01	; 1
     16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_read>
    
}/* lcd_waitbusy */
     176:	08 95       	ret

00000178 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     178:	1f 93       	push	r17
     17a:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     17c:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_waitbusy>
    lcd_write(cmd,0);
     180:	81 2f       	mov	r24, r17
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
}
     188:	1f 91       	pop	r17
     18a:	08 95       	ret

0000018c <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     18c:	1f 93       	push	r17
     18e:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     190:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_waitbusy>
    lcd_write(data,1);
     194:	81 2f       	mov	r24, r17
     196:	61 e0       	ldi	r22, 0x01	; 1
     198:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
}
     19c:	1f 91       	pop	r17
     19e:	08 95       	ret

000001a0 <lcd_gotoxy>:
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
     1a0:	66 23       	and	r22, r22
     1a2:	11 f4       	brne	.+4      	; 0x1a8 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     1a4:	80 58       	subi	r24, 0x80	; 128
     1a6:	09 c0       	rjmp	.+18     	; 0x1ba <lcd_gotoxy+0x1a>
    else if ( y==1)
     1a8:	61 30       	cpi	r22, 0x01	; 1
     1aa:	11 f4       	brne	.+4      	; 0x1b0 <lcd_gotoxy+0x10>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     1ac:	80 54       	subi	r24, 0x40	; 64
     1ae:	05 c0       	rjmp	.+10     	; 0x1ba <lcd_gotoxy+0x1a>
    else if ( y==2)
     1b0:	62 30       	cpi	r22, 0x02	; 2
     1b2:	11 f4       	brne	.+4      	; 0x1b8 <lcd_gotoxy+0x18>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
     1b4:	8c 56       	subi	r24, 0x6C	; 108
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <lcd_gotoxy+0x1a>
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
     1b8:	8c 52       	subi	r24, 0x2C	; 44
     1ba:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
     1be:	08 95       	ret

000001c0 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     1c0:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_waitbusy>
}
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	08 95       	ret

000001c8 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
}
     1ce:	08 95       	ret

000001d0 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
}
     1d6:	08 95       	ret

000001d8 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     1d8:	1f 93       	push	r17
     1da:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     1dc:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_waitbusy>
     1e0:	98 2f       	mov	r25, r24
    if (c=='\n')
     1e2:	1a 30       	cpi	r17, 0x0A	; 10
     1e4:	99 f4       	brne	.+38     	; 0x20c <lcd_putc+0x34>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
     1e6:	84 31       	cpi	r24, 0x14	; 20
     1e8:	10 f4       	brcc	.+4      	; 0x1ee <lcd_putc+0x16>
     1ea:	80 e4       	ldi	r24, 0x40	; 64
     1ec:	0b c0       	rjmp	.+22     	; 0x204 <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
     1ee:	80 54       	subi	r24, 0x40	; 64
     1f0:	84 31       	cpi	r24, 0x14	; 20
     1f2:	10 f4       	brcc	.+4      	; 0x1f8 <lcd_putc+0x20>
     1f4:	84 e1       	ldi	r24, 0x14	; 20
     1f6:	06 c0       	rjmp	.+12     	; 0x204 <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
     1f8:	94 51       	subi	r25, 0x14	; 20
     1fa:	9c 32       	cpi	r25, 0x2C	; 44
     1fc:	10 f0       	brcs	.+4      	; 0x202 <lcd_putc+0x2a>
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	01 c0       	rjmp	.+2      	; 0x204 <lcd_putc+0x2c>
     202:	84 e5       	ldi	r24, 0x54	; 84
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     204:	80 58       	subi	r24, 0x80	; 128
     206:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
     20a:	18 c0       	rjmp	.+48     	; 0x23c <lcd_putc+0x64>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==4
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
     20c:	83 31       	cpi	r24, 0x13	; 19
     20e:	11 f4       	brne	.+4      	; 0x214 <lcd_putc+0x3c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
     210:	80 ec       	ldi	r24, 0xC0	; 192
     212:	0b c0       	rjmp	.+22     	; 0x22a <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
     214:	83 35       	cpi	r24, 0x53	; 83
     216:	11 f4       	brne	.+4      	; 0x21c <lcd_putc+0x44>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
     218:	84 e9       	ldi	r24, 0x94	; 148
     21a:	07 c0       	rjmp	.+14     	; 0x22a <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
     21c:	87 32       	cpi	r24, 0x27	; 39
     21e:	11 f4       	brne	.+4      	; 0x224 <lcd_putc+0x4c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
     220:	84 ed       	ldi	r24, 0xD4	; 212
     222:	03 c0       	rjmp	.+6      	; 0x22a <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
     224:	87 36       	cpi	r24, 0x67	; 103
     226:	21 f4       	brne	.+8      	; 0x230 <lcd_putc+0x58>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
     228:	80 e8       	ldi	r24, 0x80	; 128
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
        }
#endif
        lcd_waitbusy();
     230:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_waitbusy>
#endif
        lcd_write(c, 1);
     234:	81 2f       	mov	r24, r17
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
    }

}/* lcd_putc */
     23c:	1f 91       	pop	r17
     23e:	08 95       	ret

00000240 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	ec 01       	movw	r28, r24
     246:	02 c0       	rjmp	.+4      	; 0x24c <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
     248:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     24c:	89 91       	ld	r24, Y+
     24e:	88 23       	and	r24, r24
     250:	d9 f7       	brne	.-10     	; 0x248 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	08 95       	ret

00000258 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	ec 01       	movw	r28, r24
     25e:	02 c0       	rjmp	.+4      	; 0x264 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
     260:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
     264:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     266:	21 96       	adiw	r28, 0x01	; 1
     268:	84 91       	lpm	r24, Z+
     26a:	88 23       	and	r24, r24
     26c:	c9 f7       	brne	.-14     	; 0x260 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     274:	1f 93       	push	r17
     276:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     278:	3e 9a       	sbi	0x07, 6	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     27a:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     27c:	3c 9a       	sbi	0x07, 4	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     27e:	3b 9a       	sbi	0x07, 3	; 7
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     280:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     282:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     284:	38 9a       	sbi	0x07, 0	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     286:	80 e8       	ldi	r24, 0x80	; 128
     288:	9e e3       	ldi	r25, 0x3E	; 62
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     28e:	42 9a       	sbi	0x08, 2	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     290:	43 9a       	sbi	0x08, 3	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     292:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     294:	00 c0       	rjmp	.+0      	; 0x296 <lcd_init+0x22>
    lcd_e_low();
     296:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     298:	80 e8       	ldi	r24, 0x80	; 128
     29a:	93 e1       	ldi	r25, 0x13	; 19
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     2a0:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <lcd_init+0x30>
    lcd_e_low();
     2a4:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2a6:	80 e4       	ldi	r24, 0x40	; 64
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	fc 01       	movw	r30, r24
     2ac:	31 97       	sbiw	r30, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     2b0:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <lcd_init+0x40>
    lcd_e_low();
     2b4:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2b6:	fc 01       	movw	r30, r24
     2b8:	31 97       	sbiw	r30, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     2bc:	43 98       	cbi	0x08, 3	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     2be:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd_init+0x4e>
    lcd_e_low();
     2c2:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     2c8:	88 e2       	ldi	r24, 0x28	; 40
     2ca:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     2ce:	88 e0       	ldi	r24, 0x08	; 8
     2d0:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     2d4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     2d8:	86 e0       	ldi	r24, 0x06	; 6
     2da:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     2de:	81 2f       	mov	r24, r17
     2e0:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>

}/* lcd_init */
     2e4:	1f 91       	pop	r17
     2e6:	08 95       	ret

000002e8 <__vector_18>:
 
volatile uint8_t key_rpt;                                  // key long press and repeat
 
 
ISR( TIMER0_OVF_vect )                            // every 10ms
{
     2e8:	1f 92       	push	r1
     2ea:	0f 92       	push	r0
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	0f 92       	push	r0
     2f0:	11 24       	eor	r1, r1
     2f2:	2f 93       	push	r18
     2f4:	8f 93       	push	r24
     2f6:	9f 93       	push	r25
  static uint8_t ct0, ct1, rpt;
  uint8_t i;
 
  TCNT0 = (uint8_t)(int16_t)-(F_CPU / 1024 * 10e-3 + 0.5);  // preload for 10ms
     2f8:	82 eb       	ldi	r24, 0xB2	; 178
     2fa:	86 bd       	out	0x26, r24	; 38
 
  i = key_state ^ ~KEY_PIN;                       // key changed ?
     2fc:	80 91 57 08 	lds	r24, 0x0857
     300:	20 b1       	in	r18, 0x00	; 0
     302:	20 95       	com	r18
     304:	28 27       	eor	r18, r24
  ct0 = ~( ct0 & i );                             // reset or count ct0
     306:	80 91 f0 07 	lds	r24, 0x07F0
     30a:	82 23       	and	r24, r18
     30c:	80 95       	com	r24
     30e:	80 93 f0 07 	sts	0x07F0, r24
  ct1 = ct0 ^ (ct1 & i);                          // reset or count ct1
     312:	90 91 ef 07 	lds	r25, 0x07EF
     316:	92 23       	and	r25, r18
     318:	98 27       	eor	r25, r24
     31a:	90 93 ef 07 	sts	0x07EF, r25
  i &= ct0 & ct1;                                 // count until roll over ?
     31e:	82 23       	and	r24, r18
     320:	89 23       	and	r24, r25
  key_state ^= i;                                 // then toggle debounced state
     322:	90 91 57 08 	lds	r25, 0x0857
     326:	98 27       	eor	r25, r24
     328:	90 93 57 08 	sts	0x0857, r25
  key_press |= key_state & i;                     // 0->1: key press detect
     32c:	20 91 56 08 	lds	r18, 0x0856
     330:	90 91 57 08 	lds	r25, 0x0857
     334:	89 23       	and	r24, r25
     336:	82 2b       	or	r24, r18
     338:	80 93 56 08 	sts	0x0856, r24
 
  if( (key_state & REPEAT_MASK) == 0 )            // check repeat function
     33c:	80 91 57 08 	lds	r24, 0x0857
     340:	87 78       	andi	r24, 0x87	; 135
     342:	19 f4       	brne	.+6      	; 0x34a <__vector_18+0x62>
     rpt = REPEAT_START;                          // start delay
     344:	82 e3       	ldi	r24, 0x32	; 50
     346:	80 93 ee 07 	sts	0x07EE, r24
  if( --rpt == 0 ){
     34a:	80 91 ee 07 	lds	r24, 0x07EE
     34e:	81 50       	subi	r24, 0x01	; 1
     350:	80 93 ee 07 	sts	0x07EE, r24
     354:	88 23       	and	r24, r24
     356:	59 f4       	brne	.+22     	; 0x36e <__vector_18+0x86>
    rpt = REPEAT_NEXT;                            // repeat delay
     358:	84 e1       	ldi	r24, 0x14	; 20
     35a:	80 93 ee 07 	sts	0x07EE, r24
    key_rpt |= key_state & REPEAT_MASK;
     35e:	90 91 f1 07 	lds	r25, 0x07F1
     362:	80 91 57 08 	lds	r24, 0x0857
     366:	87 78       	andi	r24, 0x87	; 135
     368:	89 2b       	or	r24, r25
     36a:	80 93 f1 07 	sts	0x07F1, r24
  }
}
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	2f 91       	pop	r18
     374:	0f 90       	pop	r0
     376:	0f be       	out	0x3f, r0	; 63
     378:	0f 90       	pop	r0
     37a:	1f 90       	pop	r1
     37c:	18 95       	reti

0000037e <get_key_press>:
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     37e:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     380:	90 91 56 08 	lds	r25, 0x0856
     384:	89 23       	and	r24, r25
  key_press ^= key_mask;                          // clear key(s)
     386:	90 91 56 08 	lds	r25, 0x0856
     38a:	98 27       	eor	r25, r24
     38c:	90 93 56 08 	sts	0x0856, r25
  sei();
     390:	78 94       	sei
  return key_mask;
}
     392:	08 95       	ret

00000394 <get_key_rpt>:
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     394:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
     396:	90 91 f1 07 	lds	r25, 0x07F1
     39a:	89 23       	and	r24, r25
  key_rpt ^= key_mask;                            // clear key(s)
     39c:	90 91 f1 07 	lds	r25, 0x07F1
     3a0:	98 27       	eor	r25, r24
     3a2:	90 93 f1 07 	sts	0x07F1, r25
  sei();
     3a6:	78 94       	sei
  return key_mask;
}
     3a8:	08 95       	ret

000003aa <get_key_short>:
 
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_short( uint8_t key_mask )
{
  cli();                                          // read key state and key press atomic !
     3aa:	f8 94       	cli
  return get_key_press( ~key_state & key_mask );
     3ac:	90 91 57 08 	lds	r25, 0x0857
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     3b0:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     3b2:	20 91 56 08 	lds	r18, 0x0856
     3b6:	90 95       	com	r25
     3b8:	89 23       	and	r24, r25
     3ba:	82 23       	and	r24, r18
  key_press ^= key_mask;                          // clear key(s)
     3bc:	90 91 56 08 	lds	r25, 0x0856
     3c0:	98 27       	eor	r25, r24
     3c2:	90 93 56 08 	sts	0x0856, r25
  sei();
     3c6:	78 94       	sei
//
uint8_t get_key_short( uint8_t key_mask )
{
  cli();                                          // read key state and key press atomic !
  return get_key_press( ~key_state & key_mask );
}
     3c8:	08 95       	ret

000003ca <get_key_long>:
 
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_long( uint8_t key_mask )
{
     3ca:	98 2f       	mov	r25, r24
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     3cc:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
     3ce:	80 91 f1 07 	lds	r24, 0x07F1
     3d2:	98 23       	and	r25, r24
  key_rpt ^= key_mask;                            // clear key(s)
     3d4:	80 91 f1 07 	lds	r24, 0x07F1
     3d8:	89 27       	eor	r24, r25
     3da:	80 93 f1 07 	sts	0x07F1, r24
  sei();
     3de:	78 94       	sei
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     3e0:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     3e2:	80 91 56 08 	lds	r24, 0x0856
     3e6:	89 23       	and	r24, r25
  key_press ^= key_mask;                          // clear key(s)
     3e8:	90 91 56 08 	lds	r25, 0x0856
     3ec:	98 27       	eor	r25, r24
     3ee:	90 93 56 08 	sts	0x0856, r25
  sei();
     3f2:	78 94       	sei
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_long( uint8_t key_mask )
{
  return get_key_press( get_key_rpt( key_mask ));
}
     3f4:	08 95       	ret

000003f6 <__vector_8>:
//    	Hauptschleife Ende
//
//////////////////////////////

// Interrupt Stuff
ISR(WDT_vect){ 							// Watchdog ISR
     3f6:	1f 92       	push	r1
     3f8:	0f 92       	push	r0
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	0f 92       	push	r0
     3fe:	11 24       	eor	r1, r1
		LED_PORT &= ~(1 << LED4); 		// LED5 einschalten
     400:	2c 98       	cbi	0x05, 4	; 5
}
     402:	0f 90       	pop	r0
     404:	0f be       	out	0x3f, r0	; 63
     406:	0f 90       	pop	r0
     408:	1f 90       	pop	r1
     40a:	18 95       	reti

0000040c <uart_init>:
	LED_PORT ^= (1 << LED5);
}
// UART Stuff
void 	uart_init			() {
	// UART 0 - IN (Rapidform Software/Terminal)
	UBRR0H = UBRRH_VALUE;
     40c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
     410:	23 e3       	ldi	r18, 0x33	; 51
     412:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0C = (3 << UCSZ00);
     416:	96 e0       	ldi	r25, 0x06	; 6
     418:	90 93 c2 00 	sts	0x00C2, r25
	UCSR0B |= (1 << TXEN0); //Transmitter Enabled
     41c:	e1 ec       	ldi	r30, 0xC1	; 193
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	80 81       	ld	r24, Z
     422:	88 60       	ori	r24, 0x08	; 8
     424:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXEN0); // UART RX einschalten
     426:	80 81       	ld	r24, Z
     428:	80 61       	ori	r24, 0x10	; 16
     42a:	80 83       	st	Z, r24

	// UART 1 - OUT (Stepper Karte/Drehtisch)
	UBRR1H = UBRRH_VALUE;
     42c:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = UBRRL_VALUE;
     430:	20 93 cc 00 	sts	0x00CC, r18
	UCSR1C = (3 << UCSZ00);
     434:	90 93 ca 00 	sts	0x00CA, r25
	UCSR1B |= (1 << TXEN1); //Transmitter Enabled
     438:	e9 ec       	ldi	r30, 0xC9	; 201
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 81       	ld	r24, Z
     43e:	88 60       	ori	r24, 0x08	; 8
     440:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXEN1); // UART RX einschalten
     442:	80 81       	ld	r24, Z
     444:	80 61       	ori	r24, 0x10	; 16
     446:	80 83       	st	Z, r24

}
     448:	08 95       	ret

0000044a <uart_put_charater>:
void 	uart_put_charater	(unsigned char c, int dir) {
     44a:	98 2f       	mov	r25, r24
	// To Rapidform
	if (dir == D_RapidForm) {
     44c:	67 2b       	or	r22, r23
     44e:	39 f4       	brne	.+14     	; 0x45e <uart_put_charater+0x14>
		while (!(UCSR0A & (1 << UDRE0))) //warten bis Senden moeglich
     450:	80 91 c0 00 	lds	r24, 0x00C0
     454:	85 ff       	sbrs	r24, 5
     456:	fc cf       	rjmp	.-8      	; 0x450 <uart_put_charater+0x6>
		{
		}
		UDR0 = c; // sende Zeichen
     458:	90 93 c6 00 	sts	0x00C6, r25
     45c:	08 95       	ret
	}
	// To Stepper
	else {
		while (!(UCSR1A & (1 << UDRE1))) //warten bis Senden moeglich
     45e:	80 91 c8 00 	lds	r24, 0x00C8
     462:	85 ff       	sbrs	r24, 5
     464:	fc cf       	rjmp	.-8      	; 0x45e <uart_put_charater+0x14>
		{
		}
		UDR1 = c; // sende Zeichen
     466:	90 93 ce 00 	sts	0x00CE, r25
     46a:	08 95       	ret

0000046c <uart_put_string>:
	}
	//return 0;
}
void 	uart_put_string		(char *s, int dir) {
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	ec 01       	movw	r28, r24
     476:	8b 01       	movw	r16, r22
     478:	04 c0       	rjmp	.+8      	; 0x482 <uart_put_string+0x16>
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		uart_put_charater(*s, dir);
     47a:	b8 01       	movw	r22, r16
     47c:	0e 94 25 02 	call	0x44a	; 0x44a <uart_put_charater>
		s++;
     480:	21 96       	adiw	r28, 0x01	; 1
		UDR1 = c; // sende Zeichen
	}
	//return 0;
}
void 	uart_put_string		(char *s, int dir) {
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
     482:	88 81       	ld	r24, Y
     484:	88 23       	and	r24, r24
     486:	c9 f7       	brne	.-14     	; 0x47a <uart_put_string+0xe>
	{
		uart_put_charater(*s, dir);
		s++;
	}
}
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	08 95       	ret

00000492 <uart_get_character>:
int 	uart_get_character	(int dir) {
	if (dir == D_RapidForm) {
     492:	00 97       	sbiw	r24, 0x00	; 0
     494:	39 f4       	brne	.+14     	; 0x4a4 <uart_get_character+0x12>
		while (!(UCSR0A & (1 << RXC0)))
     496:	80 91 c0 00 	lds	r24, 0x00C0
     49a:	87 ff       	sbrs	r24, 7
     49c:	fc cf       	rjmp	.-8      	; 0x496 <uart_get_character+0x4>
			// warten bis Zeichen verfuegbar
			;
		return UDR0; // Zeichen aus UDR an Aufrufer zurueckgeben
     49e:	80 91 c6 00 	lds	r24, 0x00C6
     4a2:	0b c0       	rjmp	.+22     	; 0x4ba <uart_get_character+0x28>
	}
	if (dir == D_Stepper) {
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	19 f0       	breq	.+6      	; 0x4ae <uart_get_character+0x1c>
     4a8:	2f ef       	ldi	r18, 0xFF	; 255
     4aa:	3f ef       	ldi	r19, 0xFF	; 255
     4ac:	08 c0       	rjmp	.+16     	; 0x4be <uart_get_character+0x2c>
		while (!(UCSR1A & (1 << RXC1)))
     4ae:	80 91 c8 00 	lds	r24, 0x00C8
     4b2:	87 ff       	sbrs	r24, 7
     4b4:	fc cf       	rjmp	.-8      	; 0x4ae <uart_get_character+0x1c>
			// warten bis Zeichen verfuegbar
			;
		return UDR1; // Zeichen aus UDR an Aufrufer zurueckgeben
     4b6:	80 91 ce 00 	lds	r24, 0x00CE
     4ba:	28 2f       	mov	r18, r24
     4bc:	30 e0       	ldi	r19, 0x00	; 0
	}
	return -1;
}
     4be:	c9 01       	movw	r24, r18
     4c0:	08 95       	ret

000004c2 <uart_get_string>:
void 	uart_get_string		(char * string_in, int dir) {
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	8c 01       	movw	r16, r24
     4d0:	7b 01       	movw	r14, r22
     4d2:	c0 e0       	ldi	r28, 0x00	; 0
     4d4:	d0 e0       	ldi	r29, 0x00	; 0
	char c;
	int i = 0;
	do {
		c = uart_get_character(dir);
     4d6:	c7 01       	movw	r24, r14
     4d8:	0e 94 49 02 	call	0x492	; 0x492 <uart_get_character>
		if (c != '\r') {
     4dc:	8d 30       	cpi	r24, 0x0D	; 13
     4de:	21 f0       	breq	.+8      	; 0x4e8 <uart_get_string+0x26>
			*string_in = c;
     4e0:	f8 01       	movw	r30, r16
     4e2:	81 93       	st	Z+, r24
     4e4:	8f 01       	movw	r16, r30
			string_in += 1;
			i++;
     4e6:	21 96       	adiw	r28, 0x01	; 1
		}
	} while (i < 100 && c != '\r' && c != '\n');
     4e8:	c4 36       	cpi	r28, 0x64	; 100
     4ea:	d1 05       	cpc	r29, r1
     4ec:	24 f4       	brge	.+8      	; 0x4f6 <uart_get_string+0x34>
     4ee:	8d 30       	cpi	r24, 0x0D	; 13
     4f0:	11 f0       	breq	.+4      	; 0x4f6 <uart_get_string+0x34>
     4f2:	8a 30       	cpi	r24, 0x0A	; 10
     4f4:	81 f7       	brne	.-32     	; 0x4d6 <uart_get_string+0x14>
	*string_in = '\0';
     4f6:	f8 01       	movw	r30, r16
     4f8:	10 82       	st	Z, r1
	if (dir == D_Stepper)
     4fa:	f1 e0       	ldi	r31, 0x01	; 1
     4fc:	ef 16       	cp	r14, r31
     4fe:	f1 04       	cpc	r15, r1
     500:	11 f4       	brne	.+4      	; 0x506 <uart_get_string+0x44>
		LED_PORT |= ( 1 << LED3 );
     502:	2b 9a       	sbi	0x05, 3	; 5
     504:	01 c0       	rjmp	.+2      	; 0x508 <uart_get_string+0x46>
	else
		LED_PORT |= ( 1 << LED2 );
     506:	2a 9a       	sbi	0x05, 2	; 5
}
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	08 95       	ret

00000516 <csg_Status_melden>:
	//uart_put_string("0\n", D_Stepper);
	uart_put_string(B_OK, D_RapidForm);
}
// 		Hilfs Funktionen
void 	csg_Status_melden	() {
		uart_put_string(" 999999999,         0,K,K,R\r\n", D_RapidForm); // Status an RapidForm zur�ckmelden
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
}
     522:	08 95       	ret

00000524 <led_spielerein>:
	lcd_my_type("Hello Joe!\n");
	_delay_ms(600);
	lcd_clrscr();
	lcd_my_type("Ready!\n");
}
void 	led_spielerein		(void) {						// LEDs durchlaufen
     524:	41 e0       	ldi	r20, 0x01	; 1
     526:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     528:	a8 ec       	ldi	r26, 0xC8	; 200
     52a:	b0 e0       	ldi	r27, 0x00	; 0
	for (int i = 1; i < 9; i++) {
		_delay_ms(80); 					// warte 80ms
		LED_PORT &= ~((1 << i)); 	   	// loescht Bit an PortB - LED an
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	21 c0       	rjmp	.+66     	; 0x574 <led_spielerein+0x50>
     532:	fd 01       	movw	r30, r26
     534:	31 97       	sbiw	r30, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <led_spielerein+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     538:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     53a:	d9 f7       	brne	.-10     	; 0x532 <led_spielerein+0xe>
     53c:	25 b1       	in	r18, 0x05	; 5
     53e:	cb 01       	movw	r24, r22
     540:	04 2e       	mov	r0, r20
     542:	02 c0       	rjmp	.+4      	; 0x548 <led_spielerein+0x24>
     544:	88 0f       	add	r24, r24
     546:	99 1f       	adc	r25, r25
     548:	0a 94       	dec	r0
     54a:	e2 f7       	brpl	.-8      	; 0x544 <led_spielerein+0x20>
     54c:	80 95       	com	r24
     54e:	82 23       	and	r24, r18
     550:	85 b9       	out	0x05, r24	; 5
		LED_PORT |=  ((1 << (i - 1))); 	// setzt  Bit an PortB - LED aus
     552:	25 b1       	in	r18, 0x05	; 5
     554:	41 50       	subi	r20, 0x01	; 1
     556:	50 40       	sbci	r21, 0x00	; 0
     558:	cb 01       	movw	r24, r22
     55a:	04 2e       	mov	r0, r20
     55c:	02 c0       	rjmp	.+4      	; 0x562 <led_spielerein+0x3e>
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	0a 94       	dec	r0
     564:	e2 f7       	brpl	.-8      	; 0x55e <led_spielerein+0x3a>
     566:	28 2b       	or	r18, r24
     568:	25 b9       	out	0x05, r18	; 5
	_delay_ms(600);
	lcd_clrscr();
	lcd_my_type("Ready!\n");
}
void 	led_spielerein		(void) {						// LEDs durchlaufen
	for (int i = 1; i < 9; i++) {
     56a:	4e 5f       	subi	r20, 0xFE	; 254
     56c:	5f 4f       	sbci	r21, 0xFF	; 255
     56e:	49 30       	cpi	r20, 0x09	; 9
     570:	51 05       	cpc	r21, r1
     572:	19 f0       	breq	.+6      	; 0x57a <led_spielerein+0x56>
     574:	80 e2       	ldi	r24, 0x20	; 32
     576:	93 e0       	ldi	r25, 0x03	; 3
     578:	dc cf       	rjmp	.-72     	; 0x532 <led_spielerein+0xe>
     57a:	08 95       	ret

0000057c <debounce_init>:
		LED_PORT |=  ((1 << (i - 1))); 	// setzt  Bit an PortB - LED aus
		//wdt_reset();
	}
}
void 	debounce_init		(void) {
	KEY_DDR &= ~ALL_KEYS; // configure key port for input
     57c:	81 b1       	in	r24, 0x01	; 1
     57e:	11 b8       	out	0x01, r1	; 1
	KEY_PORT |= ALL_KEYS; // and turn on pull up resistors
     580:	82 b1       	in	r24, 0x02	; 2
     582:	8f ef       	ldi	r24, 0xFF	; 255
     584:	82 b9       	out	0x02, r24	; 2
	TCCR0B = (1 << CS02) | (1 << CS00); // divide by 1024
     586:	85 e0       	ldi	r24, 0x05	; 5
     588:	85 bd       	out	0x25, r24	; 37
	TCNT0 = (uint8_t) (int16_t) -(F_CPU / 1024 * 10 * 10e-3 + 0.5); // preload for 10ms
     58a:	83 ef       	ldi	r24, 0xF3	; 243
     58c:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= 1 << TOIE0; // enable timer interrupt
     58e:	ee e6       	ldi	r30, 0x6E	; 110
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	80 81       	ld	r24, Z
     594:	81 60       	ori	r24, 0x01	; 1
     596:	80 83       	st	Z, r24
	sei();
     598:	78 94       	sei
}
     59a:	08 95       	ret

0000059c <led_lauflicht>:
 *
 * 08  00001000		00000001
 * i|  11101111		11111101
*/
void led_lauflicht (void) {
	uint8_t i = LED_PORT;
     59c:	85 b1       	in	r24, 0x05	; 5
	i = (i & 0x00) | ((i << 1) & 0xFE);
     59e:	88 0f       	add	r24, r24
	if (i < 0xFE) i |= 0x01;
     5a0:	8e 3f       	cpi	r24, 0xFE	; 254
     5a2:	08 f4       	brcc	.+2      	; 0x5a6 <led_lauflicht+0xa>
     5a4:	81 60       	ori	r24, 0x01	; 1
		LED_PORT = i;
     5a6:	85 b9       	out	0x05, r24	; 5
}
     5a8:	08 95       	ret

000005aa <init_WDT>:
	uart_rx(D_Stepper);
	ms_spin(1000);
}
// Init Stuff
void init_WDT(void) {
	cli();
     5aa:	f8 94       	cli
	wdt_reset();
     5ac:	a8 95       	wdr
	WDTCSR |= (1 << WDCE) | (1 << WDE);
     5ae:	e0 e6       	ldi	r30, 0x60	; 96
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	88 61       	ori	r24, 0x18	; 24
     5b6:	80 83       	st	Z, r24
	WDTCSR = (1 << WDE) | (1 << WDIE) | (1 << WDP3) | (1 << WDP0); //Watchdog 8s
     5b8:	89 e6       	ldi	r24, 0x69	; 105
     5ba:	80 83       	st	Z, r24
	//WDTCSR = 0x0F; //Watchdog Off
	sei();
     5bc:	78 94       	sei
}
     5be:	08 95       	ret

000005c0 <my_select>:
	lcd_puts("Danach Select\n");
	lcd_puts("-> Drehung um 45\n");
	if (get_key_press(1 << KEY4))
		uart_put_string("M 55750\r", D_Stepper);
}
void 	my_select			(void *arg, char *name) {
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	8b 01       	movw	r16, r22
	lcd_clrscr();
     5c6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
	lcd_puts("Selected: ");
     5ca:	8e e1       	ldi	r24, 0x1E	; 30
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(name);
     5d2:	c8 01       	movw	r24, r16
     5d4:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
 */


static inline void ms_spin(unsigned short ms) {
	if (ms) {
		__asm__ __volatile__ (
     5d8:	8e ee       	ldi	r24, 0xEE	; 238
     5da:	92 e0       	ldi	r25, 0x02	; 2

000005dc <outer_522>:
     5dc:	a0 ed       	ldi	r26, 0xD0	; 208
     5de:	b7 e0       	ldi	r27, 0x07	; 7

000005e0 <inner_522>:
     5e0:	11 97       	sbiw	r26, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <inner_522>
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	d1 f7       	brne	.-12     	; 0x5dc <outer_522>

	ms_spin(750);
}
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	08 95       	ret

000005ee <mod_manual>:
	if (i < 0xFE) i |= 0x01;
		LED_PORT = i;
}
// 		Menu Stuff
void 	mod_manual			(void *arg, void *name) {
	lcd_puts("Manueller Modus\n");
     5ee:	89 e2       	ldi	r24, 0x29	; 41
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("Aufnahme starten!\n");
     5f6:	8a e3       	ldi	r24, 0x3A	; 58
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("Danach Select\n");
     5fe:	8d e4       	ldi	r24, 0x4D	; 77
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("-> Drehung um 45\n");
     606:	8c e5       	ldi	r24, 0x5C	; 92
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     60e:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     610:	90 91 56 08 	lds	r25, 0x0856
     614:	90 71       	andi	r25, 0x10	; 16
  key_press ^= key_mask;                          // clear key(s)
     616:	80 91 56 08 	lds	r24, 0x0856
     61a:	89 27       	eor	r24, r25
     61c:	80 93 56 08 	sts	0x0856, r24
  sei();
     620:	78 94       	sei
	if (get_key_press(1 << KEY4))
     622:	99 23       	and	r25, r25
     624:	31 f0       	breq	.+12     	; 0x632 <mod_manual+0x44>
		uart_put_string("M 55750\r", D_Stepper);
     626:	8e e6       	ldi	r24, 0x6E	; 110
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	70 e0       	ldi	r23, 0x00	; 0
     62e:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
     632:	08 95       	ret

00000634 <String_zerlegen_csg>:
	ltoa(z, Position,	10 );
	//lcd_puts("Position: ");
	//lcd_puts(Position);
	//lcd_puts("\n");
}
void 	String_zerlegen_csg	(char * str_rx) {
     634:	cf 92       	push	r12
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	df 93       	push	r29
     642:	cf 93       	push	r28
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
     648:	61 97       	sbiw	r28, 0x11	; 17
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
     654:	6c 01       	movw	r12, r24
	int i = 4; // Index Input String | Bei 4. Zeichen Beginnen. Die ersten 3 Zeichen sind Fix.
	int j = 0; // Index Variable
	char c; // Zu kopierendes Zeichen
	// Variablen Deklaration und Initialisierung mit Defaultwerten
	char Speed_Range[2] = "2";
	char ONE_Min_Speed[6] = "200";
     656:	82 e3       	ldi	r24, 0x32	; 50
     658:	90 e3       	ldi	r25, 0x30	; 48
     65a:	a0 e3       	ldi	r26, 0x30	; 48
     65c:	b0 e0       	ldi	r27, 0x00	; 0
     65e:	8e 83       	std	Y+6, r24	; 0x06
     660:	9f 83       	std	Y+7, r25	; 0x07
     662:	a8 87       	std	Y+8, r26	; 0x08
     664:	b9 87       	std	Y+9, r27	; 0x09
     666:	1b 86       	std	Y+11, r1	; 0x0b
     668:	1a 86       	std	Y+10, r1	; 0x0a
	char ONE_Max_Speed[6] = "2000";
     66a:	de 01       	movw	r26, r28
     66c:	1c 96       	adiw	r26, 0x0c	; 12
     66e:	e4 ea       	ldi	r30, 0xA4	; 164
     670:	f1 e0       	ldi	r31, 0x01	; 1
     672:	85 e0       	ldi	r24, 0x05	; 5
     674:	01 90       	ld	r0, Z+
     676:	0d 92       	st	X+, r0
     678:	81 50       	subi	r24, 0x01	; 1
     67a:	e1 f7       	brne	.-8      	; 0x674 <String_zerlegen_csg+0x40>
     67c:	19 8a       	std	Y+17, r1	; 0x11
	char ONE_Acc_Speed[5] = "200";
     67e:	82 e3       	ldi	r24, 0x32	; 50
     680:	90 e3       	ldi	r25, 0x30	; 48
     682:	a0 e3       	ldi	r26, 0x30	; 48
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	89 83       	std	Y+1, r24	; 0x01
     688:	9a 83       	std	Y+2, r25	; 0x02
     68a:	ab 83       	std	Y+3, r26	; 0x03
     68c:	bc 83       	std	Y+4, r27	; 0x04
     68e:	1d 82       	std	Y+5, r1	; 0x05
     690:	84 e0       	ldi	r24, 0x04	; 4
     692:	e8 2e       	mov	r14, r24
     694:	f1 2c       	mov	r15, r1
     696:	a0 e0       	ldi	r26, 0x00	; 0
     698:	b0 e0       	ldi	r27, 0x00	; 0
	//
	////////////////////////
	do {
		c = str_rx[i];
		if (c != 'F') {
			ONE_Min_Speed[j] = c;
     69a:	9e 01       	movw	r18, r28
     69c:	2a 5f       	subi	r18, 0xFA	; 250
     69e:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	//  Min Speed (50 - 20000)
	//
	////////////////////////
	do {
		c = str_rx[i];
     6a0:	f6 01       	movw	r30, r12
     6a2:	ee 0d       	add	r30, r14
     6a4:	ff 1d       	adc	r31, r15
     6a6:	80 81       	ld	r24, Z
		if (c != 'F') {
     6a8:	86 34       	cpi	r24, 0x46	; 70
     6aa:	41 f0       	breq	.+16     	; 0x6bc <String_zerlegen_csg+0x88>
			ONE_Min_Speed[j] = c;
     6ac:	f9 01       	movw	r30, r18
     6ae:	ea 0f       	add	r30, r26
     6b0:	fb 1f       	adc	r31, r27
     6b2:	80 83       	st	Z, r24
			j++;
     6b4:	11 96       	adiw	r26, 0x01	; 1
			i++;
     6b6:	08 94       	sec
     6b8:	e1 1c       	adc	r14, r1
     6ba:	f1 1c       	adc	r15, r1
		}
	} while (j < 6 && c != '\0' && c != 'F');
     6bc:	a6 30       	cpi	r26, 0x06	; 6
     6be:	b1 05       	cpc	r27, r1
     6c0:	24 f4       	brge	.+8      	; 0x6ca <String_zerlegen_csg+0x96>
     6c2:	88 23       	and	r24, r24
     6c4:	11 f0       	breq	.+4      	; 0x6ca <String_zerlegen_csg+0x96>
     6c6:	86 34       	cpi	r24, 0x46	; 70
     6c8:	59 f7       	brne	.-42     	; 0x6a0 <String_zerlegen_csg+0x6c>
	ONE_Min_Speed[j] = '\0';
     6ca:	8e 01       	movw	r16, r28
     6cc:	0a 5f       	subi	r16, 0xFA	; 250
     6ce:	1f 4f       	sbci	r17, 0xFF	; 255
     6d0:	a0 0f       	add	r26, r16
     6d2:	b1 1f       	adc	r27, r17
     6d4:	1c 92       	st	X, r1

	lcd_puts("1_MIN_SPEED:");
     6d6:	87 e7       	ldi	r24, 0x77	; 119
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(ONE_Min_Speed);
     6de:	c8 01       	movw	r24, r16
     6e0:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("\n");
     6e4:	84 e8       	ldi	r24, 0x84	; 132
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	////////////////////////
	//
	//  Max Speed (50 - 20000)
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
     6ec:	08 94       	sec
     6ee:	e1 1c       	adc	r14, r1
     6f0:	f1 1c       	adc	r15, r1
     6f2:	a0 e0       	ldi	r26, 0x00	; 0
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
		if (c != 'R') {
			ONE_Max_Speed[j] = c;
     6f6:	9e 01       	movw	r18, r28
     6f8:	24 5f       	subi	r18, 0xF4	; 244
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
     6fc:	f6 01       	movw	r30, r12
     6fe:	ee 0d       	add	r30, r14
     700:	ff 1d       	adc	r31, r15
     702:	80 81       	ld	r24, Z
		if (c != 'R') {
     704:	82 35       	cpi	r24, 0x52	; 82
     706:	41 f0       	breq	.+16     	; 0x718 <String_zerlegen_csg+0xe4>
			ONE_Max_Speed[j] = c;
     708:	f9 01       	movw	r30, r18
     70a:	ea 0f       	add	r30, r26
     70c:	fb 1f       	adc	r31, r27
     70e:	80 83       	st	Z, r24
			i++;
     710:	08 94       	sec
     712:	e1 1c       	adc	r14, r1
     714:	f1 1c       	adc	r15, r1
			j++;
     716:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (j < 6 && c != '\0' && c != 'R');
     718:	a6 30       	cpi	r26, 0x06	; 6
     71a:	b1 05       	cpc	r27, r1
     71c:	24 f4       	brge	.+8      	; 0x726 <String_zerlegen_csg+0xf2>
     71e:	88 23       	and	r24, r24
     720:	11 f0       	breq	.+4      	; 0x726 <String_zerlegen_csg+0xf2>
     722:	82 35       	cpi	r24, 0x52	; 82
     724:	59 f7       	brne	.-42     	; 0x6fc <String_zerlegen_csg+0xc8>
	ONE_Max_Speed[j] = '\0';
     726:	8e 01       	movw	r16, r28
     728:	04 5f       	subi	r16, 0xF4	; 244
     72a:	1f 4f       	sbci	r17, 0xFF	; 255
     72c:	a0 0f       	add	r26, r16
     72e:	b1 1f       	adc	r27, r17
     730:	1c 92       	st	X, r1

	lcd_puts("1_MAX_SPEED:");
     732:	86 e8       	ldi	r24, 0x86	; 134
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(ONE_Max_Speed);
     73a:	c8 01       	movw	r24, r16
     73c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("\n");
     740:	84 e8       	ldi	r24, 0x84	; 132
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	////////////////////////
	//
	//  Acceleration (0 - 1000)
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
     748:	c7 01       	movw	r24, r14
     74a:	01 96       	adiw	r24, 0x01	; 1
     74c:	a0 e0       	ldi	r26, 0x00	; 0
     74e:	b0 e0       	ldi	r27, 0x00	; 0
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
		if (c != 'S') {
			ONE_Acc_Speed[j] = c;
     750:	ae 01       	movw	r20, r28
     752:	4f 5f       	subi	r20, 0xFF	; 255
     754:	5f 4f       	sbci	r21, 0xFF	; 255
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
     756:	f6 01       	movw	r30, r12
     758:	e8 0f       	add	r30, r24
     75a:	f9 1f       	adc	r31, r25
     75c:	20 81       	ld	r18, Z
		if (c != 'S') {
     75e:	23 35       	cpi	r18, 0x53	; 83
     760:	31 f0       	breq	.+12     	; 0x76e <String_zerlegen_csg+0x13a>
			ONE_Acc_Speed[j] = c;
     762:	fa 01       	movw	r30, r20
     764:	ea 0f       	add	r30, r26
     766:	fb 1f       	adc	r31, r27
     768:	20 83       	st	Z, r18
			i++;
     76a:	01 96       	adiw	r24, 0x01	; 1
			j++;
     76c:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (j < 4 && c != '\0' && c != 'S');
     76e:	a4 30       	cpi	r26, 0x04	; 4
     770:	b1 05       	cpc	r27, r1
     772:	24 f4       	brge	.+8      	; 0x77c <String_zerlegen_csg+0x148>
     774:	22 23       	and	r18, r18
     776:	11 f0       	breq	.+4      	; 0x77c <String_zerlegen_csg+0x148>
     778:	23 35       	cpi	r18, 0x53	; 83
     77a:	69 f7       	brne	.-38     	; 0x756 <String_zerlegen_csg+0x122>
	ONE_Acc_Speed[j] = '\0';
     77c:	8e 01       	movw	r16, r28
     77e:	0f 5f       	subi	r16, 0xFF	; 255
     780:	1f 4f       	sbci	r17, 0xFF	; 255
     782:	a0 0f       	add	r26, r16
     784:	b1 1f       	adc	r27, r17
     786:	1c 92       	st	X, r1

	lcd_puts("1_ACC_SPEED:");
     788:	83 e9       	ldi	r24, 0x93	; 147
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(ONE_Acc_Speed);
     790:	c8 01       	movw	r24, r16
     792:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("\n");
     796:	84 e8       	ldi	r24, 0x84	; 132
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>

	//uart_put_string("0\n", D_Stepper);
	uart_put_string(B_OK, D_RapidForm);
     79e:	80 ea       	ldi	r24, 0xA0	; 160
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
}
     7aa:	61 96       	adiw	r28, 0x11	; 17
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	cd bf       	out	0x3d, r28	; 61
     7b6:	cf 91       	pop	r28
     7b8:	df 91       	pop	r29
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	ff 90       	pop	r15
     7c0:	ef 90       	pop	r14
     7c2:	df 90       	pop	r13
     7c4:	cf 90       	pop	r12
     7c6:	08 95       	ret

000007c8 <__vector_6>:
ISR(PCINT3_vect){						// Endschalter Position erreicht
	lcd_puts("Positive Enschalter Position Erreicht!");
	//uart_put_string("1H\n", D_Stepper);
	LED_PORT ^= (1 << LED5);
}
ISR(PCINT2_vect){						// Endschalter Position erreicht
     7c8:	1f 92       	push	r1
     7ca:	0f 92       	push	r0
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	0f 92       	push	r0
     7d0:	11 24       	eor	r1, r1
     7d2:	2f 93       	push	r18
     7d4:	3f 93       	push	r19
     7d6:	4f 93       	push	r20
     7d8:	5f 93       	push	r21
     7da:	6f 93       	push	r22
     7dc:	7f 93       	push	r23
     7de:	8f 93       	push	r24
     7e0:	9f 93       	push	r25
     7e2:	af 93       	push	r26
     7e4:	bf 93       	push	r27
     7e6:	ef 93       	push	r30
     7e8:	ff 93       	push	r31
	lcd_puts("Negative Enschalter Position Erreicht!");
     7ea:	8a ea       	ldi	r24, 0xAA	; 170
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	//uart_put_string("1H\n", D_Stepper);
	LED_PORT ^= (1 << LED5);
     7f2:	85 b1       	in	r24, 0x05	; 5
     7f4:	90 e2       	ldi	r25, 0x20	; 32
     7f6:	89 27       	eor	r24, r25
     7f8:	85 b9       	out	0x05, r24	; 5
}
     7fa:	ff 91       	pop	r31
     7fc:	ef 91       	pop	r30
     7fe:	bf 91       	pop	r27
     800:	af 91       	pop	r26
     802:	9f 91       	pop	r25
     804:	8f 91       	pop	r24
     806:	7f 91       	pop	r23
     808:	6f 91       	pop	r22
     80a:	5f 91       	pop	r21
     80c:	4f 91       	pop	r20
     80e:	3f 91       	pop	r19
     810:	2f 91       	pop	r18
     812:	0f 90       	pop	r0
     814:	0f be       	out	0x3f, r0	; 63
     816:	0f 90       	pop	r0
     818:	1f 90       	pop	r1
     81a:	18 95       	reti

0000081c <__vector_7>:

// Interrupt Stuff
ISR(WDT_vect){ 							// Watchdog ISR
		LED_PORT &= ~(1 << LED4); 		// LED5 einschalten
}
ISR(PCINT3_vect){						// Endschalter Position erreicht
     81c:	1f 92       	push	r1
     81e:	0f 92       	push	r0
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	0f 92       	push	r0
     824:	11 24       	eor	r1, r1
     826:	2f 93       	push	r18
     828:	3f 93       	push	r19
     82a:	4f 93       	push	r20
     82c:	5f 93       	push	r21
     82e:	6f 93       	push	r22
     830:	7f 93       	push	r23
     832:	8f 93       	push	r24
     834:	9f 93       	push	r25
     836:	af 93       	push	r26
     838:	bf 93       	push	r27
     83a:	ef 93       	push	r30
     83c:	ff 93       	push	r31
	lcd_puts("Positive Enschalter Position Erreicht!");
     83e:	81 ed       	ldi	r24, 0xD1	; 209
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	//uart_put_string("1H\n", D_Stepper);
	LED_PORT ^= (1 << LED5);
     846:	85 b1       	in	r24, 0x05	; 5
     848:	90 e2       	ldi	r25, 0x20	; 32
     84a:	89 27       	eor	r24, r25
     84c:	85 b9       	out	0x05, r24	; 5
}
     84e:	ff 91       	pop	r31
     850:	ef 91       	pop	r30
     852:	bf 91       	pop	r27
     854:	af 91       	pop	r26
     856:	9f 91       	pop	r25
     858:	8f 91       	pop	r24
     85a:	7f 91       	pop	r23
     85c:	6f 91       	pop	r22
     85e:	5f 91       	pop	r21
     860:	4f 91       	pop	r20
     862:	3f 91       	pop	r19
     864:	2f 91       	pop	r18
     866:	0f 90       	pop	r0
     868:	0f be       	out	0x3f, r0	; 63
     86a:	0f 90       	pop	r0
     86c:	1f 90       	pop	r1
     86e:	18 95       	reti

00000870 <lcd_my_type>:
		if(Initialized == M_TERMINAL)
			switch_Terminal(str_rx);
	}
}
// 		LCD und LED Stuff
void 	lcd_my_type			(char *s) {
     870:	ef 92       	push	r14
     872:	ff 92       	push	r15
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	ec 01       	movw	r28, r24
	srand(TCNT0);
     87e:	86 b5       	in	r24, 0x26	; 38
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <srand>
     886:	90 ed       	ldi	r25, 0xD0	; 208
     888:	e9 2e       	mov	r14, r25
     88a:	97 e0       	ldi	r25, 0x07	; 7
     88c:	f9 2e       	mov	r15, r25
     88e:	17 c0       	rjmp	.+46     	; 0x8be <lcd_my_type+0x4e>
	int min = 10;
	int max = 250;
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		erg = (rand() % (max - min + 1) + min);
     890:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <rand>
     894:	61 ef       	ldi	r22, 0xF1	; 241
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__divmodhi4>
     89c:	8c 01       	movw	r16, r24
     89e:	06 5f       	subi	r16, 0xF6	; 246
     8a0:	1f 4f       	sbci	r17, 0xFF	; 255
		lcd_putc(*s);
     8a2:	88 81       	ld	r24, Y
     8a4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <lcd_my_type+0x46>
     8ae:	f7 01       	movw	r30, r14
     8b0:	31 97       	sbiw	r30, 0x01	; 1
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <lcd_my_type+0x40>
		s++;
		for (int i = 0; i < erg; i++)
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	80 17       	cp	r24, r16
     8b8:	91 07       	cpc	r25, r17
     8ba:	cc f3       	brlt	.-14     	; 0x8ae <lcd_my_type+0x3e>
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		erg = (rand() % (max - min + 1) + min);
		lcd_putc(*s);
		s++;
     8bc:	21 96       	adiw	r28, 0x01	; 1
void 	lcd_my_type			(char *s) {
	srand(TCNT0);
	int min = 10;
	int max = 250;
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
     8be:	88 81       	ld	r24, Y
     8c0:	88 23       	and	r24, r24
     8c2:	31 f7       	brne	.-52     	; 0x890 <lcd_my_type+0x20>
		lcd_putc(*s);
		s++;
		for (int i = 0; i < erg; i++)
			_delay_ms(1);
	}
}
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	ff 90       	pop	r15
     8ce:	ef 90       	pop	r14
     8d0:	08 95       	ret

000008d2 <lcd_spielereien>:
void 	lcd_spielereien		(void) {
     8d2:	88 ee       	ldi	r24, 0xE8	; 232
     8d4:	93 e0       	ldi	r25, 0x03	; 3
     8d6:	28 ec       	ldi	r18, 0xC8	; 200
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	f9 01       	movw	r30, r18
     8dc:	31 97       	sbiw	r30, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <lcd_spielereien+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8e2:	d9 f7       	brne	.-10     	; 0x8da <lcd_spielereien+0x8>
	_delay_ms(100);
	lcd_my_type("Hello Joe!\n");
     8e4:	88 ef       	ldi	r24, 0xF8	; 248
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	0e 94 38 04 	call	0x870	; 0x870 <lcd_my_type>
     8ec:	80 e7       	ldi	r24, 0x70	; 112
     8ee:	97 e1       	ldi	r25, 0x17	; 23
     8f0:	28 ec       	ldi	r18, 0xC8	; 200
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	f9 01       	movw	r30, r18
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	f1 f7       	brne	.-4      	; 0x8f6 <lcd_spielereien+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8fc:	d9 f7       	brne	.-10     	; 0x8f4 <lcd_spielereien+0x22>
	_delay_ms(600);
	lcd_clrscr();
     8fe:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
	lcd_my_type("Ready!\n");
     902:	84 e0       	ldi	r24, 0x04	; 4
     904:	92 e0       	ldi	r25, 0x02	; 2
     906:	0e 94 38 04 	call	0x870	; 0x870 <lcd_my_type>
}
     90a:	08 95       	ret

0000090c <init>:
	WDTCSR = (1 << WDE) | (1 << WDIE) | (1 << WDP3) | (1 << WDP0); //Watchdog 8s
	//WDTCSR = 0x0F; //Watchdog Off
	sei();
}
void init() {
	init_WDT();						// Watchdog Initialisieren oder Abschalten
     90c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <init_WDT>
	LED_DDR   = 0xFF;				// LED Port Richtung definieren (Ausgang)
     910:	8f ef       	ldi	r24, 0xFF	; 255
     912:	84 b9       	out	0x04, r24	; 4
	LED_PORT  = 0xFF;				// LEDs ausschalten
     914:	85 b9       	out	0x05, r24	; 5
	PCMSK3   |= ( 1 << PCINT28 ); 	// Interrupts definierenPD4 als Interrupt zulassen
     916:	e3 e7       	ldi	r30, 0x73	; 115
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	80 61       	ori	r24, 0x10	; 16
     91e:	80 83       	st	Z, r24
	PCICR    |= ( 1 << PCIE3   ); 	// Pin Change Interrupt Control Register - PCIE3 setzen fuer PCINT30
     920:	e8 e6       	ldi	r30, 0x68	; 104
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	88 60       	ori	r24, 0x08	; 8
     928:	80 83       	st	Z, r24
	DDRC     |= ( 1 << PB7     );	// Pin7 (Kontrast) als Ausgang definieren 	(Nur LCD an STK500)
     92a:	3f 9a       	sbi	0x07, 7	; 7
	LCD_PORT &= ( 1 << PB7 	   );  	// Pin7 auf 0V legen 						(Nur LCD an STK500)
     92c:	88 b1       	in	r24, 0x08	; 8
     92e:	80 78       	andi	r24, 0x80	; 128
     930:	88 b9       	out	0x08, r24	; 8
    lcd_init(LCD_DISP_ON_CURSOR);	// LC Display initialisieren
     932:	8e e0       	ldi	r24, 0x0E	; 14
     934:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_init>
	lcd_spielereien();				// Kurze Startup Meldung zeigen
     938:	0e 94 69 04 	call	0x8d2	; 0x8d2 <lcd_spielereien>
	led_spielerein();				// Starten des Mikrocontroller kennzeichnen
     93c:	0e 94 92 02 	call	0x524	; 0x524 <led_spielerein>
	debounce_init();				// Taster entprellen
     940:	0e 94 be 02 	call	0x57c	; 0x57c <debounce_init>
	uart_init();					// RS-232 Verbindung initialisieren
     944:	0e 94 06 02 	call	0x40c	; 0x40c <uart_init>
	//menu_enter(&menu_context, &menu_main); // Kommentar entfernen um Menue zu aktivieren
}
     948:	08 95       	ret

0000094a <Position_Zeta>:
}
// 		Hilfs Funktionen
void 	csg_Status_melden	() {
		uart_put_string(" 999999999,         0,K,K,R\r\n", D_RapidForm); // Status an RapidForm zur�ckmelden
}
void 	Position_Zeta		(char * Position) {
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	8c 01       	movw	r16, r24
     954:	c0 e0       	ldi	r28, 0x00	; 0
     956:	d0 e0       	ldi	r29, 0x00	; 0
    char c;
    int i = 0;
    do{
        c = str_rx[i + 1];
     958:	de 01       	movw	r26, r28
     95a:	11 96       	adiw	r26, 0x01	; 1
     95c:	fd 01       	movw	r30, r26
     95e:	ee 50       	subi	r30, 0x0E	; 14
     960:	f8 4f       	sbci	r31, 0xF8	; 248
     962:	e0 81       	ld	r30, Z
        if(c != ','){
     964:	ec 32       	cpi	r30, 0x2C	; 44
     966:	11 f4       	brne	.+4      	; 0x96c <Position_Zeta+0x22>
     968:	de 01       	movw	r26, r28
     96a:	03 c0       	rjmp	.+6      	; 0x972 <Position_Zeta+0x28>
            Position[i] = c;
     96c:	c0 0f       	add	r28, r16
     96e:	d1 1f       	adc	r29, r17
     970:	e8 83       	st	Y, r30
            i++;
        }
    }
     while(i < 20 && c != '\0' && c != ',');
     972:	a4 31       	cpi	r26, 0x14	; 20
     974:	b1 05       	cpc	r27, r1
     976:	34 f4       	brge	.+12     	; 0x984 <Position_Zeta+0x3a>
     978:	ee 23       	and	r30, r30
     97a:	21 f0       	breq	.+8      	; 0x984 <Position_Zeta+0x3a>
     97c:	ec 32       	cpi	r30, 0x2C	; 44
     97e:	11 f0       	breq	.+4      	; 0x984 <Position_Zeta+0x3a>
     980:	ed 01       	movw	r28, r26
     982:	ea cf       	rjmp	.-44     	; 0x958 <Position_Zeta+0xe>
    Position[i] = '\0';
     984:	a0 0f       	add	r26, r16
     986:	b1 1f       	adc	r27, r17
     988:	1c 92       	st	X, r1
	int32_t z;
	z = atol(Position);
     98a:	c8 01       	movw	r24, r16
     98c:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <atol>
	z = z/9;
	ltoa(z,Position,10);
     990:	29 e0       	ldi	r18, 0x09	; 9
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__divmodsi4>
     99c:	ca 01       	movw	r24, r20
     99e:	b9 01       	movw	r22, r18
     9a0:	a8 01       	movw	r20, r16
     9a2:	2a e0       	ldi	r18, 0x0A	; 10
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <ltoa>
}
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	08 95       	ret

000009b4 <String_zerlegen_Isel>:
			return n;
		}
	}
	return 99;
}
void 	String_zerlegen_Isel(char * str_rx, char * Position, char * Winkel) {
     9b4:	cf 92       	push	r12
     9b6:	df 92       	push	r13
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	8c 01       	movw	r16, r24
     9c6:	eb 01       	movw	r28, r22
     9c8:	6a 01       	movw	r12, r20
	//0M5200, +600
	//Achse M Position, +Geschwindigkeit
	char * Achse="0";
	Achse[0] = str_rx[1];
	Achse[1] = '\0';
	if(atoi(Achse)==0){
     9ca:	8c e0       	ldi	r24, 0x0C	; 12
     9cc:	92 e0       	ldi	r25, 0x02	; 2
     9ce:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <atoi>
     9d2:	89 2b       	or	r24, r25
     9d4:	61 f4       	brne	.+24     	; 0x9ee <String_zerlegen_Isel+0x3a>
		lcd_puts("Achse: ");
     9d6:	8e e0       	ldi	r24, 0x0E	; 14
     9d8:	92 e0       	ldi	r25, 0x02	; 2
     9da:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(Achse);
     9de:	8c e0       	ldi	r24, 0x0C	; 12
     9e0:	92 e0       	ldi	r25, 0x02	; 2
     9e2:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(" (Rotation)\n");
     9e6:	86 e1       	ldi	r24, 0x16	; 22
     9e8:	92 e0       	ldi	r25, 0x02	; 2
     9ea:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	}
	if(atoi(Achse)==1){
     9ee:	8c e0       	ldi	r24, 0x0C	; 12
     9f0:	92 e0       	ldi	r25, 0x02	; 2
     9f2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <atoi>
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	61 f4       	brne	.+24     	; 0xa12 <String_zerlegen_Isel+0x5e>
		lcd_puts("Achse: ");
     9fa:	8e e0       	ldi	r24, 0x0E	; 14
     9fc:	92 e0       	ldi	r25, 0x02	; 2
     9fe:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(Achse);
     a02:	8c e0       	ldi	r24, 0x0C	; 12
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(" (Hoehe)   \n");
     a0a:	83 e2       	ldi	r24, 0x23	; 35
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	}
	lcd_puts("Test: ");
     a12:	80 e3       	ldi	r24, 0x30	; 48
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(Position);
     a1a:	ce 01       	movw	r24, r28
     a1c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
	char c;
	int i = 0;
	do {
		c = str_rx[i + 3];
     a24:	f8 01       	movw	r30, r16
     a26:	ea 0f       	add	r30, r26
     a28:	fb 1f       	adc	r31, r27
     a2a:	83 81       	ldd	r24, Z+3	; 0x03
		if (c != ',') {
     a2c:	8c 32       	cpi	r24, 0x2C	; 44
     a2e:	29 f0       	breq	.+10     	; 0xa3a <String_zerlegen_Isel+0x86>
			Position[i] = c;
     a30:	fe 01       	movw	r30, r28
     a32:	ea 0f       	add	r30, r26
     a34:	fb 1f       	adc	r31, r27
     a36:	80 83       	st	Z, r24
			i++;
     a38:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (i < 20 && c != '\0' && c != ',');
     a3a:	a4 31       	cpi	r26, 0x14	; 20
     a3c:	b1 05       	cpc	r27, r1
     a3e:	24 f4       	brge	.+8      	; 0xa48 <String_zerlegen_Isel+0x94>
     a40:	88 23       	and	r24, r24
     a42:	11 f0       	breq	.+4      	; 0xa48 <String_zerlegen_Isel+0x94>
     a44:	8c 32       	cpi	r24, 0x2C	; 44
     a46:	71 f7       	brne	.-36     	; 0xa24 <String_zerlegen_Isel+0x70>
	Position[i] = '\0';
     a48:	ac 0f       	add	r26, r28
     a4a:	bd 1f       	adc	r27, r29
     a4c:	1c 92       	st	X, r1
	int32_t z;
	int32_t y;
	z = atol(Position);
     a4e:	ce 01       	movw	r24, r28
     a50:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <atol>
	z = (z * 71111)  /1024;
     a54:	27 ec       	ldi	r18, 0xC7	; 199
     a56:	35 e1       	ldi	r19, 0x15	; 21
     a58:	41 e0       	ldi	r20, 0x01	; 1
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	0e 94 31 0c 	call	0x1862	; 0x1862 <__mulsi3>
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	34 e0       	ldi	r19, 0x04	; 4
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__divmodsi4>
     a6c:	12 2f       	mov	r17, r18
     a6e:	03 2f       	mov	r16, r19
     a70:	f4 2e       	mov	r15, r20
     a72:	e5 2e       	mov	r14, r21
	y = z / 7200;
	ltoa(y, Winkel,		10 );
     a74:	62 2f       	mov	r22, r18
     a76:	73 2f       	mov	r23, r19
     a78:	84 2f       	mov	r24, r20
     a7a:	95 2f       	mov	r25, r21
     a7c:	20 e2       	ldi	r18, 0x20	; 32
     a7e:	3c e1       	ldi	r19, 0x1C	; 28
     a80:	40 e0       	ldi	r20, 0x00	; 0
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__divmodsi4>
     a88:	ca 01       	movw	r24, r20
     a8a:	b9 01       	movw	r22, r18
     a8c:	a6 01       	movw	r20, r12
     a8e:	2a e0       	ldi	r18, 0x0A	; 10
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <ltoa>
	ltoa(z, Position,	10 );
     a96:	61 2f       	mov	r22, r17
     a98:	70 2f       	mov	r23, r16
     a9a:	8f 2d       	mov	r24, r15
     a9c:	9e 2d       	mov	r25, r14
     a9e:	ae 01       	movw	r20, r28
     aa0:	2a e0       	ldi	r18, 0x0A	; 10
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <ltoa>
	//lcd_puts("Position: ");
	//lcd_puts(Position);
	//lcd_puts("\n");
}
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	ff 90       	pop	r15
     ab2:	ef 90       	pop	r14
     ab4:	df 90       	pop	r13
     ab6:	cf 90       	pop	r12
     ab8:	08 95       	ret

00000aba <FindStringInArray>:
			.Befehl = progmem_Befehl,
	}
};
*/

int 	FindStringInArray	(const char* pInput, const char* pOptions[], int cmp_length) {
     aba:	cf 92       	push	r12
     abc:	df 92       	push	r13
     abe:	ef 92       	push	r14
     ac0:	ff 92       	push	r15
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	6c 01       	movw	r12, r24
     acc:	7a 01       	movw	r14, r20
     ace:	8b 01       	movw	r16, r22
     ad0:	cf ef       	ldi	r28, 0xFF	; 255
     ad2:	df ef       	ldi	r29, 0xFF	; 255
     ad4:	08 c0       	rjmp	.+16     	; 0xae6 <FindStringInArray+0x2c>
	int n = -1;
	while (pOptions[++n]) {
		//lcd_puts(pOptions[n]);
		//lcd_puts("\n");
		if (!strncmp(pInput, pOptions[n], cmp_length)){
     ad6:	c6 01       	movw	r24, r12
     ad8:	a7 01       	movw	r20, r14
     ada:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <strncmp>
     ade:	0e 5f       	subi	r16, 0xFE	; 254
     ae0:	1f 4f       	sbci	r17, 0xFF	; 255
     ae2:	00 97       	sbiw	r24, 0x00	; 0
     ae4:	49 f0       	breq	.+18     	; 0xaf8 <FindStringInArray+0x3e>
};
*/

int 	FindStringInArray	(const char* pInput, const char* pOptions[], int cmp_length) {
	int n = -1;
	while (pOptions[++n]) {
     ae6:	21 96       	adiw	r28, 0x01	; 1
     ae8:	f8 01       	movw	r30, r16
     aea:	60 81       	ld	r22, Z
     aec:	71 81       	ldd	r23, Z+1	; 0x01
     aee:	61 15       	cp	r22, r1
     af0:	71 05       	cpc	r23, r1
     af2:	89 f7       	brne	.-30     	; 0xad6 <FindStringInArray+0x1c>
     af4:	c3 e6       	ldi	r28, 0x63	; 99
     af6:	d0 e0       	ldi	r29, 0x00	; 0
		if (!strncmp(pInput, pOptions[n], cmp_length)){
			return n;
		}
	}
	return 99;
}
     af8:	ce 01       	movw	r24, r28
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	df 90       	pop	r13
     b08:	cf 90       	pop	r12
     b0a:	08 95       	ret

00000b0c <switch_Motor>:
		lcd_puts("       \n");
		uart_put_string(str_rx,D_Stepper);
		uart_put_string("\n",D_Stepper);
	}
}
int 	switch_Motor		(char * str_rx) {
     b0c:	df 93       	push	r29
     b0e:	cf 93       	push	r28
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	2a 97       	sbiw	r28, 0x0a	; 10
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
	const char* pOptions[] = {
			"@01", 		// 0 - Isel
			"Q:",    	// 1 - CSG
			"ECHO0", 	// 2 - Zeta
			"!Terminal",	// 3 - Terminal ansteuerung!
			0 };
     b20:	de 01       	movw	r26, r28
     b22:	11 96       	adiw	r26, 0x01	; 1
     b24:	ee e1       	ldi	r30, 0x1E	; 30
     b26:	f7 e0       	ldi	r31, 0x07	; 7
     b28:	2a e0       	ldi	r18, 0x0A	; 10
     b2a:	01 90       	ld	r0, Z+
     b2c:	0d 92       	st	X+, r0
     b2e:	21 50       	subi	r18, 0x01	; 1
     b30:	e1 f7       	brne	.-8      	; 0xb2a <switch_Motor+0x1e>
	switch (FindStringInArray(str_rx, pOptions, 3)) {
     b32:	be 01       	movw	r22, r28
     b34:	6f 5f       	subi	r22, 0xFF	; 255
     b36:	7f 4f       	sbci	r23, 0xFF	; 255
     b38:	43 e0       	ldi	r20, 0x03	; 3
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	0e 94 5d 05 	call	0xaba	; 0xaba <FindStringInArray>
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	91 05       	cpc	r25, r1
     b44:	61 f0       	breq	.+24     	; 0xb5e <switch_Motor+0x52>
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	91 05       	cpc	r25, r1
     b4a:	1c f4       	brge	.+6      	; 0xb52 <switch_Motor+0x46>
     b4c:	89 2b       	or	r24, r25
     b4e:	51 f0       	breq	.+20     	; 0xb64 <switch_Motor+0x58>
     b50:	12 c0       	rjmp	.+36     	; 0xb76 <switch_Motor+0x6a>
     b52:	82 30       	cpi	r24, 0x02	; 2
     b54:	91 05       	cpc	r25, r1
     b56:	49 f0       	breq	.+18     	; 0xb6a <switch_Motor+0x5e>
     b58:	03 97       	sbiw	r24, 0x03	; 3
     b5a:	69 f4       	brne	.+26     	; 0xb76 <switch_Motor+0x6a>
     b5c:	09 c0       	rjmp	.+18     	; 0xb70 <switch_Motor+0x64>
     b5e:	21 e0       	ldi	r18, 0x01	; 1
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	0b c0       	rjmp	.+22     	; 0xb7a <switch_Motor+0x6e>
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	08 c0       	rjmp	.+16     	; 0xb7a <switch_Motor+0x6e>
     b6a:	22 e0       	ldi	r18, 0x02	; 2
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	05 c0       	rjmp	.+10     	; 0xb7a <switch_Motor+0x6e>
		break;
	case 1: 		// 1 - CSG
		return M_CSG;
		break;
	case 2:			// 2 - Zeta
		return M_ZETA;
     b70:	23 e0       	ldi	r18, 0x03	; 3
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <switch_Motor+0x6e>
		break;
	case 3:			// 3 - Terminal ansteuerung
		return M_TERMINAL;
     b76:	2e ef       	ldi	r18, 0xFE	; 254
     b78:	3f ef       	ldi	r19, 0xFF	; 255
		break;
	default:
		return M_UNK;
	}
}
     b7a:	c9 01       	movw	r24, r18
     b7c:	2a 96       	adiw	r28, 0x0a	; 10
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <switch_Terminal>:
		lcd_puts(str_rx);
		lcd_puts("   \n");
		//Initialized = switch_Inputs(str_rx);
	}
}
void 	switch_Terminal		(char * str_rx) {
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	2a 97       	sbiw	r28, 0x0a	; 10
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
     ba6:	8c 01       	movw	r16, r24
	const char* pOptions[] = {
			"!CLS", // 0 - LC-Display l�schen
			"Test",	// 1 - Test
			"!Manual",// 2 - Ignorieren
			"!YYYY",// 3 - Wait till motor stops
			0 };
     ba8:	de 01       	movw	r26, r28
     baa:	11 96       	adiw	r26, 0x01	; 1
     bac:	e0 e4       	ldi	r30, 0x40	; 64
     bae:	f7 e0       	ldi	r31, 0x07	; 7
     bb0:	8a e0       	ldi	r24, 0x0A	; 10
     bb2:	01 90       	ld	r0, Z+
     bb4:	0d 92       	st	X+, r0
     bb6:	81 50       	subi	r24, 0x01	; 1
     bb8:	e1 f7       	brne	.-8      	; 0xbb2 <switch_Terminal+0x24>

	if (init_T == 0){
     bba:	80 91 ec 07 	lds	r24, 0x07EC
     bbe:	90 91 ed 07 	lds	r25, 0x07ED
     bc2:	89 2b       	or	r24, r25
     bc4:	c1 f4       	brne	.+48     	; 0xbf6 <switch_Terminal+0x68>
		init_T = 1;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	90 93 ed 07 	sts	0x07ED, r25
     bce:	80 93 ec 07 	sts	0x07EC, r24
		uart_put_string("Willkommen im Terminal Modus\r\n",D_RapidForm);
     bd2:	87 e3       	ldi	r24, 0x37	; 55
     bd4:	92 e0       	ldi	r25, 0x02	; 2
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
		uart_put_string("m�gliche Befehle sind: \r\n",D_RapidForm);
     bde:	86 e5       	ldi	r24, 0x56	; 86
     be0:	92 e0       	ldi	r25, 0x02	; 2
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
		uart_put_string(" A - Motorstatus\r\n M - Move Steps\r\n", D_RapidForm);
     bea:	82 e7       	ldi	r24, 0x72	; 114
     bec:	92 e0       	ldi	r25, 0x02	; 2
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
	}
	switch (FindStringInArray(str_rx, pOptions, 2)) {
     bf6:	c8 01       	movw	r24, r16
     bf8:	be 01       	movw	r22, r28
     bfa:	6f 5f       	subi	r22, 0xFF	; 255
     bfc:	7f 4f       	sbci	r23, 0xFF	; 255
     bfe:	42 e0       	ldi	r20, 0x02	; 2
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	0e 94 5d 05 	call	0xaba	; 0xaba <FindStringInArray>
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	91 05       	cpc	r25, r1
     c0a:	61 f0       	breq	.+24     	; 0xc24 <switch_Terminal+0x96>
     c0c:	82 30       	cpi	r24, 0x02	; 2
     c0e:	91 05       	cpc	r25, r1
     c10:	1c f4       	brge	.+6      	; 0xc18 <switch_Terminal+0x8a>
     c12:	89 2b       	or	r24, r25
     c14:	21 f0       	breq	.+8      	; 0xc1e <switch_Terminal+0x90>
     c16:	0f c0       	rjmp	.+30     	; 0xc36 <switch_Terminal+0xa8>
     c18:	04 97       	sbiw	r24, 0x04	; 4
     c1a:	6c f4       	brge	.+26     	; 0xc36 <switch_Terminal+0xa8>
     c1c:	1e c0       	rjmp	.+60     	; 0xc5a <switch_Terminal+0xcc>
	case 0: // Display l�schen
		lcd_clrscr();
     c1e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
     c22:	1b c0       	rjmp	.+54     	; 0xc5a <switch_Terminal+0xcc>
		break;
	case 1: // Interner Test
		lcd_puts("Test bestanden     \n");
     c24:	86 e9       	ldi	r24, 0x96	; 150
     c26:	92 e0       	ldi	r25, 0x02	; 2
     c28:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("Test bestanden", D_RapidForm);
     c2c:	8b ea       	ldi	r24, 0xAB	; 171
     c2e:	92 e0       	ldi	r25, 0x02	; 2
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	10 c0       	rjmp	.+32     	; 0xc56 <switch_Terminal+0xc8>
	case 3: // Reserve 2

		break;
	default:
		//lcd_puts("Z:");
		lcd_puts(str_rx);
     c36:	c8 01       	movw	r24, r16
     c38:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts("       \n");
     c3c:	8a eb       	ldi	r24, 0xBA	; 186
     c3e:	92 e0       	ldi	r25, 0x02	; 2
     c40:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string(str_rx,D_Stepper);
     c44:	c8 01       	movw	r24, r16
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
		uart_put_string("\n",D_Stepper);
     c4e:	84 e8       	ldi	r24, 0x84	; 132
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
	}
}
     c5a:	2a 96       	adiw	r28, 0x0a	; 10
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	08 95       	ret

00000c70 <switch_csg>:
	default:
		lcd_puts("ISEL:    \n");
		lcd_puts(str_rx);
	}
}
void 	switch_csg			(char * str_rx) {
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	df 93       	push	r29
     c76:	cf 93       	push	r28
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	a0 97       	sbiw	r28, 0x20	; 32
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
     c88:	8c 01       	movw	r16, r24
			"H:", // 5 - H:
			"G", // 6 - Motor starten
			"M:", // 7 - Move by Pulses
			"!", // 8 - Busy Ready ?
			"H1",
			0 };
     c8a:	de 01       	movw	r26, r28
     c8c:	1b 96       	adiw	r26, 0x0b	; 11
     c8e:	e3 ea       	ldi	r30, 0xA3	; 163
     c90:	f7 e0       	ldi	r31, 0x07	; 7
     c92:	86 e1       	ldi	r24, 0x16	; 22
     c94:	01 90       	ld	r0, Z+
     c96:	0d 92       	st	X+, r0
     c98:	81 50       	subi	r24, 0x01	; 1
     c9a:	e1 f7       	brne	.-8      	; 0xc94 <switch_csg+0x24>
	switch (FindStringInArray(str_rx, pOptions, 2)) {
     c9c:	c8 01       	movw	r24, r16
     c9e:	be 01       	movw	r22, r28
     ca0:	65 5f       	subi	r22, 0xF5	; 245
     ca2:	7f 4f       	sbci	r23, 0xFF	; 255
     ca4:	42 e0       	ldi	r20, 0x02	; 2
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	0e 94 5d 05 	call	0xaba	; 0xaba <FindStringInArray>
     cac:	84 30       	cpi	r24, 0x04	; 4
     cae:	91 05       	cpc	r25, r1
     cb0:	c1 f1       	breq	.+112    	; 0xd22 <switch_csg+0xb2>
     cb2:	85 30       	cpi	r24, 0x05	; 5
     cb4:	91 05       	cpc	r25, r1
     cb6:	84 f4       	brge	.+32     	; 0xcd8 <switch_csg+0x68>
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	91 05       	cpc	r25, r1
     cbc:	29 f1       	breq	.+74     	; 0xd08 <switch_csg+0x98>
     cbe:	82 30       	cpi	r24, 0x02	; 2
     cc0:	91 05       	cpc	r25, r1
     cc2:	1c f4       	brge	.+6      	; 0xcca <switch_csg+0x5a>
     cc4:	89 2b       	or	r24, r25
     cc6:	e9 f0       	breq	.+58     	; 0xd02 <switch_csg+0x92>
     cc8:	65 c0       	rjmp	.+202    	; 0xd94 <switch_csg+0x124>
     cca:	82 30       	cpi	r24, 0x02	; 2
     ccc:	91 05       	cpc	r25, r1
     cce:	f9 f0       	breq	.+62     	; 0xd0e <switch_csg+0x9e>
     cd0:	03 97       	sbiw	r24, 0x03	; 3
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <switch_csg+0x66>
     cd4:	5f c0       	rjmp	.+190    	; 0xd94 <switch_csg+0x124>
     cd6:	1e c0       	rjmp	.+60     	; 0xd14 <switch_csg+0xa4>
     cd8:	87 30       	cpi	r24, 0x07	; 7
     cda:	91 05       	cpc	r25, r1
     cdc:	81 f1       	breq	.+96     	; 0xd3e <switch_csg+0xce>
     cde:	88 30       	cpi	r24, 0x08	; 8
     ce0:	91 05       	cpc	r25, r1
     ce2:	3c f4       	brge	.+14     	; 0xcf2 <switch_csg+0x82>
     ce4:	85 30       	cpi	r24, 0x05	; 5
     ce6:	91 05       	cpc	r25, r1
     ce8:	01 f1       	breq	.+64     	; 0xd2a <switch_csg+0xba>
     cea:	06 97       	sbiw	r24, 0x06	; 6
     cec:	09 f0       	breq	.+2      	; 0xcf0 <switch_csg+0x80>
     cee:	52 c0       	rjmp	.+164    	; 0xd94 <switch_csg+0x124>
     cf0:	23 c0       	rjmp	.+70     	; 0xd38 <switch_csg+0xc8>
     cf2:	88 30       	cpi	r24, 0x08	; 8
     cf4:	91 05       	cpc	r25, r1
     cf6:	09 f4       	brne	.+2      	; 0xcfa <switch_csg+0x8a>
     cf8:	3f c0       	rjmp	.+126    	; 0xd78 <switch_csg+0x108>
     cfa:	09 97       	sbiw	r24, 0x09	; 9
     cfc:	09 f0       	breq	.+2      	; 0xd00 <switch_csg+0x90>
     cfe:	4a c0       	rjmp	.+148    	; 0xd94 <switch_csg+0x124>
     d00:	46 c0       	rjmp	.+140    	; 0xd8e <switch_csg+0x11e>
	case 0: // Motorkarte Erfolgreich angesprochen
		lcd_puts("!");
     d02:	83 ec       	ldi	r24, 0xC3	; 195
     d04:	92 e0       	ldi	r25, 0x02	; 2
     d06:	4f c0       	rjmp	.+158    	; 0xda6 <switch_csg+0x136>
		break;
	case 1: // Display l�schen
		lcd_clrscr();
     d08:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
     d0c:	4e c0       	rjmp	.+156    	; 0xdaa <switch_csg+0x13a>
		break;
	case 2: // Interner Test
		lcd_puts("!T");
     d0e:	85 ec       	ldi	r24, 0xC5	; 197
     d10:	92 e0       	ldi	r25, 0x02	; 2
     d12:	49 c0       	rjmp	.+146    	; 0xda6 <switch_csg+0x136>
		//uart_puts("Test bestanden\n\r");
		break;
	case 3: // Status abfrage von Software
		lcd_puts("Statusabfrage     \n");
     d14:	88 ec       	ldi	r24, 0xC8	; 200
     d16:	92 e0       	ldi	r25, 0x02	; 2
     d18:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		csg_Status_melden();
     d1c:	0e 94 8b 02 	call	0x516	; 0x516 <csg_Status_melden>
     d20:	44 c0       	rjmp	.+136    	; 0xdaa <switch_csg+0x13a>
		break;
	case 4:
		String_zerlegen_csg(str_rx);
     d22:	c8 01       	movw	r24, r16
     d24:	0e 94 1a 03 	call	0x634	; 0x634 <String_zerlegen_csg>
     d28:	40 c0       	rjmp	.+128    	; 0xdaa <switch_csg+0x13a>

		break;
	case 5:
		lcd_puts("H:                 \n");
     d2a:	8c ed       	ldi	r24, 0xDC	; 220
     d2c:	92 e0       	ldi	r25, 0x02	; 2
     d2e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string(B_OK, D_RapidForm);
     d32:	80 ea       	ldi	r24, 0xA0	; 160
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	26 c0       	rjmp	.+76     	; 0xd84 <switch_csg+0x114>
		break;
	case 6:
		lcd_puts("Motor starten\n");
     d38:	81 ef       	ldi	r24, 0xF1	; 241
     d3a:	92 e0       	ldi	r25, 0x02	; 2
     d3c:	34 c0       	rjmp	.+104    	; 0xda6 <switch_csg+0x136>
		//uart_put_string(B_OK, D_RapidForm);
		break;
	case 7:
		move++;
     d3e:	80 91 ea 07 	lds	r24, 0x07EA
     d42:	90 91 eb 07 	lds	r25, 0x07EB
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	90 93 eb 07 	sts	0x07EB, r25
     d4c:	80 93 ea 07 	sts	0x07EA, r24
		char it[10];
		itoa(move, it, 10);
     d50:	8e 01       	movw	r16, r28
     d52:	0f 5f       	subi	r16, 0xFF	; 255
     d54:	1f 4f       	sbci	r17, 0xFF	; 255
     d56:	b8 01       	movw	r22, r16
     d58:	4a e0       	ldi	r20, 0x0A	; 10
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <itoa>
		lcd_puts(it);
     d60:	c8 01       	movw	r24, r16
     d62:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts("_Move!\n");
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	93 e0       	ldi	r25, 0x03	; 3
     d6a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("M 160000\r\n",D_Stepper);
     d6e:	88 e0       	ldi	r24, 0x08	; 8
     d70:	93 e0       	ldi	r25, 0x03	; 3
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	08 c0       	rjmp	.+16     	; 0xd88 <switch_csg+0x118>

		break;
	case 8:
		lcd_puts("R/B?");
     d78:	83 e1       	ldi	r24, 0x13	; 19
     d7a:	93 e0       	ldi	r25, 0x03	; 3
     d7c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("R\r\n", D_RapidForm);
     d80:	88 e1       	ldi	r24, 0x18	; 24
     d82:	93 e0       	ldi	r25, 0x03	; 3
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
     d8c:	0e c0       	rjmp	.+28     	; 0xdaa <switch_csg+0x13a>
		break;
	case 9:
		lcd_puts("H1 empfangen       \n");
     d8e:	8c e1       	ldi	r24, 0x1C	; 28
     d90:	93 e0       	ldi	r25, 0x03	; 3
     d92:	09 c0       	rjmp	.+18     	; 0xda6 <switch_csg+0x136>
		break;
	default:
		lcd_puts("U_B: ");
     d94:	81 e3       	ldi	r24, 0x31	; 49
     d96:	93 e0       	ldi	r25, 0x03	; 3
     d98:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(str_rx);
     d9c:	c8 01       	movw	r24, r16
     d9e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts("!END       \n");
     da2:	87 e3       	ldi	r24, 0x37	; 55
     da4:	93 e0       	ldi	r25, 0x03	; 3
     da6:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	}
}
     daa:	a0 96       	adiw	r28, 0x20	; 32
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	08 95       	ret

00000dc0 <switch_Stepper>:
	z = z/9;
	ltoa(z,Position,10);
}
// 		Vearbeitungs Logik
int 	Initialized = M_NOTI;
void 	switch_Stepper		(char * str_rx) {
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	2a 97       	sbiw	r28, 0x0a	; 10
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	8c 01       	movw	r16, r24
	const char* pOptions[] = {
			"#", 	// 0 - Stepper Karte Befehl erkannt
			"E", 	// 1 - Error
			"!CLS", // 2 - Clear Screen
			"Test", // 3 - Test
			0 };
     dda:	de 01       	movw	r26, r28
     ddc:	11 96       	adiw	r26, 0x01	; 1
     dde:	eb ed       	ldi	r30, 0xDB	; 219
     de0:	f7 e0       	ldi	r31, 0x07	; 7
     de2:	8a e0       	ldi	r24, 0x0A	; 10
     de4:	01 90       	ld	r0, Z+
     de6:	0d 92       	st	X+, r0
     de8:	81 50       	subi	r24, 0x01	; 1
     dea:	e1 f7       	brne	.-8      	; 0xde4 <switch_Stepper+0x24>
	switch (FindStringInArray(str_rx, pOptions, 1)) {
     dec:	c8 01       	movw	r24, r16
     dee:	be 01       	movw	r22, r28
     df0:	6f 5f       	subi	r22, 0xFF	; 255
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	41 e0       	ldi	r20, 0x01	; 1
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	0e 94 5d 05 	call	0xaba	; 0xaba <FindStringInArray>
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	91 05       	cpc	r25, r1
     e00:	79 f0       	breq	.+30     	; 0xe20 <switch_Stepper+0x60>
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	91 05       	cpc	r25, r1
     e06:	1c f4       	brge	.+6      	; 0xe0e <switch_Stepper+0x4e>
     e08:	89 2b       	or	r24, r25
     e0a:	39 f0       	breq	.+14     	; 0xe1a <switch_Stepper+0x5a>
     e0c:	18 c0       	rjmp	.+48     	; 0xe3e <switch_Stepper+0x7e>
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	91 05       	cpc	r25, r1
     e12:	69 f0       	breq	.+26     	; 0xe2e <switch_Stepper+0x6e>
     e14:	03 97       	sbiw	r24, 0x03	; 3
     e16:	99 f4       	brne	.+38     	; 0xe3e <switch_Stepper+0x7e>
     e18:	0d c0       	rjmp	.+26     	; 0xe34 <switch_Stepper+0x74>
	case 0:
		lcd_puts("Erfolgreich\n");
     e1a:	84 e4       	ldi	r24, 0x44	; 68
     e1c:	93 e0       	ldi	r25, 0x03	; 3
     e1e:	0c c0       	rjmp	.+24     	; 0xe38 <switch_Stepper+0x78>
		//uart_put_string("0\n\r", D_RapidForm);
		break;
	case 1:
		lcd_puts("Error\n");
     e20:	81 e5       	ldi	r24, 0x51	; 81
     e22:	93 e0       	ldi	r25, 0x03	; 3
     e24:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("1\r\n", D_RapidForm);
     e28:	88 e5       	ldi	r24, 0x58	; 88
     e2a:	93 e0       	ldi	r25, 0x03	; 3
     e2c:	1c c0       	rjmp	.+56     	; 0xe66 <inner_1656+0x20>
		break;
	case 2:
		lcd_clrscr();
     e2e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
     e32:	1d c0       	rjmp	.+58     	; 0xe6e <inner_1656+0x28>
		break;
	case 3:
		lcd_puts("Test bestanden\n");
     e34:	8c e5       	ldi	r24, 0x5C	; 92
     e36:	93 e0       	ldi	r25, 0x03	; 3
     e38:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
     e3c:	18 c0       	rjmp	.+48     	; 0xe6e <inner_1656+0x28>
     e3e:	8a e0       	ldi	r24, 0x0A	; 10
     e40:	90 e0       	ldi	r25, 0x00	; 0

00000e42 <outer_1656>:
     e42:	a0 ed       	ldi	r26, 0xD0	; 208
     e44:	b7 e0       	ldi	r27, 0x07	; 7

00000e46 <inner_1656>:
     e46:	11 97       	sbiw	r26, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <inner_1656>
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	d1 f7       	brne	.-12     	; 0xe42 <outer_1656>
		//uart_put_string("Test bestanden\n\r", D_RapidForm);
		//uart_put_string("Test bestanden\n\r", D_Stepper);
		break;
	default:
		ms_spin(10);
		lcd_puts("Stepper: ");
     e4e:	8c e6       	ldi	r24, 0x6C	; 108
     e50:	93 e0       	ldi	r25, 0x03	; 3
     e52:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(str_rx);
     e56:	c8 01       	movw	r24, r16
     e58:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts("!\n");
     e5c:	86 e7       	ldi	r24, 0x76	; 118
     e5e:	93 e0       	ldi	r25, 0x03	; 3
     e60:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string(str_rx, D_RapidForm);
     e64:	c8 01       	movw	r24, r16
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
	}
}
     e6e:	2a 96       	adiw	r28, 0x0a	; 10
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	08 95       	ret

00000e84 <switch_Isel>:
void 	switch_Isel			(char * str_rx) {
     e84:	cf 92       	push	r12
     e86:	df 92       	push	r13
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	cd 55       	subi	r28, 0x5D	; 93
     e9a:	d0 40       	sbci	r29, 0x00	; 0
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
     ea6:	6c 01       	movw	r12, r24
			"!CLS",    	// 1 - LC-Display l�schen
			"Test", 	// 2 - Test
			"@01",  	// 3 - Achse ausw�hlen
			"@0R", 		// 4 - Status abfrage
			"@0M", 		// 5 - Gehe zu Position MX , +600
			0 };
     ea8:	de 01       	movw	r26, r28
     eaa:	17 96       	adiw	r26, 0x07	; 7
     eac:	e9 ec       	ldi	r30, 0xC9	; 201
     eae:	f7 e0       	ldi	r31, 0x07	; 7
     eb0:	8e e0       	ldi	r24, 0x0E	; 14
     eb2:	01 90       	ld	r0, Z+
     eb4:	0d 92       	st	X+, r0
     eb6:	81 50       	subi	r24, 0x01	; 1
     eb8:	e1 f7       	brne	.-8      	; 0xeb2 <switch_Isel+0x2e>

	int Ret_Val = FindStringInArray(str_rx, pOptions, 3);
     eba:	c6 01       	movw	r24, r12
     ebc:	be 01       	movw	r22, r28
     ebe:	69 5f       	subi	r22, 0xF9	; 249
     ec0:	7f 4f       	sbci	r23, 0xFF	; 255
     ec2:	43 e0       	ldi	r20, 0x03	; 3
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	0e 94 5d 05 	call	0xaba	; 0xaba <FindStringInArray>
	switch (Ret_Val) {
     eca:	82 30       	cpi	r24, 0x02	; 2
     ecc:	91 05       	cpc	r25, r1
     ece:	c9 f0       	breq	.+50     	; 0xf02 <switch_Isel+0x7e>
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	91 05       	cpc	r25, r1
     ed4:	34 f4       	brge	.+12     	; 0xee2 <switch_Isel+0x5e>
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	71 f0       	breq	.+28     	; 0xef6 <switch_Isel+0x72>
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	09 f0       	breq	.+2      	; 0xee0 <switch_Isel+0x5c>
     ede:	01 c1       	rjmp	.+514    	; 0x10e2 <inner_1892+0x7c>
     ee0:	0d c0       	rjmp	.+26     	; 0xefc <switch_Isel+0x78>
     ee2:	84 30       	cpi	r24, 0x04	; 4
     ee4:	91 05       	cpc	r25, r1
     ee6:	f9 f0       	breq	.+62     	; 0xf26 <inner_1763+0xe>
     ee8:	84 30       	cpi	r24, 0x04	; 4
     eea:	91 05       	cpc	r25, r1
     eec:	8c f0       	brlt	.+34     	; 0xf10 <switch_Isel+0x8c>
     eee:	05 97       	sbiw	r24, 0x05	; 5
     ef0:	09 f0       	breq	.+2      	; 0xef4 <switch_Isel+0x70>
     ef2:	f7 c0       	rjmp	.+494    	; 0x10e2 <inner_1892+0x7c>
     ef4:	41 c0       	rjmp	.+130    	; 0xf78 <inner_1779+0x36>
	case 0: 		// 0 - Reserve
		lcd_puts("Reserve\r\n");
     ef6:	89 e7       	ldi	r24, 0x79	; 121
     ef8:	93 e0       	ldi	r25, 0x03	; 3
     efa:	f8 c0       	rjmp	.+496    	; 0x10ec <inner_1892+0x86>
		break;
	case 1: 		// 1 - LC-Display l�schen
		lcd_clrscr();
     efc:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
     f00:	f7 c0       	rjmp	.+494    	; 0x10f0 <inner_1892+0x8a>
		break;
	case 2:			// 2 - Test
		lcd_puts("Test bestanden\n");
     f02:	8c e5       	ldi	r24, 0x5C	; 92
     f04:	93 e0       	ldi	r25, 0x03	; 3
     f06:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("Test bestanden\r\n", D_RapidForm);
     f0a:	83 e8       	ldi	r24, 0x83	; 131
     f0c:	93 e0       	ldi	r25, 0x03	; 3
     f0e:	e4 c0       	rjmp	.+456    	; 0x10d8 <inner_1892+0x72>
     f10:	8a e0       	ldi	r24, 0x0A	; 10
     f12:	90 e0       	ldi	r25, 0x00	; 0

00000f14 <outer_1763>:
     f14:	a0 ed       	ldi	r26, 0xD0	; 208
     f16:	b7 e0       	ldi	r27, 0x07	; 7

00000f18 <inner_1763>:
     f18:	11 97       	sbiw	r26, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <inner_1763>
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	d1 f7       	brne	.-12     	; 0xf14 <outer_1763>
			s_ptr++; // Increase string pointer
		} while( pgm_read_byte( s_ptr ) != 0x00 );  // End of string
		*/

		//lcd_puts( buf );
		lcd_puts("Init");
     f20:	84 e9       	ldi	r24, 0x94	; 148
     f22:	93 e0       	ldi	r25, 0x03	; 3
     f24:	d5 c0       	rjmp	.+426    	; 0x10d0 <inner_1892+0x6a>
		//String_zerlegen_Isel(str_rx, Position);
		uart_put_string("0\r\n", D_RapidForm);
		//uart_put_string(Protokoll.Motor[M_ISEL].Befehl[0].Output, D_RapidForm);
		break;
	case 4:			// 4 - Status abfrage
		lcd_puts("Statusabfrage:     \n");
     f26:	89 e9       	ldi	r24, 0x99	; 153
     f28:	93 e0       	ldi	r25, 0x03	; 3
     f2a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("A\n", D_Stepper);
     f2e:	8e ea       	ldi	r24, 0xAE	; 174
     f30:	93 e0       	ldi	r25, 0x03	; 3
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
     f3a:	82 e3       	ldi	r24, 0x32	; 50
     f3c:	90 e0       	ldi	r25, 0x00	; 0

00000f3e <outer_1779>:
     f3e:	a0 ed       	ldi	r26, 0xD0	; 208
     f40:	b7 e0       	ldi	r27, 0x07	; 7

00000f42 <inner_1779>:
     f42:	11 97       	sbiw	r26, 0x01	; 1
     f44:	f1 f7       	brne	.-4      	; 0xf42 <inner_1779>
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	d1 f7       	brne	.-12     	; 0xf3e <outer_1779>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
     f4a:	80 91 c8 00 	lds	r24, 0x00C8
     f4e:	87 ff       	sbrs	r24, 7
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <inner_1779+0x18>
			uart_rx(D_Stepper);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 88 08 	call	0x1110	; 0x1110 <uart_rx>
		if (!strcmp(str_rx,"0#"))
     f5a:	c6 01       	movw	r24, r12
     f5c:	61 eb       	ldi	r22, 0xB1	; 177
     f5e:	73 e0       	ldi	r23, 0x03	; 3
     f60:	0e 94 65 0d 	call	0x1aca	; 0x1aca <strcmp>
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	09 f4       	brne	.+2      	; 0xf6a <inner_1779+0x28>
     f68:	b5 c0       	rjmp	.+362    	; 0x10d4 <inner_1892+0x6e>
			uart_put_string("0\r\n", D_RapidForm);
		else {
			lcd_puts("Fehlgeschlagen     \n");
     f6a:	84 eb       	ldi	r24, 0xB4	; 180
     f6c:	93 e0       	ldi	r25, 0x03	; 3
     f6e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			uart_put_string("-1\r\n", D_RapidForm);
     f72:	89 ec       	ldi	r24, 0xC9	; 201
     f74:	93 e0       	ldi	r25, 0x03	; 3
     f76:	b0 c0       	rjmp	.+352    	; 0x10d8 <inner_1892+0x72>
     f78:	8a e0       	ldi	r24, 0x0A	; 10
     f7a:	90 e0       	ldi	r25, 0x00	; 0

00000f7c <outer_1808>:
     f7c:	a0 ed       	ldi	r26, 0xD0	; 208
     f7e:	b7 e0       	ldi	r27, 0x07	; 7

00000f80 <inner_1808>:
     f80:	11 97       	sbiw	r26, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <inner_1808>
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	d1 f7       	brne	.-12     	; 0xf7c <outer_1808>
		}
		break;
	case 5:			// 5 - Gehe zu Position MX , +600
		ms_spin(10);
		char Position[33], Winkel[6];
		memset(Position, '\0', 33);
     f88:	35 e1       	ldi	r19, 0x15	; 21
     f8a:	e3 2e       	mov	r14, r19
     f8c:	f1 2c       	mov	r15, r1
     f8e:	ec 0e       	add	r14, r28
     f90:	fd 1e       	adc	r15, r29
     f92:	81 e2       	ldi	r24, 0x21	; 33
     f94:	d7 01       	movw	r26, r14
     f96:	1d 92       	st	X+, r1
     f98:	8a 95       	dec	r24
     f9a:	e9 f7       	brne	.-6      	; 0xf96 <inner_1808+0x16>
		memset(Winkel, '\0', 6);
     f9c:	fe 01       	movw	r30, r28
     f9e:	31 96       	adiw	r30, 0x01	; 1
     fa0:	86 e0       	ldi	r24, 0x06	; 6
     fa2:	df 01       	movw	r26, r30
     fa4:	1d 92       	st	X+, r1
     fa6:	8a 95       	dec	r24
     fa8:	e9 f7       	brne	.-6      	; 0xfa4 <inner_1808+0x24>
		String_zerlegen_Isel(str_rx, Position, Winkel);
     faa:	c6 01       	movw	r24, r12
     fac:	b7 01       	movw	r22, r14
     fae:	af 01       	movw	r20, r30
     fb0:	0e 94 da 04 	call	0x9b4	; 0x9b4 <String_zerlegen_Isel>
		char Move_To[40];
		memset(Move_To,  '\0', 40);
     fb4:	8e 01       	movw	r16, r28
     fb6:	0a 5c       	subi	r16, 0xCA	; 202
     fb8:	1f 4f       	sbci	r17, 0xFF	; 255
     fba:	88 e2       	ldi	r24, 0x28	; 40
     fbc:	f8 01       	movw	r30, r16
     fbe:	11 92       	st	Z+, r1
     fc0:	8a 95       	dec	r24
     fc2:	e9 f7       	brne	.-6      	; 0xfbe <inner_1808+0x3e>
		Move_To[0] = 'M';
     fc4:	8d e4       	ldi	r24, 0x4D	; 77
     fc6:	8e ab       	std	Y+54, r24	; 0x36
		Move_To[1] = 'A';
     fc8:	81 e4       	ldi	r24, 0x41	; 65
     fca:	8f ab       	std	Y+55, r24	; 0x37
		Move_To[2] = ' ';
     fcc:	80 e2       	ldi	r24, 0x20	; 32
     fce:	88 af       	std	Y+56, r24	; 0x38
		Move_To[3] = '\0';
     fd0:	19 ae       	std	Y+57, r1	; 0x39
		strcat(Move_To, Position);
     fd2:	c8 01       	movw	r24, r16
     fd4:	b7 01       	movw	r22, r14
     fd6:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <strcat>
		strcat(Move_To, "\n");
     fda:	c8 01       	movw	r24, r16
     fdc:	64 e8       	ldi	r22, 0x84	; 132
     fde:	71 e0       	ldi	r23, 0x01	; 1
     fe0:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <strcat>
		lcd_puts("Pos:");
     fe4:	8e ec       	ldi	r24, 0xCE	; 206
     fe6:	93 e0       	ldi	r25, 0x03	; 3
     fe8:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(Move_To);
     fec:	c8 01       	movw	r24, r16
     fee:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>

		uart_put_string(Move_To, D_Stepper);
     ff2:	c8 01       	movw	r24, r16
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
     ffc:	02 e3       	ldi	r16, 0x32	; 50
     ffe:	10 e0       	ldi	r17, 0x00	; 0
    1000:	f8 01       	movw	r30, r16

00001002 <outer_1854>:
    1002:	a0 ed       	ldi	r26, 0xD0	; 208
    1004:	b7 e0       	ldi	r27, 0x07	; 7

00001006 <inner_1854>:
    1006:	11 97       	sbiw	r26, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <inner_1854>
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	d1 f7       	brne	.-12     	; 0x1002 <outer_1854>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    100e:	80 91 c8 00 	lds	r24, 0x00C8
    1012:	87 ff       	sbrs	r24, 7
    1014:	6d c0       	rjmp	.+218    	; 0x10f0 <inner_1892+0x8a>
			uart_rx(D_Stepper);
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 88 08 	call	0x1110	; 0x1110 <uart_rx>
		else {
			//lcd_puts("Befehl n. bestaetig\n");
			break;
		}

		uart_put_string("A\n", D_Stepper);
    101e:	8e ea       	ldi	r24, 0xAE	; 174
    1020:	93 e0       	ldi	r25, 0x03	; 3
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
    102a:	f8 01       	movw	r30, r16

0000102c <outer_1868>:
    102c:	a0 ed       	ldi	r26, 0xD0	; 208
    102e:	b7 e0       	ldi	r27, 0x07	; 7

00001030 <inner_1868>:
    1030:	11 97       	sbiw	r26, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <inner_1868>
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	d1 f7       	brne	.-12     	; 0x102c <outer_1868>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    1038:	80 91 c8 00 	lds	r24, 0x00C8
    103c:	87 ff       	sbrs	r24, 7
    103e:	05 c0       	rjmp	.+10     	; 0x104a <inner_1868+0x1a>
			uart_rx(D_Stepper);
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 88 08 	call	0x1110	; 0x1110 <uart_rx>
    1048:	2c c0       	rjmp	.+88     	; 0x10a2 <inner_1892+0x3c>
		else {
			lcd_puts("Keine Bewegung!\n");
    104a:	83 ed       	ldi	r24, 0xD3	; 211
    104c:	93 e0       	ldi	r25, 0x03	; 3
    104e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
    1052:	27 c0       	rjmp	.+78     	; 0x10a2 <inner_1892+0x3c>
		}

		while (!strcmp(str_rx,"1#")){
			uart_put_string("A\n", D_Stepper);
    1054:	8e ea       	ldi	r24, 0xAE	; 174
    1056:	93 e0       	ldi	r25, 0x03	; 3
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
    1060:	f7 01       	movw	r30, r14

00001062 <outer_1892>:
    1062:	a0 ed       	ldi	r26, 0xD0	; 208
    1064:	b7 e0       	ldi	r27, 0x07	; 7

00001066 <inner_1892>:
    1066:	11 97       	sbiw	r26, 0x01	; 1
    1068:	f1 f7       	brne	.-4      	; 0x1066 <inner_1892>
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	d1 f7       	brne	.-12     	; 0x1062 <outer_1892>
			ms_spin(50);
			if ((UCSR1A & (1 << RXC1))){
    106e:	80 91 c8 00 	lds	r24, 0x00C8
    1072:	87 ff       	sbrs	r24, 7
    1074:	10 c0       	rjmp	.+32     	; 0x1096 <inner_1892+0x30>
				uart_rx(D_Stepper);
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 88 08 	call	0x1110	; 0x1110 <uart_rx>
				lcd_clrscr();
    107e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
				lcd_puts("Gehe zu Winkel: ");
    1082:	84 ee       	ldi	r24, 0xE4	; 228
    1084:	93 e0       	ldi	r25, 0x03	; 3
    1086:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
				lcd_puts(Position);
    108a:	c8 01       	movw	r24, r16
    108c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
				lcd_puts("\n");
    1090:	84 e8       	ldi	r24, 0x84	; 132
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	02 c0       	rjmp	.+4      	; 0x109a <inner_1892+0x34>
			}
			else {
				lcd_puts("Keine Antwort\n");
    1096:	85 ef       	ldi	r24, 0xF5	; 245
    1098:	93 e0       	ldi	r25, 0x03	; 3
    109a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			}
			wdt_reset();
    109e:	a8 95       	wdr
    10a0:	06 c0       	rjmp	.+12     	; 0x10ae <inner_1892+0x48>
    10a2:	22 e3       	ldi	r18, 0x32	; 50
    10a4:	e2 2e       	mov	r14, r18
    10a6:	f1 2c       	mov	r15, r1
			ms_spin(50);
			if ((UCSR1A & (1 << RXC1))){
				uart_rx(D_Stepper);
				lcd_clrscr();
				lcd_puts("Gehe zu Winkel: ");
				lcd_puts(Position);
    10a8:	8e 01       	movw	r16, r28
    10aa:	0b 5e       	subi	r16, 0xEB	; 235
    10ac:	1f 4f       	sbci	r17, 0xFF	; 255
			uart_rx(D_Stepper);
		else {
			lcd_puts("Keine Bewegung!\n");
		}

		while (!strcmp(str_rx,"1#")){
    10ae:	c6 01       	movw	r24, r12
    10b0:	64 e0       	ldi	r22, 0x04	; 4
    10b2:	74 e0       	ldi	r23, 0x04	; 4
    10b4:	0e 94 65 0d 	call	0x1aca	; 0x1aca <strcmp>
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	61 f2       	breq	.-104    	; 0x1054 <inner_1868+0x24>
			else {
				lcd_puts("Keine Antwort\n");
			}
			wdt_reset();
		}
		lcd_puts("Position: \n");
    10bc:	87 e0       	ldi	r24, 0x07	; 7
    10be:	94 e0       	ldi	r25, 0x04	; 4
    10c0:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(Position);
    10c4:	ce 01       	movw	r24, r28
    10c6:	45 96       	adiw	r24, 0x15	; 21
    10c8:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(" Erreicht\n");
    10cc:	83 e1       	ldi	r24, 0x13	; 19
    10ce:	94 e0       	ldi	r25, 0x04	; 4
    10d0:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string("0\r\n", D_RapidForm);
    10d4:	80 ea       	ldi	r24, 0xA0	; 160
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
    10e0:	07 c0       	rjmp	.+14     	; 0x10f0 <inner_1892+0x8a>
		break;
	default:
		lcd_puts("ISEL:    \n");
    10e2:	8e e1       	ldi	r24, 0x1E	; 30
    10e4:	94 e0       	ldi	r25, 0x04	; 4
    10e6:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(str_rx);
    10ea:	c6 01       	movw	r24, r12
    10ec:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	}
}
    10f0:	c3 5a       	subi	r28, 0xA3	; 163
    10f2:	df 4f       	sbci	r29, 0xFF	; 255
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	ff 90       	pop	r15
    1108:	ef 90       	pop	r14
    110a:	df 90       	pop	r13
    110c:	cf 90       	pop	r12
    110e:	08 95       	ret

00001110 <uart_rx>:
		break;
	default:
		return M_UNK;
	}
}
void 	uart_rx				(int dir) {
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
    1114:	8c 01       	movw	r16, r24
	uart_get_string(str_rx, dir);
    1116:	82 ef       	ldi	r24, 0xF2	; 242
    1118:	97 e0       	ldi	r25, 0x07	; 7
    111a:	b8 01       	movw	r22, r16
    111c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <uart_get_string>
	if (dir == D_Stepper)
    1120:	01 30       	cpi	r16, 0x01	; 1
    1122:	11 05       	cpc	r17, r1
    1124:	29 f4       	brne	.+10     	; 0x1130 <uart_rx+0x20>
		switch_Stepper(str_rx);
    1126:	82 ef       	ldi	r24, 0xF2	; 242
    1128:	97 e0       	ldi	r25, 0x07	; 7
    112a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <switch_Stepper>
    112e:	48 c0       	rjmp	.+144    	; 0x11c0 <uart_rx+0xb0>
	else{
		if(Initialized == M_UNK){
    1130:	80 91 05 07 	lds	r24, 0x0705
    1134:	90 91 06 07 	lds	r25, 0x0706
    1138:	8e 5f       	subi	r24, 0xFE	; 254
    113a:	9f 4f       	sbci	r25, 0xFF	; 255
    113c:	51 f4       	brne	.+20     	; 0x1152 <uart_rx+0x42>
			lcd_puts("Unbekannter Motor!\n");
    113e:	89 e2       	ldi	r24, 0x29	; 41
    1140:	94 e0       	ldi	r25, 0x04	; 4
    1142:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			//lcd_puts(str_rx);
			Initialized = M_NOTI;
    1146:	8f ef       	ldi	r24, 0xFF	; 255
    1148:	9f ef       	ldi	r25, 0xFF	; 255
    114a:	90 93 06 07 	sts	0x0706, r25
    114e:	80 93 05 07 	sts	0x0705, r24
		}
		if(Initialized == M_NOTI){
    1152:	80 91 05 07 	lds	r24, 0x0705
    1156:	90 91 06 07 	lds	r25, 0x0706
    115a:	8f 5f       	subi	r24, 0xFF	; 255
    115c:	9f 4f       	sbci	r25, 0xFF	; 255
    115e:	41 f4       	brne	.+16     	; 0x1170 <uart_rx+0x60>
			Initialized = switch_Motor(str_rx);
    1160:	82 ef       	ldi	r24, 0xF2	; 242
    1162:	97 e0       	ldi	r25, 0x07	; 7
    1164:	0e 94 86 05 	call	0xb0c	; 0xb0c <switch_Motor>
    1168:	90 93 06 07 	sts	0x0706, r25
    116c:	80 93 05 07 	sts	0x0705, r24
		}
		if(Initialized == M_ISEL)
    1170:	80 91 05 07 	lds	r24, 0x0705
    1174:	90 91 06 07 	lds	r25, 0x0706
    1178:	89 2b       	or	r24, r25
    117a:	21 f4       	brne	.+8      	; 0x1184 <uart_rx+0x74>
			switch_Isel(str_rx);
    117c:	82 ef       	ldi	r24, 0xF2	; 242
    117e:	97 e0       	ldi	r25, 0x07	; 7
    1180:	0e 94 42 07 	call	0xe84	; 0xe84 <switch_Isel>
		if(Initialized == M_CSG)
    1184:	80 91 05 07 	lds	r24, 0x0705
    1188:	90 91 06 07 	lds	r25, 0x0706
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	21 f4       	brne	.+8      	; 0x1198 <uart_rx+0x88>
			switch_csg(str_rx);
    1190:	82 ef       	ldi	r24, 0xF2	; 242
    1192:	97 e0       	ldi	r25, 0x07	; 7
    1194:	0e 94 38 06 	call	0xc70	; 0xc70 <switch_csg>
		if(Initialized == M_ZETA)
    1198:	80 91 05 07 	lds	r24, 0x0705
    119c:	90 91 06 07 	lds	r25, 0x0706
    11a0:	02 97       	sbiw	r24, 0x02	; 2
    11a2:	21 f4       	brne	.+8      	; 0x11ac <uart_rx+0x9c>
			switch_Zeta(str_rx);
    11a4:	82 ef       	ldi	r24, 0xF2	; 242
    11a6:	97 e0       	ldi	r25, 0x07	; 7
    11a8:	0e 94 0e 09 	call	0x121c	; 0x121c <switch_Zeta>
		if(Initialized == M_TERMINAL)
    11ac:	80 91 05 07 	lds	r24, 0x0705
    11b0:	90 91 06 07 	lds	r25, 0x0706
    11b4:	03 97       	sbiw	r24, 0x03	; 3
    11b6:	21 f4       	brne	.+8      	; 0x11c0 <uart_rx+0xb0>
			switch_Terminal(str_rx);
    11b8:	82 ef       	ldi	r24, 0xF2	; 242
    11ba:	97 e0       	ldi	r25, 0x07	; 7
    11bc:	0e 94 c7 05 	call	0xb8e	; 0xb8e <switch_Terminal>
	}
}
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	08 95       	ret

000011c6 <menu_puts>:
	lcd_puts("Selected: ");
	lcd_puts(name);

	ms_spin(750);
}
void 	menu_puts			(void *arg, char *name) {
    11c6:	0f 93       	push	r16
    11c8:	1f 93       	push	r17
    11ca:	8c 01       	movw	r16, r24
	//my_select(arg, name);
	uart_put_string(arg, D_Stepper);
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
	lcd_clrscr();
    11d4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
	lcd_puts("Send: ");
    11d8:	8d e3       	ldi	r24, 0x3D	; 61
    11da:	94 e0       	ldi	r25, 0x04	; 4
    11dc:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts(arg);
    11e0:	c8 01       	movw	r24, r16
    11e2:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_puts("\n");
    11e6:	84 e8       	ldi	r24, 0x84	; 132
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
    11ee:	84 e6       	ldi	r24, 0x64	; 100
    11f0:	90 e0       	ldi	r25, 0x00	; 0

000011f2 <outer_2077>:
    11f2:	a0 ed       	ldi	r26, 0xD0	; 208
    11f4:	b7 e0       	ldi	r27, 0x07	; 7

000011f6 <inner_2077>:
    11f6:	11 97       	sbiw	r26, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <inner_2077>
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	d1 f7       	brne	.-12     	; 0x11f2 <outer_2077>
	ms_spin(100);
	//if ((UCSR1A & (1 << RXC1)))
	uart_rx(D_Stepper);
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 88 08 	call	0x1110	; 0x1110 <uart_rx>
    1206:	88 ee       	ldi	r24, 0xE8	; 232
    1208:	93 e0       	ldi	r25, 0x03	; 3

0000120a <outer_2085>:
    120a:	a0 ed       	ldi	r26, 0xD0	; 208
    120c:	b7 e0       	ldi	r27, 0x07	; 7

0000120e <inner_2085>:
    120e:	11 97       	sbiw	r26, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <inner_2085>
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	d1 f7       	brne	.-12     	; 0x120a <outer_2085>
	ms_spin(1000);
}
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	08 95       	ret

0000121c <switch_Zeta>:
		lcd_puts("U_B: ");
		lcd_puts(str_rx);
		lcd_puts("!END       \n");
	}
}
void 	switch_Zeta			(char * str_rx) {
    121c:	af 92       	push	r10
    121e:	bf 92       	push	r11
    1220:	cf 92       	push	r12
    1222:	df 92       	push	r13
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	c3 56       	subi	r28, 0x63	; 99
    1236:	d0 40       	sbci	r29, 0x00	; 0
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	7c 01       	movw	r14, r24
			"D1125",// 7 - Position
			"A8", 	// 8 - Accelartion 8
			"V8",	// 9 - Velocity 8
			"ECHO0",// 10 - Echo abschalten
			"PSET0",// 11 - Ursprung setzen
			0 };
    1244:	de 01       	movw	r26, r28
    1246:	11 96       	adiw	r26, 0x01	; 1
    1248:	e4 e7       	ldi	r30, 0x74	; 116
    124a:	f7 e0       	ldi	r31, 0x07	; 7
    124c:	8a e1       	ldi	r24, 0x1A	; 26
    124e:	01 90       	ld	r0, Z+
    1250:	0d 92       	st	X+, r0
    1252:	81 50       	subi	r24, 0x01	; 1
    1254:	e1 f7       	brne	.-8      	; 0x124e <switch_Zeta+0x32>
	char Position[33];
	char Move_To[40];
	memset(Move_To,  '\0', 40);
    1256:	8e 01       	movw	r16, r28
    1258:	04 5c       	subi	r16, 0xC4	; 196
    125a:	1f 4f       	sbci	r17, 0xFF	; 255
    125c:	88 e2       	ldi	r24, 0x28	; 40
    125e:	d8 01       	movw	r26, r16
    1260:	1d 92       	st	X+, r1
    1262:	8a 95       	dec	r24
    1264:	e9 f7       	brne	.-6      	; 0x1260 <switch_Zeta+0x44>
	Move_To[0] = 'M';
    1266:	8d e4       	ldi	r24, 0x4D	; 77
    1268:	8c af       	std	Y+60, r24	; 0x3c
	Move_To[1] = 'A';
    126a:	81 e4       	ldi	r24, 0x41	; 65
    126c:	8d af       	std	Y+61, r24	; 0x3d
	Move_To[2] = ' ';
    126e:	80 e2       	ldi	r24, 0x20	; 32
    1270:	8e af       	std	Y+62, r24	; 0x3e
	Move_To[3] = '\0';
    1272:	1f ae       	std	Y+63, r1	; 0x3f
	switch (FindStringInArray(str_rx, pOptions, 1)) {
    1274:	c7 01       	movw	r24, r14
    1276:	be 01       	movw	r22, r28
    1278:	6f 5f       	subi	r22, 0xFF	; 255
    127a:	7f 4f       	sbci	r23, 0xFF	; 255
    127c:	41 e0       	ldi	r20, 0x01	; 1
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	0e 94 5d 05 	call	0xaba	; 0xaba <FindStringInArray>
    1284:	87 30       	cpi	r24, 0x07	; 7
    1286:	91 05       	cpc	r25, r1
    1288:	6c f4       	brge	.+26     	; 0x12a4 <switch_Zeta+0x88>
    128a:	83 30       	cpi	r24, 0x03	; 3
    128c:	91 05       	cpc	r25, r1
    128e:	0c f0       	brlt	.+2      	; 0x1292 <switch_Zeta+0x76>
    1290:	f5 c0       	rjmp	.+490    	; 0x147c <inner_2292+0xb0>
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	91 05       	cpc	r25, r1
    1296:	01 f1       	breq	.+64     	; 0x12d8 <switch_Zeta+0xbc>
    1298:	82 30       	cpi	r24, 0x02	; 2
    129a:	91 05       	cpc	r25, r1
    129c:	04 f5       	brge	.+64     	; 0x12de <switch_Zeta+0xc2>
    129e:	89 2b       	or	r24, r25
    12a0:	c1 f0       	breq	.+48     	; 0x12d2 <switch_Zeta+0xb6>
    12a2:	e1 c0       	rjmp	.+450    	; 0x1466 <inner_2292+0x9a>
    12a4:	89 30       	cpi	r24, 0x09	; 9
    12a6:	91 05       	cpc	r25, r1
    12a8:	09 f4       	brne	.+2      	; 0x12ac <switch_Zeta+0x90>
    12aa:	cf c0       	rjmp	.+414    	; 0x144a <inner_2292+0x7e>
    12ac:	8a 30       	cpi	r24, 0x0A	; 10
    12ae:	91 05       	cpc	r25, r1
    12b0:	44 f4       	brge	.+16     	; 0x12c2 <switch_Zeta+0xa6>
    12b2:	87 30       	cpi	r24, 0x07	; 7
    12b4:	91 05       	cpc	r25, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <switch_Zeta+0x9e>
    12b8:	bd c0       	rjmp	.+378    	; 0x1434 <inner_2292+0x68>
    12ba:	08 97       	sbiw	r24, 0x08	; 8
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <switch_Zeta+0xa4>
    12be:	d3 c0       	rjmp	.+422    	; 0x1466 <inner_2292+0x9a>
    12c0:	dd c0       	rjmp	.+442    	; 0x147c <inner_2292+0xb0>
    12c2:	8a 30       	cpi	r24, 0x0A	; 10
    12c4:	91 05       	cpc	r25, r1
    12c6:	09 f4       	brne	.+2      	; 0x12ca <switch_Zeta+0xae>
    12c8:	cb c0       	rjmp	.+406    	; 0x1460 <inner_2292+0x94>
    12ca:	0b 97       	sbiw	r24, 0x0b	; 11
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <switch_Zeta+0xb4>
    12ce:	cb c0       	rjmp	.+406    	; 0x1466 <inner_2292+0x9a>
    12d0:	d5 c0       	rjmp	.+426    	; 0x147c <inner_2292+0xb0>
	case 0: // Display l�schen
		lcd_clrscr();
    12d2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
    12d6:	d2 c0       	rjmp	.+420    	; 0x147c <inner_2292+0xb0>
		break;
	case 1: // Interner Test
		lcd_puts("Test bestanden     \n");
    12d8:	86 e9       	ldi	r24, 0x96	; 150
    12da:	92 e0       	ldi	r25, 0x02	; 2
    12dc:	cd c0       	rjmp	.+410    	; 0x1478 <inner_2292+0xac>
    12de:	84 e6       	ldi	r24, 0x64	; 100
    12e0:	90 e0       	ldi	r25, 0x00	; 0

000012e2 <outer_2198>:
    12e2:	a0 ed       	ldi	r26, 0xD0	; 208
    12e4:	b7 e0       	ldi	r27, 0x07	; 7

000012e6 <inner_2198>:
    12e6:	11 97       	sbiw	r26, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <inner_2198>
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	d1 f7       	brne	.-12     	; 0x12e2 <outer_2198>
		break;
	case 2: // Go
		ms_spin(100);
		strcat(Move_To, Position);
    12ee:	c8 01       	movw	r24, r16
    12f0:	be 01       	movw	r22, r28
    12f2:	65 5e       	subi	r22, 0xE5	; 229
    12f4:	7f 4f       	sbci	r23, 0xFF	; 255
    12f6:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <strcat>
		strcat(Move_To, "\n");
    12fa:	c8 01       	movw	r24, r16
    12fc:	64 e8       	ldi	r22, 0x84	; 132
    12fe:	71 e0       	ldi	r23, 0x01	; 1
    1300:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <strcat>
		//lcd_puts("Pos:");
		//lcd_puts(Move_To);

		uart_put_string(Move_To, D_Stepper);
    1304:	c8 01       	movw	r24, r16
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
    130e:	02 e3       	ldi	r16, 0x32	; 50
    1310:	10 e0       	ldi	r17, 0x00	; 0
    1312:	f8 01       	movw	r30, r16

00001314 <outer_2215>:
    1314:	a0 ed       	ldi	r26, 0xD0	; 208
    1316:	b7 e0       	ldi	r27, 0x07	; 7

00001318 <inner_2215>:
    1318:	11 97       	sbiw	r26, 0x01	; 1
    131a:	f1 f7       	brne	.-4      	; 0x1318 <inner_2215>
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	d1 f7       	brne	.-12     	; 0x1314 <outer_2215>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    1320:	80 91 c8 00 	lds	r24, 0x00C8
    1324:	87 ff       	sbrs	r24, 7
    1326:	16 c0       	rjmp	.+44     	; 0x1354 <inner_2229+0x12>
			uart_rx(D_Stepper);
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 88 08 	call	0x1110	; 0x1110 <uart_rx>
		else {
			lcd_puts("Befehl n. bestaetig\n");
			break;
		}

		uart_put_string("A\n", D_Stepper);
    1330:	8e ea       	ldi	r24, 0xAE	; 174
    1332:	93 e0       	ldi	r25, 0x03	; 3
    1334:	61 e0       	ldi	r22, 0x01	; 1
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
    133c:	f8 01       	movw	r30, r16

0000133e <outer_2229>:
    133e:	a0 ed       	ldi	r26, 0xD0	; 208
    1340:	b7 e0       	ldi	r27, 0x07	; 7

00001342 <inner_2229>:
    1342:	11 97       	sbiw	r26, 0x01	; 1
    1344:	f1 f7       	brne	.-4      	; 0x1342 <inner_2229>
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	d1 f7       	brne	.-12     	; 0x133e <outer_2229>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    134a:	80 91 c8 00 	lds	r24, 0x00C8
    134e:	88 23       	and	r24, r24
    1350:	4c f4       	brge	.+18     	; 0x1364 <inner_2229+0x22>
    1352:	03 c0       	rjmp	.+6      	; 0x135a <inner_2229+0x18>
		uart_put_string(Move_To, D_Stepper);
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
			uart_rx(D_Stepper);
		else {
			lcd_puts("Befehl n. bestaetig\n");
    1354:	84 e4       	ldi	r24, 0x44	; 68
    1356:	94 e0       	ldi	r25, 0x04	; 4
    1358:	8f c0       	rjmp	.+286    	; 0x1478 <inner_2292+0xac>
		}

		uart_put_string("A\n", D_Stepper);
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
			uart_rx(D_Stepper);
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 88 08 	call	0x1110	; 0x1110 <uart_rx>
    1362:	4c c0       	rjmp	.+152    	; 0x13fc <inner_2292+0x30>
		else {
			lcd_puts("Keine Bewegung!\n");
    1364:	83 ed       	ldi	r24, 0xD3	; 211
    1366:	93 e0       	ldi	r25, 0x03	; 3
    1368:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
    136c:	47 c0       	rjmp	.+142    	; 0x13fc <inner_2292+0x30>
		}

		while (!strcmp(str_rx,"1#")){
			uart_put_string("W\n", D_Stepper);
    136e:	89 e5       	ldi	r24, 0x59	; 89
    1370:	94 e0       	ldi	r25, 0x04	; 4
    1372:	61 e0       	ldi	r22, 0x01	; 1
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
    137a:	f5 01       	movw	r30, r10

0000137c <outer_2263>:
    137c:	a0 ed       	ldi	r26, 0xD0	; 208
    137e:	b7 e0       	ldi	r27, 0x07	; 7

00001380 <inner_2263>:
    1380:	11 97       	sbiw	r26, 0x01	; 1
    1382:	f1 f7       	brne	.-4      	; 0x1380 <inner_2263>
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	d1 f7       	brne	.-12     	; 0x137c <outer_2263>
			ms_spin(100);
			if ((UCSR1A & (1 << RXC1))){
    1388:	80 91 c8 00 	lds	r24, 0x00C8
    138c:	87 ff       	sbrs	r24, 7
    138e:	10 c0       	rjmp	.+32     	; 0x13b0 <inner_2263+0x30>
				uart_rx(D_Stepper);
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 88 08 	call	0x1110	; 0x1110 <uart_rx>
				lcd_clrscr();
    1398:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
				lcd_puts("Position(Akt/Ges): \n");
    139c:	8c e5       	ldi	r24, 0x5C	; 92
    139e:	94 e0       	ldi	r25, 0x04	; 4
    13a0:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
				lcd_puts(str_rx);
    13a4:	c7 01       	movw	r24, r14
    13a6:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
				lcd_puts(" / ");
    13aa:	81 e7       	ldi	r24, 0x71	; 113
    13ac:	94 e0       	ldi	r25, 0x04	; 4
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <inner_2263+0x34>
			}
			else {
				lcd_puts("Keine Antwort\n");
    13b0:	85 ef       	ldi	r24, 0xF5	; 245
    13b2:	93 e0       	ldi	r25, 0x03	; 3
    13b4:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			}
			wdt_reset();
    13b8:	a8 95       	wdr

			uart_put_string("A\n", D_Stepper);
    13ba:	8e ea       	ldi	r24, 0xAE	; 174
    13bc:	93 e0       	ldi	r25, 0x03	; 3
    13be:	61 e0       	ldi	r22, 0x01	; 1
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
    13c6:	f6 01       	movw	r30, r12

000013c8 <outer_2292>:
    13c8:	a0 ed       	ldi	r26, 0xD0	; 208
    13ca:	b7 e0       	ldi	r27, 0x07	; 7

000013cc <inner_2292>:
    13cc:	11 97       	sbiw	r26, 0x01	; 1
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <inner_2292>
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	d1 f7       	brne	.-12     	; 0x13c8 <outer_2292>
			ms_spin(50);
			if ((UCSR1A & (1 << RXC1))){
    13d4:	80 91 c8 00 	lds	r24, 0x00C8
    13d8:	87 ff       	sbrs	r24, 7
    13da:	0a c0       	rjmp	.+20     	; 0x13f0 <inner_2292+0x24>
				uart_rx(D_Stepper);
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 88 08 	call	0x1110	; 0x1110 <uart_rx>
				//lcd_clrscr();
				//lcd_puts("running to\n");
				//lcd_puts("Position: ");
				lcd_puts(Position);
    13e4:	c8 01       	movw	r24, r16
    13e6:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
				lcd_puts("\n");
    13ea:	84 e8       	ldi	r24, 0x84	; 132
    13ec:	91 e0       	ldi	r25, 0x01	; 1
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <inner_2292+0x28>
			}
			else {
				lcd_puts("Keine Antwort\n");
    13f0:	85 ef       	ldi	r24, 0xF5	; 245
    13f2:	93 e0       	ldi	r25, 0x03	; 3
    13f4:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			}
			wdt_reset();
    13f8:	a8 95       	wdr
    13fa:	09 c0       	rjmp	.+18     	; 0x140e <inner_2292+0x42>
    13fc:	54 e6       	ldi	r21, 0x64	; 100
    13fe:	a5 2e       	mov	r10, r21
    1400:	b1 2c       	mov	r11, r1
    1402:	42 e3       	ldi	r20, 0x32	; 50
    1404:	c4 2e       	mov	r12, r20
    1406:	d1 2c       	mov	r13, r1
			if ((UCSR1A & (1 << RXC1))){
				uart_rx(D_Stepper);
				//lcd_clrscr();
				//lcd_puts("running to\n");
				//lcd_puts("Position: ");
				lcd_puts(Position);
    1408:	8e 01       	movw	r16, r28
    140a:	05 5e       	subi	r16, 0xE5	; 229
    140c:	1f 4f       	sbci	r17, 0xFF	; 255
			uart_rx(D_Stepper);
		else {
			lcd_puts("Keine Bewegung!\n");
		}

		while (!strcmp(str_rx,"1#")){
    140e:	c7 01       	movw	r24, r14
    1410:	64 e0       	ldi	r22, 0x04	; 4
    1412:	74 e0       	ldi	r23, 0x04	; 4
    1414:	0e 94 65 0d 	call	0x1aca	; 0x1aca <strcmp>
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	09 f4       	brne	.+2      	; 0x141e <inner_2292+0x52>
    141c:	a8 cf       	rjmp	.-176    	; 0x136e <inner_2229+0x2c>
			else {
				lcd_puts("Keine Antwort\n");
			}
			wdt_reset();
		}
		lcd_puts("Position: \n");
    141e:	87 e0       	ldi	r24, 0x07	; 7
    1420:	94 e0       	ldi	r25, 0x04	; 4
    1422:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(Position);
    1426:	ce 01       	movw	r24, r28
    1428:	4b 96       	adiw	r24, 0x1b	; 27
    142a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(" Erreicht\n");
    142e:	83 e1       	ldi	r24, 0x13	; 19
    1430:	94 e0       	ldi	r25, 0x04	; 4
    1432:	0d c0       	rjmp	.+26     	; 0x144e <inner_2292+0x82>
		break;
	case 6:
		//lcd_puts("MA1 empfangen     \n");
		break;
	case 7: // Position Setzen
		memset(Position, '\0', 33);			// Array mit Nullen bef�llen
    1434:	fe 01       	movw	r30, r28
    1436:	7b 96       	adiw	r30, 0x1b	; 27
    1438:	81 e2       	ldi	r24, 0x21	; 33
    143a:	df 01       	movw	r26, r30
    143c:	1d 92       	st	X+, r1
    143e:	8a 95       	dec	r24
    1440:	e9 f7       	brne	.-6      	; 0x143c <inner_2292+0x70>
		Position_Zeta(Position);
    1442:	cf 01       	movw	r24, r30
    1444:	0e 94 a5 04 	call	0x94a	; 0x94a <Position_Zeta>
    1448:	19 c0       	rjmp	.+50     	; 0x147c <inner_2292+0xb0>
		break;
	case 8:
		break;
	case 9:		//V8
		lcd_puts("Speed set          \n");
    144a:	86 e8       	ldi	r24, 0x86	; 134
    144c:	94 e0       	ldi	r25, 0x04	; 4
    144e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		uart_put_string(B_Zeta_Return, D_RapidForm);
    1452:	85 e7       	ldi	r24, 0x75	; 117
    1454:	94 e0       	ldi	r25, 0x04	; 4
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	0e 94 36 02 	call	0x46c	; 0x46c <uart_put_string>
    145e:	0e c0       	rjmp	.+28     	; 0x147c <inner_2292+0xb0>
		break;
	case 10:
		lcd_puts("Echo off           \n");
    1460:	8b e9       	ldi	r24, 0x9B	; 155
    1462:	94 e0       	ldi	r25, 0x04	; 4
    1464:	09 c0       	rjmp	.+18     	; 0x1478 <inner_2292+0xac>
		//uart_put_string("ECHO0\r", D_RapidForm);
		break;
	case 11:
		break;
	default:
		lcd_puts("Z:");
    1466:	80 eb       	ldi	r24, 0xB0	; 176
    1468:	94 e0       	ldi	r25, 0x04	; 4
    146a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts(str_rx);
    146e:	c7 01       	movw	r24, r14
    1470:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		lcd_puts("   \n");
    1474:	83 eb       	ldi	r24, 0xB3	; 179
    1476:	94 e0       	ldi	r25, 0x04	; 4
    1478:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
		//Initialized = switch_Inputs(str_rx);
	}
}
    147c:	cd 59       	subi	r28, 0x9D	; 157
    147e:	df 4f       	sbci	r29, 0xFF	; 255
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	ff 90       	pop	r15
    1494:	ef 90       	pop	r14
    1496:	df 90       	pop	r13
    1498:	cf 90       	pop	r12
    149a:	bf 90       	pop	r11
    149c:	af 90       	pop	r10
    149e:	08 95       	ret

000014a0 <main>:
//
//      Hauptschleife
//
//////////////////////////////
int main(void) {
	init();
    14a0:	0e 94 86 04 	call	0x90c	; 0x90c <init>
	while (1) {
		wdt_reset();
    14a4:	a8 95       	wdr
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14a6:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    14a8:	90 91 56 08 	lds	r25, 0x0856
    14ac:	91 70       	andi	r25, 0x01	; 1
  key_press ^= key_mask;                          // clear key(s)
    14ae:	80 91 56 08 	lds	r24, 0x0856
    14b2:	89 27       	eor	r24, r25
    14b4:	80 93 56 08 	sts	0x0856, r24
  sei();
    14b8:	78 94       	sei
		if (get_key_press(1 << KEY0) || get_key_rpt(1 << KEY0)){
    14ba:	99 23       	and	r25, r25
    14bc:	61 f4       	brne	.+24     	; 0x14d6 <main+0x36>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14be:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    14c0:	90 91 f1 07 	lds	r25, 0x07F1
    14c4:	91 70       	andi	r25, 0x01	; 1
  key_rpt ^= key_mask;                            // clear key(s)
    14c6:	80 91 f1 07 	lds	r24, 0x07F1
    14ca:	89 27       	eor	r24, r25
    14cc:	80 93 f1 07 	sts	0x07F1, r24
  sei();
    14d0:	78 94       	sei
    14d2:	99 23       	and	r25, r25
    14d4:	51 f0       	breq	.+20     	; 0x14ea <main+0x4a>
			lcd_puts("Betrete Menue!\n");
    14d6:	88 eb       	ldi	r24, 0xB8	; 184
    14d8:	94 e0       	ldi	r25, 0x04	; 4
    14da:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
			menu_enter(&menu_context, &menu_main);
    14de:	8f ef       	ldi	r24, 0xFF	; 255
    14e0:	96 e0       	ldi	r25, 0x06	; 6
    14e2:	62 eb       	ldi	r22, 0xB2	; 178
    14e4:	76 e0       	ldi	r23, 0x06	; 6
    14e6:	0e 94 77 0b 	call	0x16ee	; 0x16ee <menu_enter>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14ea:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    14ec:	90 91 56 08 	lds	r25, 0x0856
    14f0:	92 70       	andi	r25, 0x02	; 2
  key_press ^= key_mask;                          // clear key(s)
    14f2:	80 91 56 08 	lds	r24, 0x0856
    14f6:	89 27       	eor	r24, r25
    14f8:	80 93 56 08 	sts	0x0856, r24
  sei();
    14fc:	78 94       	sei
		}
		if (get_key_press(1 << KEY1))
    14fe:	99 23       	and	r25, r25
    1500:	21 f0       	breq	.+8      	; 0x150a <main+0x6a>
			menu_exit(&menu_context); 	// 1 - Back
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	96 e0       	ldi	r25, 0x06	; 6
    1506:	0e 94 85 0b 	call	0x170a	; 0x170a <menu_exit>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    150a:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    150c:	90 91 56 08 	lds	r25, 0x0856
    1510:	94 70       	andi	r25, 0x04	; 4
  key_press ^= key_mask;                          // clear key(s)
    1512:	80 91 56 08 	lds	r24, 0x0856
    1516:	89 27       	eor	r24, r25
    1518:	80 93 56 08 	sts	0x0856, r24
  sei();
    151c:	78 94       	sei
		if( get_key_press( 1<<KEY2 ))
    151e:	99 23       	and	r25, r25
    1520:	21 f0       	breq	.+8      	; 0x152a <main+0x8a>
			menu_prev_entry(&menu_context);
    1522:	8f ef       	ldi	r24, 0xFF	; 255
    1524:	96 e0       	ldi	r25, 0x06	; 6
    1526:	0e 94 96 0b 	call	0x172c	; 0x172c <menu_prev_entry>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    152a:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    152c:	90 91 56 08 	lds	r25, 0x0856
    1530:	98 70       	andi	r25, 0x08	; 8
  key_press ^= key_mask;                          // clear key(s)
    1532:	80 91 56 08 	lds	r24, 0x0856
    1536:	89 27       	eor	r24, r25
    1538:	80 93 56 08 	sts	0x0856, r24
  sei();
    153c:	78 94       	sei
		if (get_key_press(1 << KEY3) || get_key_rpt(1 << KEY3))
    153e:	99 23       	and	r25, r25
    1540:	61 f4       	brne	.+24     	; 0x155a <main+0xba>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1542:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    1544:	90 91 f1 07 	lds	r25, 0x07F1
    1548:	98 70       	andi	r25, 0x08	; 8
  key_rpt ^= key_mask;                            // clear key(s)
    154a:	80 91 f1 07 	lds	r24, 0x07F1
    154e:	89 27       	eor	r24, r25
    1550:	80 93 f1 07 	sts	0x07F1, r24
  sei();
    1554:	78 94       	sei
    1556:	99 23       	and	r25, r25
    1558:	21 f0       	breq	.+8      	; 0x1562 <main+0xc2>
			menu_next_entry(&menu_context);
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	96 e0       	ldi	r25, 0x06	; 6
    155e:	0e 94 bf 0b 	call	0x177e	; 0x177e <menu_next_entry>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1562:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1564:	90 91 56 08 	lds	r25, 0x0856
    1568:	90 71       	andi	r25, 0x10	; 16
  key_press ^= key_mask;                          // clear key(s)
    156a:	80 91 56 08 	lds	r24, 0x0856
    156e:	89 27       	eor	r24, r25
    1570:	80 93 56 08 	sts	0x0856, r24
  sei();
    1574:	78 94       	sei
		if (get_key_press(1 << KEY4) || get_key_rpt(1 << KEY4))
    1576:	99 23       	and	r25, r25
    1578:	61 f4       	brne	.+24     	; 0x1592 <main+0xf2>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    157a:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    157c:	90 91 f1 07 	lds	r25, 0x07F1
    1580:	90 71       	andi	r25, 0x10	; 16
  key_rpt ^= key_mask;                            // clear key(s)
    1582:	80 91 f1 07 	lds	r24, 0x07F1
    1586:	89 27       	eor	r24, r25
    1588:	80 93 f1 07 	sts	0x07F1, r24
  sei();
    158c:	78 94       	sei
    158e:	99 23       	and	r25, r25
    1590:	21 f0       	breq	.+8      	; 0x159a <main+0xfa>
			menu_select(&menu_context); // 4 - Select
    1592:	8f ef       	ldi	r24, 0xFF	; 255
    1594:	96 e0       	ldi	r25, 0x06	; 6
    1596:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <menu_select>
		if ((UCSR0A & (1 << RXC0))){
    159a:	80 91 c0 00 	lds	r24, 0x00C0
    159e:	87 ff       	sbrs	r24, 7
    15a0:	07 c0       	rjmp	.+14     	; 0x15b0 <main+0x110>
			LED_PORT &= ( 1 << LED2 );
    15a2:	85 b1       	in	r24, 0x05	; 5
    15a4:	84 70       	andi	r24, 0x04	; 4
    15a6:	85 b9       	out	0x05, r24	; 5
			uart_rx(D_RapidForm);
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0e 94 88 08 	call	0x1110	; 0x1110 <uart_rx>
		}
		if ((UCSR1A & (1 << RXC1))){
    15b0:	80 91 c8 00 	lds	r24, 0x00C8
    15b4:	87 ff       	sbrs	r24, 7
    15b6:	76 cf       	rjmp	.-276    	; 0x14a4 <main+0x4>
			LED_PORT &= ( 1 << LED3 );
    15b8:	85 b1       	in	r24, 0x05	; 5
    15ba:	88 70       	andi	r24, 0x08	; 8
    15bc:	85 b9       	out	0x05, r24	; 5
			uart_rx(D_Stepper);
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 88 08 	call	0x1110	; 0x1110 <uart_rx>
    15c6:	6e cf       	rjmp	.-292    	; 0x14a4 <main+0x4>

000015c8 <menu_display>:
/*
 * Display the current menu in the context
 */
 
void menu_display(menu_context_t *context)
{
    15c8:	9f 92       	push	r9
    15ca:	af 92       	push	r10
    15cc:	bf 92       	push	r11
    15ce:	cf 92       	push	r12
    15d0:	df 92       	push	r13
    15d2:	ef 92       	push	r14
    15d4:	ff 92       	push	r15
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	7c 01       	movw	r14, r24
	uint8_t i;
	menu_t *menu = context->menu;
    15e0:	fc 01       	movw	r30, r24
    15e2:	c4 80       	ldd	r12, Z+4	; 0x04
    15e4:	d5 80       	ldd	r13, Z+5	; 0x05
    15e6:	bb 24       	eor	r11, r11
    15e8:	99 24       	eor	r9, r9
    15ea:	52 c0       	rjmp	.+164    	; 0x1690 <menu_display+0xc8>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    15ec:	e9 2d       	mov	r30, r9
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
			if (dindex++ >= menu->num_entries - menu->top_entry)
    15f0:	e2 17       	cp	r30, r18
    15f2:	f3 07       	cpc	r31, r19
    15f4:	0c f0       	brlt	.+2      	; 0x15f8 <menu_display+0x30>
    15f6:	6b c0       	rjmp	.+214    	; 0x16ce <menu_display+0x106>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    15f8:	8f 01       	movw	r16, r30
    15fa:	04 0f       	add	r16, r20
    15fc:	15 1f       	adc	r17, r21
			if (dindex++ >= menu->num_entries - menu->top_entry)
    15fe:	93 94       	inc	r9
				goto entries_done;
		} while (disp_entry->flags & MENU_FLAG_HIDDEN);
    1600:	f8 01       	movw	r30, r16
    1602:	ee 0f       	add	r30, r30
    1604:	ff 1f       	adc	r31, r31
    1606:	e0 0f       	add	r30, r16
    1608:	f1 1f       	adc	r31, r17
    160a:	63 e0       	ldi	r22, 0x03	; 3
    160c:	ee 0f       	add	r30, r30
    160e:	ff 1f       	adc	r31, r31
    1610:	6a 95       	dec	r22
    1612:	e1 f7       	brne	.-8      	; 0x160c <menu_display+0x44>
    1614:	ec 0d       	add	r30, r12
    1616:	fd 1d       	adc	r31, r13
    1618:	85 81       	ldd	r24, Z+5	; 0x05
    161a:	81 fd       	sbrc	r24, 1
    161c:	e7 cf       	rjmp	.-50     	; 0x15ec <menu_display+0x24>
			return;
#endif

		// Go to correct x,y locations and print the entry

		menu_set_pos(context->x_loc, context->y_loc + i);
    161e:	f7 01       	movw	r30, r14
    1620:	61 81       	ldd	r22, Z+1	; 0x01
    1622:	6b 0d       	add	r22, r11
    1624:	80 81       	ld	r24, Z
    1626:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_gotoxy>
	if (selected)
		menu_set_inverse();
#else
	// No inverse; do workaround

	max_width--;
    162a:	f7 01       	movw	r30, r14
    162c:	a3 80       	ldd	r10, Z+3	; 0x03
    162e:	aa 94       	dec	r10
	if (selected) {
    1630:	f6 01       	movw	r30, r12
    1632:	21 81       	ldd	r18, Z+1	; 0x01
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	2f 5f       	subi	r18, 0xFF	; 255
    1638:	3f 4f       	sbci	r19, 0xFF	; 255
    163a:	80 81       	ld	r24, Z
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	89 0d       	add	r24, r9
    1640:	91 1d       	adc	r25, r1
    1642:	28 17       	cp	r18, r24
    1644:	39 07       	cpc	r19, r25
    1646:	11 f4       	brne	.+4      	; 0x164c <menu_display+0x84>
		menu_putchar('*');
    1648:	8a e2       	ldi	r24, 0x2A	; 42
    164a:	01 c0       	rjmp	.+2      	; 0x164e <menu_display+0x86>
	} else {
		menu_putchar(' ');
    164c:	80 e2       	ldi	r24, 0x20	; 32
    164e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
    1652:	e8 01       	movw	r28, r16
    1654:	cc 0f       	add	r28, r28
    1656:	dd 1f       	adc	r29, r29
    1658:	c0 0f       	add	r28, r16
    165a:	d1 1f       	adc	r29, r17
    165c:	21 96       	adiw	r28, 0x01	; 1
    165e:	83 e0       	ldi	r24, 0x03	; 3
    1660:	cc 0f       	add	r28, r28
    1662:	dd 1f       	adc	r29, r29
    1664:	8a 95       	dec	r24
    1666:	e1 f7       	brne	.-8      	; 0x1660 <menu_display+0x98>
    1668:	cc 0d       	add	r28, r12
    166a:	dd 1d       	adc	r29, r13
    166c:	10 e0       	ldi	r17, 0x00	; 0
    166e:	06 c0       	rjmp	.+12     	; 0x167c <menu_display+0xb4>
	
	// Print the characters in the name; fill out to width with
	//  spaces (mainly for inverse)
	
	for (i = 0; i < max_width; i++) {
		if (!entry->name[i])
    1670:	89 91       	ld	r24, Y+
    1672:	88 23       	and	r24, r24
    1674:	31 f0       	breq	.+12     	; 0x1682 <menu_display+0xba>
			break;
			
		menu_putchar(entry->name[i]);
    1676:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
#endif		
	
	// Print the characters in the name; fill out to width with
	//  spaces (mainly for inverse)
	
	for (i = 0; i < max_width; i++) {
    167a:	1f 5f       	subi	r17, 0xFF	; 255
    167c:	1a 15       	cp	r17, r10
    167e:	c0 f3       	brcs	.-16     	; 0x1670 <menu_display+0xa8>
    1680:	06 c0       	rjmp	.+12     	; 0x168e <menu_display+0xc6>
			
		menu_putchar(entry->name[i]);
	}
	
	for (; i < max_width; i++)
		menu_putchar(' ');
    1682:	80 e2       	ldi	r24, 0x20	; 32
    1684:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
			break;
			
		menu_putchar(entry->name[i]);
	}
	
	for (; i < max_width; i++)
    1688:	1f 5f       	subi	r17, 0xFF	; 255
    168a:	1a 15       	cp	r17, r10
    168c:	d0 f3       	brcs	.-12     	; 0x1682 <menu_display+0xba>
	menu_clear();
#endif

	// Display only those entries that will fit on the display

	for (i = 0; i < context->height; i++) {
    168e:	b3 94       	inc	r11
    1690:	f7 01       	movw	r30, r14
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	b8 16       	cp	r11, r24
    1696:	d8 f4       	brcc	.+54     	; 0x16ce <menu_display+0x106>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    1698:	f6 01       	movw	r30, r12
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	50 e0       	ldi	r21, 0x00	; 0
			if (dindex++ >= menu->num_entries - menu->top_entry)
    16a0:	82 81       	ldd	r24, Z+2	; 0x02
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	24 1b       	sub	r18, r20
    16a8:	35 0b       	sbc	r19, r21
    16aa:	a0 cf       	rjmp	.-192    	; 0x15ec <menu_display+0x24>

#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
		menu_set_pos(context->x_loc, context->y_loc + i);
    16ac:	f7 01       	movw	r30, r14
    16ae:	61 81       	ldd	r22, Z+1	; 0x01
    16b0:	6b 0d       	add	r22, r11
    16b2:	80 81       	ld	r24, Z
    16b4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_gotoxy>
    16b8:	10 e0       	ldi	r17, 0x00	; 0
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <menu_display+0xfc>
		for (j = 0; j < context->width; j++) {
			menu_putchar(' ');
    16bc:	80 e2       	ldi	r24, 0x20	; 32
    16be:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
		menu_set_pos(context->x_loc, context->y_loc + i);
		for (j = 0; j < context->width; j++) {
    16c2:	1f 5f       	subi	r17, 0xFF	; 255
    16c4:	f7 01       	movw	r30, r14
    16c6:	83 81       	ldd	r24, Z+3	; 0x03
    16c8:	18 17       	cp	r17, r24
    16ca:	c0 f3       	brcs	.-16     	; 0x16bc <menu_display+0xf4>
entries_done:

#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
    16cc:	b3 94       	inc	r11
    16ce:	f7 01       	movw	r30, r14
    16d0:	82 81       	ldd	r24, Z+2	; 0x02
    16d2:	b8 16       	cp	r11, r24
    16d4:	58 f3       	brcs	.-42     	; 0x16ac <menu_display+0xe4>
		for (j = 0; j < context->width; j++) {
			menu_putchar(' ');
		}
	}	
#endif	
}
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	bf 90       	pop	r11
    16e8:	af 90       	pop	r10
    16ea:	9f 90       	pop	r9
    16ec:	08 95       	ret

000016ee <menu_enter>:
 *  so when we exit we can go back, and update the menu context to
 *  reflect new menu... then display it.
 */

void menu_enter(menu_context_t *context, menu_t *menu)
{
    16ee:	fc 01       	movw	r30, r24
    16f0:	db 01       	movw	r26, r22
	menu->previous = context->menu;
    16f2:	84 81       	ldd	r24, Z+4	; 0x04
    16f4:	95 81       	ldd	r25, Z+5	; 0x05
    16f6:	14 96       	adiw	r26, 0x04	; 4
    16f8:	9c 93       	st	X, r25
    16fa:	8e 93       	st	-X, r24
    16fc:	13 97       	sbiw	r26, 0x03	; 3
	context->menu = menu;
    16fe:	75 83       	std	Z+5, r23	; 0x05
    1700:	64 83       	std	Z+4, r22	; 0x04
	menu_display(context);
    1702:	cf 01       	movw	r24, r30
    1704:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <menu_display>
}
    1708:	08 95       	ret

0000170a <menu_exit>:
 * Exit a menu (go to the previous menu) -- if there is no previous
 *  menu, don't do anything.
 */

void menu_exit(menu_context_t *context)
{
    170a:	dc 01       	movw	r26, r24
	if (context->menu->previous) {
    170c:	14 96       	adiw	r26, 0x04	; 4
    170e:	ed 91       	ld	r30, X+
    1710:	fc 91       	ld	r31, X
    1712:	15 97       	sbiw	r26, 0x05	; 5
    1714:	83 81       	ldd	r24, Z+3	; 0x03
    1716:	94 81       	ldd	r25, Z+4	; 0x04
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	39 f0       	breq	.+14     	; 0x172a <menu_exit+0x20>
		context->menu = context->menu->previous;
    171c:	15 96       	adiw	r26, 0x05	; 5
    171e:	9c 93       	st	X, r25
    1720:	8e 93       	st	-X, r24
    1722:	14 97       	sbiw	r26, 0x04	; 4
		menu_display(context);
    1724:	cd 01       	movw	r24, r26
    1726:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <menu_display>
    172a:	08 95       	ret

0000172c <menu_prev_entry>:
 *  bounds.  Also adjust current top entry in display if needed to fit new
 *  entry on display.
 */ 

void menu_prev_entry(menu_context_t *context)
{
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	ec 01       	movw	r28, r24
	menu_t *menu = context->menu;
    1732:	ac 81       	ldd	r26, Y+4	; 0x04
    1734:	bd 81       	ldd	r27, Y+5	; 0x05
	uint8_t new_entry = menu->current_entry;
    1736:	11 96       	adiw	r26, 0x01	; 1
    1738:	2c 91       	ld	r18, X
    173a:	11 97       	sbiw	r26, 0x01	; 1
	

#ifndef CONFIG_TINYMENU_COMPACT
	while(1) {
		if (new_entry-- == 0) // Watch bounds
    173c:	22 23       	and	r18, r18
    173e:	e1 f0       	breq	.+56     	; 0x1778 <menu_prev_entry+0x4c>
    1740:	21 50       	subi	r18, 0x01	; 1
			return;
			
		if (!(menu->entry[new_entry].flags & MENU_FLAG_HIDDEN))
    1742:	82 2f       	mov	r24, r18
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	fc 01       	movw	r30, r24
    1748:	ee 0f       	add	r30, r30
    174a:	ff 1f       	adc	r31, r31
    174c:	e8 0f       	add	r30, r24
    174e:	f9 1f       	adc	r31, r25
    1750:	83 e0       	ldi	r24, 0x03	; 3
    1752:	ee 0f       	add	r30, r30
    1754:	ff 1f       	adc	r31, r31
    1756:	8a 95       	dec	r24
    1758:	e1 f7       	brne	.-8      	; 0x1752 <menu_prev_entry+0x26>
    175a:	ea 0f       	add	r30, r26
    175c:	fb 1f       	adc	r31, r27
    175e:	85 81       	ldd	r24, Z+5	; 0x05
    1760:	81 fd       	sbrc	r24, 1
    1762:	ec cf       	rjmp	.-40     	; 0x173c <menu_prev_entry+0x10>
#else
	if (new_entry-- == 0)
		return;
#endif
	
	menu->current_entry = new_entry;
    1764:	11 96       	adiw	r26, 0x01	; 1
    1766:	2c 93       	st	X, r18
    1768:	11 97       	sbiw	r26, 0x01	; 1
	
	if (menu->current_entry < menu->top_entry) 
    176a:	8c 91       	ld	r24, X
    176c:	28 17       	cp	r18, r24
    176e:	08 f4       	brcc	.+2      	; 0x1772 <menu_prev_entry+0x46>
		menu->top_entry = menu->current_entry;
    1770:	2c 93       	st	X, r18
		
	menu_display(context);
    1772:	ce 01       	movw	r24, r28
    1774:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <menu_display>
}
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	08 95       	ret

0000177e <menu_next_entry>:
 *  Also adjust current top entry in display if needed to fit new entry
 *  on display
 */
 
void menu_next_entry(menu_context_t *context)
{
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	ec 01       	movw	r28, r24
	menu_t *menu = context->menu;
    1784:	ac 81       	ldd	r26, Y+4	; 0x04
    1786:	bd 81       	ldd	r27, Y+5	; 0x05
	uint8_t new_entry = menu->current_entry;
    1788:	11 96       	adiw	r26, 0x01	; 1
    178a:	2c 91       	ld	r18, X
    178c:	11 97       	sbiw	r26, 0x01	; 1
	

#ifndef CONFIG_TINYMENU_COMPACT
	while(1) {
		if (++new_entry >= menu->num_entries) // watch bounds
    178e:	12 96       	adiw	r26, 0x02	; 2
    1790:	9c 91       	ld	r25, X
    1792:	12 97       	sbiw	r26, 0x02	; 2
    1794:	2f 5f       	subi	r18, 0xFF	; 255
    1796:	29 17       	cp	r18, r25
    1798:	10 f5       	brcc	.+68     	; 0x17de <menu_next_entry+0x60>
			return;
		if (!(menu->entry[new_entry].flags & MENU_FLAG_HIDDEN))
    179a:	42 2f       	mov	r20, r18
    179c:	50 e0       	ldi	r21, 0x00	; 0
    179e:	fa 01       	movw	r30, r20
    17a0:	ee 0f       	add	r30, r30
    17a2:	ff 1f       	adc	r31, r31
    17a4:	e4 0f       	add	r30, r20
    17a6:	f5 1f       	adc	r31, r21
    17a8:	63 e0       	ldi	r22, 0x03	; 3
    17aa:	ee 0f       	add	r30, r30
    17ac:	ff 1f       	adc	r31, r31
    17ae:	6a 95       	dec	r22
    17b0:	e1 f7       	brne	.-8      	; 0x17aa <menu_next_entry+0x2c>
    17b2:	ea 0f       	add	r30, r26
    17b4:	fb 1f       	adc	r31, r27
    17b6:	85 81       	ldd	r24, Z+5	; 0x05
    17b8:	81 fd       	sbrc	r24, 1
    17ba:	ec cf       	rjmp	.-40     	; 0x1794 <menu_next_entry+0x16>
#else
	if (++new_entry >= menu->num_entries)
		return;
#endif
	
	menu->current_entry = new_entry;
    17bc:	11 96       	adiw	r26, 0x01	; 1
    17be:	2c 93       	st	X, r18
    17c0:	11 97       	sbiw	r26, 0x01	; 1
	
	if (menu->current_entry >= menu->top_entry + context->height)
    17c2:	3a 81       	ldd	r19, Y+2	; 0x02
    17c4:	8c 91       	ld	r24, X
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	83 0f       	add	r24, r19
    17ca:	91 1d       	adc	r25, r1
    17cc:	48 17       	cp	r20, r24
    17ce:	59 07       	cpc	r21, r25
    17d0:	1c f0       	brlt	.+6      	; 0x17d8 <menu_next_entry+0x5a>
		menu->top_entry = menu->current_entry - context->height + 1;
    17d2:	23 1b       	sub	r18, r19
    17d4:	2f 5f       	subi	r18, 0xFF	; 255
    17d6:	2c 93       	st	X, r18
	
	menu_display(context);
    17d8:	ce 01       	movw	r24, r28
    17da:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <menu_display>
}
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	08 95       	ret

000017e4 <menu_select>:
 *  enter the submenu)
 *
 */

void menu_select(menu_context_t *context)
{
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	8c 01       	movw	r16, r24
	menu_entry_t *entry;


	entry = &context->menu->entry[context->menu->current_entry];
    17ee:	fc 01       	movw	r30, r24
    17f0:	c4 81       	ldd	r28, Z+4	; 0x04
    17f2:	d5 81       	ldd	r29, Z+5	; 0x05
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	90 e0       	ldi	r25, 0x00	; 0

	if (entry->flags & MENU_FLAG_SUBMENU) {
    17f8:	9c 01       	movw	r18, r24
    17fa:	22 0f       	add	r18, r18
    17fc:	33 1f       	adc	r19, r19
    17fe:	28 0f       	add	r18, r24
    1800:	39 1f       	adc	r19, r25
    1802:	d9 01       	movw	r26, r18
    1804:	f3 e0       	ldi	r31, 0x03	; 3
    1806:	aa 0f       	add	r26, r26
    1808:	bb 1f       	adc	r27, r27
    180a:	fa 95       	dec	r31
    180c:	e1 f7       	brne	.-8      	; 0x1806 <menu_select+0x22>
    180e:	ac 0f       	add	r26, r28
    1810:	bd 1f       	adc	r27, r29
    1812:	15 96       	adiw	r26, 0x05	; 5
    1814:	8c 91       	ld	r24, X
    1816:	15 97       	sbiw	r26, 0x05	; 5
    1818:	80 ff       	sbrs	r24, 0
    181a:	08 c0       	rjmp	.+16     	; 0x182c <menu_select+0x48>
		// Submenu -- enter it
	
		menu_enter(context, (menu_t *)entry->value);
    181c:	5b 96       	adiw	r26, 0x1b	; 27
    181e:	6d 91       	ld	r22, X+
    1820:	7c 91       	ld	r23, X
    1822:	5c 97       	sbiw	r26, 0x1c	; 28
    1824:	c8 01       	movw	r24, r16
    1826:	0e 94 77 0b 	call	0x16ee	; 0x16ee <menu_enter>
    182a:	13 c0       	rjmp	.+38     	; 0x1852 <menu_select+0x6e>
	} else {
		// Regular entry -- execute function
	
		entry->select(entry->value, entry->name);
    182c:	c9 01       	movw	r24, r18
    182e:	01 96       	adiw	r24, 0x01	; 1
    1830:	e3 e0       	ldi	r30, 0x03	; 3
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	ea 95       	dec	r30
    1838:	e1 f7       	brne	.-8      	; 0x1832 <menu_select+0x4e>
    183a:	c8 0f       	add	r28, r24
    183c:	d9 1f       	adc	r29, r25
    183e:	16 96       	adiw	r26, 0x06	; 6
    1840:	ed 91       	ld	r30, X+
    1842:	fc 91       	ld	r31, X
    1844:	17 97       	sbiw	r26, 0x07	; 7
    1846:	5b 96       	adiw	r26, 0x1b	; 27
    1848:	8d 91       	ld	r24, X+
    184a:	9c 91       	ld	r25, X
    184c:	5c 97       	sbiw	r26, 0x1c	; 28
    184e:	be 01       	movw	r22, r28
    1850:	09 95       	icall
	}
	
	// Re-display menu on return
	
	menu_display(context);
    1852:	c8 01       	movw	r24, r16
    1854:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <menu_display>
}
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	1f 91       	pop	r17
    185e:	0f 91       	pop	r16
    1860:	08 95       	ret

00001862 <__mulsi3>:
    1862:	62 9f       	mul	r22, r18
    1864:	d0 01       	movw	r26, r0
    1866:	73 9f       	mul	r23, r19
    1868:	f0 01       	movw	r30, r0
    186a:	82 9f       	mul	r24, r18
    186c:	e0 0d       	add	r30, r0
    186e:	f1 1d       	adc	r31, r1
    1870:	64 9f       	mul	r22, r20
    1872:	e0 0d       	add	r30, r0
    1874:	f1 1d       	adc	r31, r1
    1876:	92 9f       	mul	r25, r18
    1878:	f0 0d       	add	r31, r0
    187a:	83 9f       	mul	r24, r19
    187c:	f0 0d       	add	r31, r0
    187e:	74 9f       	mul	r23, r20
    1880:	f0 0d       	add	r31, r0
    1882:	65 9f       	mul	r22, r21
    1884:	f0 0d       	add	r31, r0
    1886:	99 27       	eor	r25, r25
    1888:	72 9f       	mul	r23, r18
    188a:	b0 0d       	add	r27, r0
    188c:	e1 1d       	adc	r30, r1
    188e:	f9 1f       	adc	r31, r25
    1890:	63 9f       	mul	r22, r19
    1892:	b0 0d       	add	r27, r0
    1894:	e1 1d       	adc	r30, r1
    1896:	f9 1f       	adc	r31, r25
    1898:	bd 01       	movw	r22, r26
    189a:	cf 01       	movw	r24, r30
    189c:	11 24       	eor	r1, r1
    189e:	08 95       	ret

000018a0 <__divmodhi4>:
    18a0:	97 fb       	bst	r25, 7
    18a2:	09 2e       	mov	r0, r25
    18a4:	07 26       	eor	r0, r23
    18a6:	0a d0       	rcall	.+20     	; 0x18bc <__divmodhi4_neg1>
    18a8:	77 fd       	sbrc	r23, 7
    18aa:	04 d0       	rcall	.+8      	; 0x18b4 <__divmodhi4_neg2>
    18ac:	27 d0       	rcall	.+78     	; 0x18fc <__udivmodhi4>
    18ae:	06 d0       	rcall	.+12     	; 0x18bc <__divmodhi4_neg1>
    18b0:	00 20       	and	r0, r0
    18b2:	1a f4       	brpl	.+6      	; 0x18ba <__divmodhi4_exit>

000018b4 <__divmodhi4_neg2>:
    18b4:	70 95       	com	r23
    18b6:	61 95       	neg	r22
    18b8:	7f 4f       	sbci	r23, 0xFF	; 255

000018ba <__divmodhi4_exit>:
    18ba:	08 95       	ret

000018bc <__divmodhi4_neg1>:
    18bc:	f6 f7       	brtc	.-4      	; 0x18ba <__divmodhi4_exit>
    18be:	90 95       	com	r25
    18c0:	81 95       	neg	r24
    18c2:	9f 4f       	sbci	r25, 0xFF	; 255
    18c4:	08 95       	ret

000018c6 <__divmodsi4>:
    18c6:	97 fb       	bst	r25, 7
    18c8:	09 2e       	mov	r0, r25
    18ca:	05 26       	eor	r0, r21
    18cc:	0e d0       	rcall	.+28     	; 0x18ea <__divmodsi4_neg1>
    18ce:	57 fd       	sbrc	r21, 7
    18d0:	04 d0       	rcall	.+8      	; 0x18da <__divmodsi4_neg2>
    18d2:	28 d0       	rcall	.+80     	; 0x1924 <__udivmodsi4>
    18d4:	0a d0       	rcall	.+20     	; 0x18ea <__divmodsi4_neg1>
    18d6:	00 1c       	adc	r0, r0
    18d8:	38 f4       	brcc	.+14     	; 0x18e8 <__divmodsi4_exit>

000018da <__divmodsi4_neg2>:
    18da:	50 95       	com	r21
    18dc:	40 95       	com	r20
    18de:	30 95       	com	r19
    18e0:	21 95       	neg	r18
    18e2:	3f 4f       	sbci	r19, 0xFF	; 255
    18e4:	4f 4f       	sbci	r20, 0xFF	; 255
    18e6:	5f 4f       	sbci	r21, 0xFF	; 255

000018e8 <__divmodsi4_exit>:
    18e8:	08 95       	ret

000018ea <__divmodsi4_neg1>:
    18ea:	f6 f7       	brtc	.-4      	; 0x18e8 <__divmodsi4_exit>
    18ec:	90 95       	com	r25
    18ee:	80 95       	com	r24
    18f0:	70 95       	com	r23
    18f2:	61 95       	neg	r22
    18f4:	7f 4f       	sbci	r23, 0xFF	; 255
    18f6:	8f 4f       	sbci	r24, 0xFF	; 255
    18f8:	9f 4f       	sbci	r25, 0xFF	; 255
    18fa:	08 95       	ret

000018fc <__udivmodhi4>:
    18fc:	aa 1b       	sub	r26, r26
    18fe:	bb 1b       	sub	r27, r27
    1900:	51 e1       	ldi	r21, 0x11	; 17
    1902:	07 c0       	rjmp	.+14     	; 0x1912 <__udivmodhi4_ep>

00001904 <__udivmodhi4_loop>:
    1904:	aa 1f       	adc	r26, r26
    1906:	bb 1f       	adc	r27, r27
    1908:	a6 17       	cp	r26, r22
    190a:	b7 07       	cpc	r27, r23
    190c:	10 f0       	brcs	.+4      	; 0x1912 <__udivmodhi4_ep>
    190e:	a6 1b       	sub	r26, r22
    1910:	b7 0b       	sbc	r27, r23

00001912 <__udivmodhi4_ep>:
    1912:	88 1f       	adc	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	5a 95       	dec	r21
    1918:	a9 f7       	brne	.-22     	; 0x1904 <__udivmodhi4_loop>
    191a:	80 95       	com	r24
    191c:	90 95       	com	r25
    191e:	bc 01       	movw	r22, r24
    1920:	cd 01       	movw	r24, r26
    1922:	08 95       	ret

00001924 <__udivmodsi4>:
    1924:	a1 e2       	ldi	r26, 0x21	; 33
    1926:	1a 2e       	mov	r1, r26
    1928:	aa 1b       	sub	r26, r26
    192a:	bb 1b       	sub	r27, r27
    192c:	fd 01       	movw	r30, r26
    192e:	0d c0       	rjmp	.+26     	; 0x194a <__udivmodsi4_ep>

00001930 <__udivmodsi4_loop>:
    1930:	aa 1f       	adc	r26, r26
    1932:	bb 1f       	adc	r27, r27
    1934:	ee 1f       	adc	r30, r30
    1936:	ff 1f       	adc	r31, r31
    1938:	a2 17       	cp	r26, r18
    193a:	b3 07       	cpc	r27, r19
    193c:	e4 07       	cpc	r30, r20
    193e:	f5 07       	cpc	r31, r21
    1940:	20 f0       	brcs	.+8      	; 0x194a <__udivmodsi4_ep>
    1942:	a2 1b       	sub	r26, r18
    1944:	b3 0b       	sbc	r27, r19
    1946:	e4 0b       	sbc	r30, r20
    1948:	f5 0b       	sbc	r31, r21

0000194a <__udivmodsi4_ep>:
    194a:	66 1f       	adc	r22, r22
    194c:	77 1f       	adc	r23, r23
    194e:	88 1f       	adc	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	1a 94       	dec	r1
    1954:	69 f7       	brne	.-38     	; 0x1930 <__udivmodsi4_loop>
    1956:	60 95       	com	r22
    1958:	70 95       	com	r23
    195a:	80 95       	com	r24
    195c:	90 95       	com	r25
    195e:	9b 01       	movw	r18, r22
    1960:	ac 01       	movw	r20, r24
    1962:	bd 01       	movw	r22, r26
    1964:	cf 01       	movw	r24, r30
    1966:	08 95       	ret

00001968 <do_rand>:
    1968:	a0 e0       	ldi	r26, 0x00	; 0
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	ea eb       	ldi	r30, 0xBA	; 186
    196e:	fc e0       	ldi	r31, 0x0C	; 12
    1970:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__prologue_saves__+0x10>
    1974:	ec 01       	movw	r28, r24
    1976:	a8 80       	ld	r10, Y
    1978:	b9 80       	ldd	r11, Y+1	; 0x01
    197a:	ca 80       	ldd	r12, Y+2	; 0x02
    197c:	db 80       	ldd	r13, Y+3	; 0x03
    197e:	a1 14       	cp	r10, r1
    1980:	b1 04       	cpc	r11, r1
    1982:	c1 04       	cpc	r12, r1
    1984:	d1 04       	cpc	r13, r1
    1986:	41 f4       	brne	.+16     	; 0x1998 <do_rand+0x30>
    1988:	84 e2       	ldi	r24, 0x24	; 36
    198a:	a8 2e       	mov	r10, r24
    198c:	89 ed       	ldi	r24, 0xD9	; 217
    198e:	b8 2e       	mov	r11, r24
    1990:	8b e5       	ldi	r24, 0x5B	; 91
    1992:	c8 2e       	mov	r12, r24
    1994:	87 e0       	ldi	r24, 0x07	; 7
    1996:	d8 2e       	mov	r13, r24
    1998:	c6 01       	movw	r24, r12
    199a:	b5 01       	movw	r22, r10
    199c:	2d e1       	ldi	r18, 0x1D	; 29
    199e:	33 ef       	ldi	r19, 0xF3	; 243
    19a0:	41 e0       	ldi	r20, 0x01	; 1
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__divmodsi4>
    19a8:	27 ea       	ldi	r18, 0xA7	; 167
    19aa:	31 e4       	ldi	r19, 0x41	; 65
    19ac:	40 e0       	ldi	r20, 0x00	; 0
    19ae:	50 e0       	ldi	r21, 0x00	; 0
    19b0:	0e 94 31 0c 	call	0x1862	; 0x1862 <__mulsi3>
    19b4:	7b 01       	movw	r14, r22
    19b6:	8c 01       	movw	r16, r24
    19b8:	c6 01       	movw	r24, r12
    19ba:	b5 01       	movw	r22, r10
    19bc:	2d e1       	ldi	r18, 0x1D	; 29
    19be:	33 ef       	ldi	r19, 0xF3	; 243
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	50 e0       	ldi	r21, 0x00	; 0
    19c4:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__divmodsi4>
    19c8:	ca 01       	movw	r24, r20
    19ca:	b9 01       	movw	r22, r18
    19cc:	2c ee       	ldi	r18, 0xEC	; 236
    19ce:	34 ef       	ldi	r19, 0xF4	; 244
    19d0:	4f ef       	ldi	r20, 0xFF	; 255
    19d2:	5f ef       	ldi	r21, 0xFF	; 255
    19d4:	0e 94 31 0c 	call	0x1862	; 0x1862 <__mulsi3>
    19d8:	6e 0d       	add	r22, r14
    19da:	7f 1d       	adc	r23, r15
    19dc:	80 1f       	adc	r24, r16
    19de:	91 1f       	adc	r25, r17
    19e0:	97 ff       	sbrs	r25, 7
    19e2:	04 c0       	rjmp	.+8      	; 0x19ec <do_rand+0x84>
    19e4:	61 50       	subi	r22, 0x01	; 1
    19e6:	70 40       	sbci	r23, 0x00	; 0
    19e8:	80 40       	sbci	r24, 0x00	; 0
    19ea:	90 48       	sbci	r25, 0x80	; 128
    19ec:	68 83       	st	Y, r22
    19ee:	79 83       	std	Y+1, r23	; 0x01
    19f0:	8a 83       	std	Y+2, r24	; 0x02
    19f2:	9b 83       	std	Y+3, r25	; 0x03
    19f4:	9b 01       	movw	r18, r22
    19f6:	3f 77       	andi	r19, 0x7F	; 127
    19f8:	c9 01       	movw	r24, r18
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	ea e0       	ldi	r30, 0x0A	; 10
    1a00:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__epilogue_restores__+0x10>

00001a04 <rand_r>:
    1a04:	0e 94 b4 0c 	call	0x1968	; 0x1968 <do_rand>
    1a08:	08 95       	ret

00001a0a <rand>:
    1a0a:	85 ee       	ldi	r24, 0xE5	; 229
    1a0c:	97 e0       	ldi	r25, 0x07	; 7
    1a0e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <do_rand>
    1a12:	08 95       	ret

00001a14 <srand>:
    1a14:	a0 e0       	ldi	r26, 0x00	; 0
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	80 93 e5 07 	sts	0x07E5, r24
    1a1c:	90 93 e6 07 	sts	0x07E6, r25
    1a20:	a0 93 e7 07 	sts	0x07E7, r26
    1a24:	b0 93 e8 07 	sts	0x07E8, r27
    1a28:	08 95       	ret

00001a2a <atoi>:
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	88 27       	eor	r24, r24
    1a2e:	99 27       	eor	r25, r25
    1a30:	e8 94       	clt
    1a32:	21 91       	ld	r18, Z+
    1a34:	20 32       	cpi	r18, 0x20	; 32
    1a36:	e9 f3       	breq	.-6      	; 0x1a32 <atoi+0x8>
    1a38:	29 30       	cpi	r18, 0x09	; 9
    1a3a:	10 f0       	brcs	.+4      	; 0x1a40 <atoi+0x16>
    1a3c:	2e 30       	cpi	r18, 0x0E	; 14
    1a3e:	c8 f3       	brcs	.-14     	; 0x1a32 <atoi+0x8>
    1a40:	2b 32       	cpi	r18, 0x2B	; 43
    1a42:	41 f0       	breq	.+16     	; 0x1a54 <atoi+0x2a>
    1a44:	2d 32       	cpi	r18, 0x2D	; 45
    1a46:	39 f4       	brne	.+14     	; 0x1a56 <atoi+0x2c>
    1a48:	68 94       	set
    1a4a:	04 c0       	rjmp	.+8      	; 0x1a54 <atoi+0x2a>
    1a4c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__mulhi_const_10>
    1a50:	82 0f       	add	r24, r18
    1a52:	91 1d       	adc	r25, r1
    1a54:	21 91       	ld	r18, Z+
    1a56:	20 53       	subi	r18, 0x30	; 48
    1a58:	2a 30       	cpi	r18, 0x0A	; 10
    1a5a:	c0 f3       	brcs	.-16     	; 0x1a4c <atoi+0x22>
    1a5c:	1e f4       	brtc	.+6      	; 0x1a64 <atoi+0x3a>
    1a5e:	90 95       	com	r25
    1a60:	81 95       	neg	r24
    1a62:	9f 4f       	sbci	r25, 0xFF	; 255
    1a64:	08 95       	ret

00001a66 <atol>:
    1a66:	1f 93       	push	r17
    1a68:	fc 01       	movw	r30, r24
    1a6a:	99 27       	eor	r25, r25
    1a6c:	88 27       	eor	r24, r24
    1a6e:	bc 01       	movw	r22, r24
    1a70:	e8 94       	clt
    1a72:	11 91       	ld	r17, Z+
    1a74:	10 32       	cpi	r17, 0x20	; 32
    1a76:	e9 f3       	breq	.-6      	; 0x1a72 <atol+0xc>
    1a78:	19 30       	cpi	r17, 0x09	; 9
    1a7a:	10 f0       	brcs	.+4      	; 0x1a80 <atol+0x1a>
    1a7c:	1e 30       	cpi	r17, 0x0E	; 14
    1a7e:	c8 f3       	brcs	.-14     	; 0x1a72 <atol+0xc>
    1a80:	1b 32       	cpi	r17, 0x2B	; 43
    1a82:	51 f0       	breq	.+20     	; 0x1a98 <atol+0x32>
    1a84:	1d 32       	cpi	r17, 0x2D	; 45
    1a86:	49 f4       	brne	.+18     	; 0x1a9a <atol+0x34>
    1a88:	68 94       	set
    1a8a:	06 c0       	rjmp	.+12     	; 0x1a98 <atol+0x32>
    1a8c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__mulsi_const_10>
    1a90:	61 0f       	add	r22, r17
    1a92:	71 1d       	adc	r23, r1
    1a94:	81 1d       	adc	r24, r1
    1a96:	91 1d       	adc	r25, r1
    1a98:	11 91       	ld	r17, Z+
    1a9a:	10 53       	subi	r17, 0x30	; 48
    1a9c:	1a 30       	cpi	r17, 0x0A	; 10
    1a9e:	b0 f3       	brcs	.-20     	; 0x1a8c <atol+0x26>
    1aa0:	3e f4       	brtc	.+14     	; 0x1ab0 <atol+0x4a>
    1aa2:	90 95       	com	r25
    1aa4:	80 95       	com	r24
    1aa6:	70 95       	com	r23
    1aa8:	61 95       	neg	r22
    1aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1aac:	8f 4f       	sbci	r24, 0xFF	; 255
    1aae:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab0:	1f 91       	pop	r17
    1ab2:	08 95       	ret

00001ab4 <strcat>:
    1ab4:	fb 01       	movw	r30, r22
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	0d 90       	ld	r0, X+
    1aba:	00 20       	and	r0, r0
    1abc:	e9 f7       	brne	.-6      	; 0x1ab8 <strcat+0x4>
    1abe:	11 97       	sbiw	r26, 0x01	; 1
    1ac0:	01 90       	ld	r0, Z+
    1ac2:	0d 92       	st	X+, r0
    1ac4:	00 20       	and	r0, r0
    1ac6:	e1 f7       	brne	.-8      	; 0x1ac0 <strcat+0xc>
    1ac8:	08 95       	ret

00001aca <strcmp>:
    1aca:	fb 01       	movw	r30, r22
    1acc:	dc 01       	movw	r26, r24
    1ace:	8d 91       	ld	r24, X+
    1ad0:	01 90       	ld	r0, Z+
    1ad2:	80 19       	sub	r24, r0
    1ad4:	01 10       	cpse	r0, r1
    1ad6:	d9 f3       	breq	.-10     	; 0x1ace <strcmp+0x4>
    1ad8:	99 0b       	sbc	r25, r25
    1ada:	08 95       	ret

00001adc <strncmp>:
    1adc:	fb 01       	movw	r30, r22
    1ade:	dc 01       	movw	r26, r24
    1ae0:	41 50       	subi	r20, 0x01	; 1
    1ae2:	50 40       	sbci	r21, 0x00	; 0
    1ae4:	30 f0       	brcs	.+12     	; 0x1af2 <strncmp+0x16>
    1ae6:	8d 91       	ld	r24, X+
    1ae8:	01 90       	ld	r0, Z+
    1aea:	80 19       	sub	r24, r0
    1aec:	19 f4       	brne	.+6      	; 0x1af4 <strncmp+0x18>
    1aee:	00 20       	and	r0, r0
    1af0:	b9 f7       	brne	.-18     	; 0x1ae0 <strncmp+0x4>
    1af2:	88 1b       	sub	r24, r24
    1af4:	99 0b       	sbc	r25, r25
    1af6:	08 95       	ret

00001af8 <itoa>:
    1af8:	fb 01       	movw	r30, r22
    1afa:	9f 01       	movw	r18, r30
    1afc:	e8 94       	clt
    1afe:	42 30       	cpi	r20, 0x02	; 2
    1b00:	c4 f0       	brlt	.+48     	; 0x1b32 <itoa+0x3a>
    1b02:	45 32       	cpi	r20, 0x25	; 37
    1b04:	b4 f4       	brge	.+44     	; 0x1b32 <itoa+0x3a>
    1b06:	4a 30       	cpi	r20, 0x0A	; 10
    1b08:	29 f4       	brne	.+10     	; 0x1b14 <itoa+0x1c>
    1b0a:	97 fb       	bst	r25, 7
    1b0c:	1e f4       	brtc	.+6      	; 0x1b14 <itoa+0x1c>
    1b0e:	90 95       	com	r25
    1b10:	81 95       	neg	r24
    1b12:	9f 4f       	sbci	r25, 0xFF	; 255
    1b14:	64 2f       	mov	r22, r20
    1b16:	77 27       	eor	r23, r23
    1b18:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__udivmodhi4>
    1b1c:	80 5d       	subi	r24, 0xD0	; 208
    1b1e:	8a 33       	cpi	r24, 0x3A	; 58
    1b20:	0c f0       	brlt	.+2      	; 0x1b24 <itoa+0x2c>
    1b22:	89 5d       	subi	r24, 0xD9	; 217
    1b24:	81 93       	st	Z+, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	a1 f7       	brne	.-24     	; 0x1b14 <itoa+0x1c>
    1b2c:	16 f4       	brtc	.+4      	; 0x1b32 <itoa+0x3a>
    1b2e:	5d e2       	ldi	r21, 0x2D	; 45
    1b30:	51 93       	st	Z+, r21
    1b32:	10 82       	st	Z, r1
    1b34:	c9 01       	movw	r24, r18
    1b36:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <strrev>

00001b3a <ltoa>:
    1b3a:	fa 01       	movw	r30, r20
    1b3c:	cf 93       	push	r28
    1b3e:	ff 93       	push	r31
    1b40:	ef 93       	push	r30
    1b42:	22 30       	cpi	r18, 0x02	; 2
    1b44:	44 f1       	brlt	.+80     	; 0x1b96 <ltoa+0x5c>
    1b46:	25 32       	cpi	r18, 0x25	; 37
    1b48:	34 f5       	brge	.+76     	; 0x1b96 <ltoa+0x5c>
    1b4a:	c2 2f       	mov	r28, r18
    1b4c:	e8 94       	clt
    1b4e:	ca 30       	cpi	r28, 0x0A	; 10
    1b50:	49 f4       	brne	.+18     	; 0x1b64 <ltoa+0x2a>
    1b52:	97 fb       	bst	r25, 7
    1b54:	3e f4       	brtc	.+14     	; 0x1b64 <ltoa+0x2a>
    1b56:	90 95       	com	r25
    1b58:	80 95       	com	r24
    1b5a:	70 95       	com	r23
    1b5c:	61 95       	neg	r22
    1b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b60:	8f 4f       	sbci	r24, 0xFF	; 255
    1b62:	9f 4f       	sbci	r25, 0xFF	; 255
    1b64:	2c 2f       	mov	r18, r28
    1b66:	33 27       	eor	r19, r19
    1b68:	44 27       	eor	r20, r20
    1b6a:	55 27       	eor	r21, r21
    1b6c:	ff 93       	push	r31
    1b6e:	ef 93       	push	r30
    1b70:	0e 94 92 0c 	call	0x1924	; 0x1924 <__udivmodsi4>
    1b74:	ef 91       	pop	r30
    1b76:	ff 91       	pop	r31
    1b78:	60 5d       	subi	r22, 0xD0	; 208
    1b7a:	6a 33       	cpi	r22, 0x3A	; 58
    1b7c:	0c f0       	brlt	.+2      	; 0x1b80 <ltoa+0x46>
    1b7e:	69 5d       	subi	r22, 0xD9	; 217
    1b80:	61 93       	st	Z+, r22
    1b82:	b9 01       	movw	r22, r18
    1b84:	ca 01       	movw	r24, r20
    1b86:	60 50       	subi	r22, 0x00	; 0
    1b88:	70 40       	sbci	r23, 0x00	; 0
    1b8a:	80 40       	sbci	r24, 0x00	; 0
    1b8c:	90 40       	sbci	r25, 0x00	; 0
    1b8e:	51 f7       	brne	.-44     	; 0x1b64 <ltoa+0x2a>
    1b90:	16 f4       	brtc	.+4      	; 0x1b96 <ltoa+0x5c>
    1b92:	cd e2       	ldi	r28, 0x2D	; 45
    1b94:	c1 93       	st	Z+, r28
    1b96:	10 82       	st	Z, r1
    1b98:	8f 91       	pop	r24
    1b9a:	9f 91       	pop	r25
    1b9c:	cf 91       	pop	r28
    1b9e:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <strrev>

00001ba2 <__mulsi_const_10>:
    1ba2:	59 2f       	mov	r21, r25
    1ba4:	48 2f       	mov	r20, r24
    1ba6:	37 2f       	mov	r19, r23
    1ba8:	26 2f       	mov	r18, r22
    1baa:	66 0f       	add	r22, r22
    1bac:	77 1f       	adc	r23, r23
    1bae:	88 1f       	adc	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	66 0f       	add	r22, r22
    1bb4:	77 1f       	adc	r23, r23
    1bb6:	88 1f       	adc	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	62 0f       	add	r22, r18
    1bbc:	73 1f       	adc	r23, r19
    1bbe:	84 1f       	adc	r24, r20
    1bc0:	95 1f       	adc	r25, r21
    1bc2:	66 0f       	add	r22, r22
    1bc4:	77 1f       	adc	r23, r23
    1bc6:	88 1f       	adc	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	08 95       	ret

00001bcc <__mulhi_const_10>:
    1bcc:	7a e0       	ldi	r23, 0x0A	; 10
    1bce:	97 9f       	mul	r25, r23
    1bd0:	90 2d       	mov	r25, r0
    1bd2:	87 9f       	mul	r24, r23
    1bd4:	80 2d       	mov	r24, r0
    1bd6:	91 0d       	add	r25, r1
    1bd8:	11 24       	eor	r1, r1
    1bda:	08 95       	ret

00001bdc <strrev>:
    1bdc:	dc 01       	movw	r26, r24
    1bde:	fc 01       	movw	r30, r24
    1be0:	67 2f       	mov	r22, r23
    1be2:	71 91       	ld	r23, Z+
    1be4:	77 23       	and	r23, r23
    1be6:	e1 f7       	brne	.-8      	; 0x1be0 <strrev+0x4>
    1be8:	32 97       	sbiw	r30, 0x02	; 2
    1bea:	04 c0       	rjmp	.+8      	; 0x1bf4 <strrev+0x18>
    1bec:	7c 91       	ld	r23, X
    1bee:	6d 93       	st	X+, r22
    1bf0:	70 83       	st	Z, r23
    1bf2:	62 91       	ld	r22, -Z
    1bf4:	ae 17       	cp	r26, r30
    1bf6:	bf 07       	cpc	r27, r31
    1bf8:	c8 f3       	brcs	.-14     	; 0x1bec <strrev+0x10>
    1bfa:	08 95       	ret

00001bfc <__prologue_saves__>:
    1bfc:	2f 92       	push	r2
    1bfe:	3f 92       	push	r3
    1c00:	4f 92       	push	r4
    1c02:	5f 92       	push	r5
    1c04:	6f 92       	push	r6
    1c06:	7f 92       	push	r7
    1c08:	8f 92       	push	r8
    1c0a:	9f 92       	push	r9
    1c0c:	af 92       	push	r10
    1c0e:	bf 92       	push	r11
    1c10:	cf 92       	push	r12
    1c12:	df 92       	push	r13
    1c14:	ef 92       	push	r14
    1c16:	ff 92       	push	r15
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	ca 1b       	sub	r28, r26
    1c26:	db 0b       	sbc	r29, r27
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	09 94       	ijmp

00001c34 <__epilogue_restores__>:
    1c34:	2a 88       	ldd	r2, Y+18	; 0x12
    1c36:	39 88       	ldd	r3, Y+17	; 0x11
    1c38:	48 88       	ldd	r4, Y+16	; 0x10
    1c3a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c3c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c3e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c40:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c42:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c44:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c46:	b9 84       	ldd	r11, Y+9	; 0x09
    1c48:	c8 84       	ldd	r12, Y+8	; 0x08
    1c4a:	df 80       	ldd	r13, Y+7	; 0x07
    1c4c:	ee 80       	ldd	r14, Y+6	; 0x06
    1c4e:	fd 80       	ldd	r15, Y+5	; 0x05
    1c50:	0c 81       	ldd	r16, Y+4	; 0x04
    1c52:	1b 81       	ldd	r17, Y+3	; 0x03
    1c54:	aa 81       	ldd	r26, Y+2	; 0x02
    1c56:	b9 81       	ldd	r27, Y+1	; 0x01
    1c58:	ce 0f       	add	r28, r30
    1c5a:	d1 1d       	adc	r29, r1
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	ed 01       	movw	r28, r26
    1c68:	08 95       	ret

00001c6a <_exit>:
    1c6a:	f8 94       	cli

00001c6c <__stop_program>:
    1c6c:	ff cf       	rjmp	.-2      	; 0x1c6c <__stop_program>
