
Translator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000660  00800100  00001c84  00001d18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000070  00800760  00800760  00002378  2**0
                  ALLOC
  3 .stab         00003e10  00000000  00000000  00002378  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001578  00000000  00000000  00006188  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 83 02 	jmp	0x506	; 0x506 <__vector_7>
      20:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_8>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_18>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	17 e0       	ldi	r17, 0x07	; 7
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e4 e8       	ldi	r30, 0x84	; 132
      90:	fc e1       	ldi	r31, 0x1C	; 28
      92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
      98:	a0 36       	cpi	r26, 0x60	; 96
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
      9e:	17 e0       	ldi	r17, 0x07	; 7
      a0:	a0 e6       	ldi	r26, 0x60	; 96
      a2:	b7 e0       	ldi	r27, 0x07	; 7
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a0 3d       	cpi	r26, 0xD0	; 208
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 cf 09 	call	0x139e	; 0x139e <main>
      b2:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
      ba:	28 2f       	mov	r18, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
      bc:	66 23       	and	r22, r22
      be:	11 f0       	breq	.+4      	; 0xc4 <lcd_write+0xa>
       lcd_rs_high();
      c0:	46 9a       	sbi	0x08, 6	; 8
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <lcd_write+0xc>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
      c4:	46 98       	cbi	0x08, 6	; 8
    }
    lcd_rw_low();
      c6:	45 98       	cbi	0x08, 5	; 8

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
      c8:	87 b1       	in	r24, 0x07	; 7
      ca:	8f 60       	ori	r24, 0x0F	; 15
      cc:	87 b9       	out	0x07, r24	; 7

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
      ce:	98 b1       	in	r25, 0x08	; 8
      d0:	90 7f       	andi	r25, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
      d2:	82 2f       	mov	r24, r18
      d4:	82 95       	swap	r24
      d6:	8f 70       	andi	r24, 0x0F	; 15
      d8:	89 2b       	or	r24, r25
      da:	88 b9       	out	0x08, r24	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
      dc:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
      de:	00 c0       	rjmp	.+0      	; 0xe0 <lcd_write+0x26>
    lcd_e_low();
      e0:	44 98       	cbi	0x08, 4	; 8
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
      e2:	2f 70       	andi	r18, 0x0F	; 15
      e4:	29 2b       	or	r18, r25
      e6:	28 b9       	out	0x08, r18	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
      e8:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
      ea:	00 c0       	rjmp	.+0      	; 0xec <lcd_write+0x32>
    lcd_e_low();
      ec:	44 98       	cbi	0x08, 4	; 8
        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
      ee:	9f 60       	ori	r25, 0x0F	; 15
      f0:	98 b9       	out	0x08, r25	; 8
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
      f2:	08 95       	ret

000000f4 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
      f4:	88 23       	and	r24, r24
      f6:	11 f0       	breq	.+4      	; 0xfc <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
      f8:	46 9a       	sbi	0x08, 6	; 8
      fa:	01 c0       	rjmp	.+2      	; 0xfe <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
      fc:	46 98       	cbi	0x08, 6	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
      fe:	45 9a       	sbi	0x08, 5	; 8
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
     100:	87 b1       	in	r24, 0x07	; 7
     102:	80 7f       	andi	r24, 0xF0	; 240
     104:	87 b9       	out	0x07, r24	; 7
        
        lcd_e_high();
     106:	44 9a       	sbi	0x08, 4	; 8
        lcd_e_delay();        
     108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_read+0x16>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
     10a:	96 b1       	in	r25, 0x06	; 6
        lcd_e_low();
     10c:	44 98       	cbi	0x08, 4	; 8
        
        lcd_e_delay();                       /* Enable 500ns low       */
     10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_read+0x1c>
        
        lcd_e_high();
     110:	44 9a       	sbi	0x08, 4	; 8
        lcd_e_delay();
     112:	00 c0       	rjmp	.+0      	; 0x114 <lcd_read+0x20>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
     114:	86 b1       	in	r24, 0x06	; 6
     116:	8f 70       	andi	r24, 0x0F	; 15
     118:	92 95       	swap	r25
     11a:	90 7f       	andi	r25, 0xF0	; 240
        lcd_e_low();
     11c:	44 98       	cbi	0x08, 4	; 8
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
     11e:	89 2b       	or	r24, r25
     120:	08 95       	ret

00000122 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_read>
     128:	87 fd       	sbrc	r24, 7
     12a:	fb cf       	rjmp	.-10     	; 0x122 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	01 97       	sbiw	r24, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_read>
    
}/* lcd_waitbusy */
     13a:	08 95       	ret

0000013c <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     13c:	1f 93       	push	r17
     13e:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     140:	0e 94 91 00 	call	0x122	; 0x122 <lcd_waitbusy>
    lcd_write(cmd,0);
     144:	81 2f       	mov	r24, r17
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
}
     14c:	1f 91       	pop	r17
     14e:	08 95       	ret

00000150 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     150:	1f 93       	push	r17
     152:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     154:	0e 94 91 00 	call	0x122	; 0x122 <lcd_waitbusy>
    lcd_write(data,1);
     158:	81 2f       	mov	r24, r17
     15a:	61 e0       	ldi	r22, 0x01	; 1
     15c:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
}
     160:	1f 91       	pop	r17
     162:	08 95       	ret

00000164 <lcd_gotoxy>:
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
     164:	66 23       	and	r22, r22
     166:	11 f4       	brne	.+4      	; 0x16c <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     168:	80 58       	subi	r24, 0x80	; 128
     16a:	09 c0       	rjmp	.+18     	; 0x17e <lcd_gotoxy+0x1a>
    else if ( y==1)
     16c:	61 30       	cpi	r22, 0x01	; 1
     16e:	11 f4       	brne	.+4      	; 0x174 <lcd_gotoxy+0x10>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     170:	80 54       	subi	r24, 0x40	; 64
     172:	05 c0       	rjmp	.+10     	; 0x17e <lcd_gotoxy+0x1a>
    else if ( y==2)
     174:	62 30       	cpi	r22, 0x02	; 2
     176:	11 f4       	brne	.+4      	; 0x17c <lcd_gotoxy+0x18>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
     178:	8c 56       	subi	r24, 0x6C	; 108
     17a:	01 c0       	rjmp	.+2      	; 0x17e <lcd_gotoxy+0x1a>
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
     17c:	8c 52       	subi	r24, 0x2C	; 44
     17e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
     182:	08 95       	ret

00000184 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     184:	0e 94 91 00 	call	0x122	; 0x122 <lcd_waitbusy>
}
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	08 95       	ret

0000018c <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
}
     192:	08 95       	ret

00000194 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     194:	82 e0       	ldi	r24, 0x02	; 2
     196:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
}
     19a:	08 95       	ret

0000019c <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     19c:	1f 93       	push	r17
     19e:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     1a0:	0e 94 91 00 	call	0x122	; 0x122 <lcd_waitbusy>
     1a4:	98 2f       	mov	r25, r24
    if (c=='\n')
     1a6:	1a 30       	cpi	r17, 0x0A	; 10
     1a8:	99 f4       	brne	.+38     	; 0x1d0 <lcd_putc+0x34>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
     1aa:	84 31       	cpi	r24, 0x14	; 20
     1ac:	10 f4       	brcc	.+4      	; 0x1b2 <lcd_putc+0x16>
     1ae:	80 e4       	ldi	r24, 0x40	; 64
     1b0:	0b c0       	rjmp	.+22     	; 0x1c8 <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
     1b2:	80 54       	subi	r24, 0x40	; 64
     1b4:	84 31       	cpi	r24, 0x14	; 20
     1b6:	10 f4       	brcc	.+4      	; 0x1bc <lcd_putc+0x20>
     1b8:	84 e1       	ldi	r24, 0x14	; 20
     1ba:	06 c0       	rjmp	.+12     	; 0x1c8 <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
     1bc:	94 51       	subi	r25, 0x14	; 20
     1be:	9c 32       	cpi	r25, 0x2C	; 44
     1c0:	10 f0       	brcs	.+4      	; 0x1c6 <lcd_putc+0x2a>
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <lcd_putc+0x2c>
     1c6:	84 e5       	ldi	r24, 0x54	; 84
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     1c8:	80 58       	subi	r24, 0x80	; 128
     1ca:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
     1ce:	18 c0       	rjmp	.+48     	; 0x200 <lcd_putc+0x64>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==4
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
     1d0:	83 31       	cpi	r24, 0x13	; 19
     1d2:	11 f4       	brne	.+4      	; 0x1d8 <lcd_putc+0x3c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
     1d4:	80 ec       	ldi	r24, 0xC0	; 192
     1d6:	0b c0       	rjmp	.+22     	; 0x1ee <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
     1d8:	83 35       	cpi	r24, 0x53	; 83
     1da:	11 f4       	brne	.+4      	; 0x1e0 <lcd_putc+0x44>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
     1dc:	84 e9       	ldi	r24, 0x94	; 148
     1de:	07 c0       	rjmp	.+14     	; 0x1ee <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
     1e0:	87 32       	cpi	r24, 0x27	; 39
     1e2:	11 f4       	brne	.+4      	; 0x1e8 <lcd_putc+0x4c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
     1e4:	84 ed       	ldi	r24, 0xD4	; 212
     1e6:	03 c0       	rjmp	.+6      	; 0x1ee <lcd_putc+0x52>
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
     1e8:	87 36       	cpi	r24, 0x67	; 103
     1ea:	21 f4       	brne	.+8      	; 0x1f4 <lcd_putc+0x58>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
     1ec:	80 e8       	ldi	r24, 0x80	; 128
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
        }
#endif
        lcd_waitbusy();
     1f4:	0e 94 91 00 	call	0x122	; 0x122 <lcd_waitbusy>
#endif
        lcd_write(c, 1);
     1f8:	81 2f       	mov	r24, r17
     1fa:	61 e0       	ldi	r22, 0x01	; 1
     1fc:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
    }

}/* lcd_putc */
     200:	1f 91       	pop	r17
     202:	08 95       	ret

00000204 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	ec 01       	movw	r28, r24
     20a:	02 c0       	rjmp	.+4      	; 0x210 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
     20c:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     210:	89 91       	ld	r24, Y+
     212:	88 23       	and	r24, r24
     214:	d9 f7       	brne	.-10     	; 0x20c <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	ec 01       	movw	r28, r24
     222:	02 c0       	rjmp	.+4      	; 0x228 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
     224:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_putc>
     228:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     22a:	21 96       	adiw	r28, 0x01	; 1
     22c:	84 91       	lpm	r24, Z+
     22e:	88 23       	and	r24, r24
     230:	c9 f7       	brne	.-14     	; 0x224 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	08 95       	ret

00000238 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     238:	1f 93       	push	r17
     23a:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
     23c:	87 b1       	in	r24, 0x07	; 7
     23e:	8f 60       	ori	r24, 0x0F	; 15
     240:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     242:	3e 9a       	sbi	0x07, 6	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     244:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     246:	3c 9a       	sbi	0x07, 4	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     248:	80 e8       	ldi	r24, 0x80	; 128
     24a:	9e e3       	ldi	r25, 0x3E	; 62
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_init+0x14>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     250:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     252:	40 9a       	sbi	0x08, 0	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     254:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_init+0x20>
    lcd_e_low();
     258:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     25a:	80 e8       	ldi	r24, 0x80	; 128
     25c:	93 e1       	ldi	r25, 0x13	; 19
     25e:	01 97       	sbiw	r24, 0x01	; 1
     260:	f1 f7       	brne	.-4      	; 0x25e <lcd_init+0x26>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     262:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_init+0x2e>
    lcd_e_low();
     266:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     268:	80 e4       	ldi	r24, 0x40	; 64
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	fc 01       	movw	r30, r24
     26e:	31 97       	sbiw	r30, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <lcd_init+0x36>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     272:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_init+0x3e>
    lcd_e_low();
     276:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     278:	fc 01       	movw	r30, r24
     27a:	31 97       	sbiw	r30, 0x01	; 1
     27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     27e:	40 98       	cbi	0x08, 0	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     280:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_delay();
     282:	00 c0       	rjmp	.+0      	; 0x284 <lcd_init+0x4c>
    lcd_e_low();
     284:	44 98       	cbi	0x08, 4	; 8
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <lcd_init+0x4e>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     28a:	88 e2       	ldi	r24, 0x28	; 40
     28c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     290:	88 e0       	ldi	r24, 0x08	; 8
     292:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     296:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     29a:	86 e0       	ldi	r24, 0x06	; 6
     29c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     2a0:	81 2f       	mov	r24, r17
     2a2:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>

}/* lcd_init */
     2a6:	1f 91       	pop	r17
     2a8:	08 95       	ret

000002aa <__vector_18>:
 
volatile uint8_t key_rpt;                                  // key long press and repeat
 
 
ISR( TIMER0_OVF_vect )                            // every 10ms
{
     2aa:	1f 92       	push	r1
     2ac:	0f 92       	push	r0
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	0f 92       	push	r0
     2b2:	11 24       	eor	r1, r1
     2b4:	2f 93       	push	r18
     2b6:	8f 93       	push	r24
     2b8:	9f 93       	push	r25
  static uint8_t ct0, ct1, rpt;
  uint8_t i;
 
  TCNT0 = (uint8_t)(int16_t)-(F_CPU / 1024 * 10e-3 + 0.5);  // preload for 10ms
     2ba:	82 eb       	ldi	r24, 0xB2	; 178
     2bc:	86 bd       	out	0x26, r24	; 38
 
  i = key_state ^ ~KEY_PIN;                       // key changed ?
     2be:	80 91 cf 07 	lds	r24, 0x07CF
     2c2:	20 b1       	in	r18, 0x00	; 0
     2c4:	20 95       	com	r18
     2c6:	28 27       	eor	r18, r24
  ct0 = ~( ct0 & i );                             // reset or count ct0
     2c8:	80 91 68 07 	lds	r24, 0x0768
     2cc:	82 23       	and	r24, r18
     2ce:	80 95       	com	r24
     2d0:	80 93 68 07 	sts	0x0768, r24
  ct1 = ct0 ^ (ct1 & i);                          // reset or count ct1
     2d4:	90 91 67 07 	lds	r25, 0x0767
     2d8:	92 23       	and	r25, r18
     2da:	98 27       	eor	r25, r24
     2dc:	90 93 67 07 	sts	0x0767, r25
  i &= ct0 & ct1;                                 // count until roll over ?
     2e0:	82 23       	and	r24, r18
     2e2:	89 23       	and	r24, r25
  key_state ^= i;                                 // then toggle debounced state
     2e4:	90 91 cf 07 	lds	r25, 0x07CF
     2e8:	98 27       	eor	r25, r24
     2ea:	90 93 cf 07 	sts	0x07CF, r25
  key_press |= key_state & i;                     // 0->1: key press detect
     2ee:	20 91 ce 07 	lds	r18, 0x07CE
     2f2:	90 91 cf 07 	lds	r25, 0x07CF
     2f6:	89 23       	and	r24, r25
     2f8:	82 2b       	or	r24, r18
     2fa:	80 93 ce 07 	sts	0x07CE, r24
 
  if( (key_state & REPEAT_MASK) == 0 )            // check repeat function
     2fe:	80 91 cf 07 	lds	r24, 0x07CF
     302:	87 78       	andi	r24, 0x87	; 135
     304:	19 f4       	brne	.+6      	; 0x30c <__vector_18+0x62>
     rpt = REPEAT_START;                          // start delay
     306:	82 e3       	ldi	r24, 0x32	; 50
     308:	80 93 66 07 	sts	0x0766, r24
  if( --rpt == 0 ){
     30c:	80 91 66 07 	lds	r24, 0x0766
     310:	81 50       	subi	r24, 0x01	; 1
     312:	80 93 66 07 	sts	0x0766, r24
     316:	88 23       	and	r24, r24
     318:	59 f4       	brne	.+22     	; 0x330 <__vector_18+0x86>
    rpt = REPEAT_NEXT;                            // repeat delay
     31a:	84 e1       	ldi	r24, 0x14	; 20
     31c:	80 93 66 07 	sts	0x0766, r24
    key_rpt |= key_state & REPEAT_MASK;
     320:	90 91 69 07 	lds	r25, 0x0769
     324:	80 91 cf 07 	lds	r24, 0x07CF
     328:	87 78       	andi	r24, 0x87	; 135
     32a:	89 2b       	or	r24, r25
     32c:	80 93 69 07 	sts	0x0769, r24
  }
}
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	2f 91       	pop	r18
     336:	0f 90       	pop	r0
     338:	0f be       	out	0x3f, r0	; 63
     33a:	0f 90       	pop	r0
     33c:	1f 90       	pop	r1
     33e:	18 95       	reti

00000340 <get_key_press>:
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     340:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     342:	90 91 ce 07 	lds	r25, 0x07CE
     346:	89 23       	and	r24, r25
  key_press ^= key_mask;                          // clear key(s)
     348:	90 91 ce 07 	lds	r25, 0x07CE
     34c:	98 27       	eor	r25, r24
     34e:	90 93 ce 07 	sts	0x07CE, r25
  sei();
     352:	78 94       	sei
  return key_mask;
}
     354:	08 95       	ret

00000356 <get_key_rpt>:
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     356:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
     358:	90 91 69 07 	lds	r25, 0x0769
     35c:	89 23       	and	r24, r25
  key_rpt ^= key_mask;                            // clear key(s)
     35e:	90 91 69 07 	lds	r25, 0x0769
     362:	98 27       	eor	r25, r24
     364:	90 93 69 07 	sts	0x0769, r25
  sei();
     368:	78 94       	sei
  return key_mask;
}
     36a:	08 95       	ret

0000036c <get_key_short>:
 
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_short( uint8_t key_mask )
{
  cli();                                          // read key state and key press atomic !
     36c:	f8 94       	cli
  return get_key_press( ~key_state & key_mask );
     36e:	90 91 cf 07 	lds	r25, 0x07CF
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     372:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     374:	20 91 ce 07 	lds	r18, 0x07CE
     378:	90 95       	com	r25
     37a:	89 23       	and	r24, r25
     37c:	82 23       	and	r24, r18
  key_press ^= key_mask;                          // clear key(s)
     37e:	90 91 ce 07 	lds	r25, 0x07CE
     382:	98 27       	eor	r25, r24
     384:	90 93 ce 07 	sts	0x07CE, r25
  sei();
     388:	78 94       	sei
//
uint8_t get_key_short( uint8_t key_mask )
{
  cli();                                          // read key state and key press atomic !
  return get_key_press( ~key_state & key_mask );
}
     38a:	08 95       	ret

0000038c <get_key_long>:
 
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_long( uint8_t key_mask )
{
     38c:	98 2f       	mov	r25, r24
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     38e:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
     390:	80 91 69 07 	lds	r24, 0x0769
     394:	98 23       	and	r25, r24
  key_rpt ^= key_mask;                            // clear key(s)
     396:	80 91 69 07 	lds	r24, 0x0769
     39a:	89 27       	eor	r24, r25
     39c:	80 93 69 07 	sts	0x0769, r24
  sei();
     3a0:	78 94       	sei
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     3a2:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     3a4:	80 91 ce 07 	lds	r24, 0x07CE
     3a8:	89 23       	and	r24, r25
  key_press ^= key_mask;                          // clear key(s)
     3aa:	90 91 ce 07 	lds	r25, 0x07CE
     3ae:	98 27       	eor	r25, r24
     3b0:	90 93 ce 07 	sts	0x07CE, r25
  sei();
     3b4:	78 94       	sei
///////////////////////////////////////////////////////////////////
//
uint8_t get_key_long( uint8_t key_mask )
{
  return get_key_press( get_key_rpt( key_mask ));
}
     3b6:	08 95       	ret

000003b8 <led_spielerein>:
	_delay_ms(500);
	lcd_my_type("Be a Honey Bee!\n");
	_delay_ms(600);
	lcd_clrscr();
}
void 	led_spielerein		(void) {
     3b8:	41 e0       	ldi	r20, 0x01	; 1
     3ba:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3bc:	a8 ec       	ldi	r26, 0xC8	; 200
     3be:	b0 e0       	ldi	r27, 0x00	; 0

	for (int i = 1; i < 9; i++) // LEDs durchlaufen
	{
		_delay_ms(80); // Eine Sekunde +/-1/10000 Sekunde warten...
		LED_PORT &= ~((1 << i)); // l�scht Bit an PortB - LED an
     3c0:	61 e0       	ldi	r22, 0x01	; 1
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	21 c0       	rjmp	.+66     	; 0x408 <led_spielerein+0x50>
     3c6:	fd 01       	movw	r30, r26
     3c8:	31 97       	sbiw	r30, 0x01	; 1
     3ca:	f1 f7       	brne	.-4      	; 0x3c8 <led_spielerein+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3ce:	d9 f7       	brne	.-10     	; 0x3c6 <led_spielerein+0xe>
     3d0:	25 b1       	in	r18, 0x05	; 5
     3d2:	cb 01       	movw	r24, r22
     3d4:	04 2e       	mov	r0, r20
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <led_spielerein+0x24>
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	0a 94       	dec	r0
     3de:	e2 f7       	brpl	.-8      	; 0x3d8 <led_spielerein+0x20>
     3e0:	80 95       	com	r24
     3e2:	82 23       	and	r24, r18
     3e4:	85 b9       	out	0x05, r24	; 5
		LED_PORT |= ((1 << (i - 1))); // setzt  Bit an PortB - LED aus
     3e6:	25 b1       	in	r18, 0x05	; 5
     3e8:	41 50       	subi	r20, 0x01	; 1
     3ea:	50 40       	sbci	r21, 0x00	; 0
     3ec:	cb 01       	movw	r24, r22
     3ee:	04 2e       	mov	r0, r20
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <led_spielerein+0x3e>
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	0a 94       	dec	r0
     3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <led_spielerein+0x3a>
     3fa:	28 2b       	or	r18, r24
     3fc:	25 b9       	out	0x05, r18	; 5
	_delay_ms(600);
	lcd_clrscr();
}
void 	led_spielerein		(void) {

	for (int i = 1; i < 9; i++) // LEDs durchlaufen
     3fe:	4e 5f       	subi	r20, 0xFE	; 254
     400:	5f 4f       	sbci	r21, 0xFF	; 255
     402:	49 30       	cpi	r20, 0x09	; 9
     404:	51 05       	cpc	r21, r1
     406:	19 f0       	breq	.+6      	; 0x40e <led_spielerein+0x56>
     408:	80 e2       	ldi	r24, 0x20	; 32
     40a:	93 e0       	ldi	r25, 0x03	; 3
     40c:	dc cf       	rjmp	.-72     	; 0x3c6 <led_spielerein+0xe>
     40e:	08 95       	ret

00000410 <debounce_init>:
}
void 	debounce_init		(void) {
	///////////////// Debounce Stuff ////////////////////

	// Configure debouncing routines
	KEY_DDR &= ~ALL_KEYS; // configure key port for input
     410:	81 b1       	in	r24, 0x01	; 1
     412:	11 b8       	out	0x01, r1	; 1
	KEY_PORT |= ALL_KEYS; // and turn on pull up resistors
     414:	82 b1       	in	r24, 0x02	; 2
     416:	8f ef       	ldi	r24, 0xFF	; 255
     418:	82 b9       	out	0x02, r24	; 2

	TCCR0B = (1 << CS02) | (1 << CS00); // divide by 1024
     41a:	85 e0       	ldi	r24, 0x05	; 5
     41c:	85 bd       	out	0x25, r24	; 37
	TCNT0 = (uint8_t) (int16_t) -(F_CPU / 1024 * 10 * 10e-3 + 0.5); // preload for 10ms
     41e:	83 ef       	ldi	r24, 0xF3	; 243
     420:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= 1 << TOIE0; // enable timer interrupt
     422:	ee e6       	ldi	r30, 0x6E	; 110
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	81 60       	ori	r24, 0x01	; 1
     42a:	80 83       	st	Z, r24

	sei();
     42c:	78 94       	sei
	///////////////// Debounce Stuff ////////////////////
}
     42e:	08 95       	ret

00000430 <led_lauflicht>:
void 	led_lauflicht		(void) {
	uint8_t i = LED_PORT;
     430:	85 b1       	in	r24, 0x05	; 5
	i = (i & 0x07) | ((i << 1) & 0xF0);
     432:	98 2f       	mov	r25, r24
     434:	99 0f       	add	r25, r25
     436:	90 7f       	andi	r25, 0xF0	; 240
     438:	87 70       	andi	r24, 0x07	; 7
     43a:	98 2b       	or	r25, r24
	if (i < 0xF0)
     43c:	90 3f       	cpi	r25, 0xF0	; 240
     43e:	08 f4       	brcc	.+2      	; 0x442 <led_lauflicht+0x12>
		i |= 0x08;
     440:	98 60       	ori	r25, 0x08	; 8
	LED_PORT = i;
     442:	95 b9       	out	0x05, r25	; 5
}
     444:	08 95       	ret

00000446 <init_WDT>:
}
#include "mymenu.h"

// Init Stuff
void init_WDT(void) {
	cli();
     446:	f8 94       	cli
	wdt_reset();
     448:	a8 95       	wdr
	WDTCSR |= (1 << WDCE) | (1 << WDE);
     44a:	e0 e6       	ldi	r30, 0x60	; 96
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	80 81       	ld	r24, Z
     450:	88 61       	ori	r24, 0x18	; 24
     452:	80 83       	st	Z, r24
	WDTCSR = (1 << WDE) | (1 << WDIE) | (1 << WDP3) | (1 << WDP0); //Watchdog 8s
     454:	89 e6       	ldi	r24, 0x69	; 105
     456:	80 83       	st	Z, r24
	//WDTCSR = 0x0F; //Watchdog Off
	sei();
     458:	78 94       	sei
}
     45a:	08 95       	ret

0000045c <__vector_8>:
//////////////////////////////

// Interrupt Stuff
ISR(WDT_vect)
//Interrupt Service Routine
{
     45c:	1f 92       	push	r1
     45e:	0f 92       	push	r0
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	0f 92       	push	r0
     464:	11 24       	eor	r1, r1
     466:	8f 93       	push	r24
     468:	9f 93       	push	r25
		LED_PORT ^= (1 << LED0);
     46a:	85 b1       	in	r24, 0x05	; 5
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	89 27       	eor	r24, r25
     470:	85 b9       	out	0x05, r24	; 5
}
     472:	9f 91       	pop	r25
     474:	8f 91       	pop	r24
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <uart_init>:
	LED_PORT ^= (1 << LED0);
}
// UART Stuff
void 	uart_init			() {
	// UART 0 - IN (Rapidform Software/Terminal)
	UBRR0H = UBRRH_VALUE;
     480:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
     484:	23 e3       	ldi	r18, 0x33	; 51
     486:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0C = (3 << UCSZ00);
     48a:	96 e0       	ldi	r25, 0x06	; 6
     48c:	90 93 c2 00 	sts	0x00C2, r25
	UCSR0B |= (1 << TXEN0); //Transmitter Enabled
     490:	e1 ec       	ldi	r30, 0xC1	; 193
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	80 81       	ld	r24, Z
     496:	88 60       	ori	r24, 0x08	; 8
     498:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXEN0); // UART RX einschalten
     49a:	80 81       	ld	r24, Z
     49c:	80 61       	ori	r24, 0x10	; 16
     49e:	80 83       	st	Z, r24

	// UART 1 - OUT (Stepper Karte/Drehtisch)
	UBRR1H = UBRRH_VALUE;
     4a0:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = UBRRL_VALUE;
     4a4:	20 93 cc 00 	sts	0x00CC, r18
	UCSR1C = (3 << UCSZ00);
     4a8:	90 93 ca 00 	sts	0x00CA, r25
	UCSR1B |= (1 << TXEN1); //Transmitter Enabled
     4ac:	e9 ec       	ldi	r30, 0xC9	; 201
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	88 60       	ori	r24, 0x08	; 8
     4b4:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXEN1); // UART RX einschalten
     4b6:	80 81       	ld	r24, Z
     4b8:	80 61       	ori	r24, 0x10	; 16
     4ba:	80 83       	st	Z, r24

}
     4bc:	08 95       	ret

000004be <uart_put_charater>:
void 	uart_put_charater	(unsigned char c, int dir) {
     4be:	98 2f       	mov	r25, r24
	// To Rapidform
	if (dir == D_RapidForm) {
     4c0:	67 2b       	or	r22, r23
     4c2:	39 f4       	brne	.+14     	; 0x4d2 <uart_put_charater+0x14>
		while (!(UCSR0A & (1 << UDRE0))) //warten bis Senden moeglich
     4c4:	80 91 c0 00 	lds	r24, 0x00C0
     4c8:	85 ff       	sbrs	r24, 5
     4ca:	fc cf       	rjmp	.-8      	; 0x4c4 <uart_put_charater+0x6>
		{
		}
		UDR0 = c; // sende Zeichen
     4cc:	90 93 c6 00 	sts	0x00C6, r25
     4d0:	08 95       	ret
	}
	// To Stepper
	else {
		while (!(UCSR1A & (1 << UDRE1))) //warten bis Senden moeglich
     4d2:	80 91 c8 00 	lds	r24, 0x00C8
     4d6:	85 ff       	sbrs	r24, 5
     4d8:	fc cf       	rjmp	.-8      	; 0x4d2 <uart_put_charater+0x14>
		{
		}
		UDR1 = c; // sende Zeichen
     4da:	90 93 ce 00 	sts	0x00CE, r25
     4de:	08 95       	ret

000004e0 <uart_put_string>:
	}
	//return 0;
}
void 	uart_put_string		(char *s, int dir) {
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	ec 01       	movw	r28, r24
     4ea:	8b 01       	movw	r16, r22
     4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <uart_put_string+0x16>
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		uart_put_charater(*s, dir);
     4ee:	b8 01       	movw	r22, r16
     4f0:	0e 94 5f 02 	call	0x4be	; 0x4be <uart_put_charater>
		s++;
     4f4:	21 96       	adiw	r28, 0x01	; 1
		UDR1 = c; // sende Zeichen
	}
	//return 0;
}
void 	uart_put_string		(char *s, int dir) {
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
     4f6:	88 81       	ld	r24, Y
     4f8:	88 23       	and	r24, r24
     4fa:	c9 f7       	brne	.-14     	; 0x4ee <uart_put_string+0xe>
	{
		uart_put_charater(*s, dir);
		s++;
	}
}
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	08 95       	ret

00000506 <__vector_7>:
{
		LED_PORT ^= (1 << LED0);
}
ISR(PCINT3_vect)
//Interrupt Service Routine
{
     506:	1f 92       	push	r1
     508:	0f 92       	push	r0
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	0f 92       	push	r0
     50e:	11 24       	eor	r1, r1
     510:	2f 93       	push	r18
     512:	3f 93       	push	r19
     514:	4f 93       	push	r20
     516:	5f 93       	push	r21
     518:	6f 93       	push	r22
     51a:	7f 93       	push	r23
     51c:	8f 93       	push	r24
     51e:	9f 93       	push	r25
     520:	af 93       	push	r26
     522:	bf 93       	push	r27
     524:	ef 93       	push	r30
     526:	ff 93       	push	r31
	//led_lauflicht();
	//uart_put_string("2H\n", D_Stepper);
	uart_put_string("1H\n", D_Stepper);
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
	LED_PORT ^= (1 << LED0);
     534:	85 b1       	in	r24, 0x05	; 5
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	89 27       	eor	r24, r25
     53a:	85 b9       	out	0x05, r24	; 5
}
     53c:	ff 91       	pop	r31
     53e:	ef 91       	pop	r30
     540:	bf 91       	pop	r27
     542:	af 91       	pop	r26
     544:	9f 91       	pop	r25
     546:	8f 91       	pop	r24
     548:	7f 91       	pop	r23
     54a:	6f 91       	pop	r22
     54c:	5f 91       	pop	r21
     54e:	4f 91       	pop	r20
     550:	3f 91       	pop	r19
     552:	2f 91       	pop	r18
     554:	0f 90       	pop	r0
     556:	0f be       	out	0x3f, r0	; 63
     558:	0f 90       	pop	r0
     55a:	1f 90       	pop	r1
     55c:	18 95       	reti

0000055e <uart_get_character>:
		uart_put_charater(*s, dir);
		s++;
	}
}
int 	uart_get_character	(int dir) {
	if (dir == D_RapidForm) {
     55e:	00 97       	sbiw	r24, 0x00	; 0
     560:	39 f4       	brne	.+14     	; 0x570 <uart_get_character+0x12>
		while (!(UCSR0A & (1 << RXC0)))
     562:	80 91 c0 00 	lds	r24, 0x00C0
     566:	87 ff       	sbrs	r24, 7
     568:	fc cf       	rjmp	.-8      	; 0x562 <uart_get_character+0x4>
			// warten bis Zeichen verfuegbar
			;
		return UDR0; // Zeichen aus UDR an Aufrufer zurueckgeben
     56a:	80 91 c6 00 	lds	r24, 0x00C6
     56e:	0b c0       	rjmp	.+22     	; 0x586 <uart_get_character+0x28>
	}
	if (dir == D_Stepper) {
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	19 f0       	breq	.+6      	; 0x57a <uart_get_character+0x1c>
     574:	2f ef       	ldi	r18, 0xFF	; 255
     576:	3f ef       	ldi	r19, 0xFF	; 255
     578:	08 c0       	rjmp	.+16     	; 0x58a <uart_get_character+0x2c>
		while (!(UCSR1A & (1 << RXC1)))
     57a:	80 91 c8 00 	lds	r24, 0x00C8
     57e:	87 ff       	sbrs	r24, 7
     580:	fc cf       	rjmp	.-8      	; 0x57a <uart_get_character+0x1c>
			// warten bis Zeichen verfuegbar
			;
		return UDR1; // Zeichen aus UDR an Aufrufer zurueckgeben
     582:	80 91 ce 00 	lds	r24, 0x00CE
     586:	28 2f       	mov	r18, r24
     588:	30 e0       	ldi	r19, 0x00	; 0
	}
	return -1;
}
     58a:	c9 01       	movw	r24, r18
     58c:	08 95       	ret

0000058e <uart_get_string>:
void 	uart_get_string		(char * string_in, int dir) {
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	8c 01       	movw	r16, r24
     59c:	7b 01       	movw	r14, r22
     59e:	c0 e0       	ldi	r28, 0x00	; 0
     5a0:	d0 e0       	ldi	r29, 0x00	; 0
	char c;
	int i = 0;
	do {
		c = uart_get_character(dir);
     5a2:	c7 01       	movw	r24, r14
     5a4:	0e 94 af 02 	call	0x55e	; 0x55e <uart_get_character>
		if (c != '\r') {
     5a8:	8d 30       	cpi	r24, 0x0D	; 13
     5aa:	21 f0       	breq	.+8      	; 0x5b4 <uart_get_string+0x26>
			*string_in = c;
     5ac:	f8 01       	movw	r30, r16
     5ae:	81 93       	st	Z+, r24
     5b0:	8f 01       	movw	r16, r30
			string_in += 1;
			i++;
     5b2:	21 96       	adiw	r28, 0x01	; 1
		}
	} while (i < 100 && c != '\r' && c != '\n');
     5b4:	c4 36       	cpi	r28, 0x64	; 100
     5b6:	d1 05       	cpc	r29, r1
     5b8:	24 f4       	brge	.+8      	; 0x5c2 <uart_get_string+0x34>
     5ba:	8d 30       	cpi	r24, 0x0D	; 13
     5bc:	11 f0       	breq	.+4      	; 0x5c2 <uart_get_string+0x34>
     5be:	8a 30       	cpi	r24, 0x0A	; 10
     5c0:	81 f7       	brne	.-32     	; 0x5a2 <uart_get_string+0x14>
	*string_in = '\0';
     5c2:	f8 01       	movw	r30, r16
     5c4:	10 82       	st	Z, r1
}
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14
     5d2:	08 95       	ret

000005d4 <init>:



void init() {
	// Watchdog Initialisieren oder Abschalten
	init_WDT();
     5d4:	0e 94 23 02 	call	0x446	; 0x446 <init_WDT>
	// LED Port definieren
	LED_DDR = 0xFF;
     5d8:	8f ef       	ldi	r24, 0xFF	; 255
     5da:	84 b9       	out	0x04, r24	; 4
	LED_PORT = 0xFF;
     5dc:	85 b9       	out	0x05, r24	; 5
	// Interrupts definieren
	PCMSK3 |= (1 << PCINT28); // PD4 als Interrupt zulassen
     5de:	e3 e7       	ldi	r30, 0x73	; 115
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	80 61       	ori	r24, 0x10	; 16
     5e6:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE3); //Pin Change Interrupt Control Register - PCIE3 setzen f�r PCINT30
     5e8:	e8 e6       	ldi	r30, 0x68	; 104
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	80 81       	ld	r24, Z
     5ee:	88 60       	ori	r24, 0x08	; 8
     5f0:	80 83       	st	Z, r24
	// Startup kennzeichnen
	led_spielerein();
     5f2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <led_spielerein>
	// LC Display initialisieren
	lcd_init(LCD_DISP_ON_CURSOR);
     5f6:	8e e0       	ldi	r24, 0x0E	; 14
     5f8:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_init>
	lcd_clrscr();
     5fc:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
	lcd_home();
     600:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_home>
	//lcd_spielereien();
	// Taster entprellen
	debounce_init();
     604:	0e 94 08 02 	call	0x410	; 0x410 <debounce_init>
	// RS-232 Verbindung initialisieren
	uart_init();
     608:	0e 94 40 02 	call	0x480	; 0x480 <uart_init>
	//menu_enter(&menu_context, &menu_main);
}
     60c:	08 95       	ret

0000060e <csg_Status_melden>:
// Hilfs Funktionen
void 	csg_Status_melden	() {
	int k = 0;
	if (blub < 100000)
		k = 5;
	if (blub < 10000)
     60e:	20 91 60 07 	lds	r18, 0x0760
     612:	30 91 61 07 	lds	r19, 0x0761
     616:	87 e2       	ldi	r24, 0x27	; 39
     618:	20 31       	cpi	r18, 0x10	; 16
     61a:	38 07       	cpc	r19, r24
     61c:	0c f0       	brlt	.+2      	; 0x620 <csg_Status_melden+0x12>
     61e:	47 c0       	rjmp	.+142    	; 0x6ae <csg_Status_melden+0xa0>
		k = 4;
	if (blub < 1000)
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	28 3e       	cpi	r18, 0xE8	; 232
     624:	38 07       	cpc	r19, r24
     626:	1c f0       	brlt	.+6      	; 0x62e <csg_Status_melden+0x20>
     628:	84 e0       	ldi	r24, 0x04	; 4
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	14 c0       	rjmp	.+40     	; 0x656 <csg_Status_melden+0x48>
		k = 3;
	if (blub < 100)
     62e:	24 36       	cpi	r18, 0x64	; 100
     630:	31 05       	cpc	r19, r1
     632:	1c f0       	brlt	.+6      	; 0x63a <csg_Status_melden+0x2c>
     634:	83 e0       	ldi	r24, 0x03	; 3
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e c0       	rjmp	.+28     	; 0x656 <csg_Status_melden+0x48>
		k = 2;
	if (blub < 10)
     63a:	2a 30       	cpi	r18, 0x0A	; 10
     63c:	31 05       	cpc	r19, r1
     63e:	1c f0       	brlt	.+6      	; 0x646 <csg_Status_melden+0x38>
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	08 c0       	rjmp	.+16     	; 0x656 <csg_Status_melden+0x48>
		k = 1;
	if (blub == 0)
     646:	21 15       	cp	r18, r1
     648:	31 05       	cpc	r19, r1
     64a:	19 f4       	brne	.+6      	; 0x652 <csg_Status_melden+0x44>
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	02 c0       	rjmp	.+4      	; 0x656 <csg_Status_melden+0x48>
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	90 e0       	ldi	r25, 0x00	; 0
		k = 0;
	blub++;
     656:	2f 5f       	subi	r18, 0xFF	; 255
     658:	3f 4f       	sbci	r19, 0xFF	; 255
     65a:	30 93 61 07 	sts	0x0761, r19
     65e:	20 93 60 07 	sts	0x0760, r18
	switch (k) {
     662:	81 30       	cpi	r24, 0x01	; 1
     664:	91 05       	cpc	r25, r1
     666:	99 f0       	breq	.+38     	; 0x68e <csg_Status_melden+0x80>
     668:	82 30       	cpi	r24, 0x02	; 2
     66a:	91 05       	cpc	r25, r1
     66c:	1c f4       	brge	.+6      	; 0x674 <csg_Status_melden+0x66>
     66e:	89 2b       	or	r24, r25
     670:	39 f0       	breq	.+14     	; 0x680 <csg_Status_melden+0x72>
     672:	1a c0       	rjmp	.+52     	; 0x6a8 <csg_Status_melden+0x9a>
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	91 05       	cpc	r25, r1
     678:	69 f0       	breq	.+26     	; 0x694 <csg_Status_melden+0x86>
     67a:	03 97       	sbiw	r24, 0x03	; 3
     67c:	a9 f4       	brne	.+42     	; 0x6a8 <csg_Status_melden+0x9a>
     67e:	0d c0       	rjmp	.+26     	; 0x69a <csg_Status_melden+0x8c>
	case 0:
		lcd_puts("Status gemeldet!");
     680:	84 e0       	ldi	r24, 0x04	; 4
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string("         0,         0,K,K,R\r\n", D_RapidForm);			// Status an RapidForm zur�ckmelden
     688:	85 e1       	ldi	r24, 0x15	; 21
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	08 c0       	rjmp	.+16     	; 0x69e <csg_Status_melden+0x90>
		break;
	case 1:
		uart_put_string("         9,         0,K,K,R\r\n", D_RapidForm);			// Status an RapidForm zur�ckmelden
     68e:	83 e3       	ldi	r24, 0x33	; 51
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	05 c0       	rjmp	.+10     	; 0x69e <csg_Status_melden+0x90>
		break;
	case 2:
		uart_put_string("        99,         0,K,K,R\r\n", D_RapidForm);			// Status an RapidForm zur�ckmelden
     694:	81 e5       	ldi	r24, 0x51	; 81
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	02 c0       	rjmp	.+4      	; 0x69e <csg_Status_melden+0x90>
		break;
	case 3:
		uart_put_string("       999,         0,K,K,R\r\n", D_RapidForm);			// Status an RapidForm zur�ckmelden
     69a:	8f e6       	ldi	r24, 0x6F	; 111
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
     6a6:	08 95       	ret
		break;
	default:
		uart_put_string(" 999999999,         0,K,K,R\r\n", D_RapidForm); // Status an RapidForm zur�ckmelden
     6a8:	8d e8       	ldi	r24, 0x8D	; 141
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	f8 cf       	rjmp	.-16     	; 0x69e <csg_Status_melden+0x90>
	}
}
     6ae:	85 e0       	ldi	r24, 0x05	; 5
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	d1 cf       	rjmp	.-94     	; 0x656 <csg_Status_melden+0x48>

000006b4 <String_zerlegen_csg>:
	ltoa(z,Position,10);
	//lcd_puts("Position: ");
	//lcd_puts(Position);
	//lcd_puts("\n");
}
void 	String_zerlegen_csg	(char * str_rx) {
     6b4:	cf 92       	push	r12
     6b6:	df 92       	push	r13
     6b8:	ef 92       	push	r14
     6ba:	ff 92       	push	r15
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	df 93       	push	r29
     6c2:	cf 93       	push	r28
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	61 97       	sbiw	r28, 0x11	; 17
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	f8 94       	cli
     6ce:	de bf       	out	0x3e, r29	; 62
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	cd bf       	out	0x3d, r28	; 61
     6d4:	6c 01       	movw	r12, r24
	int i = 4; // Index Input String | Bei 4. Zeichen Beginnen. Die ersten 3 Zeichen sind Fix.
	int j = 0; // Index Variable
	char c; // Zu kopierendes Zeichen
	// Variablen Deklaration und Initialisierung mit Defaultwerten
	char Speed_Range[2] = "2";
	char ONE_Min_Speed[6] = "200";
     6d6:	82 e3       	ldi	r24, 0x32	; 50
     6d8:	90 e3       	ldi	r25, 0x30	; 48
     6da:	a0 e3       	ldi	r26, 0x30	; 48
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	8e 83       	std	Y+6, r24	; 0x06
     6e0:	9f 83       	std	Y+7, r25	; 0x07
     6e2:	a8 87       	std	Y+8, r26	; 0x08
     6e4:	b9 87       	std	Y+9, r27	; 0x09
     6e6:	1b 86       	std	Y+11, r1	; 0x0b
     6e8:	1a 86       	std	Y+10, r1	; 0x0a
	char ONE_Max_Speed[6] = "2000";
     6ea:	de 01       	movw	r26, r28
     6ec:	1c 96       	adiw	r26, 0x0c	; 12
     6ee:	e8 ed       	ldi	r30, 0xD8	; 216
     6f0:	f1 e0       	ldi	r31, 0x01	; 1
     6f2:	85 e0       	ldi	r24, 0x05	; 5
     6f4:	01 90       	ld	r0, Z+
     6f6:	0d 92       	st	X+, r0
     6f8:	81 50       	subi	r24, 0x01	; 1
     6fa:	e1 f7       	brne	.-8      	; 0x6f4 <String_zerlegen_csg+0x40>
     6fc:	19 8a       	std	Y+17, r1	; 0x11
	char ONE_Acc_Speed[5] = "200";
     6fe:	82 e3       	ldi	r24, 0x32	; 50
     700:	90 e3       	ldi	r25, 0x30	; 48
     702:	a0 e3       	ldi	r26, 0x30	; 48
     704:	b0 e0       	ldi	r27, 0x00	; 0
     706:	89 83       	std	Y+1, r24	; 0x01
     708:	9a 83       	std	Y+2, r25	; 0x02
     70a:	ab 83       	std	Y+3, r26	; 0x03
     70c:	bc 83       	std	Y+4, r27	; 0x04
     70e:	1d 82       	std	Y+5, r1	; 0x05
     710:	84 e0       	ldi	r24, 0x04	; 4
     712:	e8 2e       	mov	r14, r24
     714:	f1 2c       	mov	r15, r1
     716:	a0 e0       	ldi	r26, 0x00	; 0
     718:	b0 e0       	ldi	r27, 0x00	; 0
	//
	////////////////////////
	do {
		c = str_rx[i];
		if (c != 'F') {
			ONE_Min_Speed[j] = c;
     71a:	9e 01       	movw	r18, r28
     71c:	2a 5f       	subi	r18, 0xFA	; 250
     71e:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	//  Min Speed (50 - 20000)
	//
	////////////////////////
	do {
		c = str_rx[i];
     720:	f6 01       	movw	r30, r12
     722:	ee 0d       	add	r30, r14
     724:	ff 1d       	adc	r31, r15
     726:	80 81       	ld	r24, Z
		if (c != 'F') {
     728:	86 34       	cpi	r24, 0x46	; 70
     72a:	41 f0       	breq	.+16     	; 0x73c <String_zerlegen_csg+0x88>
			ONE_Min_Speed[j] = c;
     72c:	f9 01       	movw	r30, r18
     72e:	ea 0f       	add	r30, r26
     730:	fb 1f       	adc	r31, r27
     732:	80 83       	st	Z, r24
			j++;
     734:	11 96       	adiw	r26, 0x01	; 1
			i++;
     736:	08 94       	sec
     738:	e1 1c       	adc	r14, r1
     73a:	f1 1c       	adc	r15, r1
		}
	} while (j < 6 && c != '\0' && c != 'F');
     73c:	a6 30       	cpi	r26, 0x06	; 6
     73e:	b1 05       	cpc	r27, r1
     740:	24 f4       	brge	.+8      	; 0x74a <String_zerlegen_csg+0x96>
     742:	88 23       	and	r24, r24
     744:	11 f0       	breq	.+4      	; 0x74a <String_zerlegen_csg+0x96>
     746:	86 34       	cpi	r24, 0x46	; 70
     748:	59 f7       	brne	.-42     	; 0x720 <String_zerlegen_csg+0x6c>
	ONE_Min_Speed[j] = '\0';
     74a:	8e 01       	movw	r16, r28
     74c:	0a 5f       	subi	r16, 0xFA	; 250
     74e:	1f 4f       	sbci	r17, 0xFF	; 255
     750:	a0 0f       	add	r26, r16
     752:	b1 1f       	adc	r27, r17
     754:	1c 92       	st	X, r1

	lcd_puts("1_MIN_SPEED:");
     756:	8b ea       	ldi	r24, 0xAB	; 171
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts(ONE_Min_Speed);
     75e:	c8 01       	movw	r24, r16
     760:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts("\n");
     764:	88 eb       	ldi	r24, 0xB8	; 184
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	////////////////////////
	//
	//  Max Speed (50 - 20000)
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
     76c:	08 94       	sec
     76e:	e1 1c       	adc	r14, r1
     770:	f1 1c       	adc	r15, r1
     772:	a0 e0       	ldi	r26, 0x00	; 0
     774:	b0 e0       	ldi	r27, 0x00	; 0
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
		if (c != 'R') {
			ONE_Max_Speed[j] = c;
     776:	9e 01       	movw	r18, r28
     778:	24 5f       	subi	r18, 0xF4	; 244
     77a:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
     77c:	f6 01       	movw	r30, r12
     77e:	ee 0d       	add	r30, r14
     780:	ff 1d       	adc	r31, r15
     782:	80 81       	ld	r24, Z
		if (c != 'R') {
     784:	82 35       	cpi	r24, 0x52	; 82
     786:	41 f0       	breq	.+16     	; 0x798 <String_zerlegen_csg+0xe4>
			ONE_Max_Speed[j] = c;
     788:	f9 01       	movw	r30, r18
     78a:	ea 0f       	add	r30, r26
     78c:	fb 1f       	adc	r31, r27
     78e:	80 83       	st	Z, r24
			i++;
     790:	08 94       	sec
     792:	e1 1c       	adc	r14, r1
     794:	f1 1c       	adc	r15, r1
			j++;
     796:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (j < 6 && c != '\0' && c != 'R');
     798:	a6 30       	cpi	r26, 0x06	; 6
     79a:	b1 05       	cpc	r27, r1
     79c:	24 f4       	brge	.+8      	; 0x7a6 <String_zerlegen_csg+0xf2>
     79e:	88 23       	and	r24, r24
     7a0:	11 f0       	breq	.+4      	; 0x7a6 <String_zerlegen_csg+0xf2>
     7a2:	82 35       	cpi	r24, 0x52	; 82
     7a4:	59 f7       	brne	.-42     	; 0x77c <String_zerlegen_csg+0xc8>
	ONE_Max_Speed[j] = '\0';
     7a6:	8e 01       	movw	r16, r28
     7a8:	04 5f       	subi	r16, 0xF4	; 244
     7aa:	1f 4f       	sbci	r17, 0xFF	; 255
     7ac:	a0 0f       	add	r26, r16
     7ae:	b1 1f       	adc	r27, r17
     7b0:	1c 92       	st	X, r1

	lcd_puts("1_MAX_SPEED:");
     7b2:	8a eb       	ldi	r24, 0xBA	; 186
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts(ONE_Max_Speed);
     7ba:	c8 01       	movw	r24, r16
     7bc:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts("\n");
     7c0:	88 eb       	ldi	r24, 0xB8	; 184
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	////////////////////////
	//
	//  Acceleration (0 - 1000)
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
     7c8:	c7 01       	movw	r24, r14
     7ca:	01 96       	adiw	r24, 0x01	; 1
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e0       	ldi	r27, 0x00	; 0
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
		if (c != 'S') {
			ONE_Acc_Speed[j] = c;
     7d0:	ae 01       	movw	r20, r28
     7d2:	4f 5f       	subi	r20, 0xFF	; 255
     7d4:	5f 4f       	sbci	r21, 0xFF	; 255
	//
	////////////////////////
	i++; // Stuerzeichen �berspringen
	j = 0; // Variablenz�hler zur�cksetzen
	do {
		c = str_rx[i];
     7d6:	f6 01       	movw	r30, r12
     7d8:	e8 0f       	add	r30, r24
     7da:	f9 1f       	adc	r31, r25
     7dc:	20 81       	ld	r18, Z
		if (c != 'S') {
     7de:	23 35       	cpi	r18, 0x53	; 83
     7e0:	31 f0       	breq	.+12     	; 0x7ee <String_zerlegen_csg+0x13a>
			ONE_Acc_Speed[j] = c;
     7e2:	fa 01       	movw	r30, r20
     7e4:	ea 0f       	add	r30, r26
     7e6:	fb 1f       	adc	r31, r27
     7e8:	20 83       	st	Z, r18
			i++;
     7ea:	01 96       	adiw	r24, 0x01	; 1
			j++;
     7ec:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (j < 4 && c != '\0' && c != 'S');
     7ee:	a4 30       	cpi	r26, 0x04	; 4
     7f0:	b1 05       	cpc	r27, r1
     7f2:	24 f4       	brge	.+8      	; 0x7fc <String_zerlegen_csg+0x148>
     7f4:	22 23       	and	r18, r18
     7f6:	11 f0       	breq	.+4      	; 0x7fc <String_zerlegen_csg+0x148>
     7f8:	23 35       	cpi	r18, 0x53	; 83
     7fa:	69 f7       	brne	.-38     	; 0x7d6 <String_zerlegen_csg+0x122>
	ONE_Acc_Speed[j] = '\0';
     7fc:	8e 01       	movw	r16, r28
     7fe:	0f 5f       	subi	r16, 0xFF	; 255
     800:	1f 4f       	sbci	r17, 0xFF	; 255
     802:	a0 0f       	add	r26, r16
     804:	b1 1f       	adc	r27, r17
     806:	1c 92       	st	X, r1

	lcd_puts("1_ACC_SPEED:");
     808:	87 ec       	ldi	r24, 0xC7	; 199
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts(ONE_Acc_Speed);
     810:	c8 01       	movw	r24, r16
     812:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts("\n");
     816:	88 eb       	ldi	r24, 0xB8	; 184
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	//////////////////////////
	//
	//  Blub um eins hochz�hlen
	//
	//////////////////////////
	blub++;
     81e:	80 91 60 07 	lds	r24, 0x0760
     822:	90 91 61 07 	lds	r25, 0x0761
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	90 93 61 07 	sts	0x0761, r25
     82c:	80 93 60 07 	sts	0x0760, r24
	//uart_put_string("0\n", D_Stepper);
	uart_put_string(B_OK, D_RapidForm);
     830:	84 ed       	ldi	r24, 0xD4	; 212
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
}
     83c:	61 96       	adiw	r28, 0x11	; 17
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
     848:	cf 91       	pop	r28
     84a:	df 91       	pop	r29
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	df 90       	pop	r13
     856:	cf 90       	pop	r12
     858:	08 95       	ret

0000085a <my_select>:
	lcd_puts("Aufnahme starten\n");
	lcd_puts("Nach Aufnahme SW3 dr�cken!\n");
	if (get_key_press(1 << KEY3))
		uart_put_string("M 16000\r", D_Stepper);
}
void 	my_select			(void *arg, char *name) {
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	8b 01       	movw	r16, r22
	lcd_clrscr();
     860:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
	lcd_puts("Selected: ");
     864:	8e ed       	ldi	r24, 0xDE	; 222
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts(name);
     86c:	c8 01       	movw	r24, r16
     86e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
 */


static inline void ms_spin(unsigned short ms) {
	if (ms) {
		__asm__ __volatile__ (
     872:	8e ee       	ldi	r24, 0xEE	; 238
     874:	92 e0       	ldi	r25, 0x02	; 2

00000876 <outer_854>:
     876:	a0 ed       	ldi	r26, 0xD0	; 208
     878:	b7 e0       	ldi	r27, 0x07	; 7

0000087a <inner_854>:
     87a:	11 97       	sbiw	r26, 0x01	; 1
     87c:	f1 f7       	brne	.-4      	; 0x87a <inner_854>
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	d1 f7       	brne	.-12     	; 0x876 <outer_854>

	ms_spin(750);
}
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	08 95       	ret

00000888 <mod_manual>:
	LED_PORT = i;
}
// Menu Stuff

void 	mod_manual			(void *arg, void *name) {
	lcd_puts("Manueller Modus\n");
     888:	89 ee       	ldi	r24, 0xE9	; 233
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts("Aufnahme starten\n");
     890:	8a ef       	ldi	r24, 0xFA	; 250
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts("Nach Aufnahme SW3 dr�cken!\n");
     898:	8c e0       	ldi	r24, 0x0C	; 12
     89a:	92 e0       	ldi	r25, 0x02	; 2
     89c:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
     8a0:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
     8a2:	90 91 ce 07 	lds	r25, 0x07CE
     8a6:	98 70       	andi	r25, 0x08	; 8
  key_press ^= key_mask;                          // clear key(s)
     8a8:	80 91 ce 07 	lds	r24, 0x07CE
     8ac:	89 27       	eor	r24, r25
     8ae:	80 93 ce 07 	sts	0x07CE, r24
  sei();
     8b2:	78 94       	sei
	if (get_key_press(1 << KEY3))
     8b4:	99 23       	and	r25, r25
     8b6:	31 f0       	breq	.+12     	; 0x8c4 <mod_manual+0x3c>
		uart_put_string("M 16000\r", D_Stepper);
     8b8:	8a e2       	ldi	r24, 0x2A	; 42
     8ba:	92 e0       	ldi	r25, 0x02	; 2
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
     8c4:	08 95       	ret

000008c6 <Position_Zeta>:
		break;
	default:
		uart_put_string(" 999999999,         0,K,K,R\r\n", D_RapidForm); // Status an RapidForm zur�ckmelden
	}
}
void 	Position_Zeta		(char * Position) {
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	8c 01       	movw	r16, r24
     8d0:	c0 e0       	ldi	r28, 0x00	; 0
     8d2:	d0 e0       	ldi	r29, 0x00	; 0
    char c;
    int i = 0;
    do{
        c = str_rx[i + 1];
     8d4:	de 01       	movw	r26, r28
     8d6:	11 96       	adiw	r26, 0x01	; 1
     8d8:	fd 01       	movw	r30, r26
     8da:	e6 59       	subi	r30, 0x96	; 150
     8dc:	f8 4f       	sbci	r31, 0xF8	; 248
     8de:	e0 81       	ld	r30, Z
        if(c != ','){
     8e0:	ec 32       	cpi	r30, 0x2C	; 44
     8e2:	11 f4       	brne	.+4      	; 0x8e8 <Position_Zeta+0x22>
     8e4:	de 01       	movw	r26, r28
     8e6:	03 c0       	rjmp	.+6      	; 0x8ee <Position_Zeta+0x28>
            Position[i] = c;
     8e8:	c0 0f       	add	r28, r16
     8ea:	d1 1f       	adc	r29, r17
     8ec:	e8 83       	st	Y, r30
            i++;
        }
    }
     while(i < 20 && c != '\0' && c != ',');
     8ee:	a4 31       	cpi	r26, 0x14	; 20
     8f0:	b1 05       	cpc	r27, r1
     8f2:	34 f4       	brge	.+12     	; 0x900 <__stack+0x1>
     8f4:	ee 23       	and	r30, r30
     8f6:	21 f0       	breq	.+8      	; 0x900 <__stack+0x1>
     8f8:	ec 32       	cpi	r30, 0x2C	; 44
     8fa:	11 f0       	breq	.+4      	; 0x900 <__stack+0x1>
     8fc:	ed 01       	movw	r28, r26
     8fe:	ea cf       	rjmp	.-44     	; 0x8d4 <Position_Zeta+0xe>
    Position[i] = '\0';
     900:	a0 0f       	add	r26, r16
     902:	b1 1f       	adc	r27, r17
     904:	1c 92       	st	X, r1
	int32_t z;
	z = atol(Position);
     906:	c8 01       	movw	r24, r16
     908:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <atol>
	z = z/9;
	ltoa(z,Position,10);
     90c:	29 e0       	ldi	r18, 0x09	; 9
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__divmodsi4>
     918:	ca 01       	movw	r24, r20
     91a:	b9 01       	movw	r22, r18
     91c:	a8 01       	movw	r20, r16
     91e:	2a e0       	ldi	r18, 0x0A	; 10
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <ltoa>
}
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	08 95       	ret

00000930 <String_zerlegen_Isel>:
			return n;
		}
	}
	return 99;
}
void 	String_zerlegen_Isel(char * str_rx, char * Position) {
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	8c 01       	movw	r16, r24
     93a:	eb 01       	movw	r28, r22
	//0M5200, +600
	//Achse M Position, +Geschwindigkeit
	char * Achse="0";
	Achse[0] = str_rx[1];
	Achse[1] = '\0';
	if(atoi(Achse)==0){
     93c:	83 e3       	ldi	r24, 0x33	; 51
     93e:	92 e0       	ldi	r25, 0x02	; 2
     940:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <atoi>
     944:	89 2b       	or	r24, r25
     946:	61 f4       	brne	.+24     	; 0x960 <String_zerlegen_Isel+0x30>
		lcd_puts("Achse: ");
     948:	85 e3       	ldi	r24, 0x35	; 53
     94a:	92 e0       	ldi	r25, 0x02	; 2
     94c:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(Achse);
     950:	83 e3       	ldi	r24, 0x33	; 51
     952:	92 e0       	ldi	r25, 0x02	; 2
     954:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(" (Rotation)\n");
     958:	8d e3       	ldi	r24, 0x3D	; 61
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	}
	if(atoi(Achse)==1){
     960:	83 e3       	ldi	r24, 0x33	; 51
     962:	92 e0       	ldi	r25, 0x02	; 2
     964:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <atoi>
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	61 f4       	brne	.+24     	; 0x984 <String_zerlegen_Isel+0x54>
		lcd_puts("Achse: ");
     96c:	85 e3       	ldi	r24, 0x35	; 53
     96e:	92 e0       	ldi	r25, 0x02	; 2
     970:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(Achse);
     974:	83 e3       	ldi	r24, 0x33	; 51
     976:	92 e0       	ldi	r25, 0x02	; 2
     978:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(" (Hoehe)   \n");
     97c:	8a e4       	ldi	r24, 0x4A	; 74
     97e:	92 e0       	ldi	r25, 0x02	; 2
     980:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	}
	lcd_puts("Test: ");
     984:	87 e5       	ldi	r24, 0x57	; 87
     986:	92 e0       	ldi	r25, 0x02	; 2
     988:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts(Position);
     98c:	ce 01       	movw	r24, r28
     98e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
     992:	a0 e0       	ldi	r26, 0x00	; 0
     994:	b0 e0       	ldi	r27, 0x00	; 0
	char c;
	int i = 0;
	do {
		c = str_rx[i + 3];
     996:	f8 01       	movw	r30, r16
     998:	ea 0f       	add	r30, r26
     99a:	fb 1f       	adc	r31, r27
     99c:	83 81       	ldd	r24, Z+3	; 0x03
		if (c != ',') {
     99e:	8c 32       	cpi	r24, 0x2C	; 44
     9a0:	29 f0       	breq	.+10     	; 0x9ac <String_zerlegen_Isel+0x7c>
			Position[i] = c;
     9a2:	fe 01       	movw	r30, r28
     9a4:	ea 0f       	add	r30, r26
     9a6:	fb 1f       	adc	r31, r27
     9a8:	80 83       	st	Z, r24
			i++;
     9aa:	11 96       	adiw	r26, 0x01	; 1
		}
	} while (i < 20 && c != '\0' && c != ',');
     9ac:	a4 31       	cpi	r26, 0x14	; 20
     9ae:	b1 05       	cpc	r27, r1
     9b0:	24 f4       	brge	.+8      	; 0x9ba <String_zerlegen_Isel+0x8a>
     9b2:	88 23       	and	r24, r24
     9b4:	11 f0       	breq	.+4      	; 0x9ba <String_zerlegen_Isel+0x8a>
     9b6:	8c 32       	cpi	r24, 0x2C	; 44
     9b8:	71 f7       	brne	.-36     	; 0x996 <String_zerlegen_Isel+0x66>
	Position[i] = '\0';
     9ba:	ac 0f       	add	r26, r28
     9bc:	bd 1f       	adc	r27, r29
     9be:	1c 92       	st	X, r1
	int32_t z;
	z = atoi(Position);
     9c0:	ce 01       	movw	r24, r28
     9c2:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <atoi>
	z = (z * 71111)  /4096;
     9c6:	aa 27       	eor	r26, r26
     9c8:	97 fd       	sbrc	r25, 7
     9ca:	a0 95       	com	r26
     9cc:	ba 2f       	mov	r27, r26
     9ce:	bc 01       	movw	r22, r24
     9d0:	cd 01       	movw	r24, r26
     9d2:	27 ec       	ldi	r18, 0xC7	; 199
     9d4:	35 e1       	ldi	r19, 0x15	; 21
     9d6:	41 e0       	ldi	r20, 0x01	; 1
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsi3>
	ltoa(z,Position,10);
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e1       	ldi	r19, 0x10	; 16
     9e2:	40 e0       	ldi	r20, 0x00	; 0
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__divmodsi4>
     9ea:	ca 01       	movw	r24, r20
     9ec:	b9 01       	movw	r22, r18
     9ee:	ae 01       	movw	r20, r28
     9f0:	2a e0       	ldi	r18, 0x0A	; 10
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <ltoa>
	//lcd_puts("Position: ");
	//lcd_puts(Position);
	//lcd_puts("\n");
}
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	08 95       	ret

00000a02 <FindStringInArray>:
			.Befehl = progmem_Befehl,
	}
};
*/

int 	FindStringInArray	(const char* pInput, const char* pOptions[], int cmp_length) {
     a02:	cf 92       	push	r12
     a04:	df 92       	push	r13
     a06:	ef 92       	push	r14
     a08:	ff 92       	push	r15
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	6c 01       	movw	r12, r24
     a14:	7a 01       	movw	r14, r20
     a16:	8b 01       	movw	r16, r22
     a18:	cf ef       	ldi	r28, 0xFF	; 255
     a1a:	df ef       	ldi	r29, 0xFF	; 255
     a1c:	08 c0       	rjmp	.+16     	; 0xa2e <FindStringInArray+0x2c>
	int n = -1;
	while (pOptions[++n]) {
		//lcd_puts(pOptions[n]);
		//lcd_puts("\n");
		if (!strncmp(pInput, pOptions[n], cmp_length)){
     a1e:	c6 01       	movw	r24, r12
     a20:	a7 01       	movw	r20, r14
     a22:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <strncmp>
     a26:	0e 5f       	subi	r16, 0xFE	; 254
     a28:	1f 4f       	sbci	r17, 0xFF	; 255
     a2a:	00 97       	sbiw	r24, 0x00	; 0
     a2c:	49 f0       	breq	.+18     	; 0xa40 <FindStringInArray+0x3e>
};
*/

int 	FindStringInArray	(const char* pInput, const char* pOptions[], int cmp_length) {
	int n = -1;
	while (pOptions[++n]) {
     a2e:	21 96       	adiw	r28, 0x01	; 1
     a30:	f8 01       	movw	r30, r16
     a32:	60 81       	ld	r22, Z
     a34:	71 81       	ldd	r23, Z+1	; 0x01
     a36:	61 15       	cp	r22, r1
     a38:	71 05       	cpc	r23, r1
     a3a:	89 f7       	brne	.-30     	; 0xa1e <FindStringInArray+0x1c>
     a3c:	c3 e6       	ldi	r28, 0x63	; 99
     a3e:	d0 e0       	ldi	r29, 0x00	; 0
		if (!strncmp(pInput, pOptions[n], cmp_length)){
			return n;
		}
	}
	return 99;
}
     a40:	ce 01       	movw	r24, r28
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	08 95       	ret

00000a54 <switch_Motor>:
		uart_put_string(str_rx,D_Stepper);
		uart_put_string("\n",D_Stepper);
	}
}

int 	switch_Motor		(char * str_rx) {
     a54:	df 93       	push	r29
     a56:	cf 93       	push	r28
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
     a5c:	2a 97       	sbiw	r28, 0x0a	; 10
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	cd bf       	out	0x3d, r28	; 61
	const char* pOptions[] = {
			"@01", 		// 0 - Isel
			"Q:",    	// 1 - CSG
			"ECHO0", 	// 2 - Zeta
			"!Terminal",	// 3 - Terminal ansteuerung!
			0 };
     a68:	de 01       	movw	r26, r28
     a6a:	11 96       	adiw	r26, 0x01	; 1
     a6c:	e5 e9       	ldi	r30, 0x95	; 149
     a6e:	f6 e0       	ldi	r31, 0x06	; 6
     a70:	2a e0       	ldi	r18, 0x0A	; 10
     a72:	01 90       	ld	r0, Z+
     a74:	0d 92       	st	X+, r0
     a76:	21 50       	subi	r18, 0x01	; 1
     a78:	e1 f7       	brne	.-8      	; 0xa72 <switch_Motor+0x1e>
	switch (FindStringInArray(str_rx, pOptions, 3)) {
     a7a:	be 01       	movw	r22, r28
     a7c:	6f 5f       	subi	r22, 0xFF	; 255
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	43 e0       	ldi	r20, 0x03	; 3
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	0e 94 01 05 	call	0xa02	; 0xa02 <FindStringInArray>
     a88:	81 30       	cpi	r24, 0x01	; 1
     a8a:	91 05       	cpc	r25, r1
     a8c:	61 f0       	breq	.+24     	; 0xaa6 <switch_Motor+0x52>
     a8e:	82 30       	cpi	r24, 0x02	; 2
     a90:	91 05       	cpc	r25, r1
     a92:	1c f4       	brge	.+6      	; 0xa9a <switch_Motor+0x46>
     a94:	89 2b       	or	r24, r25
     a96:	51 f0       	breq	.+20     	; 0xaac <switch_Motor+0x58>
     a98:	12 c0       	rjmp	.+36     	; 0xabe <switch_Motor+0x6a>
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	91 05       	cpc	r25, r1
     a9e:	49 f0       	breq	.+18     	; 0xab2 <switch_Motor+0x5e>
     aa0:	03 97       	sbiw	r24, 0x03	; 3
     aa2:	69 f4       	brne	.+26     	; 0xabe <switch_Motor+0x6a>
     aa4:	09 c0       	rjmp	.+18     	; 0xab8 <switch_Motor+0x64>
     aa6:	21 e0       	ldi	r18, 0x01	; 1
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	0b c0       	rjmp	.+22     	; 0xac2 <switch_Motor+0x6e>
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	08 c0       	rjmp	.+16     	; 0xac2 <switch_Motor+0x6e>
     ab2:	22 e0       	ldi	r18, 0x02	; 2
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	05 c0       	rjmp	.+10     	; 0xac2 <switch_Motor+0x6e>
		break;
	case 1: 		// 1 - CSG
		return M_CSG;
		break;
	case 2:			// 2 - Zeta
		return M_ZETA;
     ab8:	23 e0       	ldi	r18, 0x03	; 3
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <switch_Motor+0x6e>
		break;
	case 3:			// 3 - Terminal ansteuerung
		return M_TERMINAL;
     abe:	2e ef       	ldi	r18, 0xFE	; 254
     ac0:	3f ef       	ldi	r19, 0xFF	; 255
		break;
	default:
		return M_UNK;
	}
}
     ac2:	c9 01       	movw	r24, r18
     ac4:	2a 96       	adiw	r28, 0x0a	; 10
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	cf 91       	pop	r28
     ad2:	df 91       	pop	r29
     ad4:	08 95       	ret

00000ad6 <switch_Terminal>:
		lcd_puts("       \n");
		//Initialized = switch_Inputs(str_rx);
	}
}
int init_T = 0;
void 	switch_Terminal			(char * str_rx) {
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	df 93       	push	r29
     adc:	cf 93       	push	r28
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
     ae2:	2a 97       	sbiw	r28, 0x0a	; 10
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	8c 01       	movw	r16, r24
	const char* pOptions[] = {
			"!CLS", // 0 - LC-Display l�schen
			"Test",	// 1 - Test
			"!Manual",// 2 - Ignorieren
			"!YYYY",// 3 - Wait till motor stops
			0 };
     af0:	de 01       	movw	r26, r28
     af2:	11 96       	adiw	r26, 0x01	; 1
     af4:	e7 eb       	ldi	r30, 0xB7	; 183
     af6:	f6 e0       	ldi	r31, 0x06	; 6
     af8:	8a e0       	ldi	r24, 0x0A	; 10
     afa:	01 90       	ld	r0, Z+
     afc:	0d 92       	st	X+, r0
     afe:	81 50       	subi	r24, 0x01	; 1
     b00:	e1 f7       	brne	.-8      	; 0xafa <switch_Terminal+0x24>

	if (init_T == 0){
     b02:	80 91 64 07 	lds	r24, 0x0764
     b06:	90 91 65 07 	lds	r25, 0x0765
     b0a:	89 2b       	or	r24, r25
     b0c:	c1 f4       	brne	.+48     	; 0xb3e <switch_Terminal+0x68>
		init_T = 1;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	90 93 65 07 	sts	0x0765, r25
     b16:	80 93 64 07 	sts	0x0764, r24
		uart_put_string("Willkommen im Terminal Modus\r\n",D_RapidForm);
     b1a:	8e e5       	ldi	r24, 0x5E	; 94
     b1c:	92 e0       	ldi	r25, 0x02	; 2
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
		uart_put_string("m�gliche Befehle sind: \r\n",D_RapidForm);
     b26:	8d e7       	ldi	r24, 0x7D	; 125
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
		uart_put_string(" A - Motorstatus\r\n M - Move Steps\r\n", D_RapidForm);
     b32:	89 e9       	ldi	r24, 0x99	; 153
     b34:	92 e0       	ldi	r25, 0x02	; 2
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
	}
	switch (FindStringInArray(str_rx, pOptions, 2)) {
     b3e:	c8 01       	movw	r24, r16
     b40:	be 01       	movw	r22, r28
     b42:	6f 5f       	subi	r22, 0xFF	; 255
     b44:	7f 4f       	sbci	r23, 0xFF	; 255
     b46:	42 e0       	ldi	r20, 0x02	; 2
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	0e 94 01 05 	call	0xa02	; 0xa02 <FindStringInArray>
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	91 05       	cpc	r25, r1
     b52:	61 f0       	breq	.+24     	; 0xb6c <switch_Terminal+0x96>
     b54:	82 30       	cpi	r24, 0x02	; 2
     b56:	91 05       	cpc	r25, r1
     b58:	1c f4       	brge	.+6      	; 0xb60 <switch_Terminal+0x8a>
     b5a:	89 2b       	or	r24, r25
     b5c:	21 f0       	breq	.+8      	; 0xb66 <switch_Terminal+0x90>
     b5e:	0f c0       	rjmp	.+30     	; 0xb7e <switch_Terminal+0xa8>
     b60:	04 97       	sbiw	r24, 0x04	; 4
     b62:	6c f4       	brge	.+26     	; 0xb7e <switch_Terminal+0xa8>
     b64:	1e c0       	rjmp	.+60     	; 0xba2 <switch_Terminal+0xcc>
	case 0: // Display l�schen
		lcd_clrscr();
     b66:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
     b6a:	1b c0       	rjmp	.+54     	; 0xba2 <switch_Terminal+0xcc>
		break;
	case 1: // Interner Test
		lcd_puts("Test bestanden     \n");
     b6c:	8d eb       	ldi	r24, 0xBD	; 189
     b6e:	92 e0       	ldi	r25, 0x02	; 2
     b70:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string("Test bestanden", D_RapidForm);
     b74:	82 ed       	ldi	r24, 0xD2	; 210
     b76:	92 e0       	ldi	r25, 0x02	; 2
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	10 c0       	rjmp	.+32     	; 0xb9e <switch_Terminal+0xc8>
	case 3: // Reserve 2

		break;
	default:
		//lcd_puts("Z:");
		lcd_puts(str_rx);
     b7e:	c8 01       	movw	r24, r16
     b80:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts("       \n");
     b84:	81 ee       	ldi	r24, 0xE1	; 225
     b86:	92 e0       	ldi	r25, 0x02	; 2
     b88:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string(str_rx,D_Stepper);
     b8c:	c8 01       	movw	r24, r16
     b8e:	61 e0       	ldi	r22, 0x01	; 1
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
		uart_put_string("\n",D_Stepper);
     b96:	88 eb       	ldi	r24, 0xB8	; 184
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	61 e0       	ldi	r22, 0x01	; 1
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
	}
}
     ba2:	2a 96       	adiw	r28, 0x0a	; 10
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	f8 94       	cli
     ba8:	de bf       	out	0x3e, r29	; 62
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	cd bf       	out	0x3d, r28	; 61
     bae:	cf 91       	pop	r28
     bb0:	df 91       	pop	r29
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	08 95       	ret

00000bb8 <switch_csg>:
	default:
		lcd_puts("ISEL:    \n");
		lcd_puts(str_rx);
	}
}
void 	switch_csg			(char * str_rx) {
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	a0 97       	sbiw	r28, 0x20	; 32
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	8c 01       	movw	r16, r24
			"H:", // 5 - H:
			"G", // 6 - Motor starten
			"M:", // 7 - Move by Pulses
			"!", // 8 - Busy Ready ?
			"H1",
			0 };
     bd2:	de 01       	movw	r26, r28
     bd4:	1b 96       	adiw	r26, 0x0b	; 11
     bd6:	ea e1       	ldi	r30, 0x1A	; 26
     bd8:	f7 e0       	ldi	r31, 0x07	; 7
     bda:	86 e1       	ldi	r24, 0x16	; 22
     bdc:	01 90       	ld	r0, Z+
     bde:	0d 92       	st	X+, r0
     be0:	81 50       	subi	r24, 0x01	; 1
     be2:	e1 f7       	brne	.-8      	; 0xbdc <switch_csg+0x24>
	switch (FindStringInArray(str_rx, pOptions, 2)) {
     be4:	c8 01       	movw	r24, r16
     be6:	be 01       	movw	r22, r28
     be8:	65 5f       	subi	r22, 0xF5	; 245
     bea:	7f 4f       	sbci	r23, 0xFF	; 255
     bec:	42 e0       	ldi	r20, 0x02	; 2
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	0e 94 01 05 	call	0xa02	; 0xa02 <FindStringInArray>
     bf4:	84 30       	cpi	r24, 0x04	; 4
     bf6:	91 05       	cpc	r25, r1
     bf8:	c1 f1       	breq	.+112    	; 0xc6a <switch_csg+0xb2>
     bfa:	85 30       	cpi	r24, 0x05	; 5
     bfc:	91 05       	cpc	r25, r1
     bfe:	84 f4       	brge	.+32     	; 0xc20 <switch_csg+0x68>
     c00:	81 30       	cpi	r24, 0x01	; 1
     c02:	91 05       	cpc	r25, r1
     c04:	29 f1       	breq	.+74     	; 0xc50 <switch_csg+0x98>
     c06:	82 30       	cpi	r24, 0x02	; 2
     c08:	91 05       	cpc	r25, r1
     c0a:	1c f4       	brge	.+6      	; 0xc12 <switch_csg+0x5a>
     c0c:	89 2b       	or	r24, r25
     c0e:	e9 f0       	breq	.+58     	; 0xc4a <switch_csg+0x92>
     c10:	65 c0       	rjmp	.+202    	; 0xcdc <switch_csg+0x124>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	91 05       	cpc	r25, r1
     c16:	f9 f0       	breq	.+62     	; 0xc56 <switch_csg+0x9e>
     c18:	03 97       	sbiw	r24, 0x03	; 3
     c1a:	09 f0       	breq	.+2      	; 0xc1e <switch_csg+0x66>
     c1c:	5f c0       	rjmp	.+190    	; 0xcdc <switch_csg+0x124>
     c1e:	1e c0       	rjmp	.+60     	; 0xc5c <switch_csg+0xa4>
     c20:	87 30       	cpi	r24, 0x07	; 7
     c22:	91 05       	cpc	r25, r1
     c24:	81 f1       	breq	.+96     	; 0xc86 <switch_csg+0xce>
     c26:	88 30       	cpi	r24, 0x08	; 8
     c28:	91 05       	cpc	r25, r1
     c2a:	3c f4       	brge	.+14     	; 0xc3a <switch_csg+0x82>
     c2c:	85 30       	cpi	r24, 0x05	; 5
     c2e:	91 05       	cpc	r25, r1
     c30:	01 f1       	breq	.+64     	; 0xc72 <switch_csg+0xba>
     c32:	06 97       	sbiw	r24, 0x06	; 6
     c34:	09 f0       	breq	.+2      	; 0xc38 <switch_csg+0x80>
     c36:	52 c0       	rjmp	.+164    	; 0xcdc <switch_csg+0x124>
     c38:	23 c0       	rjmp	.+70     	; 0xc80 <switch_csg+0xc8>
     c3a:	88 30       	cpi	r24, 0x08	; 8
     c3c:	91 05       	cpc	r25, r1
     c3e:	09 f4       	brne	.+2      	; 0xc42 <switch_csg+0x8a>
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <switch_csg+0x108>
     c42:	09 97       	sbiw	r24, 0x09	; 9
     c44:	09 f0       	breq	.+2      	; 0xc48 <switch_csg+0x90>
     c46:	4a c0       	rjmp	.+148    	; 0xcdc <switch_csg+0x124>
     c48:	46 c0       	rjmp	.+140    	; 0xcd6 <switch_csg+0x11e>
	case 0: // Motorkarte Erfolgreich angesprochen
		lcd_puts("!");
     c4a:	8a ee       	ldi	r24, 0xEA	; 234
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	4f c0       	rjmp	.+158    	; 0xcee <switch_csg+0x136>
		break;
	case 1: // Display l�schen
		lcd_clrscr();
     c50:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
     c54:	4e c0       	rjmp	.+156    	; 0xcf2 <switch_csg+0x13a>
		break;
	case 2: // Interner Test
		lcd_puts("!T");
     c56:	8c ee       	ldi	r24, 0xEC	; 236
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	49 c0       	rjmp	.+146    	; 0xcee <switch_csg+0x136>
		//uart_puts("Test bestanden\n\r");
		break;
	case 3: // Status abfrage von Software
		lcd_puts("Statusabfrage     \n");
     c5c:	8f ee       	ldi	r24, 0xEF	; 239
     c5e:	92 e0       	ldi	r25, 0x02	; 2
     c60:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		csg_Status_melden();
     c64:	0e 94 07 03 	call	0x60e	; 0x60e <csg_Status_melden>
     c68:	44 c0       	rjmp	.+136    	; 0xcf2 <switch_csg+0x13a>
		break;
	case 4:
		String_zerlegen_csg(str_rx);
     c6a:	c8 01       	movw	r24, r16
     c6c:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <String_zerlegen_csg>
     c70:	40 c0       	rjmp	.+128    	; 0xcf2 <switch_csg+0x13a>

		break;
	case 5:
		lcd_puts("H:                 \n");
     c72:	83 e0       	ldi	r24, 0x03	; 3
     c74:	93 e0       	ldi	r25, 0x03	; 3
     c76:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string(B_OK, D_RapidForm);
     c7a:	84 ed       	ldi	r24, 0xD4	; 212
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	26 c0       	rjmp	.+76     	; 0xccc <switch_csg+0x114>
		break;
	case 6:
		lcd_puts("Motor starten\n");
     c80:	88 e1       	ldi	r24, 0x18	; 24
     c82:	93 e0       	ldi	r25, 0x03	; 3
     c84:	34 c0       	rjmp	.+104    	; 0xcee <switch_csg+0x136>
		//uart_put_string(B_OK, D_RapidForm);
		break;
	case 7:
		move++;
     c86:	80 91 62 07 	lds	r24, 0x0762
     c8a:	90 91 63 07 	lds	r25, 0x0763
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	90 93 63 07 	sts	0x0763, r25
     c94:	80 93 62 07 	sts	0x0762, r24
		char it[10];
		itoa(move, it, 10);
     c98:	8e 01       	movw	r16, r28
     c9a:	0f 5f       	subi	r16, 0xFF	; 255
     c9c:	1f 4f       	sbci	r17, 0xFF	; 255
     c9e:	b8 01       	movw	r22, r16
     ca0:	4a e0       	ldi	r20, 0x0A	; 10
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <itoa>
		lcd_puts(it);
     ca8:	c8 01       	movw	r24, r16
     caa:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts("_Move!\n");
     cae:	87 e2       	ldi	r24, 0x27	; 39
     cb0:	93 e0       	ldi	r25, 0x03	; 3
     cb2:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string("M 160000\r\n",D_Stepper);
     cb6:	8f e2       	ldi	r24, 0x2F	; 47
     cb8:	93 e0       	ldi	r25, 0x03	; 3
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	08 c0       	rjmp	.+16     	; 0xcd0 <switch_csg+0x118>

		break;
	case 8:
		lcd_puts("R/B?");
     cc0:	8a e3       	ldi	r24, 0x3A	; 58
     cc2:	93 e0       	ldi	r25, 0x03	; 3
     cc4:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string("R\r\n", D_RapidForm);
     cc8:	8f e3       	ldi	r24, 0x3F	; 63
     cca:	93 e0       	ldi	r25, 0x03	; 3
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
     cd4:	0e c0       	rjmp	.+28     	; 0xcf2 <switch_csg+0x13a>
		break;
	case 9:
		lcd_puts("H1 empfangen       \n");
     cd6:	83 e4       	ldi	r24, 0x43	; 67
     cd8:	93 e0       	ldi	r25, 0x03	; 3
     cda:	09 c0       	rjmp	.+18     	; 0xcee <switch_csg+0x136>
		break;
	default:
		lcd_puts("U_B: ");
     cdc:	88 e5       	ldi	r24, 0x58	; 88
     cde:	93 e0       	ldi	r25, 0x03	; 3
     ce0:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(str_rx);
     ce4:	c8 01       	movw	r24, r16
     ce6:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts("!END       \n");
     cea:	8e e5       	ldi	r24, 0x5E	; 94
     cec:	93 e0       	ldi	r25, 0x03	; 3
     cee:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	}
}
     cf2:	a0 96       	adiw	r28, 0x20	; 32
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	08 95       	ret

00000d08 <switch_Stepper>:
	ltoa(z,Position,10);
}
// Vearbeitungs Logik

int Initialized = M_NOTI;
void 	switch_Stepper		(char * str_rx) {
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	2a 97       	sbiw	r28, 0x0a	; 10
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
	const char* pOptions[] = {
			"#", 	// 0 - Stepper Karte Befehl erkannt
			"E", 	// 1 - Error
			"!CLS", // 2 - Clear Screen
			"Test", // 3 - Test
			0 };
     d1c:	de 01       	movw	r26, r28
     d1e:	11 96       	adiw	r26, 0x01	; 1
     d20:	e2 e5       	ldi	r30, 0x52	; 82
     d22:	f7 e0       	ldi	r31, 0x07	; 7
     d24:	2a e0       	ldi	r18, 0x0A	; 10
     d26:	01 90       	ld	r0, Z+
     d28:	0d 92       	st	X+, r0
     d2a:	21 50       	subi	r18, 0x01	; 1
     d2c:	e1 f7       	brne	.-8      	; 0xd26 <switch_Stepper+0x1e>
	switch (FindStringInArray(str_rx, pOptions, 1)) {
     d2e:	be 01       	movw	r22, r28
     d30:	6f 5f       	subi	r22, 0xFF	; 255
     d32:	7f 4f       	sbci	r23, 0xFF	; 255
     d34:	41 e0       	ldi	r20, 0x01	; 1
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	0e 94 01 05 	call	0xa02	; 0xa02 <FindStringInArray>
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	91 05       	cpc	r25, r1
     d40:	79 f0       	breq	.+30     	; 0xd60 <switch_Stepper+0x58>
     d42:	82 30       	cpi	r24, 0x02	; 2
     d44:	91 05       	cpc	r25, r1
     d46:	1c f4       	brge	.+6      	; 0xd4e <switch_Stepper+0x46>
     d48:	89 2b       	or	r24, r25
     d4a:	39 f0       	breq	.+14     	; 0xd5a <switch_Stepper+0x52>
     d4c:	1c c0       	rjmp	.+56     	; 0xd86 <switch_Stepper+0x7e>
     d4e:	82 30       	cpi	r24, 0x02	; 2
     d50:	91 05       	cpc	r25, r1
     d52:	89 f0       	breq	.+34     	; 0xd76 <switch_Stepper+0x6e>
     d54:	03 97       	sbiw	r24, 0x03	; 3
     d56:	b9 f4       	brne	.+46     	; 0xd86 <switch_Stepper+0x7e>
     d58:	11 c0       	rjmp	.+34     	; 0xd7c <switch_Stepper+0x74>
	case 0:
		lcd_puts("Erfolgreich\n");
     d5a:	8b e6       	ldi	r24, 0x6B	; 107
     d5c:	93 e0       	ldi	r25, 0x03	; 3
     d5e:	10 c0       	rjmp	.+32     	; 0xd80 <switch_Stepper+0x78>
		//uart_put_string("0\n\r", D_RapidForm);
		break;
	case 1:
		lcd_puts("Error\n");
     d60:	88 e7       	ldi	r24, 0x78	; 120
     d62:	93 e0       	ldi	r25, 0x03	; 3
     d64:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string("1\r\n", D_RapidForm);
     d68:	8f e7       	ldi	r24, 0x7F	; 127
     d6a:	93 e0       	ldi	r25, 0x03	; 3
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
     d74:	10 c0       	rjmp	.+32     	; 0xd96 <inner_1536+0x8>
		break;
	case 2:
		lcd_clrscr();
     d76:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
     d7a:	0d c0       	rjmp	.+26     	; 0xd96 <inner_1536+0x8>
		break;
	case 3:
		lcd_puts("Test bestanden\n");
     d7c:	83 e8       	ldi	r24, 0x83	; 131
     d7e:	93 e0       	ldi	r25, 0x03	; 3
     d80:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
     d84:	08 c0       	rjmp	.+16     	; 0xd96 <inner_1536+0x8>
     d86:	8a e0       	ldi	r24, 0x0A	; 10
     d88:	90 e0       	ldi	r25, 0x00	; 0

00000d8a <outer_1536>:
     d8a:	a0 ed       	ldi	r26, 0xD0	; 208
     d8c:	b7 e0       	ldi	r27, 0x07	; 7

00000d8e <inner_1536>:
     d8e:	11 97       	sbiw	r26, 0x01	; 1
     d90:	f1 f7       	brne	.-4      	; 0xd8e <inner_1536>
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	d1 f7       	brne	.-12     	; 0xd8a <outer_1536>
		//lcd_puts("A: ");
		//lcd_puts(str_rx);
		//lcd_puts("!\n");
		//uart_put_string(str_rx, D_RapidForm);
	}
}
     d96:	2a 96       	adiw	r28, 0x0a	; 10
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <switch_Isel>:
void 	switch_Isel			(char * str_rx) {
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	c7 55       	subi	r28, 0x57	; 87
     dbe:	d0 40       	sbci	r29, 0x00	; 0
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	6c 01       	movw	r12, r24
			"!CLS",    	// 1 - LC-Display l�schen
			"Test", 	// 2 - Test
			"@01",  	// 3 - Achse ausw�hlen
			"@0R", 		// 4 - Status abfrage
			"@0M", 		// 5 - Gehe zu Position MX , +600
			0 };
     dcc:	de 01       	movw	r26, r28
     dce:	11 96       	adiw	r26, 0x01	; 1
     dd0:	e0 e4       	ldi	r30, 0x40	; 64
     dd2:	f7 e0       	ldi	r31, 0x07	; 7
     dd4:	8e e0       	ldi	r24, 0x0E	; 14
     dd6:	01 90       	ld	r0, Z+
     dd8:	0d 92       	st	X+, r0
     dda:	81 50       	subi	r24, 0x01	; 1
     ddc:	e1 f7       	brne	.-8      	; 0xdd6 <switch_Isel+0x2e>

	int Ret_Val = FindStringInArray(str_rx, pOptions, 3);
     dde:	c6 01       	movw	r24, r12
     de0:	be 01       	movw	r22, r28
     de2:	6f 5f       	subi	r22, 0xFF	; 255
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	43 e0       	ldi	r20, 0x03	; 3
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	0e 94 01 05 	call	0xa02	; 0xa02 <FindStringInArray>
	switch (Ret_Val) {
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	91 05       	cpc	r25, r1
     df2:	c9 f0       	breq	.+50     	; 0xe26 <switch_Isel+0x7e>
     df4:	83 30       	cpi	r24, 0x03	; 3
     df6:	91 05       	cpc	r25, r1
     df8:	34 f4       	brge	.+12     	; 0xe06 <switch_Isel+0x5e>
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	71 f0       	breq	.+28     	; 0xe1a <switch_Isel+0x72>
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	09 f0       	breq	.+2      	; 0xe04 <switch_Isel+0x5c>
     e02:	f9 c0       	rjmp	.+498    	; 0xff6 <inner_1753+0x7c>
     e04:	0d c0       	rjmp	.+26     	; 0xe20 <switch_Isel+0x78>
     e06:	84 30       	cpi	r24, 0x04	; 4
     e08:	91 05       	cpc	r25, r1
     e0a:	f9 f0       	breq	.+62     	; 0xe4a <inner_1630+0xe>
     e0c:	84 30       	cpi	r24, 0x04	; 4
     e0e:	91 05       	cpc	r25, r1
     e10:	8c f0       	brlt	.+34     	; 0xe34 <switch_Isel+0x8c>
     e12:	05 97       	sbiw	r24, 0x05	; 5
     e14:	09 f0       	breq	.+2      	; 0xe18 <switch_Isel+0x70>
     e16:	ef c0       	rjmp	.+478    	; 0xff6 <inner_1753+0x7c>
     e18:	41 c0       	rjmp	.+130    	; 0xe9c <inner_1646+0x36>
	case 0: 		// 0 - Reserve
		lcd_puts("Reserve\r\n");
     e1a:	83 e9       	ldi	r24, 0x93	; 147
     e1c:	93 e0       	ldi	r25, 0x03	; 3
     e1e:	f0 c0       	rjmp	.+480    	; 0x1000 <inner_1753+0x86>
		break;
	case 1: 		// 1 - LC-Display l�schen
		lcd_clrscr();
     e20:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
     e24:	ef c0       	rjmp	.+478    	; 0x1004 <inner_1753+0x8a>
		break;
	case 2:			// 2 - Test
		lcd_puts("Test bestanden\n");
     e26:	83 e8       	ldi	r24, 0x83	; 131
     e28:	93 e0       	ldi	r25, 0x03	; 3
     e2a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string("Test bestanden\r\n", D_RapidForm);
     e2e:	8d e9       	ldi	r24, 0x9D	; 157
     e30:	93 e0       	ldi	r25, 0x03	; 3
     e32:	dc c0       	rjmp	.+440    	; 0xfec <inner_1753+0x72>
     e34:	8a e0       	ldi	r24, 0x0A	; 10
     e36:	90 e0       	ldi	r25, 0x00	; 0

00000e38 <outer_1630>:
     e38:	a0 ed       	ldi	r26, 0xD0	; 208
     e3a:	b7 e0       	ldi	r27, 0x07	; 7

00000e3c <inner_1630>:
     e3c:	11 97       	sbiw	r26, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <inner_1630>
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	d1 f7       	brne	.-12     	; 0xe38 <outer_1630>
			s_ptr++; // Increase string pointer
		} while( pgm_read_byte( s_ptr ) != 0x00 );  // End of string
		*/

		//lcd_puts( buf );
		lcd_puts("Init");
     e44:	8e ea       	ldi	r24, 0xAE	; 174
     e46:	93 e0       	ldi	r25, 0x03	; 3
     e48:	cd c0       	rjmp	.+410    	; 0xfe4 <inner_1753+0x6a>
		//String_zerlegen_Isel(str_rx, Position);
		uart_put_string("0\r\n", D_RapidForm);
		//uart_put_string(Protokoll.Motor[M_ISEL].Befehl[0].Output, D_RapidForm);
		break;
	case 4:			// 4 - Status abfrage
		lcd_puts("Statusabfrage:     \n");
     e4a:	83 eb       	ldi	r24, 0xB3	; 179
     e4c:	93 e0       	ldi	r25, 0x03	; 3
     e4e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string("A\n", D_Stepper);
     e52:	88 ec       	ldi	r24, 0xC8	; 200
     e54:	93 e0       	ldi	r25, 0x03	; 3
     e56:	61 e0       	ldi	r22, 0x01	; 1
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
     e5e:	82 e3       	ldi	r24, 0x32	; 50
     e60:	90 e0       	ldi	r25, 0x00	; 0

00000e62 <outer_1646>:
     e62:	a0 ed       	ldi	r26, 0xD0	; 208
     e64:	b7 e0       	ldi	r27, 0x07	; 7

00000e66 <inner_1646>:
     e66:	11 97       	sbiw	r26, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <inner_1646>
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	d1 f7       	brne	.-12     	; 0xe62 <outer_1646>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
     e6e:	80 91 c8 00 	lds	r24, 0x00C8
     e72:	87 ff       	sbrs	r24, 7
     e74:	04 c0       	rjmp	.+8      	; 0xe7e <inner_1646+0x18>
			uart_rx(D_Stepper);
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_rx>
		if (!strcmp(str_rx,"0#"))
     e7e:	c6 01       	movw	r24, r12
     e80:	6b ec       	ldi	r22, 0xCB	; 203
     e82:	73 e0       	ldi	r23, 0x03	; 3
     e84:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <strcmp>
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	09 f4       	brne	.+2      	; 0xe8e <inner_1646+0x28>
     e8c:	ad c0       	rjmp	.+346    	; 0xfe8 <inner_1753+0x6e>
			uart_put_string("0\r\n", D_RapidForm);
		else {
			lcd_puts("Fehlgeschlagen     \n");
     e8e:	8e ec       	ldi	r24, 0xCE	; 206
     e90:	93 e0       	ldi	r25, 0x03	; 3
     e92:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
			uart_put_string("-1\r\n", D_RapidForm);
     e96:	83 ee       	ldi	r24, 0xE3	; 227
     e98:	93 e0       	ldi	r25, 0x03	; 3
     e9a:	a8 c0       	rjmp	.+336    	; 0xfec <inner_1753+0x72>
     e9c:	8a e0       	ldi	r24, 0x0A	; 10
     e9e:	90 e0       	ldi	r25, 0x00	; 0

00000ea0 <outer_1675>:
     ea0:	a0 ed       	ldi	r26, 0xD0	; 208
     ea2:	b7 e0       	ldi	r27, 0x07	; 7

00000ea4 <inner_1675>:
     ea4:	11 97       	sbiw	r26, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <inner_1675>
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	d1 f7       	brne	.-12     	; 0xea0 <outer_1675>
		}
		break;
	case 5:			// 5 - Gehe zu Position MX , +600
		ms_spin(10);
		char Position[33];
		memset(Position, '\0', 33);
     eac:	2f e0       	ldi	r18, 0x0F	; 15
     eae:	e2 2e       	mov	r14, r18
     eb0:	f1 2c       	mov	r15, r1
     eb2:	ec 0e       	add	r14, r28
     eb4:	fd 1e       	adc	r15, r29
     eb6:	81 e2       	ldi	r24, 0x21	; 33
     eb8:	f7 01       	movw	r30, r14
     eba:	11 92       	st	Z+, r1
     ebc:	8a 95       	dec	r24
     ebe:	e9 f7       	brne	.-6      	; 0xeba <inner_1675+0x16>
		String_zerlegen_Isel(str_rx, Position);
     ec0:	c6 01       	movw	r24, r12
     ec2:	b7 01       	movw	r22, r14
     ec4:	0e 94 98 04 	call	0x930	; 0x930 <String_zerlegen_Isel>
		char Move_To[40];
		memset(Move_To,  '\0', 40);
     ec8:	8e 01       	movw	r16, r28
     eca:	00 5d       	subi	r16, 0xD0	; 208
     ecc:	1f 4f       	sbci	r17, 0xFF	; 255
     ece:	88 e2       	ldi	r24, 0x28	; 40
     ed0:	f8 01       	movw	r30, r16
     ed2:	11 92       	st	Z+, r1
     ed4:	8a 95       	dec	r24
     ed6:	e9 f7       	brne	.-6      	; 0xed2 <inner_1675+0x2e>
		Move_To[0] = 'M';
     ed8:	8d e4       	ldi	r24, 0x4D	; 77
     eda:	88 ab       	std	Y+48, r24	; 0x30
		Move_To[1] = 'A';
     edc:	81 e4       	ldi	r24, 0x41	; 65
     ede:	89 ab       	std	Y+49, r24	; 0x31
		Move_To[2] = ' ';
     ee0:	80 e2       	ldi	r24, 0x20	; 32
     ee2:	8a ab       	std	Y+50, r24	; 0x32
		Move_To[3] = '\0';
     ee4:	1b aa       	std	Y+51, r1	; 0x33
		strcat(Move_To, Position);
     ee6:	c8 01       	movw	r24, r16
     ee8:	b7 01       	movw	r22, r14
     eea:	0e 94 65 0d 	call	0x1aca	; 0x1aca <strcat>
		strcat(Move_To, "\n");
     eee:	c8 01       	movw	r24, r16
     ef0:	68 eb       	ldi	r22, 0xB8	; 184
     ef2:	71 e0       	ldi	r23, 0x01	; 1
     ef4:	0e 94 65 0d 	call	0x1aca	; 0x1aca <strcat>
		lcd_puts("Pos:");
     ef8:	88 ee       	ldi	r24, 0xE8	; 232
     efa:	93 e0       	ldi	r25, 0x03	; 3
     efc:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(Move_To);
     f00:	c8 01       	movw	r24, r16
     f02:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>

		uart_put_string(Move_To, D_Stepper);
     f06:	c8 01       	movw	r24, r16
     f08:	61 e0       	ldi	r22, 0x01	; 1
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
     f10:	02 e3       	ldi	r16, 0x32	; 50
     f12:	10 e0       	ldi	r17, 0x00	; 0
     f14:	f8 01       	movw	r30, r16

00000f16 <outer_1715>:
     f16:	a0 ed       	ldi	r26, 0xD0	; 208
     f18:	b7 e0       	ldi	r27, 0x07	; 7

00000f1a <inner_1715>:
     f1a:	11 97       	sbiw	r26, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <inner_1715>
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	d1 f7       	brne	.-12     	; 0xf16 <outer_1715>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
     f22:	80 91 c8 00 	lds	r24, 0x00C8
     f26:	87 ff       	sbrs	r24, 7
     f28:	6d c0       	rjmp	.+218    	; 0x1004 <inner_1753+0x8a>
			uart_rx(D_Stepper);
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_rx>
		else {
			//lcd_puts("Befehl n. bestaetig\n");
			break;
		}

		uart_put_string("A\n", D_Stepper);
     f32:	88 ec       	ldi	r24, 0xC8	; 200
     f34:	93 e0       	ldi	r25, 0x03	; 3
     f36:	61 e0       	ldi	r22, 0x01	; 1
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
     f3e:	f8 01       	movw	r30, r16

00000f40 <outer_1729>:
     f40:	a0 ed       	ldi	r26, 0xD0	; 208
     f42:	b7 e0       	ldi	r27, 0x07	; 7

00000f44 <inner_1729>:
     f44:	11 97       	sbiw	r26, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <inner_1729>
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	d1 f7       	brne	.-12     	; 0xf40 <outer_1729>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
     f4c:	80 91 c8 00 	lds	r24, 0x00C8
     f50:	87 ff       	sbrs	r24, 7
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <inner_1729+0x1a>
			uart_rx(D_Stepper);
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_rx>
     f5c:	2c c0       	rjmp	.+88     	; 0xfb6 <inner_1753+0x3c>
		else {
			lcd_puts("Keine Bewegung!\n");
     f5e:	8d ee       	ldi	r24, 0xED	; 237
     f60:	93 e0       	ldi	r25, 0x03	; 3
     f62:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
     f66:	27 c0       	rjmp	.+78     	; 0xfb6 <inner_1753+0x3c>
		}

		while (!strcmp(str_rx,"1#")){
			uart_put_string("A\n", D_Stepper);
     f68:	88 ec       	ldi	r24, 0xC8	; 200
     f6a:	93 e0       	ldi	r25, 0x03	; 3
     f6c:	61 e0       	ldi	r22, 0x01	; 1
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
     f74:	f7 01       	movw	r30, r14

00000f76 <outer_1753>:
     f76:	a0 ed       	ldi	r26, 0xD0	; 208
     f78:	b7 e0       	ldi	r27, 0x07	; 7

00000f7a <inner_1753>:
     f7a:	11 97       	sbiw	r26, 0x01	; 1
     f7c:	f1 f7       	brne	.-4      	; 0xf7a <inner_1753>
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	d1 f7       	brne	.-12     	; 0xf76 <outer_1753>
			ms_spin(50);
			if ((UCSR1A & (1 << RXC1))){
     f82:	80 91 c8 00 	lds	r24, 0x00C8
     f86:	87 ff       	sbrs	r24, 7
     f88:	10 c0       	rjmp	.+32     	; 0xfaa <inner_1753+0x30>
				uart_rx(D_Stepper);
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_rx>
				lcd_clrscr();
     f92:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
				lcd_puts("running to\n");
     f96:	8e ef       	ldi	r24, 0xFE	; 254
     f98:	93 e0       	ldi	r25, 0x03	; 3
     f9a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
				lcd_puts("Position: ");
     f9e:	8a e0       	ldi	r24, 0x0A	; 10
     fa0:	94 e0       	ldi	r25, 0x04	; 4
     fa2:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
				lcd_puts(Position);
     fa6:	c8 01       	movw	r24, r16
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <inner_1753+0x34>
			}
			else {
				lcd_puts("Keine Antwort\n");
     faa:	85 e1       	ldi	r24, 0x15	; 21
     fac:	94 e0       	ldi	r25, 0x04	; 4
     fae:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
			}
			wdt_reset();
     fb2:	a8 95       	wdr
     fb4:	06 c0       	rjmp	.+12     	; 0xfc2 <inner_1753+0x48>
     fb6:	92 e3       	ldi	r25, 0x32	; 50
     fb8:	e9 2e       	mov	r14, r25
     fba:	f1 2c       	mov	r15, r1
			if ((UCSR1A & (1 << RXC1))){
				uart_rx(D_Stepper);
				lcd_clrscr();
				lcd_puts("running to\n");
				lcd_puts("Position: ");
				lcd_puts(Position);
     fbc:	8e 01       	movw	r16, r28
     fbe:	01 5f       	subi	r16, 0xF1	; 241
     fc0:	1f 4f       	sbci	r17, 0xFF	; 255
			uart_rx(D_Stepper);
		else {
			lcd_puts("Keine Bewegung!\n");
		}

		while (!strcmp(str_rx,"1#")){
     fc2:	c6 01       	movw	r24, r12
     fc4:	64 e2       	ldi	r22, 0x24	; 36
     fc6:	74 e0       	ldi	r23, 0x04	; 4
     fc8:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <strcmp>
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	61 f2       	breq	.-104    	; 0xf68 <inner_1729+0x24>
			else {
				lcd_puts("Keine Antwort\n");
			}
			wdt_reset();
		}
		lcd_puts("Position: \n");
     fd0:	87 e2       	ldi	r24, 0x27	; 39
     fd2:	94 e0       	ldi	r25, 0x04	; 4
     fd4:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(Position);
     fd8:	ce 01       	movw	r24, r28
     fda:	0f 96       	adiw	r24, 0x0f	; 15
     fdc:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(" Erreicht\n");
     fe0:	83 e3       	ldi	r24, 0x33	; 51
     fe2:	94 e0       	ldi	r25, 0x04	; 4
     fe4:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string("0\r\n", D_RapidForm);
     fe8:	84 ed       	ldi	r24, 0xD4	; 212
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
     ff4:	07 c0       	rjmp	.+14     	; 0x1004 <inner_1753+0x8a>
		break;
	default:
		lcd_puts("ISEL:    \n");
     ff6:	8e e3       	ldi	r24, 0x3E	; 62
     ff8:	94 e0       	ldi	r25, 0x04	; 4
     ffa:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(str_rx);
     ffe:	c6 01       	movw	r24, r12
    1000:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	}
}
    1004:	c9 5a       	subi	r28, 0xA9	; 169
    1006:	df 4f       	sbci	r29, 0xFF	; 255
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	ef 90       	pop	r14
    101e:	df 90       	pop	r13
    1020:	cf 90       	pop	r12
    1022:	08 95       	ret

00001024 <uart_rx>:
		break;
	default:
		return M_UNK;
	}
}
void 	uart_rx				(int dir) {
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	8c 01       	movw	r16, r24
	uart_get_string(str_rx, dir);
    102a:	8a e6       	ldi	r24, 0x6A	; 106
    102c:	97 e0       	ldi	r25, 0x07	; 7
    102e:	b8 01       	movw	r22, r16
    1030:	0e 94 c7 02 	call	0x58e	; 0x58e <uart_get_string>
	if (dir == D_Stepper)
    1034:	01 30       	cpi	r16, 0x01	; 1
    1036:	11 05       	cpc	r17, r1
    1038:	29 f4       	brne	.+10     	; 0x1044 <uart_rx+0x20>
		switch_Stepper(str_rx);
    103a:	8a e6       	ldi	r24, 0x6A	; 106
    103c:	97 e0       	ldi	r25, 0x07	; 7
    103e:	0e 94 84 06 	call	0xd08	; 0xd08 <switch_Stepper>
    1042:	48 c0       	rjmp	.+144    	; 0x10d4 <uart_rx+0xb0>
	else{
		if(Initialized == M_UNK){
    1044:	80 91 7c 06 	lds	r24, 0x067C
    1048:	90 91 7d 06 	lds	r25, 0x067D
    104c:	8e 5f       	subi	r24, 0xFE	; 254
    104e:	9f 4f       	sbci	r25, 0xFF	; 255
    1050:	51 f4       	brne	.+20     	; 0x1066 <uart_rx+0x42>
			lcd_puts("Unbekannter Motor!\n");
    1052:	89 e4       	ldi	r24, 0x49	; 73
    1054:	94 e0       	ldi	r25, 0x04	; 4
    1056:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
			//lcd_puts(str_rx);
			Initialized = M_NOTI;
    105a:	8f ef       	ldi	r24, 0xFF	; 255
    105c:	9f ef       	ldi	r25, 0xFF	; 255
    105e:	90 93 7d 06 	sts	0x067D, r25
    1062:	80 93 7c 06 	sts	0x067C, r24
		}
		if(Initialized == M_NOTI){
    1066:	80 91 7c 06 	lds	r24, 0x067C
    106a:	90 91 7d 06 	lds	r25, 0x067D
    106e:	8f 5f       	subi	r24, 0xFF	; 255
    1070:	9f 4f       	sbci	r25, 0xFF	; 255
    1072:	41 f4       	brne	.+16     	; 0x1084 <uart_rx+0x60>
			Initialized = switch_Motor(str_rx);
    1074:	8a e6       	ldi	r24, 0x6A	; 106
    1076:	97 e0       	ldi	r25, 0x07	; 7
    1078:	0e 94 2a 05 	call	0xa54	; 0xa54 <switch_Motor>
    107c:	90 93 7d 06 	sts	0x067D, r25
    1080:	80 93 7c 06 	sts	0x067C, r24
		}
		if(Initialized == M_ISEL)
    1084:	80 91 7c 06 	lds	r24, 0x067C
    1088:	90 91 7d 06 	lds	r25, 0x067D
    108c:	89 2b       	or	r24, r25
    108e:	21 f4       	brne	.+8      	; 0x1098 <uart_rx+0x74>
			switch_Isel(str_rx);
    1090:	8a e6       	ldi	r24, 0x6A	; 106
    1092:	97 e0       	ldi	r25, 0x07	; 7
    1094:	0e 94 d4 06 	call	0xda8	; 0xda8 <switch_Isel>
		if(Initialized == M_CSG)
    1098:	80 91 7c 06 	lds	r24, 0x067C
    109c:	90 91 7d 06 	lds	r25, 0x067D
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	21 f4       	brne	.+8      	; 0x10ac <uart_rx+0x88>
			switch_csg(str_rx);
    10a4:	8a e6       	ldi	r24, 0x6A	; 106
    10a6:	97 e0       	ldi	r25, 0x07	; 7
    10a8:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <switch_csg>
		if(Initialized == M_ZETA)
    10ac:	80 91 7c 06 	lds	r24, 0x067C
    10b0:	90 91 7d 06 	lds	r25, 0x067D
    10b4:	02 97       	sbiw	r24, 0x02	; 2
    10b6:	21 f4       	brne	.+8      	; 0x10c0 <uart_rx+0x9c>
			switch_Zeta(str_rx);
    10b8:	8a e6       	ldi	r24, 0x6A	; 106
    10ba:	97 e0       	ldi	r25, 0x07	; 7
    10bc:	0e 94 6d 08 	call	0x10da	; 0x10da <switch_Zeta>
		if(Initialized == M_TERMINAL)
    10c0:	80 91 7c 06 	lds	r24, 0x067C
    10c4:	90 91 7d 06 	lds	r25, 0x067D
    10c8:	03 97       	sbiw	r24, 0x03	; 3
    10ca:	21 f4       	brne	.+8      	; 0x10d4 <uart_rx+0xb0>
			switch_Terminal(str_rx);
    10cc:	8a e6       	ldi	r24, 0x6A	; 106
    10ce:	97 e0       	ldi	r25, 0x07	; 7
    10d0:	0e 94 6b 05 	call	0xad6	; 0xad6 <switch_Terminal>
	}
}
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	08 95       	ret

000010da <switch_Zeta>:
		lcd_puts("U_B: ");
		lcd_puts(str_rx);
		lcd_puts("!END       \n");
	}
}
void 	switch_Zeta			(char * str_rx) {
    10da:	af 92       	push	r10
    10dc:	bf 92       	push	r11
    10de:	cf 92       	push	r12
    10e0:	df 92       	push	r13
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	c3 56       	subi	r28, 0x63	; 99
    10f4:	d0 40       	sbci	r29, 0x00	; 0
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	7c 01       	movw	r14, r24
			"D1125",// 7 - Position
			"A8", 	// 8 - Accelartion 8
			"V8",	// 9 - Velocity 8
			"ECHO0",// 10 - Echo abschalten
			"PSET0",// 11 - Ursprung setzen
			0 };
    1102:	de 01       	movw	r26, r28
    1104:	11 96       	adiw	r26, 0x01	; 1
    1106:	eb ee       	ldi	r30, 0xEB	; 235
    1108:	f6 e0       	ldi	r31, 0x06	; 6
    110a:	8a e1       	ldi	r24, 0x1A	; 26
    110c:	01 90       	ld	r0, Z+
    110e:	0d 92       	st	X+, r0
    1110:	81 50       	subi	r24, 0x01	; 1
    1112:	e1 f7       	brne	.-8      	; 0x110c <switch_Zeta+0x32>
	char Position[33];
	char Move_To[40];
	memset(Move_To,  '\0', 40);
    1114:	8e 01       	movw	r16, r28
    1116:	04 5c       	subi	r16, 0xC4	; 196
    1118:	1f 4f       	sbci	r17, 0xFF	; 255
    111a:	88 e2       	ldi	r24, 0x28	; 40
    111c:	d8 01       	movw	r26, r16
    111e:	1d 92       	st	X+, r1
    1120:	8a 95       	dec	r24
    1122:	e9 f7       	brne	.-6      	; 0x111e <switch_Zeta+0x44>
	Move_To[0] = 'M';
    1124:	8d e4       	ldi	r24, 0x4D	; 77
    1126:	8c af       	std	Y+60, r24	; 0x3c
	Move_To[1] = 'A';
    1128:	81 e4       	ldi	r24, 0x41	; 65
    112a:	8d af       	std	Y+61, r24	; 0x3d
	Move_To[2] = ' ';
    112c:	80 e2       	ldi	r24, 0x20	; 32
    112e:	8e af       	std	Y+62, r24	; 0x3e
	Move_To[3] = '\0';
    1130:	1f ae       	std	Y+63, r1	; 0x3f
	switch (FindStringInArray(str_rx, pOptions, 1)) {
    1132:	c7 01       	movw	r24, r14
    1134:	be 01       	movw	r22, r28
    1136:	6f 5f       	subi	r22, 0xFF	; 255
    1138:	7f 4f       	sbci	r23, 0xFF	; 255
    113a:	41 e0       	ldi	r20, 0x01	; 1
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	0e 94 01 05 	call	0xa02	; 0xa02 <FindStringInArray>
    1142:	87 30       	cpi	r24, 0x07	; 7
    1144:	91 05       	cpc	r25, r1
    1146:	6c f4       	brge	.+26     	; 0x1162 <switch_Zeta+0x88>
    1148:	83 30       	cpi	r24, 0x03	; 3
    114a:	91 05       	cpc	r25, r1
    114c:	0c f0       	brlt	.+2      	; 0x1150 <switch_Zeta+0x76>
    114e:	ea c0       	rjmp	.+468    	; 0x1324 <inner_2109+0xaa>
    1150:	81 30       	cpi	r24, 0x01	; 1
    1152:	91 05       	cpc	r25, r1
    1154:	c1 f0       	breq	.+48     	; 0x1186 <switch_Zeta+0xac>
    1156:	82 30       	cpi	r24, 0x02	; 2
    1158:	91 05       	cpc	r25, r1
    115a:	c4 f4       	brge	.+48     	; 0x118c <switch_Zeta+0xb2>
    115c:	89 2b       	or	r24, r25
    115e:	81 f0       	breq	.+32     	; 0x1180 <switch_Zeta+0xa6>
    1160:	d6 c0       	rjmp	.+428    	; 0x130e <inner_2109+0x94>
    1162:	8a 30       	cpi	r24, 0x0A	; 10
    1164:	91 05       	cpc	r25, r1
    1166:	24 f4       	brge	.+8      	; 0x1170 <switch_Zeta+0x96>
    1168:	08 97       	sbiw	r24, 0x08	; 8
    116a:	0c f0       	brlt	.+2      	; 0x116e <switch_Zeta+0x94>
    116c:	db c0       	rjmp	.+438    	; 0x1324 <inner_2109+0xaa>
    116e:	bd c0       	rjmp	.+378    	; 0x12ea <inner_2109+0x70>
    1170:	8a 30       	cpi	r24, 0x0A	; 10
    1172:	91 05       	cpc	r25, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <switch_Zeta+0x9e>
    1176:	c4 c0       	rjmp	.+392    	; 0x1300 <inner_2109+0x86>
    1178:	0b 97       	sbiw	r24, 0x0b	; 11
    117a:	09 f0       	breq	.+2      	; 0x117e <switch_Zeta+0xa4>
    117c:	c8 c0       	rjmp	.+400    	; 0x130e <inner_2109+0x94>
    117e:	d2 c0       	rjmp	.+420    	; 0x1324 <inner_2109+0xaa>
	case 0: // Display l�schen
		lcd_clrscr();
    1180:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
    1184:	cf c0       	rjmp	.+414    	; 0x1324 <inner_2109+0xaa>
		break;
	case 1: // Interner Test
		lcd_puts("Test bestanden     \n");
    1186:	8d eb       	ldi	r24, 0xBD	; 189
    1188:	92 e0       	ldi	r25, 0x02	; 2
    118a:	ca c0       	rjmp	.+404    	; 0x1320 <inner_2109+0xa6>
    118c:	84 e6       	ldi	r24, 0x64	; 100
    118e:	90 e0       	ldi	r25, 0x00	; 0

00001190 <outer_2015>:
    1190:	a0 ed       	ldi	r26, 0xD0	; 208
    1192:	b7 e0       	ldi	r27, 0x07	; 7

00001194 <inner_2015>:
    1194:	11 97       	sbiw	r26, 0x01	; 1
    1196:	f1 f7       	brne	.-4      	; 0x1194 <inner_2015>
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	d1 f7       	brne	.-12     	; 0x1190 <outer_2015>
		break;
	case 2: // Go
		ms_spin(100);
		strcat(Move_To, Position);
    119c:	c8 01       	movw	r24, r16
    119e:	be 01       	movw	r22, r28
    11a0:	65 5e       	subi	r22, 0xE5	; 229
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	0e 94 65 0d 	call	0x1aca	; 0x1aca <strcat>
		strcat(Move_To, "\n");
    11a8:	c8 01       	movw	r24, r16
    11aa:	68 eb       	ldi	r22, 0xB8	; 184
    11ac:	71 e0       	ldi	r23, 0x01	; 1
    11ae:	0e 94 65 0d 	call	0x1aca	; 0x1aca <strcat>
		//lcd_puts("Pos:");
		//lcd_puts(Move_To);

		uart_put_string(Move_To, D_Stepper);
    11b2:	c8 01       	movw	r24, r16
    11b4:	61 e0       	ldi	r22, 0x01	; 1
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
    11bc:	02 e3       	ldi	r16, 0x32	; 50
    11be:	10 e0       	ldi	r17, 0x00	; 0
    11c0:	f8 01       	movw	r30, r16

000011c2 <outer_2032>:
    11c2:	a0 ed       	ldi	r26, 0xD0	; 208
    11c4:	b7 e0       	ldi	r27, 0x07	; 7

000011c6 <inner_2032>:
    11c6:	11 97       	sbiw	r26, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <inner_2032>
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	d1 f7       	brne	.-12     	; 0x11c2 <outer_2032>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    11ce:	80 91 c8 00 	lds	r24, 0x00C8
    11d2:	87 ff       	sbrs	r24, 7
    11d4:	16 c0       	rjmp	.+44     	; 0x1202 <inner_2046+0x12>
			uart_rx(D_Stepper);
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_rx>
		else {
			lcd_puts("Befehl n. bestaetig\n");
			break;
		}

		uart_put_string("A\n", D_Stepper);
    11de:	88 ec       	ldi	r24, 0xC8	; 200
    11e0:	93 e0       	ldi	r25, 0x03	; 3
    11e2:	61 e0       	ldi	r22, 0x01	; 1
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
    11ea:	f8 01       	movw	r30, r16

000011ec <outer_2046>:
    11ec:	a0 ed       	ldi	r26, 0xD0	; 208
    11ee:	b7 e0       	ldi	r27, 0x07	; 7

000011f0 <inner_2046>:
    11f0:	11 97       	sbiw	r26, 0x01	; 1
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <inner_2046>
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	d1 f7       	brne	.-12     	; 0x11ec <outer_2046>
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
    11f8:	80 91 c8 00 	lds	r24, 0x00C8
    11fc:	88 23       	and	r24, r24
    11fe:	4c f4       	brge	.+18     	; 0x1212 <inner_2046+0x22>
    1200:	03 c0       	rjmp	.+6      	; 0x1208 <inner_2046+0x18>
		uart_put_string(Move_To, D_Stepper);
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
			uart_rx(D_Stepper);
		else {
			lcd_puts("Befehl n. bestaetig\n");
    1202:	8d e5       	ldi	r24, 0x5D	; 93
    1204:	94 e0       	ldi	r25, 0x04	; 4
    1206:	8c c0       	rjmp	.+280    	; 0x1320 <inner_2109+0xa6>
		}

		uart_put_string("A\n", D_Stepper);
		ms_spin(50);
		if ((UCSR1A & (1 << RXC1)))
			uart_rx(D_Stepper);
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_rx>
    1210:	4c c0       	rjmp	.+152    	; 0x12aa <inner_2109+0x30>
		else {
			lcd_puts("Keine Bewegung!\n");
    1212:	8d ee       	ldi	r24, 0xED	; 237
    1214:	93 e0       	ldi	r25, 0x03	; 3
    1216:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
    121a:	47 c0       	rjmp	.+142    	; 0x12aa <inner_2109+0x30>
		}

		while (!strcmp(str_rx,"1#")){
			uart_put_string("W\n", D_Stepper);
    121c:	82 e7       	ldi	r24, 0x72	; 114
    121e:	94 e0       	ldi	r25, 0x04	; 4
    1220:	61 e0       	ldi	r22, 0x01	; 1
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
    1228:	f5 01       	movw	r30, r10

0000122a <outer_2080>:
    122a:	a0 ed       	ldi	r26, 0xD0	; 208
    122c:	b7 e0       	ldi	r27, 0x07	; 7

0000122e <inner_2080>:
    122e:	11 97       	sbiw	r26, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <inner_2080>
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	d1 f7       	brne	.-12     	; 0x122a <outer_2080>
			ms_spin(100);
			if ((UCSR1A & (1 << RXC1))){
    1236:	80 91 c8 00 	lds	r24, 0x00C8
    123a:	87 ff       	sbrs	r24, 7
    123c:	10 c0       	rjmp	.+32     	; 0x125e <inner_2080+0x30>
				uart_rx(D_Stepper);
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_rx>
				lcd_clrscr();
    1246:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
				lcd_puts("Position(Akt/Ges): \n");
    124a:	85 e7       	ldi	r24, 0x75	; 117
    124c:	94 e0       	ldi	r25, 0x04	; 4
    124e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
				lcd_puts(str_rx);
    1252:	c7 01       	movw	r24, r14
    1254:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
				lcd_puts(" / ");
    1258:	8a e8       	ldi	r24, 0x8A	; 138
    125a:	94 e0       	ldi	r25, 0x04	; 4
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <inner_2080+0x34>
			}
			else {
				lcd_puts("Keine Antwort\n");
    125e:	85 e1       	ldi	r24, 0x15	; 21
    1260:	94 e0       	ldi	r25, 0x04	; 4
    1262:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
			}
			wdt_reset();
    1266:	a8 95       	wdr

			uart_put_string("A\n", D_Stepper);
    1268:	88 ec       	ldi	r24, 0xC8	; 200
    126a:	93 e0       	ldi	r25, 0x03	; 3
    126c:	61 e0       	ldi	r22, 0x01	; 1
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
    1274:	f6 01       	movw	r30, r12

00001276 <outer_2109>:
    1276:	a0 ed       	ldi	r26, 0xD0	; 208
    1278:	b7 e0       	ldi	r27, 0x07	; 7

0000127a <inner_2109>:
    127a:	11 97       	sbiw	r26, 0x01	; 1
    127c:	f1 f7       	brne	.-4      	; 0x127a <inner_2109>
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	d1 f7       	brne	.-12     	; 0x1276 <outer_2109>
			ms_spin(50);
			if ((UCSR1A & (1 << RXC1))){
    1282:	80 91 c8 00 	lds	r24, 0x00C8
    1286:	87 ff       	sbrs	r24, 7
    1288:	0a c0       	rjmp	.+20     	; 0x129e <inner_2109+0x24>
				uart_rx(D_Stepper);
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_rx>
				//lcd_clrscr();
				//lcd_puts("running to\n");
				//lcd_puts("Position: ");
				lcd_puts(Position);
    1292:	c8 01       	movw	r24, r16
    1294:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
				lcd_puts("\n");
    1298:	88 eb       	ldi	r24, 0xB8	; 184
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <inner_2109+0x28>
			}
			else {
				lcd_puts("Keine Antwort\n");
    129e:	85 e1       	ldi	r24, 0x15	; 21
    12a0:	94 e0       	ldi	r25, 0x04	; 4
    12a2:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
			}
			wdt_reset();
    12a6:	a8 95       	wdr
    12a8:	09 c0       	rjmp	.+18     	; 0x12bc <inner_2109+0x42>
    12aa:	44 e6       	ldi	r20, 0x64	; 100
    12ac:	a4 2e       	mov	r10, r20
    12ae:	b1 2c       	mov	r11, r1
    12b0:	32 e3       	ldi	r19, 0x32	; 50
    12b2:	c3 2e       	mov	r12, r19
    12b4:	d1 2c       	mov	r13, r1
			if ((UCSR1A & (1 << RXC1))){
				uart_rx(D_Stepper);
				//lcd_clrscr();
				//lcd_puts("running to\n");
				//lcd_puts("Position: ");
				lcd_puts(Position);
    12b6:	8e 01       	movw	r16, r28
    12b8:	05 5e       	subi	r16, 0xE5	; 229
    12ba:	1f 4f       	sbci	r17, 0xFF	; 255
			uart_rx(D_Stepper);
		else {
			lcd_puts("Keine Bewegung!\n");
		}

		while (!strcmp(str_rx,"1#")){
    12bc:	c7 01       	movw	r24, r14
    12be:	64 e2       	ldi	r22, 0x24	; 36
    12c0:	74 e0       	ldi	r23, 0x04	; 4
    12c2:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <strcmp>
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	09 f4       	brne	.+2      	; 0x12cc <inner_2109+0x52>
    12ca:	a8 cf       	rjmp	.-176    	; 0x121c <inner_2046+0x2c>
			else {
				lcd_puts("Keine Antwort\n");
			}
			wdt_reset();
		}
		lcd_puts("Position: \n");
    12cc:	87 e2       	ldi	r24, 0x27	; 39
    12ce:	94 e0       	ldi	r25, 0x04	; 4
    12d0:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(Position);
    12d4:	ce 01       	movw	r24, r28
    12d6:	4b 96       	adiw	r24, 0x1b	; 27
    12d8:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(" Erreicht\n");
    12dc:	83 e3       	ldi	r24, 0x33	; 51
    12de:	94 e0       	ldi	r25, 0x04	; 4
    12e0:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		uart_put_string("\r\n>\040\r\n>\040\r\n>\040\r\n>\040", D_RapidForm);
    12e4:	8e e8       	ldi	r24, 0x8E	; 142
    12e6:	94 e0       	ldi	r25, 0x04	; 4
    12e8:	0d c0       	rjmp	.+26     	; 0x1304 <inner_2109+0x8a>
		break;
	case 6:
		//lcd_puts("MA1 empfangen     \n");
		break;
	case 7: // Position Setzen
		memset(Position, '\0', 33);			// Array mit Nullen bef�llen
    12ea:	fe 01       	movw	r30, r28
    12ec:	7b 96       	adiw	r30, 0x1b	; 27
    12ee:	81 e2       	ldi	r24, 0x21	; 33
    12f0:	df 01       	movw	r26, r30
    12f2:	1d 92       	st	X+, r1
    12f4:	8a 95       	dec	r24
    12f6:	e9 f7       	brne	.-6      	; 0x12f2 <inner_2109+0x78>
		Position_Zeta(Position);
    12f8:	cf 01       	movw	r24, r30
    12fa:	0e 94 63 04 	call	0x8c6	; 0x8c6 <Position_Zeta>
    12fe:	12 c0       	rjmp	.+36     	; 0x1324 <inner_2109+0xaa>
		//lcd_puts("Speed set");
		break;
	case 10:
		//lcd_puts("Echo off           \n");
		//uart_put_string(str_rx, D_RapidForm);
		uart_put_string("ECHO0\r", D_RapidForm);
    1300:	8f e9       	ldi	r24, 0x9F	; 159
    1302:	94 e0       	ldi	r25, 0x04	; 4
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
    130c:	0b c0       	rjmp	.+22     	; 0x1324 <inner_2109+0xaa>
		break;
	case 11:
		break;
	default:
		lcd_puts("Z:");
    130e:	86 ea       	ldi	r24, 0xA6	; 166
    1310:	94 e0       	ldi	r25, 0x04	; 4
    1312:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts(str_rx);
    1316:	c7 01       	movw	r24, r14
    1318:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		lcd_puts("       \n");
    131c:	81 ee       	ldi	r24, 0xE1	; 225
    131e:	92 e0       	ldi	r25, 0x02	; 2
    1320:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
		//Initialized = switch_Inputs(str_rx);
	}
}
    1324:	cd 59       	subi	r28, 0x9D	; 157
    1326:	df 4f       	sbci	r29, 0xFF	; 255
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	1f 91       	pop	r17
    1338:	0f 91       	pop	r16
    133a:	ff 90       	pop	r15
    133c:	ef 90       	pop	r14
    133e:	df 90       	pop	r13
    1340:	cf 90       	pop	r12
    1342:	bf 90       	pop	r11
    1344:	af 90       	pop	r10
    1346:	08 95       	ret

00001348 <menu_puts>:
	lcd_puts("Selected: ");
	lcd_puts(name);

	ms_spin(750);
}
void 	menu_puts			(void *arg, char *name) {
    1348:	0f 93       	push	r16
    134a:	1f 93       	push	r17
    134c:	8c 01       	movw	r16, r24
	//my_select(arg, name);
	uart_put_string(arg, D_Stepper);
    134e:	61 e0       	ldi	r22, 0x01	; 1
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
	lcd_clrscr();
    1356:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
	lcd_puts("Send: ");
    135a:	89 ea       	ldi	r24, 0xA9	; 169
    135c:	94 e0       	ldi	r25, 0x04	; 4
    135e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts(arg);
    1362:	c8 01       	movw	r24, r16
    1364:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	lcd_puts("\n");
    1368:	88 eb       	ldi	r24, 0xB8	; 184
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
    1370:	84 e6       	ldi	r24, 0x64	; 100
    1372:	90 e0       	ldi	r25, 0x00	; 0

00001374 <outer_2234>:
    1374:	a0 ed       	ldi	r26, 0xD0	; 208
    1376:	b7 e0       	ldi	r27, 0x07	; 7

00001378 <inner_2234>:
    1378:	11 97       	sbiw	r26, 0x01	; 1
    137a:	f1 f7       	brne	.-4      	; 0x1378 <inner_2234>
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	d1 f7       	brne	.-12     	; 0x1374 <outer_2234>
	ms_spin(100);
	//if ((UCSR1A & (1 << RXC1)))
	uart_rx(D_Stepper);
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_rx>
    1388:	88 ee       	ldi	r24, 0xE8	; 232
    138a:	93 e0       	ldi	r25, 0x03	; 3

0000138c <outer_2242>:
    138c:	a0 ed       	ldi	r26, 0xD0	; 208
    138e:	b7 e0       	ldi	r27, 0x07	; 7

00001390 <inner_2242>:
    1390:	11 97       	sbiw	r26, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <inner_2242>
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	d1 f7       	brne	.-12     	; 0x138c <outer_2242>
	ms_spin(1000);
}
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	08 95       	ret

0000139e <main>:
//
//      Hauptschleife
//
//////////////////////////////
int main(void) {
	init();
    139e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <init>
	while (1) {
		wdt_reset();
    13a2:	a8 95       	wdr
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    13a4:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    13a6:	90 91 ce 07 	lds	r25, 0x07CE
    13aa:	91 70       	andi	r25, 0x01	; 1
  key_press ^= key_mask;                          // clear key(s)
    13ac:	80 91 ce 07 	lds	r24, 0x07CE
    13b0:	89 27       	eor	r24, r25
    13b2:	80 93 ce 07 	sts	0x07CE, r24
  sei();
    13b6:	78 94       	sei
		if (get_key_press(1 << KEY0) || get_key_rpt(1 << KEY0))
    13b8:	99 23       	and	r25, r25
    13ba:	61 f4       	brne	.+24     	; 0x13d4 <main+0x36>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    13bc:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    13be:	90 91 69 07 	lds	r25, 0x0769
    13c2:	91 70       	andi	r25, 0x01	; 1
  key_rpt ^= key_mask;                            // clear key(s)
    13c4:	80 91 69 07 	lds	r24, 0x0769
    13c8:	89 27       	eor	r24, r25
    13ca:	80 93 69 07 	sts	0x0769, r24
  sei();
    13ce:	78 94       	sei
    13d0:	99 23       	and	r25, r25
    13d2:	11 f0       	breq	.+4      	; 0x13d8 <main+0x3a>
			led_lauflicht(); // LED Lauflicht
    13d4:	0e 94 18 02 	call	0x430	; 0x430 <led_lauflicht>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    13d8:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    13da:	90 91 ce 07 	lds	r25, 0x07CE
    13de:	92 70       	andi	r25, 0x02	; 2
  key_press ^= key_mask;                          // clear key(s)
    13e0:	80 91 ce 07 	lds	r24, 0x07CE
    13e4:	89 27       	eor	r24, r25
    13e6:	80 93 ce 07 	sts	0x07CE, r24
  sei();
    13ea:	78 94       	sei
		if (get_key_press(1 << KEY1))
    13ec:	99 23       	and	r25, r25
    13ee:	31 f0       	breq	.+12     	; 0x13fc <main+0x5e>
			uart_put_string("0\n", D_RapidForm);
    13f0:	80 eb       	ldi	r24, 0xB0	; 176
    13f2:	94 e0       	ldi	r25, 0x04	; 4
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_put_string>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    13fc:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    13fe:	90 91 ce 07 	lds	r25, 0x07CE
    1402:	94 70       	andi	r25, 0x04	; 4
  key_press ^= key_mask;                          // clear key(s)
    1404:	80 91 ce 07 	lds	r24, 0x07CE
    1408:	89 27       	eor	r24, r25
    140a:	80 93 ce 07 	sts	0x07CE, r24
  sei();
    140e:	78 94       	sei
		if( get_key_press( 1<<KEY2 ) )
    1410:	99 23       	and	r25, r25
    1412:	11 f0       	breq	.+4      	; 0x1418 <main+0x7a>
			lcd_clrscr();
    1414:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1418:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    141a:	90 91 ce 07 	lds	r25, 0x07CE
    141e:	98 70       	andi	r25, 0x08	; 8
  key_press ^= key_mask;                          // clear key(s)
    1420:	80 91 ce 07 	lds	r24, 0x07CE
    1424:	89 27       	eor	r24, r25
    1426:	80 93 ce 07 	sts	0x07CE, r24
  sei();
    142a:	78 94       	sei


		if (get_key_press(1 << KEY3)) {
    142c:	99 23       	and	r25, r25
    142e:	51 f0       	breq	.+20     	; 0x1444 <main+0xa6>
			lcd_puts("Betrete Men�!\n");
    1430:	83 eb       	ldi	r24, 0xB3	; 179
    1432:	94 e0       	ldi	r25, 0x04	; 4
    1434:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
			menu_enter(&menu_context, &menu_main);
    1438:	86 e7       	ldi	r24, 0x76	; 118
    143a:	96 e0       	ldi	r25, 0x06	; 6
    143c:	69 e2       	ldi	r22, 0x29	; 41
    143e:	76 e0       	ldi	r23, 0x06	; 6
    1440:	0e 94 82 0b 	call	0x1704	; 0x1704 <menu_enter>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1444:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1446:	90 91 ce 07 	lds	r25, 0x07CE
    144a:	90 71       	andi	r25, 0x10	; 16
  key_press ^= key_mask;                          // clear key(s)
    144c:	80 91 ce 07 	lds	r24, 0x07CE
    1450:	89 27       	eor	r24, r25
    1452:	80 93 ce 07 	sts	0x07CE, r24
  sei();
    1456:	78 94       	sei
		}

		if (get_key_press(1 << KEY4))
    1458:	99 23       	and	r25, r25
    145a:	21 f0       	breq	.+8      	; 0x1464 <main+0xc6>
			menu_select(&menu_context); // 4 - Ausw�hlen
    145c:	86 e7       	ldi	r24, 0x76	; 118
    145e:	96 e0       	ldi	r25, 0x06	; 6
    1460:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <menu_select>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    1464:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    1466:	90 91 ce 07 	lds	r25, 0x07CE
    146a:	90 72       	andi	r25, 0x20	; 32
  key_press ^= key_mask;                          // clear key(s)
    146c:	80 91 ce 07 	lds	r24, 0x07CE
    1470:	89 27       	eor	r24, r25
    1472:	80 93 ce 07 	sts	0x07CE, r24
  sei();
    1476:	78 94       	sei
		if (get_key_press(1 << KEY5) || get_key_rpt(1 << KEY5)) // 5 - Next
    1478:	99 23       	and	r25, r25
    147a:	61 f4       	brne	.+24     	; 0x1494 <main+0xf6>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    147c:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    147e:	90 91 69 07 	lds	r25, 0x0769
    1482:	90 72       	andi	r25, 0x20	; 32
  key_rpt ^= key_mask;                            // clear key(s)
    1484:	80 91 69 07 	lds	r24, 0x0769
    1488:	89 27       	eor	r24, r25
    148a:	80 93 69 07 	sts	0x0769, r24
  sei();
    148e:	78 94       	sei
    1490:	99 23       	and	r25, r25
    1492:	21 f0       	breq	.+8      	; 0x149c <main+0xfe>
			menu_next_entry(&menu_context);
    1494:	86 e7       	ldi	r24, 0x76	; 118
    1496:	96 e0       	ldi	r25, 0x06	; 6
    1498:	0e 94 ca 0b 	call	0x1794	; 0x1794 <menu_next_entry>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    149c:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    149e:	90 91 ce 07 	lds	r25, 0x07CE
    14a2:	90 74       	andi	r25, 0x40	; 64
  key_press ^= key_mask;                          // clear key(s)
    14a4:	80 91 ce 07 	lds	r24, 0x07CE
    14a8:	89 27       	eor	r24, r25
    14aa:	80 93 ce 07 	sts	0x07CE, r24
  sei();
    14ae:	78 94       	sei
		if (get_key_press(1 << KEY6) || get_key_rpt(1 << KEY6)) // 6 - Previous
    14b0:	99 23       	and	r25, r25
    14b2:	61 f4       	brne	.+24     	; 0x14cc <main+0x12e>
// to this function. This simulates the user repeatedly
// pressing and releasing the key.
//
uint8_t get_key_rpt( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14b4:	f8 94       	cli
  key_mask &= key_rpt;                            // read key(s)
    14b6:	90 91 69 07 	lds	r25, 0x0769
    14ba:	90 74       	andi	r25, 0x40	; 64
  key_rpt ^= key_mask;                            // clear key(s)
    14bc:	80 91 69 07 	lds	r24, 0x0769
    14c0:	89 27       	eor	r24, r25
    14c2:	80 93 69 07 	sts	0x0769, r24
  sei();
    14c6:	78 94       	sei
    14c8:	99 23       	and	r25, r25
    14ca:	21 f0       	breq	.+8      	; 0x14d4 <main+0x136>
			menu_prev_entry(&menu_context);
    14cc:	86 e7       	ldi	r24, 0x76	; 118
    14ce:	96 e0       	ldi	r25, 0x06	; 6
    14d0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <menu_prev_entry>
// check if a key has been pressed. Each pressed key is reported
// only once
//
uint8_t get_key_press( uint8_t key_mask )
{
  cli();                                          // read and clear atomic !
    14d4:	f8 94       	cli
  key_mask &= key_press;                          // read key(s)
    14d6:	90 91 ce 07 	lds	r25, 0x07CE
    14da:	90 78       	andi	r25, 0x80	; 128
  key_press ^= key_mask;                          // clear key(s)
    14dc:	80 91 ce 07 	lds	r24, 0x07CE
    14e0:	89 27       	eor	r24, r25
    14e2:	80 93 ce 07 	sts	0x07CE, r24
  sei();
    14e6:	78 94       	sei
		if (get_key_press(1 << KEY7))
    14e8:	99 23       	and	r25, r25
    14ea:	21 f0       	breq	.+8      	; 0x14f4 <main+0x156>
			menu_exit(&menu_context); // 7 - Men� zur�ck
    14ec:	86 e7       	ldi	r24, 0x76	; 118
    14ee:	96 e0       	ldi	r25, 0x06	; 6
    14f0:	0e 94 90 0b 	call	0x1720	; 0x1720 <menu_exit>

		if ((UCSR0A & (1 << RXC0)))
    14f4:	80 91 c0 00 	lds	r24, 0x00C0
    14f8:	87 ff       	sbrs	r24, 7
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <main+0x166>
			uart_rx(D_RapidForm);
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_rx>
		if ((UCSR1A & (1 << RXC1)))
    1504:	80 91 c8 00 	lds	r24, 0x00C8
    1508:	87 ff       	sbrs	r24, 7
    150a:	4b cf       	rjmp	.-362    	; 0x13a2 <main+0x4>
			uart_rx(D_Stepper);
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_rx>
    1514:	46 cf       	rjmp	.-372    	; 0x13a2 <main+0x4>

00001516 <lcd_my_type>:
int 	switch_Motor		(char * str_rx);
void 	switch_Stepper		(char * str_rx);
void 	switch_Isel			(char * str_rx);
void 	switch_csg			(char * str_rx);
// LCD und LED Stuff
void 	lcd_my_type			(char *s) {
    1516:	ef 92       	push	r14
    1518:	ff 92       	push	r15
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	ec 01       	movw	r28, r24
	srand(TCNT0);
    1524:	86 b5       	in	r24, 0x26	; 38
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <srand>
    152c:	50 ed       	ldi	r21, 0xD0	; 208
    152e:	e5 2e       	mov	r14, r21
    1530:	57 e0       	ldi	r21, 0x07	; 7
    1532:	f5 2e       	mov	r15, r21
    1534:	17 c0       	rjmp	.+46     	; 0x1564 <lcd_my_type+0x4e>
	int min = 10;
	int max = 250;
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		erg = (rand() % (max - min + 1) + min);
    1536:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <rand>
    153a:	61 ef       	ldi	r22, 0xF1	; 241
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divmodhi4>
    1542:	8c 01       	movw	r16, r24
    1544:	06 5f       	subi	r16, 0xF6	; 246
    1546:	1f 4f       	sbci	r17, 0xFF	; 255
		lcd_putc(*s);
    1548:	88 81       	ld	r24, Y
    154a:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_putc>
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	04 c0       	rjmp	.+8      	; 0x155c <lcd_my_type+0x46>
    1554:	f7 01       	movw	r30, r14
    1556:	31 97       	sbiw	r30, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <lcd_my_type+0x40>
		s++;
		for (int i = 0; i < erg; i++)
    155a:	01 96       	adiw	r24, 0x01	; 1
    155c:	80 17       	cp	r24, r16
    155e:	91 07       	cpc	r25, r17
    1560:	cc f3       	brlt	.-14     	; 0x1554 <lcd_my_type+0x3e>
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
	{
		erg = (rand() % (max - min + 1) + min);
		lcd_putc(*s);
		s++;
    1562:	21 96       	adiw	r28, 0x01	; 1
void 	lcd_my_type			(char *s) {
	srand(TCNT0);
	int min = 10;
	int max = 250;
	int erg = 0;
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"
    1564:	88 81       	ld	r24, Y
    1566:	88 23       	and	r24, r24
    1568:	31 f7       	brne	.-52     	; 0x1536 <lcd_my_type+0x20>
		lcd_putc(*s);
		s++;
		for (int i = 0; i < erg; i++)
			_delay_ms(1);
	}
}
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	ff 90       	pop	r15
    1574:	ef 90       	pop	r14
    1576:	08 95       	ret

00001578 <lcd_spielereien>:
void 	lcd_spielereien		(void) {
    1578:	88 ee       	ldi	r24, 0xE8	; 232
    157a:	93 e0       	ldi	r25, 0x03	; 3
    157c:	28 ec       	ldi	r18, 0xC8	; 200
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	f9 01       	movw	r30, r18
    1582:	31 97       	sbiw	r30, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <lcd_spielereien+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1586:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1588:	d9 f7       	brne	.-10     	; 0x1580 <lcd_spielereien+0x8>
	_delay_ms(100);
	lcd_my_type("Hello Joe!\n");
    158a:	84 ec       	ldi	r24, 0xC4	; 196
    158c:	94 e0       	ldi	r25, 0x04	; 4
    158e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <lcd_my_type>
    1592:	80 ed       	ldi	r24, 0xD0	; 208
    1594:	97 e0       	ldi	r25, 0x07	; 7
    1596:	28 ec       	ldi	r18, 0xC8	; 200
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	f9 01       	movw	r30, r18
    159c:	31 97       	sbiw	r30, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <lcd_spielereien+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a2:	d9 f7       	brne	.-10     	; 0x159a <lcd_spielereien+0x22>
	_delay_ms(200);
	lcd_my_type("Have a nice Day!\n");
    15a4:	80 ed       	ldi	r24, 0xD0	; 208
    15a6:	94 e0       	ldi	r25, 0x04	; 4
    15a8:	0e 94 8b 0a 	call	0x1516	; 0x1516 <lcd_my_type>
    15ac:	88 e8       	ldi	r24, 0x88	; 136
    15ae:	93 e1       	ldi	r25, 0x13	; 19
    15b0:	28 ec       	ldi	r18, 0xC8	; 200
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	f9 01       	movw	r30, r18
    15b6:	31 97       	sbiw	r30, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <lcd_spielereien+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15bc:	d9 f7       	brne	.-10     	; 0x15b4 <lcd_spielereien+0x3c>
	_delay_ms(500);
	lcd_my_type("Be a Honey Bee!\n");
    15be:	82 ee       	ldi	r24, 0xE2	; 226
    15c0:	94 e0       	ldi	r25, 0x04	; 4
    15c2:	0e 94 8b 0a 	call	0x1516	; 0x1516 <lcd_my_type>
    15c6:	80 e7       	ldi	r24, 0x70	; 112
    15c8:	97 e1       	ldi	r25, 0x17	; 23
    15ca:	28 ec       	ldi	r18, 0xC8	; 200
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	f9 01       	movw	r30, r18
    15d0:	31 97       	sbiw	r30, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <lcd_spielereien+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d6:	d9 f7       	brne	.-10     	; 0x15ce <lcd_spielereien+0x56>
	_delay_ms(600);
	lcd_clrscr();
    15d8:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
}
    15dc:	08 95       	ret

000015de <menu_display>:
/*
 * Display the current menu in the context
 */
 
void menu_display(menu_context_t *context)
{
    15de:	9f 92       	push	r9
    15e0:	af 92       	push	r10
    15e2:	bf 92       	push	r11
    15e4:	cf 92       	push	r12
    15e6:	df 92       	push	r13
    15e8:	ef 92       	push	r14
    15ea:	ff 92       	push	r15
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	7c 01       	movw	r14, r24
	uint8_t i;
	menu_t *menu = context->menu;
    15f6:	fc 01       	movw	r30, r24
    15f8:	c4 80       	ldd	r12, Z+4	; 0x04
    15fa:	d5 80       	ldd	r13, Z+5	; 0x05
    15fc:	bb 24       	eor	r11, r11
    15fe:	99 24       	eor	r9, r9
    1600:	52 c0       	rjmp	.+164    	; 0x16a6 <menu_display+0xc8>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    1602:	e9 2d       	mov	r30, r9
    1604:	f0 e0       	ldi	r31, 0x00	; 0
			if (dindex++ >= menu->num_entries - menu->top_entry)
    1606:	e2 17       	cp	r30, r18
    1608:	f3 07       	cpc	r31, r19
    160a:	0c f0       	brlt	.+2      	; 0x160e <menu_display+0x30>
    160c:	6b c0       	rjmp	.+214    	; 0x16e4 <menu_display+0x106>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    160e:	8f 01       	movw	r16, r30
    1610:	04 0f       	add	r16, r20
    1612:	15 1f       	adc	r17, r21
			if (dindex++ >= menu->num_entries - menu->top_entry)
    1614:	93 94       	inc	r9
				goto entries_done;
		} while (disp_entry->flags & MENU_FLAG_HIDDEN);
    1616:	f8 01       	movw	r30, r16
    1618:	ee 0f       	add	r30, r30
    161a:	ff 1f       	adc	r31, r31
    161c:	e0 0f       	add	r30, r16
    161e:	f1 1f       	adc	r31, r17
    1620:	63 e0       	ldi	r22, 0x03	; 3
    1622:	ee 0f       	add	r30, r30
    1624:	ff 1f       	adc	r31, r31
    1626:	6a 95       	dec	r22
    1628:	e1 f7       	brne	.-8      	; 0x1622 <menu_display+0x44>
    162a:	ec 0d       	add	r30, r12
    162c:	fd 1d       	adc	r31, r13
    162e:	85 81       	ldd	r24, Z+5	; 0x05
    1630:	81 fd       	sbrc	r24, 1
    1632:	e7 cf       	rjmp	.-50     	; 0x1602 <menu_display+0x24>
			return;
#endif

		// Go to correct x,y locations and print the entry

		menu_set_pos(context->x_loc, context->y_loc + i);
    1634:	f7 01       	movw	r30, r14
    1636:	61 81       	ldd	r22, Z+1	; 0x01
    1638:	6b 0d       	add	r22, r11
    163a:	80 81       	ld	r24, Z
    163c:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
	if (selected)
		menu_set_inverse();
#else
	// No inverse; do workaround

	max_width--;
    1640:	f7 01       	movw	r30, r14
    1642:	a3 80       	ldd	r10, Z+3	; 0x03
    1644:	aa 94       	dec	r10
	if (selected) {
    1646:	f6 01       	movw	r30, r12
    1648:	21 81       	ldd	r18, Z+1	; 0x01
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	2f 5f       	subi	r18, 0xFF	; 255
    164e:	3f 4f       	sbci	r19, 0xFF	; 255
    1650:	80 81       	ld	r24, Z
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	89 0d       	add	r24, r9
    1656:	91 1d       	adc	r25, r1
    1658:	28 17       	cp	r18, r24
    165a:	39 07       	cpc	r19, r25
    165c:	11 f4       	brne	.+4      	; 0x1662 <menu_display+0x84>
		menu_putchar('*');
    165e:	8a e2       	ldi	r24, 0x2A	; 42
    1660:	01 c0       	rjmp	.+2      	; 0x1664 <menu_display+0x86>
	} else {
		menu_putchar(' ');
    1662:	80 e2       	ldi	r24, 0x20	; 32
    1664:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_putc>
    1668:	e8 01       	movw	r28, r16
    166a:	cc 0f       	add	r28, r28
    166c:	dd 1f       	adc	r29, r29
    166e:	c0 0f       	add	r28, r16
    1670:	d1 1f       	adc	r29, r17
    1672:	21 96       	adiw	r28, 0x01	; 1
    1674:	83 e0       	ldi	r24, 0x03	; 3
    1676:	cc 0f       	add	r28, r28
    1678:	dd 1f       	adc	r29, r29
    167a:	8a 95       	dec	r24
    167c:	e1 f7       	brne	.-8      	; 0x1676 <menu_display+0x98>
    167e:	cc 0d       	add	r28, r12
    1680:	dd 1d       	adc	r29, r13
    1682:	10 e0       	ldi	r17, 0x00	; 0
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <menu_display+0xb4>
	
	// Print the characters in the name; fill out to width with
	//  spaces (mainly for inverse)
	
	for (i = 0; i < max_width; i++) {
		if (!entry->name[i])
    1686:	89 91       	ld	r24, Y+
    1688:	88 23       	and	r24, r24
    168a:	31 f0       	breq	.+12     	; 0x1698 <menu_display+0xba>
			break;
			
		menu_putchar(entry->name[i]);
    168c:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_putc>
#endif		
	
	// Print the characters in the name; fill out to width with
	//  spaces (mainly for inverse)
	
	for (i = 0; i < max_width; i++) {
    1690:	1f 5f       	subi	r17, 0xFF	; 255
    1692:	1a 15       	cp	r17, r10
    1694:	c0 f3       	brcs	.-16     	; 0x1686 <menu_display+0xa8>
    1696:	06 c0       	rjmp	.+12     	; 0x16a4 <menu_display+0xc6>
			
		menu_putchar(entry->name[i]);
	}
	
	for (; i < max_width; i++)
		menu_putchar(' ');
    1698:	80 e2       	ldi	r24, 0x20	; 32
    169a:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_putc>
			break;
			
		menu_putchar(entry->name[i]);
	}
	
	for (; i < max_width; i++)
    169e:	1f 5f       	subi	r17, 0xFF	; 255
    16a0:	1a 15       	cp	r17, r10
    16a2:	d0 f3       	brcs	.-12     	; 0x1698 <menu_display+0xba>
	menu_clear();
#endif

	// Display only those entries that will fit on the display

	for (i = 0; i < context->height; i++) {
    16a4:	b3 94       	inc	r11
    16a6:	f7 01       	movw	r30, r14
    16a8:	82 81       	ldd	r24, Z+2	; 0x02
    16aa:	b8 16       	cp	r11, r24
    16ac:	d8 f4       	brcc	.+54     	; 0x16e4 <menu_display+0x106>

#ifndef CONFIG_TINYMENU_COMPACT
		// Don't display hidden menu entries

		do {
			disp_entry = &menu->entry[menu->top_entry + dindex];
    16ae:	f6 01       	movw	r30, r12
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	50 e0       	ldi	r21, 0x00	; 0
			if (dindex++ >= menu->num_entries - menu->top_entry)
    16b6:	82 81       	ldd	r24, Z+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	24 1b       	sub	r18, r20
    16be:	35 0b       	sbc	r19, r21
    16c0:	a0 cf       	rjmp	.-192    	; 0x1602 <menu_display+0x24>

#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
		menu_set_pos(context->x_loc, context->y_loc + i);
    16c2:	f7 01       	movw	r30, r14
    16c4:	61 81       	ldd	r22, Z+1	; 0x01
    16c6:	6b 0d       	add	r22, r11
    16c8:	80 81       	ld	r24, Z
    16ca:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
    16ce:	10 e0       	ldi	r17, 0x00	; 0
    16d0:	04 c0       	rjmp	.+8      	; 0x16da <menu_display+0xfc>
		for (j = 0; j < context->width; j++) {
			menu_putchar(' ');
    16d2:	80 e2       	ldi	r24, 0x20	; 32
    16d4:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_putc>
#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
		menu_set_pos(context->x_loc, context->y_loc + i);
		for (j = 0; j < context->width; j++) {
    16d8:	1f 5f       	subi	r17, 0xFF	; 255
    16da:	f7 01       	movw	r30, r14
    16dc:	83 81       	ldd	r24, Z+3	; 0x03
    16de:	18 17       	cp	r17, r24
    16e0:	c0 f3       	brcs	.-16     	; 0x16d2 <menu_display+0xf4>
entries_done:

#ifndef CONFIG_TINYMENU_USE_CLEAR
	// Fill rest of menu screen space with spaces

	for (; i < context->height; i++) {
    16e2:	b3 94       	inc	r11
    16e4:	f7 01       	movw	r30, r14
    16e6:	82 81       	ldd	r24, Z+2	; 0x02
    16e8:	b8 16       	cp	r11, r24
    16ea:	58 f3       	brcs	.-42     	; 0x16c2 <menu_display+0xe4>
		for (j = 0; j < context->width; j++) {
			menu_putchar(' ');
		}
	}	
#endif	
}
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	ff 90       	pop	r15
    16f6:	ef 90       	pop	r14
    16f8:	df 90       	pop	r13
    16fa:	cf 90       	pop	r12
    16fc:	bf 90       	pop	r11
    16fe:	af 90       	pop	r10
    1700:	9f 90       	pop	r9
    1702:	08 95       	ret

00001704 <menu_enter>:
 *  so when we exit we can go back, and update the menu context to
 *  reflect new menu... then display it.
 */

void menu_enter(menu_context_t *context, menu_t *menu)
{
    1704:	fc 01       	movw	r30, r24
    1706:	db 01       	movw	r26, r22
	menu->previous = context->menu;
    1708:	84 81       	ldd	r24, Z+4	; 0x04
    170a:	95 81       	ldd	r25, Z+5	; 0x05
    170c:	14 96       	adiw	r26, 0x04	; 4
    170e:	9c 93       	st	X, r25
    1710:	8e 93       	st	-X, r24
    1712:	13 97       	sbiw	r26, 0x03	; 3
	context->menu = menu;
    1714:	75 83       	std	Z+5, r23	; 0x05
    1716:	64 83       	std	Z+4, r22	; 0x04
	menu_display(context);
    1718:	cf 01       	movw	r24, r30
    171a:	0e 94 ef 0a 	call	0x15de	; 0x15de <menu_display>
}
    171e:	08 95       	ret

00001720 <menu_exit>:
 * Exit a menu (go to the previous menu) -- if there is no previous
 *  menu, don't do anything.
 */

void menu_exit(menu_context_t *context)
{
    1720:	dc 01       	movw	r26, r24
	if (context->menu->previous) {
    1722:	14 96       	adiw	r26, 0x04	; 4
    1724:	ed 91       	ld	r30, X+
    1726:	fc 91       	ld	r31, X
    1728:	15 97       	sbiw	r26, 0x05	; 5
    172a:	83 81       	ldd	r24, Z+3	; 0x03
    172c:	94 81       	ldd	r25, Z+4	; 0x04
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	39 f0       	breq	.+14     	; 0x1740 <menu_exit+0x20>
		context->menu = context->menu->previous;
    1732:	15 96       	adiw	r26, 0x05	; 5
    1734:	9c 93       	st	X, r25
    1736:	8e 93       	st	-X, r24
    1738:	14 97       	sbiw	r26, 0x04	; 4
		menu_display(context);
    173a:	cd 01       	movw	r24, r26
    173c:	0e 94 ef 0a 	call	0x15de	; 0x15de <menu_display>
    1740:	08 95       	ret

00001742 <menu_prev_entry>:
 *  bounds.  Also adjust current top entry in display if needed to fit new
 *  entry on display.
 */ 

void menu_prev_entry(menu_context_t *context)
{
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	ec 01       	movw	r28, r24
	menu_t *menu = context->menu;
    1748:	ac 81       	ldd	r26, Y+4	; 0x04
    174a:	bd 81       	ldd	r27, Y+5	; 0x05
	uint8_t new_entry = menu->current_entry;
    174c:	11 96       	adiw	r26, 0x01	; 1
    174e:	2c 91       	ld	r18, X
    1750:	11 97       	sbiw	r26, 0x01	; 1
	

#ifndef CONFIG_TINYMENU_COMPACT
	while(1) {
		if (new_entry-- == 0) // Watch bounds
    1752:	22 23       	and	r18, r18
    1754:	e1 f0       	breq	.+56     	; 0x178e <menu_prev_entry+0x4c>
    1756:	21 50       	subi	r18, 0x01	; 1
			return;
			
		if (!(menu->entry[new_entry].flags & MENU_FLAG_HIDDEN))
    1758:	82 2f       	mov	r24, r18
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	fc 01       	movw	r30, r24
    175e:	ee 0f       	add	r30, r30
    1760:	ff 1f       	adc	r31, r31
    1762:	e8 0f       	add	r30, r24
    1764:	f9 1f       	adc	r31, r25
    1766:	83 e0       	ldi	r24, 0x03	; 3
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	8a 95       	dec	r24
    176e:	e1 f7       	brne	.-8      	; 0x1768 <menu_prev_entry+0x26>
    1770:	ea 0f       	add	r30, r26
    1772:	fb 1f       	adc	r31, r27
    1774:	85 81       	ldd	r24, Z+5	; 0x05
    1776:	81 fd       	sbrc	r24, 1
    1778:	ec cf       	rjmp	.-40     	; 0x1752 <menu_prev_entry+0x10>
#else
	if (new_entry-- == 0)
		return;
#endif
	
	menu->current_entry = new_entry;
    177a:	11 96       	adiw	r26, 0x01	; 1
    177c:	2c 93       	st	X, r18
    177e:	11 97       	sbiw	r26, 0x01	; 1
	
	if (menu->current_entry < menu->top_entry) 
    1780:	8c 91       	ld	r24, X
    1782:	28 17       	cp	r18, r24
    1784:	08 f4       	brcc	.+2      	; 0x1788 <menu_prev_entry+0x46>
		menu->top_entry = menu->current_entry;
    1786:	2c 93       	st	X, r18
		
	menu_display(context);
    1788:	ce 01       	movw	r24, r28
    178a:	0e 94 ef 0a 	call	0x15de	; 0x15de <menu_display>
}
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	08 95       	ret

00001794 <menu_next_entry>:
 *  Also adjust current top entry in display if needed to fit new entry
 *  on display
 */
 
void menu_next_entry(menu_context_t *context)
{
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	ec 01       	movw	r28, r24
	menu_t *menu = context->menu;
    179a:	ac 81       	ldd	r26, Y+4	; 0x04
    179c:	bd 81       	ldd	r27, Y+5	; 0x05
	uint8_t new_entry = menu->current_entry;
    179e:	11 96       	adiw	r26, 0x01	; 1
    17a0:	2c 91       	ld	r18, X
    17a2:	11 97       	sbiw	r26, 0x01	; 1
	

#ifndef CONFIG_TINYMENU_COMPACT
	while(1) {
		if (++new_entry >= menu->num_entries) // watch bounds
    17a4:	12 96       	adiw	r26, 0x02	; 2
    17a6:	9c 91       	ld	r25, X
    17a8:	12 97       	sbiw	r26, 0x02	; 2
    17aa:	2f 5f       	subi	r18, 0xFF	; 255
    17ac:	29 17       	cp	r18, r25
    17ae:	10 f5       	brcc	.+68     	; 0x17f4 <menu_next_entry+0x60>
			return;
		if (!(menu->entry[new_entry].flags & MENU_FLAG_HIDDEN))
    17b0:	42 2f       	mov	r20, r18
    17b2:	50 e0       	ldi	r21, 0x00	; 0
    17b4:	fa 01       	movw	r30, r20
    17b6:	ee 0f       	add	r30, r30
    17b8:	ff 1f       	adc	r31, r31
    17ba:	e4 0f       	add	r30, r20
    17bc:	f5 1f       	adc	r31, r21
    17be:	63 e0       	ldi	r22, 0x03	; 3
    17c0:	ee 0f       	add	r30, r30
    17c2:	ff 1f       	adc	r31, r31
    17c4:	6a 95       	dec	r22
    17c6:	e1 f7       	brne	.-8      	; 0x17c0 <menu_next_entry+0x2c>
    17c8:	ea 0f       	add	r30, r26
    17ca:	fb 1f       	adc	r31, r27
    17cc:	85 81       	ldd	r24, Z+5	; 0x05
    17ce:	81 fd       	sbrc	r24, 1
    17d0:	ec cf       	rjmp	.-40     	; 0x17aa <menu_next_entry+0x16>
#else
	if (++new_entry >= menu->num_entries)
		return;
#endif
	
	menu->current_entry = new_entry;
    17d2:	11 96       	adiw	r26, 0x01	; 1
    17d4:	2c 93       	st	X, r18
    17d6:	11 97       	sbiw	r26, 0x01	; 1
	
	if (menu->current_entry >= menu->top_entry + context->height)
    17d8:	3a 81       	ldd	r19, Y+2	; 0x02
    17da:	8c 91       	ld	r24, X
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	83 0f       	add	r24, r19
    17e0:	91 1d       	adc	r25, r1
    17e2:	48 17       	cp	r20, r24
    17e4:	59 07       	cpc	r21, r25
    17e6:	1c f0       	brlt	.+6      	; 0x17ee <menu_next_entry+0x5a>
		menu->top_entry = menu->current_entry - context->height + 1;
    17e8:	23 1b       	sub	r18, r19
    17ea:	2f 5f       	subi	r18, 0xFF	; 255
    17ec:	2c 93       	st	X, r18
	
	menu_display(context);
    17ee:	ce 01       	movw	r24, r28
    17f0:	0e 94 ef 0a 	call	0x15de	; 0x15de <menu_display>
}
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	08 95       	ret

000017fa <menu_select>:
 *  enter the submenu)
 *
 */

void menu_select(menu_context_t *context)
{
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	8c 01       	movw	r16, r24
	menu_entry_t *entry;


	entry = &context->menu->entry[context->menu->current_entry];
    1804:	fc 01       	movw	r30, r24
    1806:	c4 81       	ldd	r28, Z+4	; 0x04
    1808:	d5 81       	ldd	r29, Z+5	; 0x05
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	90 e0       	ldi	r25, 0x00	; 0

	if (entry->flags & MENU_FLAG_SUBMENU) {
    180e:	9c 01       	movw	r18, r24
    1810:	22 0f       	add	r18, r18
    1812:	33 1f       	adc	r19, r19
    1814:	28 0f       	add	r18, r24
    1816:	39 1f       	adc	r19, r25
    1818:	d9 01       	movw	r26, r18
    181a:	f3 e0       	ldi	r31, 0x03	; 3
    181c:	aa 0f       	add	r26, r26
    181e:	bb 1f       	adc	r27, r27
    1820:	fa 95       	dec	r31
    1822:	e1 f7       	brne	.-8      	; 0x181c <menu_select+0x22>
    1824:	ac 0f       	add	r26, r28
    1826:	bd 1f       	adc	r27, r29
    1828:	15 96       	adiw	r26, 0x05	; 5
    182a:	8c 91       	ld	r24, X
    182c:	15 97       	sbiw	r26, 0x05	; 5
    182e:	80 ff       	sbrs	r24, 0
    1830:	08 c0       	rjmp	.+16     	; 0x1842 <menu_select+0x48>
		// Submenu -- enter it
	
		menu_enter(context, (menu_t *)entry->value);
    1832:	5b 96       	adiw	r26, 0x1b	; 27
    1834:	6d 91       	ld	r22, X+
    1836:	7c 91       	ld	r23, X
    1838:	5c 97       	sbiw	r26, 0x1c	; 28
    183a:	c8 01       	movw	r24, r16
    183c:	0e 94 82 0b 	call	0x1704	; 0x1704 <menu_enter>
    1840:	13 c0       	rjmp	.+38     	; 0x1868 <menu_select+0x6e>
	} else {
		// Regular entry -- execute function
	
		entry->select(entry->value, entry->name);
    1842:	c9 01       	movw	r24, r18
    1844:	01 96       	adiw	r24, 0x01	; 1
    1846:	e3 e0       	ldi	r30, 0x03	; 3
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	ea 95       	dec	r30
    184e:	e1 f7       	brne	.-8      	; 0x1848 <menu_select+0x4e>
    1850:	c8 0f       	add	r28, r24
    1852:	d9 1f       	adc	r29, r25
    1854:	16 96       	adiw	r26, 0x06	; 6
    1856:	ed 91       	ld	r30, X+
    1858:	fc 91       	ld	r31, X
    185a:	17 97       	sbiw	r26, 0x07	; 7
    185c:	5b 96       	adiw	r26, 0x1b	; 27
    185e:	8d 91       	ld	r24, X+
    1860:	9c 91       	ld	r25, X
    1862:	5c 97       	sbiw	r26, 0x1c	; 28
    1864:	be 01       	movw	r22, r28
    1866:	09 95       	icall
	}
	
	// Re-display menu on return
	
	menu_display(context);
    1868:	c8 01       	movw	r24, r16
    186a:	0e 94 ef 0a 	call	0x15de	; 0x15de <menu_display>
}
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	08 95       	ret

00001878 <__mulsi3>:
    1878:	62 9f       	mul	r22, r18
    187a:	d0 01       	movw	r26, r0
    187c:	73 9f       	mul	r23, r19
    187e:	f0 01       	movw	r30, r0
    1880:	82 9f       	mul	r24, r18
    1882:	e0 0d       	add	r30, r0
    1884:	f1 1d       	adc	r31, r1
    1886:	64 9f       	mul	r22, r20
    1888:	e0 0d       	add	r30, r0
    188a:	f1 1d       	adc	r31, r1
    188c:	92 9f       	mul	r25, r18
    188e:	f0 0d       	add	r31, r0
    1890:	83 9f       	mul	r24, r19
    1892:	f0 0d       	add	r31, r0
    1894:	74 9f       	mul	r23, r20
    1896:	f0 0d       	add	r31, r0
    1898:	65 9f       	mul	r22, r21
    189a:	f0 0d       	add	r31, r0
    189c:	99 27       	eor	r25, r25
    189e:	72 9f       	mul	r23, r18
    18a0:	b0 0d       	add	r27, r0
    18a2:	e1 1d       	adc	r30, r1
    18a4:	f9 1f       	adc	r31, r25
    18a6:	63 9f       	mul	r22, r19
    18a8:	b0 0d       	add	r27, r0
    18aa:	e1 1d       	adc	r30, r1
    18ac:	f9 1f       	adc	r31, r25
    18ae:	bd 01       	movw	r22, r26
    18b0:	cf 01       	movw	r24, r30
    18b2:	11 24       	eor	r1, r1
    18b4:	08 95       	ret

000018b6 <__divmodhi4>:
    18b6:	97 fb       	bst	r25, 7
    18b8:	09 2e       	mov	r0, r25
    18ba:	07 26       	eor	r0, r23
    18bc:	0a d0       	rcall	.+20     	; 0x18d2 <__divmodhi4_neg1>
    18be:	77 fd       	sbrc	r23, 7
    18c0:	04 d0       	rcall	.+8      	; 0x18ca <__divmodhi4_neg2>
    18c2:	27 d0       	rcall	.+78     	; 0x1912 <__udivmodhi4>
    18c4:	06 d0       	rcall	.+12     	; 0x18d2 <__divmodhi4_neg1>
    18c6:	00 20       	and	r0, r0
    18c8:	1a f4       	brpl	.+6      	; 0x18d0 <__divmodhi4_exit>

000018ca <__divmodhi4_neg2>:
    18ca:	70 95       	com	r23
    18cc:	61 95       	neg	r22
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255

000018d0 <__divmodhi4_exit>:
    18d0:	08 95       	ret

000018d2 <__divmodhi4_neg1>:
    18d2:	f6 f7       	brtc	.-4      	; 0x18d0 <__divmodhi4_exit>
    18d4:	90 95       	com	r25
    18d6:	81 95       	neg	r24
    18d8:	9f 4f       	sbci	r25, 0xFF	; 255
    18da:	08 95       	ret

000018dc <__divmodsi4>:
    18dc:	97 fb       	bst	r25, 7
    18de:	09 2e       	mov	r0, r25
    18e0:	05 26       	eor	r0, r21
    18e2:	0e d0       	rcall	.+28     	; 0x1900 <__divmodsi4_neg1>
    18e4:	57 fd       	sbrc	r21, 7
    18e6:	04 d0       	rcall	.+8      	; 0x18f0 <__divmodsi4_neg2>
    18e8:	28 d0       	rcall	.+80     	; 0x193a <__udivmodsi4>
    18ea:	0a d0       	rcall	.+20     	; 0x1900 <__divmodsi4_neg1>
    18ec:	00 1c       	adc	r0, r0
    18ee:	38 f4       	brcc	.+14     	; 0x18fe <__divmodsi4_exit>

000018f0 <__divmodsi4_neg2>:
    18f0:	50 95       	com	r21
    18f2:	40 95       	com	r20
    18f4:	30 95       	com	r19
    18f6:	21 95       	neg	r18
    18f8:	3f 4f       	sbci	r19, 0xFF	; 255
    18fa:	4f 4f       	sbci	r20, 0xFF	; 255
    18fc:	5f 4f       	sbci	r21, 0xFF	; 255

000018fe <__divmodsi4_exit>:
    18fe:	08 95       	ret

00001900 <__divmodsi4_neg1>:
    1900:	f6 f7       	brtc	.-4      	; 0x18fe <__divmodsi4_exit>
    1902:	90 95       	com	r25
    1904:	80 95       	com	r24
    1906:	70 95       	com	r23
    1908:	61 95       	neg	r22
    190a:	7f 4f       	sbci	r23, 0xFF	; 255
    190c:	8f 4f       	sbci	r24, 0xFF	; 255
    190e:	9f 4f       	sbci	r25, 0xFF	; 255
    1910:	08 95       	ret

00001912 <__udivmodhi4>:
    1912:	aa 1b       	sub	r26, r26
    1914:	bb 1b       	sub	r27, r27
    1916:	51 e1       	ldi	r21, 0x11	; 17
    1918:	07 c0       	rjmp	.+14     	; 0x1928 <__udivmodhi4_ep>

0000191a <__udivmodhi4_loop>:
    191a:	aa 1f       	adc	r26, r26
    191c:	bb 1f       	adc	r27, r27
    191e:	a6 17       	cp	r26, r22
    1920:	b7 07       	cpc	r27, r23
    1922:	10 f0       	brcs	.+4      	; 0x1928 <__udivmodhi4_ep>
    1924:	a6 1b       	sub	r26, r22
    1926:	b7 0b       	sbc	r27, r23

00001928 <__udivmodhi4_ep>:
    1928:	88 1f       	adc	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	5a 95       	dec	r21
    192e:	a9 f7       	brne	.-22     	; 0x191a <__udivmodhi4_loop>
    1930:	80 95       	com	r24
    1932:	90 95       	com	r25
    1934:	bc 01       	movw	r22, r24
    1936:	cd 01       	movw	r24, r26
    1938:	08 95       	ret

0000193a <__udivmodsi4>:
    193a:	a1 e2       	ldi	r26, 0x21	; 33
    193c:	1a 2e       	mov	r1, r26
    193e:	aa 1b       	sub	r26, r26
    1940:	bb 1b       	sub	r27, r27
    1942:	fd 01       	movw	r30, r26
    1944:	0d c0       	rjmp	.+26     	; 0x1960 <__udivmodsi4_ep>

00001946 <__udivmodsi4_loop>:
    1946:	aa 1f       	adc	r26, r26
    1948:	bb 1f       	adc	r27, r27
    194a:	ee 1f       	adc	r30, r30
    194c:	ff 1f       	adc	r31, r31
    194e:	a2 17       	cp	r26, r18
    1950:	b3 07       	cpc	r27, r19
    1952:	e4 07       	cpc	r30, r20
    1954:	f5 07       	cpc	r31, r21
    1956:	20 f0       	brcs	.+8      	; 0x1960 <__udivmodsi4_ep>
    1958:	a2 1b       	sub	r26, r18
    195a:	b3 0b       	sbc	r27, r19
    195c:	e4 0b       	sbc	r30, r20
    195e:	f5 0b       	sbc	r31, r21

00001960 <__udivmodsi4_ep>:
    1960:	66 1f       	adc	r22, r22
    1962:	77 1f       	adc	r23, r23
    1964:	88 1f       	adc	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	1a 94       	dec	r1
    196a:	69 f7       	brne	.-38     	; 0x1946 <__udivmodsi4_loop>
    196c:	60 95       	com	r22
    196e:	70 95       	com	r23
    1970:	80 95       	com	r24
    1972:	90 95       	com	r25
    1974:	9b 01       	movw	r18, r22
    1976:	ac 01       	movw	r20, r24
    1978:	bd 01       	movw	r22, r26
    197a:	cf 01       	movw	r24, r30
    197c:	08 95       	ret

0000197e <do_rand>:
    197e:	a0 e0       	ldi	r26, 0x00	; 0
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e5 ec       	ldi	r30, 0xC5	; 197
    1984:	fc e0       	ldi	r31, 0x0C	; 12
    1986:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <__prologue_saves__+0x10>
    198a:	ec 01       	movw	r28, r24
    198c:	a8 80       	ld	r10, Y
    198e:	b9 80       	ldd	r11, Y+1	; 0x01
    1990:	ca 80       	ldd	r12, Y+2	; 0x02
    1992:	db 80       	ldd	r13, Y+3	; 0x03
    1994:	a1 14       	cp	r10, r1
    1996:	b1 04       	cpc	r11, r1
    1998:	c1 04       	cpc	r12, r1
    199a:	d1 04       	cpc	r13, r1
    199c:	41 f4       	brne	.+16     	; 0x19ae <do_rand+0x30>
    199e:	84 e2       	ldi	r24, 0x24	; 36
    19a0:	a8 2e       	mov	r10, r24
    19a2:	89 ed       	ldi	r24, 0xD9	; 217
    19a4:	b8 2e       	mov	r11, r24
    19a6:	8b e5       	ldi	r24, 0x5B	; 91
    19a8:	c8 2e       	mov	r12, r24
    19aa:	87 e0       	ldi	r24, 0x07	; 7
    19ac:	d8 2e       	mov	r13, r24
    19ae:	c6 01       	movw	r24, r12
    19b0:	b5 01       	movw	r22, r10
    19b2:	2d e1       	ldi	r18, 0x1D	; 29
    19b4:	33 ef       	ldi	r19, 0xF3	; 243
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__divmodsi4>
    19be:	27 ea       	ldi	r18, 0xA7	; 167
    19c0:	31 e4       	ldi	r19, 0x41	; 65
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsi3>
    19ca:	7b 01       	movw	r14, r22
    19cc:	8c 01       	movw	r16, r24
    19ce:	c6 01       	movw	r24, r12
    19d0:	b5 01       	movw	r22, r10
    19d2:	2d e1       	ldi	r18, 0x1D	; 29
    19d4:	33 ef       	ldi	r19, 0xF3	; 243
    19d6:	41 e0       	ldi	r20, 0x01	; 1
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__divmodsi4>
    19de:	ca 01       	movw	r24, r20
    19e0:	b9 01       	movw	r22, r18
    19e2:	2c ee       	ldi	r18, 0xEC	; 236
    19e4:	34 ef       	ldi	r19, 0xF4	; 244
    19e6:	4f ef       	ldi	r20, 0xFF	; 255
    19e8:	5f ef       	ldi	r21, 0xFF	; 255
    19ea:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsi3>
    19ee:	6e 0d       	add	r22, r14
    19f0:	7f 1d       	adc	r23, r15
    19f2:	80 1f       	adc	r24, r16
    19f4:	91 1f       	adc	r25, r17
    19f6:	97 ff       	sbrs	r25, 7
    19f8:	04 c0       	rjmp	.+8      	; 0x1a02 <do_rand+0x84>
    19fa:	61 50       	subi	r22, 0x01	; 1
    19fc:	70 40       	sbci	r23, 0x00	; 0
    19fe:	80 40       	sbci	r24, 0x00	; 0
    1a00:	90 48       	sbci	r25, 0x80	; 128
    1a02:	68 83       	st	Y, r22
    1a04:	79 83       	std	Y+1, r23	; 0x01
    1a06:	8a 83       	std	Y+2, r24	; 0x02
    1a08:	9b 83       	std	Y+3, r25	; 0x03
    1a0a:	9b 01       	movw	r18, r22
    1a0c:	3f 77       	andi	r19, 0x7F	; 127
    1a0e:	c9 01       	movw	r24, r18
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	ea e0       	ldi	r30, 0x0A	; 10
    1a16:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__epilogue_restores__+0x10>

00001a1a <rand_r>:
    1a1a:	0e 94 bf 0c 	call	0x197e	; 0x197e <do_rand>
    1a1e:	08 95       	ret

00001a20 <rand>:
    1a20:	8c e5       	ldi	r24, 0x5C	; 92
    1a22:	97 e0       	ldi	r25, 0x07	; 7
    1a24:	0e 94 bf 0c 	call	0x197e	; 0x197e <do_rand>
    1a28:	08 95       	ret

00001a2a <srand>:
    1a2a:	a0 e0       	ldi	r26, 0x00	; 0
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	80 93 5c 07 	sts	0x075C, r24
    1a32:	90 93 5d 07 	sts	0x075D, r25
    1a36:	a0 93 5e 07 	sts	0x075E, r26
    1a3a:	b0 93 5f 07 	sts	0x075F, r27
    1a3e:	08 95       	ret

00001a40 <atoi>:
    1a40:	fc 01       	movw	r30, r24
    1a42:	88 27       	eor	r24, r24
    1a44:	99 27       	eor	r25, r25
    1a46:	e8 94       	clt
    1a48:	21 91       	ld	r18, Z+
    1a4a:	20 32       	cpi	r18, 0x20	; 32
    1a4c:	e9 f3       	breq	.-6      	; 0x1a48 <atoi+0x8>
    1a4e:	29 30       	cpi	r18, 0x09	; 9
    1a50:	10 f0       	brcs	.+4      	; 0x1a56 <atoi+0x16>
    1a52:	2e 30       	cpi	r18, 0x0E	; 14
    1a54:	c8 f3       	brcs	.-14     	; 0x1a48 <atoi+0x8>
    1a56:	2b 32       	cpi	r18, 0x2B	; 43
    1a58:	41 f0       	breq	.+16     	; 0x1a6a <atoi+0x2a>
    1a5a:	2d 32       	cpi	r18, 0x2D	; 45
    1a5c:	39 f4       	brne	.+14     	; 0x1a6c <atoi+0x2c>
    1a5e:	68 94       	set
    1a60:	04 c0       	rjmp	.+8      	; 0x1a6a <atoi+0x2a>
    1a62:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__mulhi_const_10>
    1a66:	82 0f       	add	r24, r18
    1a68:	91 1d       	adc	r25, r1
    1a6a:	21 91       	ld	r18, Z+
    1a6c:	20 53       	subi	r18, 0x30	; 48
    1a6e:	2a 30       	cpi	r18, 0x0A	; 10
    1a70:	c0 f3       	brcs	.-16     	; 0x1a62 <atoi+0x22>
    1a72:	1e f4       	brtc	.+6      	; 0x1a7a <atoi+0x3a>
    1a74:	90 95       	com	r25
    1a76:	81 95       	neg	r24
    1a78:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7a:	08 95       	ret

00001a7c <atol>:
    1a7c:	1f 93       	push	r17
    1a7e:	fc 01       	movw	r30, r24
    1a80:	99 27       	eor	r25, r25
    1a82:	88 27       	eor	r24, r24
    1a84:	bc 01       	movw	r22, r24
    1a86:	e8 94       	clt
    1a88:	11 91       	ld	r17, Z+
    1a8a:	10 32       	cpi	r17, 0x20	; 32
    1a8c:	e9 f3       	breq	.-6      	; 0x1a88 <atol+0xc>
    1a8e:	19 30       	cpi	r17, 0x09	; 9
    1a90:	10 f0       	brcs	.+4      	; 0x1a96 <atol+0x1a>
    1a92:	1e 30       	cpi	r17, 0x0E	; 14
    1a94:	c8 f3       	brcs	.-14     	; 0x1a88 <atol+0xc>
    1a96:	1b 32       	cpi	r17, 0x2B	; 43
    1a98:	51 f0       	breq	.+20     	; 0x1aae <atol+0x32>
    1a9a:	1d 32       	cpi	r17, 0x2D	; 45
    1a9c:	49 f4       	brne	.+18     	; 0x1ab0 <atol+0x34>
    1a9e:	68 94       	set
    1aa0:	06 c0       	rjmp	.+12     	; 0x1aae <atol+0x32>
    1aa2:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__mulsi_const_10>
    1aa6:	61 0f       	add	r22, r17
    1aa8:	71 1d       	adc	r23, r1
    1aaa:	81 1d       	adc	r24, r1
    1aac:	91 1d       	adc	r25, r1
    1aae:	11 91       	ld	r17, Z+
    1ab0:	10 53       	subi	r17, 0x30	; 48
    1ab2:	1a 30       	cpi	r17, 0x0A	; 10
    1ab4:	b0 f3       	brcs	.-20     	; 0x1aa2 <atol+0x26>
    1ab6:	3e f4       	brtc	.+14     	; 0x1ac6 <atol+0x4a>
    1ab8:	90 95       	com	r25
    1aba:	80 95       	com	r24
    1abc:	70 95       	com	r23
    1abe:	61 95       	neg	r22
    1ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac6:	1f 91       	pop	r17
    1ac8:	08 95       	ret

00001aca <strcat>:
    1aca:	fb 01       	movw	r30, r22
    1acc:	dc 01       	movw	r26, r24
    1ace:	0d 90       	ld	r0, X+
    1ad0:	00 20       	and	r0, r0
    1ad2:	e9 f7       	brne	.-6      	; 0x1ace <strcat+0x4>
    1ad4:	11 97       	sbiw	r26, 0x01	; 1
    1ad6:	01 90       	ld	r0, Z+
    1ad8:	0d 92       	st	X+, r0
    1ada:	00 20       	and	r0, r0
    1adc:	e1 f7       	brne	.-8      	; 0x1ad6 <strcat+0xc>
    1ade:	08 95       	ret

00001ae0 <strcmp>:
    1ae0:	fb 01       	movw	r30, r22
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	8d 91       	ld	r24, X+
    1ae6:	01 90       	ld	r0, Z+
    1ae8:	80 19       	sub	r24, r0
    1aea:	01 10       	cpse	r0, r1
    1aec:	d9 f3       	breq	.-10     	; 0x1ae4 <strcmp+0x4>
    1aee:	99 0b       	sbc	r25, r25
    1af0:	08 95       	ret

00001af2 <strncmp>:
    1af2:	fb 01       	movw	r30, r22
    1af4:	dc 01       	movw	r26, r24
    1af6:	41 50       	subi	r20, 0x01	; 1
    1af8:	50 40       	sbci	r21, 0x00	; 0
    1afa:	30 f0       	brcs	.+12     	; 0x1b08 <strncmp+0x16>
    1afc:	8d 91       	ld	r24, X+
    1afe:	01 90       	ld	r0, Z+
    1b00:	80 19       	sub	r24, r0
    1b02:	19 f4       	brne	.+6      	; 0x1b0a <strncmp+0x18>
    1b04:	00 20       	and	r0, r0
    1b06:	b9 f7       	brne	.-18     	; 0x1af6 <strncmp+0x4>
    1b08:	88 1b       	sub	r24, r24
    1b0a:	99 0b       	sbc	r25, r25
    1b0c:	08 95       	ret

00001b0e <itoa>:
    1b0e:	fb 01       	movw	r30, r22
    1b10:	9f 01       	movw	r18, r30
    1b12:	e8 94       	clt
    1b14:	42 30       	cpi	r20, 0x02	; 2
    1b16:	c4 f0       	brlt	.+48     	; 0x1b48 <itoa+0x3a>
    1b18:	45 32       	cpi	r20, 0x25	; 37
    1b1a:	b4 f4       	brge	.+44     	; 0x1b48 <itoa+0x3a>
    1b1c:	4a 30       	cpi	r20, 0x0A	; 10
    1b1e:	29 f4       	brne	.+10     	; 0x1b2a <itoa+0x1c>
    1b20:	97 fb       	bst	r25, 7
    1b22:	1e f4       	brtc	.+6      	; 0x1b2a <itoa+0x1c>
    1b24:	90 95       	com	r25
    1b26:	81 95       	neg	r24
    1b28:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2a:	64 2f       	mov	r22, r20
    1b2c:	77 27       	eor	r23, r23
    1b2e:	0e 94 89 0c 	call	0x1912	; 0x1912 <__udivmodhi4>
    1b32:	80 5d       	subi	r24, 0xD0	; 208
    1b34:	8a 33       	cpi	r24, 0x3A	; 58
    1b36:	0c f0       	brlt	.+2      	; 0x1b3a <itoa+0x2c>
    1b38:	89 5d       	subi	r24, 0xD9	; 217
    1b3a:	81 93       	st	Z+, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	a1 f7       	brne	.-24     	; 0x1b2a <itoa+0x1c>
    1b42:	16 f4       	brtc	.+4      	; 0x1b48 <itoa+0x3a>
    1b44:	5d e2       	ldi	r21, 0x2D	; 45
    1b46:	51 93       	st	Z+, r21
    1b48:	10 82       	st	Z, r1
    1b4a:	c9 01       	movw	r24, r18
    1b4c:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <strrev>

00001b50 <ltoa>:
    1b50:	fa 01       	movw	r30, r20
    1b52:	cf 93       	push	r28
    1b54:	ff 93       	push	r31
    1b56:	ef 93       	push	r30
    1b58:	22 30       	cpi	r18, 0x02	; 2
    1b5a:	44 f1       	brlt	.+80     	; 0x1bac <ltoa+0x5c>
    1b5c:	25 32       	cpi	r18, 0x25	; 37
    1b5e:	34 f5       	brge	.+76     	; 0x1bac <ltoa+0x5c>
    1b60:	c2 2f       	mov	r28, r18
    1b62:	e8 94       	clt
    1b64:	ca 30       	cpi	r28, 0x0A	; 10
    1b66:	49 f4       	brne	.+18     	; 0x1b7a <ltoa+0x2a>
    1b68:	97 fb       	bst	r25, 7
    1b6a:	3e f4       	brtc	.+14     	; 0x1b7a <ltoa+0x2a>
    1b6c:	90 95       	com	r25
    1b6e:	80 95       	com	r24
    1b70:	70 95       	com	r23
    1b72:	61 95       	neg	r22
    1b74:	7f 4f       	sbci	r23, 0xFF	; 255
    1b76:	8f 4f       	sbci	r24, 0xFF	; 255
    1b78:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7a:	2c 2f       	mov	r18, r28
    1b7c:	33 27       	eor	r19, r19
    1b7e:	44 27       	eor	r20, r20
    1b80:	55 27       	eor	r21, r21
    1b82:	ff 93       	push	r31
    1b84:	ef 93       	push	r30
    1b86:	0e 94 9d 0c 	call	0x193a	; 0x193a <__udivmodsi4>
    1b8a:	ef 91       	pop	r30
    1b8c:	ff 91       	pop	r31
    1b8e:	60 5d       	subi	r22, 0xD0	; 208
    1b90:	6a 33       	cpi	r22, 0x3A	; 58
    1b92:	0c f0       	brlt	.+2      	; 0x1b96 <ltoa+0x46>
    1b94:	69 5d       	subi	r22, 0xD9	; 217
    1b96:	61 93       	st	Z+, r22
    1b98:	b9 01       	movw	r22, r18
    1b9a:	ca 01       	movw	r24, r20
    1b9c:	60 50       	subi	r22, 0x00	; 0
    1b9e:	70 40       	sbci	r23, 0x00	; 0
    1ba0:	80 40       	sbci	r24, 0x00	; 0
    1ba2:	90 40       	sbci	r25, 0x00	; 0
    1ba4:	51 f7       	brne	.-44     	; 0x1b7a <ltoa+0x2a>
    1ba6:	16 f4       	brtc	.+4      	; 0x1bac <ltoa+0x5c>
    1ba8:	cd e2       	ldi	r28, 0x2D	; 45
    1baa:	c1 93       	st	Z+, r28
    1bac:	10 82       	st	Z, r1
    1bae:	8f 91       	pop	r24
    1bb0:	9f 91       	pop	r25
    1bb2:	cf 91       	pop	r28
    1bb4:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <strrev>

00001bb8 <__mulsi_const_10>:
    1bb8:	59 2f       	mov	r21, r25
    1bba:	48 2f       	mov	r20, r24
    1bbc:	37 2f       	mov	r19, r23
    1bbe:	26 2f       	mov	r18, r22
    1bc0:	66 0f       	add	r22, r22
    1bc2:	77 1f       	adc	r23, r23
    1bc4:	88 1f       	adc	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	66 0f       	add	r22, r22
    1bca:	77 1f       	adc	r23, r23
    1bcc:	88 1f       	adc	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	62 0f       	add	r22, r18
    1bd2:	73 1f       	adc	r23, r19
    1bd4:	84 1f       	adc	r24, r20
    1bd6:	95 1f       	adc	r25, r21
    1bd8:	66 0f       	add	r22, r22
    1bda:	77 1f       	adc	r23, r23
    1bdc:	88 1f       	adc	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	08 95       	ret

00001be2 <__mulhi_const_10>:
    1be2:	7a e0       	ldi	r23, 0x0A	; 10
    1be4:	97 9f       	mul	r25, r23
    1be6:	90 2d       	mov	r25, r0
    1be8:	87 9f       	mul	r24, r23
    1bea:	80 2d       	mov	r24, r0
    1bec:	91 0d       	add	r25, r1
    1bee:	11 24       	eor	r1, r1
    1bf0:	08 95       	ret

00001bf2 <strrev>:
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	67 2f       	mov	r22, r23
    1bf8:	71 91       	ld	r23, Z+
    1bfa:	77 23       	and	r23, r23
    1bfc:	e1 f7       	brne	.-8      	; 0x1bf6 <strrev+0x4>
    1bfe:	32 97       	sbiw	r30, 0x02	; 2
    1c00:	04 c0       	rjmp	.+8      	; 0x1c0a <strrev+0x18>
    1c02:	7c 91       	ld	r23, X
    1c04:	6d 93       	st	X+, r22
    1c06:	70 83       	st	Z, r23
    1c08:	62 91       	ld	r22, -Z
    1c0a:	ae 17       	cp	r26, r30
    1c0c:	bf 07       	cpc	r27, r31
    1c0e:	c8 f3       	brcs	.-14     	; 0x1c02 <strrev+0x10>
    1c10:	08 95       	ret

00001c12 <__prologue_saves__>:
    1c12:	2f 92       	push	r2
    1c14:	3f 92       	push	r3
    1c16:	4f 92       	push	r4
    1c18:	5f 92       	push	r5
    1c1a:	6f 92       	push	r6
    1c1c:	7f 92       	push	r7
    1c1e:	8f 92       	push	r8
    1c20:	9f 92       	push	r9
    1c22:	af 92       	push	r10
    1c24:	bf 92       	push	r11
    1c26:	cf 92       	push	r12
    1c28:	df 92       	push	r13
    1c2a:	ef 92       	push	r14
    1c2c:	ff 92       	push	r15
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	ca 1b       	sub	r28, r26
    1c3c:	db 0b       	sbc	r29, r27
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	09 94       	ijmp

00001c4a <__epilogue_restores__>:
    1c4a:	2a 88       	ldd	r2, Y+18	; 0x12
    1c4c:	39 88       	ldd	r3, Y+17	; 0x11
    1c4e:	48 88       	ldd	r4, Y+16	; 0x10
    1c50:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c52:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c54:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c56:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c58:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c5a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c5c:	b9 84       	ldd	r11, Y+9	; 0x09
    1c5e:	c8 84       	ldd	r12, Y+8	; 0x08
    1c60:	df 80       	ldd	r13, Y+7	; 0x07
    1c62:	ee 80       	ldd	r14, Y+6	; 0x06
    1c64:	fd 80       	ldd	r15, Y+5	; 0x05
    1c66:	0c 81       	ldd	r16, Y+4	; 0x04
    1c68:	1b 81       	ldd	r17, Y+3	; 0x03
    1c6a:	aa 81       	ldd	r26, Y+2	; 0x02
    1c6c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c6e:	ce 0f       	add	r28, r30
    1c70:	d1 1d       	adc	r29, r1
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	ed 01       	movw	r28, r26
    1c7e:	08 95       	ret

00001c80 <_exit>:
    1c80:	f8 94       	cli

00001c82 <__stop_program>:
    1c82:	ff cf       	rjmp	.-2      	; 0x1c82 <__stop_program>
