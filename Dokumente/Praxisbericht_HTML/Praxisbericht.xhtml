<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg">
  <head>
    <title/>
    <!--Generated by LaTeXML (version 0.7.9alpha) on 2012-06-25T00:24:04+02:00.
        See http://dlmf.nist.gov/LaTeXML/-->
<meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8"/>
    <link rel="stylesheet" type="text/css" href="core.css"/>
  </head>
  <body>
    <div class="main">
    <div class="content"><div class="document">
    <h6>List of Figures:</h6>
  <ul class="toc">
  <li class="tocentry"><a href="#Ch3.F1" title="Figure 3.1 ‣ Chapter 3 Vorstellung der vorhandenen Hardware" class="ref toc"><span class="text reftitle"><span class="tag">3.1 </span>Blick auf den Arbeitsaufbau</span></a></li>
  <li class="tocentry"><a href="#Ch3.F2" title="Figure 3.2 ‣ 3.2 3D-Laserscanner VI-900 ‣ Chapter 3 Vorstellung der vorhandenen Hardware" class="ref toc"><span class="text reftitle"><span class="tag">3.2 </span>VI-900 - Kamera oben, Lasertriangulator unten</span></a></li>
  <li class="tocentry"><a href="#Ch3.F3" title="Figure 3.3 ‣ 3.2.1 Lasertriangulator Prinzip ‣ 3.2 3D-Laserscanner VI-900 ‣ Chapter 3 Vorstellung der vorhandenen Hardware" class="ref toc"><span class="text reftitle"><span class="tag">3.3 </span>Prinzip: Laser-Triangulation</span></a></li>
  <li class="tocentry"><a href="#Ch3.F4" title="Figure 3.4 ‣ 3.3.1 Drehtisch ‣ 3.3 Drehtisch und Ansteuerung ‣ Chapter 3 Vorstellung der vorhandenen Hardware" class="ref toc"><span class="text reftitle"><span class="tag">3.4 </span>Drehtisch</span></a></li>
  <li class="tocentry"><a href="#Ch3.F5" title="Figure 3.5 ‣ 3.3.4 Schrittmotorkarten ‣ 3.3 Drehtisch und Ansteuerung ‣ Chapter 3 Vorstellung der vorhandenen Hardware" class="ref toc"><span class="text reftitle"><span class="tag">3.5 </span>Ansteuerung im 19”-Rack</span></a></li>
  <li class="tocentry"><a href="#Ch3.F6" title="Figure 3.6 ‣ 3.4 Mikrocontroller ‣ Chapter 3 Vorstellung der vorhandenen Hardware" class="ref toc"><span class="text reftitle"><span class="tag">3.6 </span>Block Diagramm: Mikrocontroller ATmega324A<cite class="cite">()</cite></span></a></li>
  <li class="tocentry"><a href="#Ch3.F7" title="Figure 3.7 ‣ 3.4.1 Entwicklerboard STK500 ‣ 3.4 Mikrocontroller ‣ Chapter 3 Vorstellung der vorhandenen Hardware" class="ref toc"><span class="text reftitle"><span class="tag">3.7 </span>Schemazeichnung eines STK500<cite class="cite">()</cite></span></a></li>
  <li class="tocentry"><a href="#Ch5.F1" title="Figure 5.1 ‣ 5.4.1 Netzteil ‣ 5.4 Verbesserungen an der vorhandenen Hardware ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">5.1 </span>Stromverbinder - Y-Kabel<cite class="cite">()</cite></span></a></li>
  <li class="tocentry"><a href="#Ch5.F2" title="Figure 5.2 ‣ 5.4.3 Motor- und Endschalterverkabelung ‣ 5.4 Verbesserungen an der vorhandenen Hardware ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">5.2 </span>Motor- und Endschalterverkabelung</span></a></li>
  <li class="tocentry"><a href="#Ch5.F3" title="Figure 5.3 ‣ 5.4.4 Endschalter ‣ 5.4 Verbesserungen an der vorhandenen Hardware ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">5.3 </span>Endschalterverkabelung</span></a></li>
  <li class="tocentry"><a href="#Ch5.F4" title="Figure 5.4 ‣ 5.4.5 Zweite serielle Schnittstelle ‣ 5.4 Verbesserungen an der vorhandenen Hardware ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">5.4 </span>Schaltplan für die zweite serielle Schnittstelle
<cite class="cite">()</cite></span></a></li>
  <li class="tocentry"><a href="#Ch5.F5" title="Figure 5.5 ‣ 5.5 Kommunikation mit RapidForm2004 ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">5.5 </span>Schema der Kommunikation</span></a></li>
  <li class="tocentry"><a href="#Ch5.F6" title="Figure 5.6 ‣ 5.7 Platinenlayout und 19”-Einschub ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">5.6 </span>Schaltplan</span></a></li>
  <li class="tocentry"><a href="#Ch5.F7" title="Figure 5.7 ‣ 5.7 Platinenlayout und 19”-Einschub ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">5.7 </span>Platinenlayout</span></a></li>
  <li class="tocentry"><a href="#Ch5.F8" title="Figure 5.8 ‣ 5.7 Platinenlayout und 19”-Einschub ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">5.8 </span>19”-Einschub</span></a></li>
    </ul>
    <h6>List of Tables:</h6>
  <ul class="toc">
  <li class="tocentry"><a href="#Ch3.T1" title="Table 3.1 ‣ Chapter 3 Vorstellung der vorhandenen Hardware" class="ref toc"><span class="text reftitle"><span class="tag">3.1 </span>Komponenten im Aufbau</span></a></li>
  <li class="tocentry"><a href="#Ch6.T1" title="Table 6.1 ‣ 5.4.3 Motor- und Endschalterverkabelung ‣ 5.4 Verbesserungen an der vorhandenen Hardware ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">6.1 </span>Fuses</span></a></li>
  <li class="tocentry"><a href="#Ch6.T1a" title="Table 6.1 ‣ 6.3 Fuses ‣ Chapter 6 Probleme und Lösungen" class="ref toc"><span class="text reftitle"><span class="tag">6.1 </span>Fuses</span></a></li>
    </ul>
    <h6>Codeverzeichnis:</h6>
  <ul class="toc">
  <li class="tocentry"><a href="#LSTx1" title="Chapter 1 Hinweise zum Dokument" class="ref toc"><span class="text reftitle">Code/Hinweis.c</span></a></li>
  <li class="tocentry"><a href="#LST1" title="1 ‣ 5.1.1 Taster ‣ 5.1 Bereitstellen grundlegender Funktionalitäten ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">1 </span>Taster</span></a></li>
  <li class="tocentry"><a href="#LST2" title="2 ‣ 5.1.2 LEDs ‣ 5.1 Bereitstellen grundlegender Funktionalitäten ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">2 </span>LEDs</span></a></li>
  <li class="tocentry"><a href="#LST3" title="3 ‣ 5.1.3 Ansteuerung des LC-Display ‣ 5.1 Bereitstellen grundlegender Funktionalitäten ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">3 </span>lcd.h (Auszug)</span></a></li>
  <li class="tocentry"><a href="#LST4" title="4 ‣ 5.1.4 RS-232-Schnittstelle ‣ 5.1 Bereitstellen grundlegender Funktionalitäten ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">4 </span>RS-232</span></a></li>
  <li class="tocentry"><a href="#LST5" title="5 ‣ 5.2 Befehlssätze ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">5 </span>Befehlssatz aus Rapidform: Isel</span></a></li>
  <li class="tocentry"><a href="#LST6" title="6 ‣ 5.3.1 Befehle senden ‣ 5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">6 </span>Menü</span></a></li>
  <li class="tocentry"><a href="#LST7" title="7 ‣ 5.3.1 Befehle senden ‣ 5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">7 </span>Menü Baum</span></a></li>
  <li class="tocentry"><a href="#LST8" title="8 ‣ 5.3.2 Antworten empfangen und speichern ‣ 5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">8 </span>RS-232 Empfang</span></a></li>
  <li class="tocentry"><a href="#LST9" title="9 ‣ 5.3.3 Antworten auswerten ‣ 5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">9 </span>FindStringInArray()</span></a></li>
  <li class="tocentry"><a href="#LST10" title="10 ‣ 5.3.3 Antworten auswerten ‣ 5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">10 </span>switchStepper()</span></a></li>
  <li class="tocentry"><a href="#LST11" title="11 ‣ 5.5.1 Befehle empfangen ‣ 5.5 Kommunikation mit RapidForm2004 ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">11 </span>RS-232 Empfang - RapidForm2004</span></a></li>
  <li class="tocentry"><a href="#LST12" title="12 ‣ 5.5.1.1 Automatische Auswahl eines Befehlssatzes ‣ 5.5.1 Befehle empfangen ‣ 5.5 Kommunikation mit RapidForm2004 ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">12 </span>Funktion: uart rx()</span></a></li>
  <li class="tocentry"><a href="#LST13" title="13 ‣ 5.5.1.1 Automatische Auswahl eines Befehlssatzes ‣ 5.5.1 Befehle empfangen ‣ 5.5 Kommunikation mit RapidForm2004 ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">13 </span>Funktion: switch Motor()</span></a></li>
  <li class="tocentry"><a href="#LST14" title="14 ‣ 5.6.1 Auswerte-Funktion für Isel-Motoren ‣ 5.6 Auswerte-Funktionen ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">14 </span>Übersetzungs Logik für einen Isel-Motor</span></a></li>
  <li class="tocentry"><a href="#LST15" title="15 ‣ 5.6.1.1 Initialisierung ‣ 5.6.1 Auswerte-Funktion für Isel-Motoren ‣ 5.6 Auswerte-Funktionen ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">15 </span>case 3: Initialisierung</span></a></li>
  <li class="tocentry"><a href="#LST16" title="16 ‣ 5.6.1.2 Statusabfrage ‣ 5.6.1 Auswerte-Funktion für Isel-Motoren ‣ 5.6 Auswerte-Funktionen ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">16 </span>case 4: Statusabfrage</span></a></li>
  <li class="tocentry"><a href="#LST17" title="17 ‣ 5.6.1.3 Rotation ‣ 5.6.1 Auswerte-Funktion für Isel-Motoren ‣ 5.6 Auswerte-Funktionen ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">17 </span>case 5: Rotation</span></a></li>
  <li class="tocentry"><a href="#LST18" title="18 ‣ 5.6.1.3 Rotation ‣ 5.6.1 Auswerte-Funktion für Isel-Motoren ‣ 5.6 Auswerte-Funktionen ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref toc"><span class="text reftitle"><span class="tag">18 </span>Funktion: string zerlegen Isel()</span></a></li>
  <li class="tocentry"><a href="#LST19" title="19 ‣ 6.2.1 Endschalter ‣ 6.2 Interrupts ‣ Chapter 6 Probleme und Lösungen" class="ref toc"><span class="text reftitle"><span class="tag">19 </span>ISR: Endschalter</span></a></li>
  <li class="tocentry"><a href="#LST20" title="20 ‣ 6.2.2 Watchdog ‣ 6.2 Interrupts ‣ Chapter 6 Probleme und Lösungen" class="ref toc"><span class="text reftitle"><span class="tag">20 </span>Watchdog</span></a></li>
    </ul><div id="Ch1" class="chapter"><h2 class="title chapter-title"><span class="tag">Chapter 1 </span>Hinweise zum Dokument</h2><div id="Ch1.p1" class="para"><p class="p">1</p></div><div id="Ch1.p2" class="para"><p class="p"><span class="text" style="background-color:#D9D9FF;">Fachbegriffe</span> werden blau hinterlegt.<br class="break"/></p></div><div id="Ch1.p3" class="para"><p class="p"><em class="emph">Eigennamen</em> werden kursiv dargestellt.<br class="break"/></p></div><div id="Ch1.p4" class="para"><p class="p"><span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">Code-Fragmente</span> werden gelb hinterlegt.<br class="break"/></p></div><div id="LSTx1" class="listing language_C"><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote">//<span class="text" style="color:#008000;">Quelltext<span class="text lstspace"> </span>wird<span class="text lstspace"> </span>in<span class="text lstspace"> </span>diesen<span class="text lstspace"> </span>Codelistings<span class="text lstspace"> </span>dargestellt.</span></span></td></tr></table></div><div id="Ch1.p5" class="para"><p class="p">Der komplette Quelltext für den Mikrocontroller, der Quelltext für diese Dokumentation, die Dokumentation selbst und weitere Bilder können unter <a href="https://github.com/JoeD84/Praxisprojekt" title="" class="ref url"><span class="text typewriter">https://github.com/JoeD84/Praxisprojekt</span></a> abgerufen werden.

</p></div></div><div id="Ch2" class="chapter"><h2 class="title chapter-title"><span class="tag">Chapter 2 </span>Einleitung</h2><div id="Ch2.p1" class="para"><p class="p">Ein 3D-Laserscanner bietet vielfältige Möglichkeiten und Einsatzgebiete. Die Haupt-einsatzgebiete finden sich in der Bauteileprüfung, der Erstellung von Finite-Elemente-Daten in Verbindung mit Bauteilanalyse, der Erstellung von 3D-Daten, der Kontrolle von Zubehörteilen und dem Reverse-Engineering.<br class="break"/>Im Besitz der Fachhochschule Koblenz befindet sich ein komplettes 3D-Laserer-fassungssystem. Dazu gehören eine Erfassungssoftware, ein 3D-Laserscanner und ein Drehtisch. Bisher müssen für eine Aufnahme, alle Komponenten zueinander passen. Der Drehtisch in diesem System ist jedoch ein Eigenbau der Fachhochschule Koblenz und die darin verbaute Drehtischsteuerung nicht kompatibel zu denen, von der Erfassungssoftware unterstützten, Drehtischsteuerungen.<br class="break"/>Mittels eines Mikrocontrollers soll der vorhandene Aufbau so erweitert werden, dass der Drehtisch von der Software angesteuert werden kann und so der volle Umfang des Systems nutzbar gemacht werden. Dabei sind folgende Aufgaben zu realisieren. Die Höhenverstellung des Drehtisches soll genutzt werden können und die verbauten Endschalter ihre vorhergesehene Funktion erfüllen. Der Mikrocontroller soll sich mit mehreren Tastern bedienen lassen und über ein LC-Display verfügen, welches den aktuellen Status anzeigt. Mit einer Schritt-für-Schritt-Anleitung soll es auch für Studenten und Mitarbeiter der Fachhochschule möglich sein, schnell und einfach eine Aufnahme durchzuführen. Die Daten dieser Aufnahme sollen exportiert und in z.B. CAD-Anwendungen nutzbar sein. <br class="break"/>Der Aufbau der Arbeit gliedert sich im Wesentlichen in die Vorstellung der vorhandenen Hard- und Software, dem chronologischen Arbeitsablauf während des Projektes, ein Kapitel das Probleme und deren Lösungen aufzeigt, in ein Fazit und mögliche zukünftige Verbesserungen. Im Anhang befindet sich eine Schritt-für-Schritt-Anleitung die es Laien ermöglicht 3D-Modelle aufzunehmen und zu exportieren.
   </p></div></div><div id="Ch3" class="chapter"><h2 class="title chapter-title"><span class="tag">Chapter 3 </span>Vorstellung der vorhandenen Hardware</h2><div id="Ch3.p1" class="para"><p class="p">Die Hardware besteht im Wesentlichen aus den Komponenten in Abbildung <a href="#Ch3.F1" title="Figure 3.1 ‣ Chapter 3 Vorstellung der vorhandenen Hardware" class="ref"><span class="text reftag">3.1</span></a>.</p></div><div id="Ch3.F1" class="figure"><img src="" id="Ch3.F1.g1" class="graphics centering"/><div class="caption centering"><span class="tag">Figure 3.1: </span>Blick auf den Arbeitsaufbau</div></div><div id="Ch3.T1" class="table"><div class="caption"><span class="tag">Table 3.1: </span>Komponenten im Aufbau</div><table class="tabular"><thead class="thead"><tr class="tr">
    <th class="td l r t" align="center"><span class="rule" style="width:0.0pt;height:10.75pt;position:relative; bottom:-4.3pt;background:black"/> 1</th>
    <th class="td r t" align="left">Computer</th></tr></thead><tbody class="tbody"><tr class="tr">
    <th class="td l r t" align="center"><span class="rule" style="width:0.0pt;height:10.75pt;position:relative; bottom:-4.3pt;background:black"/> 2</th>
    <td class="td r t" align="left">3D-Laserscanner VI-900</td></tr><tr class="tr">
    <th class="td l r t" align="center"><span class="rule" style="width:0.0pt;height:10.75pt;position:relative; bottom:-4.3pt;background:black"/> 3</th>
    <td class="td r t" align="left">Ansteuerung für den Drehtisch</td></tr><tr class="tr">
    <th class="td l r t" align="center"><span class="rule" style="width:0.0pt;height:10.75pt;position:relative; bottom:-4.3pt;background:black"/> 4</th>
    <td class="td r t" align="left">Drehtisch</td></tr><tr class="tr">
    <th class="td b l r t" align="center"><span class="rule" style="width:0.0pt;height:10.75pt;position:relative; bottom:-4.3pt;background:black"/> 5</th>
    <td class="td b r t" align="left">Zu scannendes Objekt (Kalibrierblech)</td></tr></tbody></table></div><div id="Ch3.S1" class="section"><h3 class="title section-title"><span class="tag">3.1 </span>Computer</h3><div id="Ch3.S1.p1" class="para"><p class="p">Zur Verfügung steht ein IBM kompatibler x86 Standard PC mit einer <span class="text" style="background-color:#D9D9FF;">SCSI-</span> und einer <span class="text" style="background-color:#D9D9FF;">RS-232-Schnittstelle</span>. Auf diesem ist die Erfassungssoftware <em class="emph">RapidForm2004</em> [<span class="ref here">LABEL:sec:V_Software</span>] installiert. Die SCSI Schnittstelle wird zur Kommunikation mit dem 3D-Laserscanner und die RS-232-Schnittstelle zur Kommunikation mit einer Schrittmotorsteuerung genutzt.</p></div></div><div id="Ch3.S2" class="section"><h3 class="title section-title"><span class="tag">3.2 </span>3D-Laserscanner VI-900</h3><div id="Ch3.S2.p1" class="para"><p class="p">Der 3D-Laserscanner <em class="emph">VI-900</em> der Firma <em class="emph">Konica Minolta</em>[<span class="ref here">LABEL:sec:V_Hardware</span>] besteht, wie auf Abbildung <a href="#Ch3.F2" title="Figure 3.2 ‣ 3.2 3D-Laserscanner VI-900 ‣ Chapter 3 Vorstellung der vorhandenen Hardware" class="ref"><span class="text reftag">3.2</span></a> zu sehen, aus einer Kamera und einem <span class="text" style="background-color:#D9D9FF;">Lasertriangulator</span>. Das System lässt sich über eine SCSI-Schnittstelle ansprechen und konfigurieren. Zur mobilen Nutzung kann das Gerät auch auf der Rückseite bedient werden. Aufgenommene Daten können auf einer <span class="text" style="background-color:#D9D9FF;">CF-Karte</span> gespeichert werden. Im Projekt wurde jedoch lediglich die direkte Ansteuerung via SCSI genutzt.<br class="break"/>Der VI-900 digitalisiert Objekte durch ein Laser-Lichtschnittverfahren. Das vom Objekt reflektierte Licht wird von einer CCD-Flächenkamera erfasst, nach Ermittlung der Distanzwerte (Z-Achse) mittels Laser-Triangulation werden die 3D-Daten erstellt. Der Laserstrahl wird mit Hilfe eines hochpräzisen galvanischen Spiegels über das Objekt projiziert, pro Scan werden 640 x 480 Einzelpunkte erfasst.<cite class="cite">()</cite><br class="break"/>Die Technischen Daten befinden sich im Anhang in Tabelle <span class="ref here">LABEL:tab:TD_VI-910</span></p></div><div id="Ch3.F2" class="figure"><img src="" id="Ch3.F2.g1" class="graphics centering"/><div class="caption centering"><span class="tag">Figure 3.2: </span>VI-900 - Kamera oben, Lasertriangulator unten</div></div><div id="Ch3.S2.SS1" class="subsection"><h4 class="title subsection-title"><span class="tag">3.2.1 </span>Lasertriangulator Prinzip</h4><div id="Ch3.S2.SS1.p1" class="para"><p class="p">Ein Lasertriangulator besteht, wie in Abbildung <a href="#Ch3.F3" title="Figure 3.3 ‣ 3.2.1 Lasertriangulator Prinzip ‣ 3.2 3D-Laserscanner VI-900 ‣ Chapter 3 Vorstellung der vorhandenen Hardware" class="ref"><span class="text reftag">3.3</span></a> zu sehen, aus einem Laser, einem Linsensystem und im einfachsten Fall, aus einer Pixeldetektorzeile. Der Laser strahlt auf ein Objekt und je nach Entfernung des Objektes wird das Streulicht unter einem anderen Winkel zurückgestrahlt. Das Streulicht wird durch die Linsen auf den Pixeldetektor abgebildet. Über die Position des Laserspots auf dem Pixeldetektor lässt sich auf die Entfernung des Objektes schließen.</p></div><div id="Ch3.F3" class="figure"><img src="" id="Ch3.F3.g1" class="graphics centering"/><div class="caption centering"><span class="tag">Figure 3.3: </span>Prinzip: Laser-Triangulation</div></div></div></div><div id="Ch3.S3" class="section"><h3 class="title section-title"><span class="tag">3.3 </span>Drehtisch und Ansteuerung</h3><div id="Ch3.S3.SS1" class="subsection"><h4 class="title subsection-title"><span class="tag">3.3.1 </span>Drehtisch</h4><div id="Ch3.S3.SS1.p1" class="para"><p class="p">Der Tisch in dem der Drehtisch verbaut ist, ist eine Eigenkonstruktion der Werkstatt des RheinAhrCampus Remagen. Er besteht aus einer massiven Edelstahlarbeitsplatte, welche auf 4 Füßen ruht. Aus dieser ist ein Rechteck mit aufgesetztem Halbkreis ausgeschnitten. In diesem Ausschnitt befindet sich der Drehtisch(siehe Abbildung <a href="#Ch3.F4" title="Figure 3.4 ‣ 3.3.1 Drehtisch ‣ 3.3 Drehtisch und Ansteuerung ‣ Chapter 3 Vorstellung der vorhandenen Hardware" class="ref"><span class="text reftag">3.4</span></a>). Er ist auf einem Schienensystem gelagert. Mit dem Schienensystem kann der Drehtisch in der Vertikalen positioniert werden. Mit einem Schrittmotor lässt sich der Drehtisch zusätzlich in der Höhe verstellen. Die Höhenverstellung wird mit einem <span class="text" style="background-color:#D9D9FF;">Schneckengetriebe</span> realisiert. Ein weiterer Schrittmotor ist für die Drehung des Tisches zuständig. Der Tisch ist über ein <span class="text" style="background-color:#D9D9FF;">Harmonic-Drive-Getriebe</span> mit dem Schrittmotor verbunden. Das Übersetzungsverhältnis des Getriebes beträgt 1:50.</p></div><div id="Ch3.F4" class="figure"><img src="" id="Ch3.F4.g1" class="graphics centering"/><div class="caption centering"><span class="tag">Figure 3.4: </span>Drehtisch</div></div></div><div id="Ch3.S3.SS2" class="subsection"><h4 class="title subsection-title"><span class="tag">3.3.2 </span>Spannungsversorgung</h4><div id="Ch3.S3.SS2.p1" class="para"><p class="p">Die Schrittmotorkarten werden von einem PC-Netzteil gespeist. Die <span class="text" style="background-color:#D9D9FF;">Logikbausteine</span> werden mit 5V gespeist, zusätzlich werden die Schrittmotorkarten mit 12V für die Schrittmotoren gespeist. Die Kabel sind direkt an die Verbindungsleisten gelötet.<br class="break"/>Dies verhindert das einfache Ausbauen der Spannungsversorgung und die einfache Erweiterung um neue Einschubkarten.</p></div></div><div id="Ch3.S3.SS3" class="subsection"><h4 class="title subsection-title"><span class="tag">3.3.3 </span>Schrittmotoren</h4><div id="Ch3.S3.SS3.p1" class="para"><p class="p">Für die Rotation kommt der Schrittmotor 440-458 der Firma R+S zum Einsatz. Dieser hat einen Schrittwinkel von 1,8°, eine Haltedrehmoment von 500mNm, wird mit 8-Drahtleitung verschaltet und mit 12V Gleichspannung versorgt. Aus dem Schrittwinkel ergeben sich 200 Schritte pro Umdrehung. Diese werden mit einem <span class="text" style="background-color:#D9D9FF;">Harmonic-Drive-Getriebe</span>, mit einer Übersetzung von 500:1, auf 100.000 Schritte pro Umdrehung erhöht.<br class="break"/>Für die Höhenverstellung wird der Schrittmotor 440-420, ebenfalls von der Firma R+S, verwendet. Dieser hat auch einen Schrittwinkel von 1,8°, hat jedoch ein Haltemoment von 70mNm, wird in 6-Drahtleitung verschaltet und mit 5V Gleichspannung gespeist. Dieser ist mit einer Übersetzung von 5:1 und einem Schneckengetriebe mit dem Drehtisch verbunden.</p></div></div><div id="Ch3.S3.SS4" class="subsection"><h4 class="title subsection-title"><span class="tag">3.3.4 </span>Schrittmotorkarten</h4><div id="Ch3.S3.SS4.p1" class="para"><p class="p">Die Ansteuerung für die Schrittmotoren sind als 19”-Einschübe realisiert, siehe Abbildung <a href="#Ch3.F5" title="Figure 3.5 ‣ 3.3.4 Schrittmotorkarten ‣ 3.3 Drehtisch und Ansteuerung ‣ Chapter 3 Vorstellung der vorhandenen Hardware" class="ref"><span class="text reftag">3.5</span></a> links. Für jeden Schrittmotor wird ein Einschub benötigt.
Die Einschübe sind Produkte der Firma R+S. Mittels <span class="text" style="background-color:#D9D9FF;">RS-232 Schnittstelle</span> lassen sich die Karten konfigurieren und ansteuern. Die Konfiguration und Ansteuerung erfolgt über einen vorgegeben
<span class="text" style="background-color:#D9D9FF;">ASCII</span><span class="note footnote"><sup class="mark">1</sup><span class="note_content_outer"><span class="note_content"><sup class="mark">1</sup>Der American Standard Code for Information Interchange (ASCII, alternativ US-ASCII, oft [æski] ausgesprochen) ist eine 7-Bit-Zeichenkodierung<cite class="cite">()</cite></span></span></span>
Befehlssatz. Der Befehlssatz befindet sich im Kapitel <span class="ref here">LABEL:sec:A_ASCII_Befehle</span>. Es können zwei oder mehr Karten als
<span class="text" style="background-color:#D9D9FF;">Daisy-Chain</span><span class="note footnote"><sup class="mark">2</sup><span class="note_content_outer"><span class="note_content"><sup class="mark">2</sup>Als Daisy Chain (englisch, wörtlich „Gänseblümchenkette“) bezeichnet man eine Anzahl von Hardware-Komponenten, welche in Serie miteinander verbunden sind (meist in sogenannten Bussystemen in der Automatisierungstechnik).<cite class="cite">()</cite> </span></span></span> in Reihe geschaltet werden.<br class="break"/>Zu Beginn des Projekts war nur die erste Schrittmotorsteuerung vorbereitet.</p></div><div id="Ch3.F5" class="figure"><img src="" id="Ch3.F5.g1" class="graphics centering"/><div class="caption centering"><span class="tag">Figure 3.5: </span>Ansteuerung im 19”-Rack</div></div></div><div id="Ch3.S3.SS5" class="subsection"><h4 class="title subsection-title"><span class="tag">3.3.5 </span>Motorverkabelung</h4><div id="Ch3.S3.SS5.p1" class="para"><p class="p">Die Schrittmotoren benötigen ein mindestens 4-adriges Kabel. Das Kabel für den Schrittmotor, der für die Rotation zuständig ist, war bereits gefertigt. Ein Kabel zwischen Schrittmotor und Schrittmotorkarte zur Höhenverstellung und für die Endschalter war nicht vorhanden und wurde im Verlauf des Projekts gefertigt.</p></div></div><div id="Ch3.S3.SS6" class="subsection"><h4 class="title subsection-title"><span class="tag">3.3.6 </span>Endschalter</h4><div id="Ch3.S3.SS6.p1" class="para"><p class="p">Die Schrittmotorkarten unterstützen das Abschalten der Motoren wenn ein sogenannter Endschalter ausgelöst wird. Dies sind im allgemeinen mechanische Schalter die ausgelöst werden wenn der Tisch sich dem Ende des Arbeitsbereiches nähert. Dies verhindert eine Beschädigung des Aufbaus.<br class="break"/>Im Aufbau sind bereits induktive Endschalter der Firma <span class="text italic">Pepperl+Fuchs</span> verbaut. Diese werden durch einen Metallstutzen ausgelöst. Dieser ist jedoch schlecht positioniert oder ungenügend lang. Würde der Drehtisch über seine Grenzen hinaus in der Höhe verstellt werden, würden die Endschalter nicht rechtzeitig ausgelöst werden und der Aufbau würde beschädigt werden.</p></div></div></div><div id="Ch3.S4" class="section"><h3 class="title section-title"><span class="tag">3.4 </span>Mikrocontroller</h3><div id="Ch3.S4.p1" class="para"><p class="p">Ein Mikrocontroller besteht, wie in Abbildung <a href="#Ch3.F6" title="Figure 3.6 ‣ 3.4 Mikrocontroller ‣ Chapter 3 Vorstellung der vorhandenen Hardware" class="ref"><span class="text reftag">3.6</span></a> zu sehen, aus CPU, Flash-Speicher, EEPROM, Registern, Ports und mehreren Peripherie-Funktionen wie z.B. Timern, ADC, DAC und seriellen Schnittstellen. Für unterschiedliche Aufgaben können unterschiedliche Mikrocontroller verwendet werden, welche sich in ihrem Funktionsumfang unterscheiden.<br class="break"/>Besonders Wichtig im Mikrocontroller sind die sogenannten Register. Dieses sind spezielle, meist 8-Bit breite, Abschnitte im Speicher. Sie repräsentieren Werte und Einstellungen im Mikrocontroller. Diese können  beschrieben und ausgelesen oder nur ausgelesen werden. Durch das Auslesen oder Beschreiben der Register kann der Mikrocontroller mit internen und externen Komponenten interagieren. Die Register die zur externen Kommunikation dienen werden als Ports bezeichnet. <br class="break"/>Es stand ein ATmega8515 <cite class="cite">()</cite> im DIL-Gehäuse zur Verfügung. Dieser hatte 8 Kbyte Flash, drei externe Interrupts, eine serielle Schnittstelle und konnte mit bis zu 16 MHz betrieben werden.
Dieser war geeignet um sich mit den speziellen Eigenheiten der Mikrocontroller Programmierung vertraut zu machen.</p></div><div id="Ch3.F6" class="figure"><img src="" id="Ch3.F6.g1" class="graphics centering"/><div class="caption centering"><span class="tag">Figure 3.6: </span>Block Diagramm: Mikrocontroller ATmega324A<cite class="cite">()</cite></div></div><div id="Ch3.S4.SS1" class="subsection"><h4 class="title subsection-title"><span class="tag">3.4.1 </span>Entwicklerboard STK500</h4><div id="Ch3.S4.SS1.p1" class="para"><p class="p">Um den Mikrocontroller zu programmieren und die Programmierung zu überprüfen, wird das <span class="text" style="background-color:#D9D9FF;">Entwicklerboard</span> <em class="emph">STK500</em>[<span class="ref here">LABEL:sec:V_Hardware</span>], wie auf Abbildung <a href="#Ch3.F7" title="Figure 3.7 ‣ 3.4.1 Entwicklerboard STK500 ‣ 3.4 Mikrocontroller ‣ Chapter 3 Vorstellung der vorhandenen Hardware" class="ref"><span class="text reftag">3.7</span></a> zu sehen, verwendet. Das Board enthält mehrere Mikrocontroller-Steckplätze, 2 serielle Schnittstellen, 8 Taster, 8 LEDs, 2 Erweiterungsports, eine <span class="text" style="background-color:#D9D9FF;">ISP</span><span class="note footnote"><sup class="mark">3</sup><span class="note_content_outer"><span class="note_content"><sup class="mark">3</sup>In System Programmer</span></span></span> Programmierschnittstelle und mehrere Jumper zum Konfigurieren des Boards.<br class="break"/>Von den beiden seriellen Schnittstellen kann die Eine zur Programmierung des Mikrocontrollers verwendet werden. Die Andere kann zur Kommunikation mit dem Mikrocontroller genutzt werden.<br class="break"/>Auf dem Board stehen fünf 10 polige Stiftleisten
zur Verfügung. Diese sind direkt mit den Ein- und Ausgabe Pins, den sogenannten <em class="emph">Ports</em>, des Mikrocontroller verbunden und können über Flachbandkabel mit Hardwarekomponenten wie z.B. Taster, LED, LC-Displays oder seriellen Schnittstellen verbunden werden.</p></div><div id="Ch3.F7" class="figure"><img src="" id="Ch3.F7.g1" class="graphics centering"/><div class="caption centering"><span class="tag">Figure 3.7: </span>Schemazeichnung eines STK500<cite class="cite">()</cite></div></div></div><div id="Ch3.S4.SS2" class="subsection"><h4 class="title subsection-title"><span class="tag">3.4.2 </span>AVRISP mkII</h4><div id="Ch3.S4.SS2.p1" class="para"><p class="p">Der <em class="emph">AVRISP mkII</em>[<span class="ref here">LABEL:sec:V_Hardware</span>] ist ein USB-basierter <span class="text" style="background-color:#D9D9FF;">In-System-Programmer</span>. Dieser kann anstelle des RS-232 basierten Programmiersystem des STK500 verwendet werden.<br class="break"/>Die Übertragungsgeschwindigkeit des AVRISP mkII ist wesentlich höher als die der seriellen Schnittstelle.
Der AVRISP mkII lässt sich einfach an den Programmierport, eine 6-Polige Stiftleiste, des STK500 anschließen.</p></div></div><div id="Ch3.S4.SS3" class="subsection"><h4 class="title subsection-title"><span class="tag">3.4.3 </span>MAX232</h4><div id="Ch3.S4.SS3.p1" class="para"><p class="p">Um die serielle Schnittstelle am Mikrocontroller nutzen zu können, müssen die Spannungspegel auf die des RS-232 Standards gewandelt werden. Dazu befindet sich auf dem STK500 der <span class="text" style="background-color:#D9D9FF;">Pegelwandler</span> MAX232.
Dieser wandelt die Spannungspegel des Mikrocontrollers (typ. 0 V – 5 V <span class="text" style="background-color:#D9D9FF;">TTL</span><span class="note footnote"><sup class="mark">4</sup><span class="note_content_outer"><span class="note_content"><sup class="mark">4</sup>Transistor-Transistor-Logik</span></span></span>) auf die Spannungspegel des RS-232 Standards (typ. -12 V – +12 V).
 </p></div></div></div></div><div id="Ch4" class="chapter"><h2 class="title chapter-title"><span class="tag">Chapter 4 </span>Vorstellung der vorhandenen Software</h2><div id="Ch4.S1" class="section"><h3 class="title section-title"><span class="tag">4.1 </span>RapidForm2004</h3><div id="Ch4.S1.p1" class="para"><p class="p">Zur Erfassung von 3D-Modellen am PC steht die Software <em class="emph">RapidForm2004</em>[<span class="ref here">LABEL:sec:V_Software</span>] zur Verfügung. Diese ist zur Erfassung und Bearbeitung von 3D-Modellen gedacht. Sie bietet umfangreiche Möglichkeiten die aufgenommenen Modelle zu verbessern, zu verändern, zu vermessen und in verschiedene Formate zu exportieren.<br class="break"/>Mittels eines <span class="text" style="background-color:#D9D9FF;">Add-In</span> kann der VI-900 angesteuert und aufgenommenen Daten ausgelesen werden. Weiterhin kann das Add-In über eine RS-232-Schnittstelle verschiedene Drehtische ansteuern.</p></div></div><div id="Ch4.S2" class="section"><h3 class="title section-title"><span class="tag">4.2 </span>Entwicklungsumgebung</h3><div id="Ch4.S2.p1" class="para"><p class="p">Die von Atmel bereitgestellte Entwicklungsumgebung <em class="emph">AVR Studio 5</em>[<span class="ref here">LABEL:sec:V_Software</span>] besteht aus einem Editor, einem Compiler und einer Programmiersoftware. Der Editor bietet Komfortfunktionen wie <span class="text" style="background-color:#D9D9FF;">Syntaxhighlighting</span>, Autovervollständigung und Projektmanagement. Der Compiler übersetzt den Quelltext in einen maschinenlesbaren Code und die Programmiersoftware kann diesen auf einen Mikrocontroller spielen.</p></div></div><div id="Ch4.S3" class="section"><h3 class="title section-title"><span class="tag">4.3 </span>Terminalprogramme</h3><div id="Ch4.S3.p1" class="para"><p class="p">Zur Kommunikation über die RS-232-Schnittstelle steht das Programm <em class="emph">Hypterminal</em>[<span class="ref here">LABEL:sec:V_Software</span>] zur Verfügung. Dieses wurde im Verlauf des Projekts durch das wesentlich umfangreichere Open Source Programm <em class="emph">Putty</em>[<span class="ref here">LABEL:sec:V_Software</span>] abgelöst.
 </p></div></div></div><div id="Ch5" class="chapter"><h2 class="title chapter-title"><span class="tag">Chapter 5 </span>Zeitlicher Arbeitsablauf</h2><div id="Ch5.p1" class="para"><p class="p">Dieses Kapitel spiegelt den chronologischen Ablauf des Projektes wieder und zeigt die Schritte auf, die notwendig waren um den Mikrocontroller so zu programmieren, dass dieser die Kommunikation zwischen RapidForm2004 und der vorhandenen Schrittmotorkarte ermöglicht. So das er sozusagen als Übersetzer für die unterschiedlichen Befehlssätze von RapidForm2004 und dem der Schrittmotorkarte fungiert.
Kapitel <a href="#Ch5.S1" title="5.1 Bereitstellen grundlegender Funktionalitäten ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.1</span></a> beschreibt die Programmierung des Mikrocontrollers, welche die notwendigen Grundvoraussetzungen für dieses Projekt schafft. Das Ziel dieser Programmierung besteht darin die geforderten Komponenten, LEDs, LC-Display, Taster und serielle Schnittstellen im Mikrocontroller nutzbar zu machen.<br class="break"/>Kapitel <a href="#Ch5.S2" title="5.2 Befehlssätze ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.2</span></a> beschreibt die Erarbeitung der Befehlssätze die die Software RapidForm2004 enthält um mit den von ihr unterstützten Schrittmotorkarten zu kommunizieren. Auch der Befehlssatz zur Kommunikation zwischen dem Mikrocontroller und der Schrittmotorkarte wird beschrieben.<br class="break"/>Kapitel <a href="#Ch5.S3" title="5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.3</span></a> beschreibt wie der Mikrocontroller diesen Befehlssatz für die Kommunikation mit der vorhandenen Schrittmotorkarte nutzt.<br class="break"/>Kapitel <a href="#Ch5.S4" title="5.4 Verbesserungen an der vorhandenen Hardware ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.4</span></a> gibt die Schritte zur Entwicklung und Verbesserung der Hardware, um diese so zu erweitern, dass sie den Vorgaben entspricht, wieder.<br class="break"/>Kapitel <a href="#Ch5.S5" title="5.5 Kommunikation mit RapidForm2004 ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.5</span></a> erläutert die Kommunikation zwischen dem Mikrocontroller und RapidForm2004. <br class="break"/>Kapitel <a href="#Ch5.S6" title="5.6 Auswerte-Funktionen ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.6</span></a> beschreibt, wie die vorherigen Kapitel zusammenspielen, sodass eine reibungslose Kommunikation zwischen RapidForm2004 und der vorhandenen Schrittmotorkarte möglich ist.<br class="break"/>Kapitel <a href="#Ch5.S7" title="5.7 Platinenlayout und 19”-Einschub ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.7</span></a> beschreibt dann das Erstellen des Platinenlayouts und das Fertigen des Einschubs.</p></div><div id="Ch5.S1" class="section"><h3 class="title section-title"><span class="tag">5.1 </span>Bereitstellen grundlegender Funktionalitäten</h3><div id="Ch5.S1.p1" class="para"><p class="p">Im ersten Schritt ging es darum, den Mikrocontroller so zu programmieren, dass dieser die für dieses Projekt grundlegenden Funktionalitäten bereitstellen kann.<br class="break"/>Der Mikrocontroller befand sich vorerst auf dem <span class="text" style="background-color:#D9D9FF;">STK500</span>(siehe Kapitel <a href="#Ch3.S4.SS1" title="3.4.1 Entwicklerboard STK500 ‣ 3.4 Mikrocontroller ‣ Chapter 3 Vorstellung der vorhandenen Hardware" class="ref"><span class="text reftag">3.4.1</span></a>). Um dessen Komponenten im Mikrocontroller nutzen zu können, müssen dafür Register initialisiert werden oder Funktionalitäten wie z.B. Bibliotheken für das LC-Display bereit gestellt werden.<br class="break"/>Die folgenden Kapitel beschreiben den Programmcode, der notwendig ist um diese Funktionalitäten bereitzustellen.</p></div><div id="Ch5.S1.SS1" class="subsection"><h4 class="title subsection-title"><span class="tag">5.1.1 </span>Taster</h4><div id="Ch5.S1.SS1.p1" class="para"><p class="p">Um die Taster des STK500 im Mikrocontroller nutzen zu können müssen diese mit dem Mikrocontroller verbunden und entprellt<span class="note footnote"><sup class="mark">5</sup><span class="note_content_outer"><span class="note_content"><sup class="mark">5</sup>Als <span class="text" style="background-color:#D9D9FF;">Prellen</span> bezeichnet man das ungewollte mehrfache Schalten eines mechanischen Schalters bei einem einzelnen Schaltvorgang.</span></span></span> werden.<br class="break"/>Dazu muss die Stiftleiste von <em class="emph">PortA</em> mit der Stiftleiste für die Taster verbunden werden. Das Entprellen der Taster wird softwareseitig realisiert. Dies bietet sich bei einem Mikrocontroler an. Dazu gibt es vorgefertigte Bibliotheken die genutzt werden können. Im Projekt wurde die Bibliothek <span class="text typewriter" style="background-color:#FFFFE6;">Debounce.h</span><cite class="cite">()</cite> von Peter Dannegger genutzt. Sie ist sehr komfortabl und funktionsreich und basiert auf <span class="text" style="background-color:#D9D9FF;">Timer-Interrupts</span>. Um sie zu nutzen wird die Datei <span class="text typewriter" style="background-color:#FFFFE6;">Debounce.h</span> in das Projektverzeichnis kopiert und mit Zeile 1 des Codelisting <a href="#LST1" title="1 ‣ 5.1.1 Taster ‣ 5.1 Bereitstellen grundlegender Funktionalitäten ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">1</span></a> in das Programm eingebunden. Die Zeilen 2-10 spiegeln die Funktion zum Initialisieren der Bibliothek wieder. Diese Zeilen müssen auf den jeweils verwendeten Mikrocontroller angepasst werden.<br class="break"/>Durch die Verwendung der Bibliothek ist es möglich Funktionen wie z.B. <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">get_key_press()</span> zu nutzen um den Status der Taster prellfrei auszulesen und diese Information für Entscheidungen im Programmablauf zu verwenden.</p></div><div id="LST1" class="listing language_C"><div class="caption"><span class="tag">Listing 1: </span>Taster</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote">include<span class="text lstspace"> </span>”Debounce.h”<span class="text lstspace">                           </span>//<span class="text lstspace"> </span>Taster<span class="text lstspace"> </span>entprellen</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote">void<span class="text lstspace">    </span>debounce_init<span class="text lstspace">           </span>(void)<span class="text lstspace"> </span>{<span class="text lstspace">        </span>//<span class="text lstspace"> </span>Taster<span class="text lstspace"> </span>entprellen</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>KEY_DDR<span class="text lstspace"> </span>&amp;=<span class="text lstspace"> </span>~ALL_KEYS;<span class="text lstspace">                   </span>//<span class="text lstspace"> </span>configure<span class="text lstspace"> </span>key<span class="text lstspace"> </span>port<span class="text lstspace"> </span>for<span class="text lstspace"> </span>input</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>KEY_PORT<span class="text lstspace"> </span>|=<span class="text lstspace"> </span>ALL_KEYS;<span class="text lstspace">                   </span>//<span class="text lstspace"> </span>and<span class="text lstspace"> </span>turn<span class="text lstspace"> </span>on<span class="text lstspace"> </span>pull<span class="text lstspace"> </span>up<span class="text lstspace"> </span>resistors</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>TCCR0B<span class="text lstspace"> </span>=<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>CS02)<span class="text lstspace"> </span>|<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>CS00);<span class="text lstspace">     </span>//<span class="text lstspace"> </span>divide<span class="text lstspace"> </span>by<span class="text lstspace"> </span>1024</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">6</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>//<span class="text lstspace"> </span>preload<span class="text lstspace"> </span>for<span class="text lstspace"> </span>10ms</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">7</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>TCNT0<span class="text lstspace"> </span>=<span class="text lstspace"> </span>(uint8_t)<span class="text lstspace"> </span>(int16_t)<span class="text lstspace"> </span>-(F_CPU<span class="text lstspace"> </span>/<span class="text lstspace"> </span>1024<span class="text lstspace"> </span>*<span class="text lstspace"> </span>10<span class="text lstspace"> </span>*<span class="text lstspace"> </span>10e-3<span class="text lstspace"> </span>+<span class="text lstspace"> </span>0.5);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">8</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>TIMSK0<span class="text lstspace"> </span>|=<span class="text lstspace"> </span>1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>TOIE0;<span class="text lstspace">                   </span>//<span class="text lstspace"> </span>enable<span class="text lstspace"> </span>timer<span class="text lstspace"> </span>interrupt</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">9</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>sei();<span class="text lstspace">                                  </span>//<span class="text lstspace"> </span>global<span class="text lstspace"> </span>enable<span class="text lstspace"> </span>Interrupts</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">10</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">11</span></td>
    <td class="td"><span class="text lstline footnote">if<span class="text lstspace"> </span>(get_key_press(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>KEY4))</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">12</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>menu_select(&amp;menu_context);<span class="text lstspace">             </span>//<span class="text lstspace"> </span>Aktuellen<span class="text lstspace"> </span>Menuepunkt<span class="text lstspace"> </span>auswaehlen</span></td></tr></table></div></div><div id="Ch5.S1.SS2" class="subsection"><h4 class="title subsection-title"><span class="tag">5.1.2 </span>LEDs</h4><div id="Ch5.S1.SS2.p1" class="para"><p class="p">LEDs sollen im Programmablauf genutzt werden können, um z.B. Fehler zu signalisieren.<br class="break"/>Dazu muss zuerst die Stiftleiste von <em class="emph">PortB</em> mit der LED Stiftleiste des STK500 verbunden werden. Um LEDs an <em class="emph">PortB</em> betreiben zu können müssen die entsprechenden Pins im <span class="text" style="background-color:#D9D9FF;">Register</span> <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">DDRB</span> als Ausgänge definiert werden. Dies geschieht in Zeile 1 des Codelisting <a href="#LST2" title="2 ‣ 5.1.2 LEDs ‣ 5.1 Bereitstellen grundlegender Funktionalitäten ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">2</span></a>. Die Bibliothek zum Entprellen der Taster nutzt die Variablen <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">LED_DDR</span> und <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">LED_PORT</span>. Diese Variablen werden auch hier genutzt um auf die Register zuzugreifen. Dies gewährleistet eine bessere Übersicht. Die Werte im 8-Bit Register <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">LED_PORT</span> spiegeln die Spannungen an den Pins des <em class="emph">PortB</em> am Mikrocontroller wieder. Da die LEDs auf dem STK500 mit <span class="text" style="background-color:#D9D9FF;">active-low-Logik</span> betrieben werden, muss das jeweilige Bit gelöscht, also auf ”0”, gesetzt werden damit die LED leuchtet. Um alle Bits in einem Register zu verändern kann das Register mit einem 2-stelligen Hex-Wert (8-Bit) oder einem 8 stelligen binären Bitmuster beschrieben werden. In Zeile 2 werden alle Bits mit dem Hex-Wert <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">0xFF</span> auf ”1” gesetzt und somit alle LEDs ausgeschaltet. Um ein einzelnes Bit zu verändern, können die Anweisungen in den Zeilen 3 und 4 verwendet werden. Dabei steht das ”X” in <em class="emph">PBX</em> für die x-te Stelle im Register die gesetzt oder gelöscht werden soll.<br class="break"/>Es ist damit möglich im Programmablauf einzelne LEDs anzusteuern.</p></div><div id="LST2" class="listing language_C"><div class="caption"><span class="tag">Listing 2: </span>LEDs</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote">LED_DDR<span class="text lstspace">   </span>=<span class="text lstspace"> </span>0xFF;<span class="text lstspace">                 </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">LED<span class="text lstspace"> </span>Port<span class="text lstspace"> </span>Richtung<span class="text lstspace"> </span>definieren<span class="text lstspace"> </span>(Ausgang)</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote">LED_PORT<span class="text lstspace">  </span>=<span class="text lstspace"> </span>0xFF;<span class="text lstspace">                  </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">LEDs<span class="text lstspace"> </span>ausschalten</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote">LED_PORT<span class="text lstspace"> </span>&amp;=<span class="text lstspace"> </span>~((1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>PBX));<span class="text lstspace">         </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">loescht<span class="text lstspace"> </span>Bit<span class="text lstspace"> </span>an<span class="text lstspace"> </span>PortB<span class="text lstspace"> </span>-<span class="text lstspace"> </span>LED<span class="text lstspace"> </span>an</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote">LED_PORT<span class="text lstspace"> </span>|=<span class="text lstspace">  </span>((1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>PBX));<span class="text lstspace">         </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">setzt<span class="text lstspace">  </span>Bit<span class="text lstspace"> </span>an<span class="text lstspace"> </span>PortB<span class="text lstspace"> </span>-<span class="text lstspace"> </span>LED<span class="text lstspace"> </span>aus</span></span></td></tr></table></div></div><div id="Ch5.S1.SS3" class="subsection"><h4 class="title subsection-title"><span class="tag">5.1.3 </span>Ansteuerung des LC-Display</h4><div id="Ch5.S1.SS3.p1" class="para"><p class="p">Um den aktuellen Status des Motor komfortabel in Textform anzeigen zu können und die Schrittmotorkarte <em class="emph">menübasiert</em> ansteuern zu können wird ein <span class="text" style="background-color:#D9D9FF;">LC-Display</span> verwendet. Das verwendete Display ist <span class="text" style="background-color:#D9D9FF;">alpha numerisch</span> und kann 4x20 Zeichen anzeigen.<br class="break"/>Die meisten LC-Displays werden auf die gleiche Weise angesteuert. Hier gibt es fertige Bibliotheken die frei genutzt werden können. Im Projekt wurde die Bibliothek von Peter Fleury <cite class="cite">()</cite> verwendet. Die Bibliothek wird heruntergeladen und die Dateien <span class="text typewriter" style="background-color:#FFFFE6;">lcd.c</span> und <span class="text typewriter" style="background-color:#FFFFE6;">lcd.h</span> in das Projektverzeichnis entpackt. Die Bibliothek wird mit <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">#include ''lcd.h''</span> eingebunden. In der <span class="text typewriter" style="background-color:#FFFFE6;">lcd.h</span> müssen dann noch die Daten des Displays eingegeben werden (siehe Codelisting <a href="#LST3" title="3 ‣ 5.1.3 Ansteuerung des LC-Display ‣ 5.1 Bereitstellen grundlegender Funktionalitäten ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">3</span></a> Zeilen 2–10).<br class="break"/>Danach kann das Display im Programm mit den Befehlen aus Zeile 12–21 angesteuert werden.</p></div><div id="LST3" class="listing language_C"><div class="caption"><span class="tag">Listing 3: </span>lcd.h (Auszug)</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote">/*<span class="text" style="color:#008000;">*&lt;<span class="text lstspace"> </span>Use<span class="text lstspace"> </span>0<span class="text lstspace"> </span>for<span class="text lstspace"> </span>HD44780<span class="text lstspace"> </span>controller,<span class="text lstspace">  </span>1<span class="text lstspace"> </span>for<span class="text lstspace"> </span>KS0073<span class="text lstspace"> </span>controller<span class="text lstspace"> </span></span>*/</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>LCD_CONTROLLER_KS0073<span class="text lstspace"> </span>0</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>LCD_LINES<span class="text lstspace">           </span>4<span class="text lstspace">          </span>/*<span class="text" style="color:#008000;">*&lt;<span class="text lstspace"> </span>number<span class="text lstspace"> </span>of<span class="text lstspace"> </span>visible<span class="text lstspace"> </span>lines<span class="text lstspace"> </span>of<span class="text lstspace"> </span>the<span class="text lstspace"> </span>display<span class="text lstspace"> </span></span>*/</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>LCD_DISP_LENGTH<span class="text lstspace">    </span>19<span class="text lstspace">           </span>/**&lt;<span class="text lstspace"> </span>visibles<span class="text lstspace"> </span>characters<span class="text lstspace"> </span>per<span class="text lstspace"> </span>line<span class="text lstspace"> </span>of<span class="text lstspace"> </span>the<span class="text lstspace"> </span>display<span class="text lstspace"> </span>*/</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>LCD_LINE_LENGTH<span class="text lstspace">  </span>0x40<span class="text lstspace">           </span>/*<span class="text" style="color:#008000;">*&lt;<span class="text lstspace"> </span>internal<span class="text lstspace"> </span>line<span class="text lstspace"> </span>length<span class="text lstspace"> </span>of<span class="text lstspace"> </span>the<span class="text lstspace"> </span>display<span class="text lstspace">   </span></span>*/</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">6</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>LCD_START_LINE1<span class="text lstspace">  </span>0x00<span class="text lstspace">           </span>/**&lt;<span class="text lstspace"> </span>DDRAM<span class="text lstspace"> </span>address<span class="text lstspace"> </span>of<span class="text lstspace"> </span>first<span class="text lstspace"> </span>char<span class="text lstspace"> </span>of<span class="text lstspace"> </span>line<span class="text lstspace"> </span>1<span class="text lstspace"> </span>*/</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">7</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>LCD_START_LINE2<span class="text lstspace">  </span>0x40<span class="text lstspace">           </span>/*<span class="text" style="color:#008000;">*&lt;<span class="text lstspace"> </span>DDRAM<span class="text lstspace"> </span>address<span class="text lstspace"> </span>of<span class="text lstspace"> </span>first<span class="text lstspace"> </span>char<span class="text lstspace"> </span>of<span class="text lstspace"> </span>line<span class="text lstspace"> </span>2<span class="text lstspace"> </span></span>*/</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">8</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>LCD_START_LINE3<span class="text lstspace">  </span>0x14<span class="text lstspace">           </span>/**&lt;<span class="text lstspace"> </span>DDRAM<span class="text lstspace"> </span>address<span class="text lstspace"> </span>of<span class="text lstspace"> </span>first<span class="text lstspace"> </span>char<span class="text lstspace"> </span>of<span class="text lstspace"> </span>line<span class="text lstspace"> </span>3<span class="text lstspace"> </span>*/</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">9</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>LCD_START_LINE4<span class="text lstspace">  </span>0x54<span class="text lstspace">           </span>/*<span class="text" style="color:#008000;">*&lt;<span class="text lstspace"> </span>DDRAM<span class="text lstspace"> </span>address<span class="text lstspace"> </span>of<span class="text lstspace"> </span>first<span class="text lstspace"> </span>char<span class="text lstspace"> </span>of<span class="text lstspace"> </span>line<span class="text lstspace"> </span>4<span class="text lstspace"> </span></span>*/</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">10</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>LCD_WRAP_LINES<span class="text lstspace">      </span>1<span class="text lstspace">           </span>/**&lt;<span class="text lstspace"> </span>0:<span class="text lstspace"> </span>no<span class="text lstspace"> </span>wrap,<span class="text lstspace"> </span>1:<span class="text lstspace"> </span>wrap<span class="text lstspace"> </span>at<span class="text lstspace"> </span>end<span class="text lstspace"> </span>of<span class="text lstspace"> </span>visibile<span class="text lstspace"> </span>line<span class="text lstspace"> </span>*/</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">11</span></td>
    <td class="td"><span class="text lstline footnote">//<span class="text lstspace"> </span>Funktionen<span class="text lstspace"> </span>zum<span class="text lstspace"> </span>Ansteuern<span class="text lstspace"> </span>des<span class="text lstspace"> </span>Displays:</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">12</span></td>
    <td class="td"><span class="text lstline footnote">extern<span class="text lstspace"> </span>void<span class="text lstspace"> </span>lcd_init(uint8_t<span class="text lstspace"> </span>dispAttr);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">13</span></td>
    <td class="td"><span class="text lstline footnote">extern<span class="text lstspace"> </span>void<span class="text lstspace"> </span>lcd_clrscr(void);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">14</span></td>
    <td class="td"><span class="text lstline footnote">extern<span class="text lstspace"> </span>void<span class="text lstspace"> </span>lcd_home(void);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">15</span></td>
    <td class="td"><span class="text lstline footnote">extern<span class="text lstspace"> </span>void<span class="text lstspace"> </span>lcd_gotoxy(uint8_t<span class="text lstspace"> </span>x,<span class="text lstspace"> </span>uint8_t<span class="text lstspace"> </span>y);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">16</span></td>
    <td class="td"><span class="text lstline footnote">extern<span class="text lstspace"> </span>void<span class="text lstspace"> </span>lcd_putc(char<span class="text lstspace"> </span>c);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">17</span></td>
    <td class="td"><span class="text lstline footnote">extern<span class="text lstspace"> </span>void<span class="text lstspace"> </span>lcd_puts(const<span class="text lstspace"> </span>char<span class="text lstspace"> </span>*s);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">18</span></td>
    <td class="td"><span class="text lstline footnote">extern<span class="text lstspace"> </span>void<span class="text lstspace"> </span>lcd_puts_p(const<span class="text lstspace"> </span>char<span class="text lstspace"> </span>*progmem_s);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">19</span></td>
    <td class="td"><span class="text lstline footnote">extern<span class="text lstspace"> </span>void<span class="text lstspace"> </span>lcd_command(uint8_t<span class="text lstspace"> </span>cmd);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">20</span></td>
    <td class="td"><span class="text lstline footnote">extern<span class="text lstspace"> </span>void<span class="text lstspace"> </span>lcd_data(uint8_t<span class="text lstspace"> </span>data);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">21</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>lcd_puts_P(__s)<span class="text lstspace"> </span>lcd_puts_p(PSTR(__s))</span></td></tr></table></div></div><div id="Ch5.S1.SS4" class="subsection"><h4 class="title subsection-title"><span class="tag">5.1.4 </span>RS-232-Schnittstelle</h4><div id="Ch5.S1.SS4.p1" class="para"><p class="p"><span class="text" style="background-color:#D9D9FF;">RS-232</span> ist der Name der am häufigsten verwendeten seriellen Schnittstelle um Daten zwischen zwei elektronischen Geräten hin und her zu senden. <cite class="cite">()</cite><br class="break"/>Auf dem STK500 ist bereits eine serielle Schnittstelle vorbereitet. Um diese nutzen zu können, müssen die Pins 3 und 4 des <em class="emph">PortC</em> (erster <span class="text" style="background-color:#D9D9FF;">UART</span>) des Mikrocontrollers mit der Stiftleiste <em class="emph">Rx/Tx</em> auf dem STK500 verbunden werden. Eine weitere Schnittstelle wurde auf einem Steckbrett aufgebaut. Diese wurde mit den Pins 1 und 2 des <em class="emph">PortC</em> (zweiter UART) des Mikrocontrollers verbunden. Um die Schnittstellen im Mikrocontroller nutzen zu können müssen diese noch durch setzen von Bits in den entsprechenden Registern des Mikrocontrollers aktiviert werden.<br class="break"/>Das Codelisting <a href="#LST4" title="4 ‣ 5.1.4 RS-232-Schnittstelle ‣ 5.1 Bereitstellen grundlegender Funktionalitäten ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">4</span></a> teilt sich in 4 wesentliche Bereiche: <br class="break"/></p><ul id="Ch5.I1" class="itemize"><li id="Ch5.I1.i1" class="item"><div id="Ch5.I1.i1.p1" class="para"><p class="p">Zeilen 1 – 2: Setzen der Baudrate und einbinden der benötigten Bibliotheken.</p></div></li><li id="Ch5.I1.i2" class="item"><div id="Ch5.I1.i2.p1" class="para"><p class="p">Zeilen 3 – 17: Initialisieren der Schnittstellen durch setzen der richtigen Bits in den entsprechenden Registern.
</p></div></li><li id="Ch5.I1.i3" class="item"><div id="Ch5.I1.i3.p1" class="para"><p class="p">Zeilen 18 – 35: Funktionen zum Senden von Daten</p></div></li><li id="Ch5.I1.i4" class="item"><div id="Ch5.I1.i4.p1" class="para"><p class="p">Zeilen 36 – 65: Funktionen zum Empfangen von Daten</p></div></li></ul></div><div id="LST4" class="listing language_C"><div class="caption"><span class="tag">Listing 4: </span>RS-232</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>BAUD<span class="text lstspace"> </span>9600<span class="text lstspace">               </span>//<span class="text lstspace"> </span>BAUD<span class="text lstspace"> </span>Rate<span class="text lstspace"> </span>definieren</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote">keywordstyle <span class="text lstdirectives">include</span><span class="text lstspace"> </span>&lt;util/setbaud.h&gt;<span class="text lstspace">  </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">UART<span class="text lstspace"> </span>Funktionen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote">//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">UART<span class="text lstspace"> </span>Initialisieren</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">void</span><span class="text lstspace">        </span>uart_init<span class="text lstspace">                </span>()<span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">UART<span class="text lstspace"> </span>0<span class="text lstspace"> </span>-<span class="text lstspace"> </span>IN<span class="text lstspace"> </span>(Rapidform<span class="text lstspace"> </span>Software/Terminal)</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">6</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>UBRR0H<span class="text lstspace"> </span>=<span class="text lstspace"> </span>UBRRH_VALUE;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">7</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>UBRR0L<span class="text lstspace"> </span>=<span class="text lstspace"> </span>UBRRL_VALUE;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">8</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>UCSR0C<span class="text lstspace"> </span>=<span class="text lstspace"> </span>(3<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>UCSZ00);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">9</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>UCSR0B<span class="text lstspace"> </span>|=<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>TXEN0);<span class="text lstspace">    </span>//<span class="text" style="color:#008000;">Transmitter<span class="text lstspace"> </span>Enabled</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">10</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>UCSR0B<span class="text lstspace"> </span>|=<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>RXEN0);<span class="text lstspace">    </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">UART<span class="text lstspace"> </span>RX<span class="text lstspace"> </span>einschalten</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">11</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">UART<span class="text lstspace"> </span>1<span class="text lstspace"> </span>-<span class="text lstspace"> </span>OUT<span class="text lstspace"> </span>(Stepper<span class="text lstspace"> </span>Karte/Drehtisch)</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">12</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>UBRR1H<span class="text lstspace"> </span>=<span class="text lstspace"> </span>UBRRH_VALUE;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">13</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>UBRR1L<span class="text lstspace"> </span>=<span class="text lstspace"> </span>UBRRL_VALUE;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">14</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>UCSR1C<span class="text lstspace"> </span>=<span class="text lstspace"> </span>(3<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>UCSZ00);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">15</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>UCSR1B<span class="text lstspace"> </span>|=<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>TXEN1);<span class="text lstspace">    </span>//<span class="text" style="color:#008000;">Transmitter<span class="text lstspace"> </span>Enabled</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">16</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>UCSR1B<span class="text lstspace"> </span>|=<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>RXEN1);<span class="text lstspace">    </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">UART<span class="text lstspace"> </span>RX<span class="text lstspace"> </span>einschalten</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">17</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">18</span></td>
    <td class="td"><span class="text lstline footnote">//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">UART<span class="text lstspace"> </span>Zeichen<span class="text lstspace"> </span>senden</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">19</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">void</span><span class="text lstspace">        </span>uart_put_charater<span class="text lstspace">        </span>(<span class="text lstkeywords" style="color:#FF0000;">unsigned</span><span class="text lstspace"> </span><span class="text lstkeywords" style="color:#FF0000;">char</span><span class="text lstspace"> </span>c,<span class="text lstspace"> </span><span class="text lstkeywords" style="color:#FF0000;">int</span><span class="text lstspace"> </span>dir)<span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">20</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>(dir<span class="text lstspace"> </span>==<span class="text lstspace"> </span>D_RapidForm)<span class="text lstspace"> </span>{<span class="text lstspace">       </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">To<span class="text lstspace"> </span>Rapidform</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">21</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">while</span><span class="text lstspace"> </span>(!(UCSR0A<span class="text lstspace"> </span>&amp;<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>UDRE0)))<span class="text lstspace"> </span>{}//<span class="text" style="color:#008000;">warten<span class="text lstspace"> </span>bis<span class="text lstspace"> </span>Senden<span class="text lstspace"> </span>moeglich</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">22</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>UDR0<span class="text lstspace"> </span>=<span class="text lstspace"> </span>c;<span class="text lstspace">            </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">sende<span class="text lstspace"> </span>Zeichen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">23</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">24</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">else</span><span class="text lstspace"> </span>{<span class="text lstspace">                              </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">To<span class="text lstspace"> </span>Stepper</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">25</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">while</span><span class="text lstspace"> </span>(!(UCSR1A<span class="text lstspace"> </span>&amp;<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>UDRE1)))<span class="text lstspace"> </span>{}//<span class="text" style="color:#008000;">warten<span class="text lstspace"> </span>bis<span class="text lstspace"> </span>Senden<span class="text lstspace"> </span>moeglich</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">26</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>UDR1<span class="text lstspace"> </span>=<span class="text lstspace"> </span>c;<span class="text lstspace">            </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">sende<span class="text lstspace"> </span>Zeichen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">27</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">28</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">29</span></td>
    <td class="td"><span class="text lstline footnote">//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">UART<span class="text lstspace"> </span>String<span class="text lstspace"> </span>senden</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">30</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">void</span><span class="text lstspace">        </span>uart_put_string<span class="text lstspace">                </span>(<span class="text lstkeywords" style="color:#FF0000;">char</span><span class="text lstspace"> </span>*s,<span class="text lstspace"> </span><span class="text lstkeywords" style="color:#FF0000;">int</span><span class="text lstspace"> </span>dir)<span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">31</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">while</span><span class="text lstspace"> </span>(*s){<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">so<span class="text lstspace"> </span>lange<span class="text lstspace"> </span>*s<span class="text lstspace"> </span>!=<span class="text lstspace"> </span>’\0’<span class="text lstspace"> </span>Terminierungszeichen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">32</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>uart_put_charater(*s,<span class="text lstspace"> </span>dir);<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Zeichenweise<span class="text lstspace"> </span>senden</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">33</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>s++;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">34</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">35</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">36</span></td>
    <td class="td"><span class="text lstline footnote">//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">UART<span class="text lstspace"> </span>Zeichen<span class="text lstspace"> </span>empfangen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">37</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">int</span><span class="text lstspace">        </span>uart_get_character<span class="text lstspace">        </span>(<span class="text lstkeywords" style="color:#FF0000;">int</span><span class="text lstspace"> </span>dir)<span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">38</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>(dir<span class="text lstspace"> </span>==<span class="text lstspace"> </span>D_RapidForm)<span class="text lstspace"> </span>{<span class="text lstspace">       </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Aus<span class="text lstspace"> </span>RapidForm<span class="text lstspace"> </span>Register<span class="text lstspace"> </span>auslesen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">39</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">while</span><span class="text lstspace"> </span>(!(UCSR0A<span class="text lstspace"> </span>&amp;<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>RXC0)))<span class="text lstspace"> </span>;<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">warten<span class="text lstspace"> </span>bis<span class="text lstspace"> </span>Zeichen<span class="text lstspace"> </span>verfuegbar</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">40</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">return</span><span class="text lstspace"> </span>UDR0;<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Zeichen<span class="text lstspace"> </span>aus<span class="text lstspace"> </span>UDR<span class="text lstspace"> </span>an<span class="text lstspace"> </span>Aufrufer<span class="text lstspace"> </span>zurueckgeben</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">41</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">42</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>(dir<span class="text lstspace"> </span>==<span class="text lstspace"> </span>D_Stepper)<span class="text lstspace"> </span>{<span class="text lstspace">               </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Aus<span class="text lstspace"> </span>Schrittmotor<span class="text lstspace"> </span>Register<span class="text lstspace"> </span>auslesen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">43</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">while</span><span class="text lstspace"> </span>(!(UCSR1A<span class="text lstspace"> </span>&amp;<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>RXC1)))<span class="text lstspace"> </span>;<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">warten<span class="text lstspace"> </span>bis<span class="text lstspace"> </span>Zeichen<span class="text lstspace"> </span>verfuegbar</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">44</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">return</span><span class="text lstspace"> </span>UDR1;<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Zeichen<span class="text lstspace"> </span>aus<span class="text lstspace"> </span>UDR<span class="text lstspace"> </span>an<span class="text lstspace"> </span>Aufrufer<span class="text lstspace"> </span>zurueckgeben</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">45</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">46</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">return</span><span class="text lstspace"> </span>-1;<span class="text lstspace">    </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Wenn<span class="text lstspace"> </span>nichts<span class="text lstspace"> </span>ausgelesen<span class="text lstspace"> </span>wurde<span class="text lstspace"> </span>-1<span class="text lstspace"> </span>zurueckgeben</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">47</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">48</span></td>
    <td class="td"><span class="text lstline footnote">//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">UART<span class="text lstspace"> </span>String<span class="text lstspace"> </span>empfangen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">49</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">void</span><span class="text lstspace">        </span>uart_get_string<span class="text lstspace">                </span>(<span class="text lstkeywords" style="color:#FF0000;">char</span><span class="text lstspace"> </span>*<span class="text lstspace"> </span>string_in,<span class="text lstspace"> </span><span class="text lstkeywords" style="color:#FF0000;">int</span><span class="text lstspace"> </span>dir)<span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">50</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">char</span><span class="text lstspace"> </span>c;<span class="text lstspace">              </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Einzelnes<span class="text lstspace"> </span>Zeichen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">51</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">int</span><span class="text lstspace"> </span>i<span class="text lstspace"> </span>=<span class="text lstspace"> </span>0;<span class="text lstspace">  </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Zaehlvariable</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">52</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">do</span><span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">53</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>c<span class="text lstspace"> </span>=<span class="text lstspace"> </span>uart_get_character(dir);<span class="text lstspace">  </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Einzelnes<span class="text lstspace"> </span>Zeichen<span class="text lstspace"> </span>holen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">54</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>(c<span class="text lstspace"> </span>!=<span class="text lstspace"> </span>’<span class="text" style="color:#000000;">\r</span>’)<span class="text lstspace"> </span>{<span class="text lstspace">           </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Wenn<span class="text lstspace"> </span>keinn<span class="text lstspace"> </span>\r</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">55</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>*string_in<span class="text lstspace"> </span>=<span class="text lstspace"> </span>c;<span class="text lstspace">           </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Zeichen<span class="text lstspace"> </span>in<span class="text lstspace"> </span>Empfangsstring<span class="text lstspace"> </span>schreiben</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">56</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>string_in<span class="text lstspace"> </span>+=<span class="text lstspace"> </span>1;<span class="text lstspace">          </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Adresse<span class="text lstspace"> </span>des<span class="text lstspace"> </span>Empfangsstring<span class="text lstspace"> </span>um<span class="text lstspace"> </span>1<span class="text lstspace"> </span>ink</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">57</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>i++;<span class="text lstspace">                     </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Zaehlvariable<span class="text lstspace"> </span>um<span class="text lstspace"> </span>1<span class="text lstspace"> </span>erhoehen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">58</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">59</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}<span class="text lstspace"> </span><span class="text lstkeywords" style="color:#FF0000;">while</span><span class="text lstspace"> </span>(i<span class="text lstspace"> </span>&lt;<span class="text lstspace"> </span>100<span class="text lstspace"> </span>&amp;&amp;<span class="text lstspace"> </span>c<span class="text lstspace"> </span>!=<span class="text lstspace"> </span>’<span class="text" style="color:#000000;">\r</span>’<span class="text lstspace"> </span>&amp;&amp;<span class="text lstspace"> </span>c<span class="text lstspace"> </span>!=<span class="text lstspace"> </span>’<span class="text" style="color:#000000;">\n</span>’);<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">So<span class="text lstspace"> </span>lange<span class="text lstspace"> </span>bis<span class="text lstspace"> </span>\r<span class="text lstspace"> </span>\n<span class="text lstspace"> </span>o.<span class="text lstspace"> </span>&gt;100<span class="text lstspace"> </span>Zeichen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">60</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>*string_in<span class="text lstspace"> </span>=<span class="text lstspace"> </span>’<span class="text" style="color:#000000;">\0</span>’;<span class="text lstspace">                       </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">0<span class="text lstspace"> </span>Terminieren</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">61</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>(dir<span class="text lstspace"> </span>==<span class="text lstspace"> </span>D_Stepper)</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">62</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>LED_PORT<span class="text lstspace"> </span>|=<span class="text lstspace"> </span>(<span class="text lstspace"> </span>1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>LED3<span class="text lstspace"> </span>);<span class="text lstspace">  </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">”Daten<span class="text lstspace"> </span>Vorhanden”<span class="text lstspace"> </span>LED<span class="text lstspace"> </span>ausschalten</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">63</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">else</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">64</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>LED_PORT<span class="text lstspace"> </span>|=<span class="text lstspace"> </span>(<span class="text lstspace"> </span>1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>LED2<span class="text lstspace"> </span>);<span class="text lstspace">  </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">”Daten<span class="text lstspace"> </span>Vorhanden”<span class="text lstspace"> </span>LED<span class="text lstspace"> </span>ausschalten</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">65</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr></table></div><div id="Ch5.S1.SS4.p2" class="para"><p class="p">Damit stehen die essentiellen Funktionen <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">uart_put_string(dir)</span> und <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">uart_get_string(dir)</span> zur Verfügung. Mit diesen kann der Mikrocontroller über die serielle Schnittstelle Strings senden und empfangen. Der Parameter <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">dir</span> gibt dabei die Schnittstelle an über die gesendet oder empfangen werden soll.</p></div></div></div><div id="Ch5.S2" class="section"><h3 class="title section-title"><span class="tag">5.2 </span>Befehlssätze</h3><div id="Ch5.S2.p1" class="para"><p class="p">Das zu erreichende Ziel bestand darin, dass RapidForm2004 mit dem Mikrocontroller und dieser mit der Schrittmotorkarte kommunizieren können sollte. Die Kommunikation läuft dabei über Befehle ab, die über die serielle Schnittstelle gesendet werden.
Jede Schrittmotorkarte verwendet eigenen Befehle. Alle Befehle für eine Schrittmotorkarte werden im Folgenden als Befehlssatz bezeichnet. Die Software RapidForm2004 kennt mehrere Befehlssätze um verschiedene Schrittmotorkarten anzusteuern. Der Befehlssatz der vorhandenen Schrittmotorkarten zum Ansteuern der Motoren des Drehtisches ist jedoch nicht in RapidForm2004 vorhanden.<br class="break"/>Nun soll der Mikrocontroller sowohl mit RapidForm2004 als auch mit der ersten der vorhandenen Schrittmotorkarten kommunizieren. Befehle an die zweite Schrittmotorkarte werden über die Erste gesendet. Um mit beiden Seiten kommunizieren zu können muss der Mikrocontroller den Befehlssatz der vorhanden Schrittmotorkarten und zumindest einen der Befehlssätze aus RapidForm2004 kennen. Außerdem muss er wissen welche Antwort RapidForm2004 auf einen gesendeten Befehl erwartet. <br class="break"/>In der ersten Phase wurde die Software <em class="emph">Free Serial Port Monitor</em> verwendet um die Kommunikation zwischen RapidForm2004 und dem Mikrocontroller abzuhören. Dies hatte jedoch den Nachteil, das RapidForm2004 erst dann den nächsten Befehl sendete, wenn der Erste mit der erwarteten Antwort quittiert wurde. Die Befehle die RapidForm erwartete, konnten zwar teilweise aus den Betriebsanleitungen der Schrittmotorsteuerungen entnommen werden, dieses Vorgehen war jedoch sehr mühsam. Eine besseres Vorgehen, war das sogenannte <span class="text" style="background-color:#D9D9FF;">Reverse-Engineering</span>. Dadurch konnten alle Befehe und die darauf erwarteten Antworten aus einer ausführbaren Datei von RapidForm2004 ausgelesen werden.<br class="break"/>Das Codelisting <a href="#LST5" title="5 ‣ 5.2 Befehlssätze ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5</span></a> zeigt einen Auszug für den Befehlssatz eines Isel Schrittmotors. Im Anhang <span class="ref here">LABEL:sec:Protokolle_RF</span> befinden sich die Befehlssätze aller Schrittmotorkarten. Somit stehen die Befehlssätze aller Schrittmotorsteuerungen zur Verfügung. Diese wurden in einer Textdatei gespeichert und werden später im Programm verwendet. Dadurch sind alle Befehle und die Antworten die RapidForm2004 auf einen daraus ausgesendeten Befehl erwartet bekannt.
</p></div><div id="LST5" class="listing language_C"><div class="caption"><span class="tag">Listing 5: </span>Befehlssatz aus Rapidform: Isel</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote">model<span class="text lstspace">        </span>”<span class="text" style="color:#000000;">isel(RF-1)</span>”</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote">port<span class="text lstspace">        </span>”<span class="text" style="color:#000000;">9600</span>”<span class="text lstspace">                  </span>”<span class="text" style="color:#000000;">n81h</span>”</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote">init<span class="text lstspace">        </span>”<span class="text" style="color:#000000;">@01\r</span>”<span class="text lstspace">                 </span>”<span class="text" style="color:#000000;">0</span>”</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote">finish<span class="text lstspace">        </span>”<span class="text" style="color:#000000;">@0M0\054+600\r</span>”<span class="text lstspace">        </span>”<span class="text" style="color:#000000;">0</span>”</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote">arot<span class="text lstspace">        </span>”<span class="text" style="color:#000000;">@0M%d\054+600\r</span>”<span class="text lstspace">       </span>”<span class="text" style="color:#000000;">0</span>”</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">6</span></td>
    <td class="td"><span class="text lstline footnote">stop<span class="text lstspace">        </span>””<span class="text lstspace">                      </span>”<span class="text" style="color:#000000;">0</span>”</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">7</span></td>
    <td class="td"><span class="text lstline footnote">home<span class="text lstspace">        </span>”<span class="text" style="color:#000000;">@0M0\054+600\r</span>”<span class="text lstspace">        </span>”<span class="text" style="color:#000000;">0</span>”</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">8</span></td>
    <td class="td"><span class="text lstline footnote">step<span class="text lstspace">        </span>”<span class="text" style="color:#000000;">-0.0173076</span>”<span class="text lstspace"> </span>”<span class="text" style="color:#000000;">-8000000</span>”<span class="text lstspace"> </span>”<span class="text" style="color:#000000;">8000000</span>”</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">9</span></td>
    <td class="td"><span class="text lstline footnote">timeout<span class="text lstspace"> </span>”<span class="text" style="color:#000000;">60</span>”</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">10</span></td>
    <td class="td"><span class="text lstline footnote">firsttimeout<span class="text lstspace"> </span>”<span class="text" style="color:#000000;">10</span>”</span></td></tr></table></div></div><div id="Ch5.S3" class="section"><h3 class="title section-title"><span class="tag">5.3 </span>Kommunikation mit der vorhandenen Schrittmotorsteuerung</h3><div id="Ch5.S3.SS1" class="subsection"><h4 class="title subsection-title"><span class="tag">5.3.1 </span>Befehle senden</h4><div id="Ch5.S3.SS1.p1" class="para"><p class="p">Im nächsten Schritt geht es darum, Befehle an die Schrittmotorkarte zu versenden. Da es nicht möglich ist, für jeden Befehl eine eigene Taste zu verwenden,
wird eine menübasierte Steuerung mittels des LC-Displays verwendet. Im Menü lässt sich mit den Tasten <em class="emph">Hoch</em>, <em class="emph">Runter</em>, <em class="emph">Ok</em>, und <em class="emph">Zurück</em>, navigieren.<br class="break"/>Analog wie beim LC-Display und bei den Tastern wird hier eine vorhandene Bibliothek genutzt. Um die Bibliothek verwenden zu können musste die Menüstruktur den Bedürfnissen des Projekts angepasst werden und die Funktionen zum Ausgeben von Text auf dem LC-Display und zum Versenden von Befehlen über die RS-232-Schnittstelle, aus den vorangegangen Kapiteln, bekannt gemacht werden. Dies geschieht in der Datei <span class="text typewriter" style="background-color:#FFFFE6;">tinymenu/tinymenu.h</span>.<br class="break"/>Die Zeilen 1–6 des Codelisting <a href="#LST6" title="6 ‣ 5.3.1 Befehle senden ‣ 5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">6</span></a> dienen zum Einbinden der benötigten Bibliotheken. Die Zeilen 8–20 zeigen eine vereinfachte Struktur des Hauptprogramms. Wird ein Taster gedrückt, wird dies durch die <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">get_key_press()</span>-Funktion, bekannt aus Kapitel <a href="#Ch5.S1.SS1" title="5.1.1 Taster ‣ 5.1 Bereitstellen grundlegender Funktionalitäten ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.1.1</span></a>, erkannt und die entsprechende Menü Funktion aufgerufen.</p></div><div id="LST6" class="listing language_C"><div class="caption"><span class="tag">Listing 6: </span>Menü</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>MCU_CLK<span class="text lstspace"> </span>F_CPU</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote">keywordstyle <span class="text lstdirectives">include</span><span class="text lstspace"> </span>”<span class="text" style="color:#000000;">tinymenu/spin_delay.h</span>”</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>CONFIG_TINYMENU_USE_CLEAR</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote">keywordstyle <span class="text lstdirectives">include</span><span class="text lstspace"> </span>”<span class="text" style="color:#000000;">tinymenu/tinymenu.h</span>”</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote">include<span class="text lstspace"> </span>”tinymenu/tinymenu_hw.h”</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">6</span></td>
    <td class="td"><span class="text lstline footnote">keywordstyle <span class="text lstdirectives">include</span><span class="text lstspace"> </span>”<span class="text" style="color:#000000;">mymenu.h</span>”</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">7</span></td>
    <td class="td"><span class="text lstline footnote">//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Gekuerzte<span class="text lstspace"> </span>Main-Funktion</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">8</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">int</span><span class="text lstspace"> </span>main(<span class="text lstkeywords" style="color:#FF0000;">void</span>)<span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">9</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">while</span><span class="text lstspace"> </span>(1)<span class="text lstspace"> </span>{<span class="text lstspace">  </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">In<span class="text lstspace"> </span>Endlosschleife<span class="text lstspace"> </span>wechseln</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">10</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>wdt_reset();<span class="text lstspace">     </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Watchdog<span class="text lstspace"> </span>zuruecksetzen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">11</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>(get_key_press(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>KEY1))<span class="text lstspace">      </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">1<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Zurueck</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">12</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>menu_exit(&amp;menu_context);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">13</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">if</span>(<span class="text lstspace"> </span>get_key_press(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>KEY2))<span class="text lstspace">      </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">2<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Hoch</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">14</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>menu_prev_entry(&amp;menu_context);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">15</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>(get_key_press(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>KEY3))<span class="text lstspace">      </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">3<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Runter</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">16</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>menu_next_entry(&amp;menu_context);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">17</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>(get_key_press(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>KEY4))<span class="text lstspace">      </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">4<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Ok</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">18</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>menu_select(&amp;menu_context);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">19</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">20</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">21</span></td>
    <td class="td"><span class="text lstline footnote">//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Funktion<span class="text lstspace"> </span>zum<span class="text lstspace"> </span>senden<span class="text lstspace"> </span>der<span class="text lstspace"> </span>Menuepunkte<span class="text lstspace"> </span>ueber<span class="text lstspace"> </span>die<span class="text lstspace"> </span>serielle<span class="text lstspace"> </span>Schnittstelle</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">22</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">void</span><span class="text lstspace">        </span>menu_puts<span class="text lstspace">                </span>(<span class="text lstkeywords" style="color:#FF0000;">void</span><span class="text lstspace"> </span>*arg,<span class="text lstspace"> </span><span class="text lstkeywords" style="color:#FF0000;">char</span><span class="text lstspace"> </span>*name)<span class="text lstspace"> </span>{<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Menu/Sende<span class="text lstspace"> </span>Funktion</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">23</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>uart_put_string(arg,<span class="text lstspace"> </span>D_Stepper);<span class="text lstspace">   </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Uebergebenen<span class="text lstspace"> </span>String<span class="text lstspace"> </span>an<span class="text lstspace"> </span>Stepper<span class="text lstspace"> </span>senden</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">24</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Befehl<span class="text lstspace"> </span>auf<span class="text lstspace"> </span>Display<span class="text lstspace"> </span>ausgeben</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">25</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>lcd_clrscr();</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">26</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>lcd_puts(”<span class="text" style="color:#000000;">Sent:<span class="text lstspace"> </span></span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">27</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>lcd_puts(arg);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">28</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>lcd_puts(”<span class="text" style="color:#000000;">\n</span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">29</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>ms_spin(100);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">30</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>//<span class="text" style="color:#008000;">if<span class="text lstspace"> </span>((UCSR1A<span class="text lstspace"> </span>&amp;<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>RXC1)))</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">31</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>uart_rx(D_Stepper);<span class="text lstspace">     </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Antwort<span class="text lstspace"> </span>des<span class="text lstspace"> </span>Stepper<span class="text lstspace"> </span>empfangen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">32</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>ms_spin(1000);<span class="text lstspace">         </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Antwort<span class="text lstspace"> </span>noch<span class="text lstspace"> </span>eine<span class="text lstspace"> </span>weile<span class="text lstspace"> </span>Anzeigen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">33</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr></table></div><div id="Ch5.S3.SS1.p2" class="para"><p class="p">Folgende Menüpunkte wurden realisiert:</p></div><div id="LST7" class="listing language_C"><div class="caption"><span class="tag">Listing 7: </span>Menü Baum</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote">Main<span class="text lstspace"> </span>Menu</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">  </span>Bewegen<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Rotation</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>+90</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>-90</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>+10.000<span class="text lstspace"> </span>Schritte</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">6</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>-10.000<span class="text lstspace"> </span>Schritte</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">7</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>Gehe<span class="text lstspace"> </span>zum<span class="text lstspace"> </span>Uhrsprung</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">8</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">  </span>Bewegen<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Hoehe</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">9</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>+500000</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">10</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>-500000</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">11</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>+1000000</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">12</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>-1000000</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">13</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>Gehe<span class="text lstspace"> </span>zum<span class="text lstspace"> </span>Ursprung</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">14</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">  </span>Konfigurieren</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">15</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>Motorstatus</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">16</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>Setze<span class="text lstspace"> </span>Ursprung</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">17</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>Write<span class="text lstspace"> </span>to<span class="text lstspace"> </span>EEPROM</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">18</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>Newline<span class="text lstspace"> </span>1</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">19</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>Parameter<span class="text lstspace"> </span>Auslesen</span></td></tr></table></div><div id="Ch5.S3.SS1.p3" class="para"><p class="p">Wird einer der Menüpunkte aufgerufen, wird die im Menüpunkt hinterlegte Funktion mit dem hinterlegten Parameter aufgerufen. Wird beispielsweise der Befehl <em class="emph">+90</em> ausgewählt, wird die hinterlegte Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">menu_puts(arg, name)</span>(Codelisting <a href="#LST6" title="6 ‣ 5.3.1 Befehle senden ‣ 5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">6</span></a> Zeile 18-28) mit dem hinterlegten Wert aufgerufen. Diese sendet dann mit der aus Kapitel <a href="#Ch5.S1.SS4" title="5.1.4 RS-232-Schnittstelle ‣ 5.1 Bereitstellen grundlegender Funktionalitäten ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.1.4</span></a> bekannten Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">uart_puts(arg, dir)</span> einen Befehl an die Schrittmotorsteuerung.<br class="break"/>Es ist somit nun möglich mit Tastern vordefinierte Befehle aus dem Menü auszuwählen und an die Schrittmotorsteuerung zu senden.</p></div></div><div id="Ch5.S3.SS2" class="subsection"><h4 class="title subsection-title"><span class="tag">5.3.2 </span>Antworten empfangen und speichern</h4><div id="Ch5.S3.SS2.p1" class="para"><p class="p">Die Schrittmotorsteuerung antwortet auf Befehle mit einem <span class="text" style="background-color:#D9D9FF;">String</span>. In diesem Arbeitsschritt wird die Funktionalität zum Empfangen von Antworten der Schrittmotorsteuerung auf Befehle des Mikrocontrollers hergestellt. Diese Antworten sollen in einem String gespeichert und im nächsten Schritt an eine <em class="emph">Auswerte-Funktion</em> weiter gegeben werden.<br class="break"/>Dazu wird in der Hauptschleife des Programms ständig das Eingangsregister der ersten seriellen Schnittstelle abgefragt (siehe Codelisting <a href="#LST8" title="8 ‣ 5.3.2 Antworten empfangen und speichern ‣ 5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">8</span></a> Zeile 10–13). Dieses Vorgehen bezeichnet man als <span class="text" style="background-color:#D9D9FF;">Polling</span>.
Sind Daten im Register vorhanden, wird <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">LED3</span> eingeschaltet und die Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">uart_rx(int dir)</span> mit dem Parameter <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">D_Stepper</span> aufgerufen. Der übergebene Parameter gibt an, dass der Befehl von der für die Schrittmotorkarte zuständigen Schnittstelle empfangen wurde. Dadurch wird sichergestellt, dass der empfangene <span class="text" style="background-color:#D9D9FF;">String</span> aus dem richtigen Datenempfangsregister ausgelesen wird und festgelegt wie er weiterverarbeitet wird. Die Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">uart_rx(dir)</span> liest dann das Empfangsregister mit der aus Kapitel <a href="#Ch5.S1.SS4" title="5.1.4 RS-232-Schnittstelle ‣ 5.1 Bereitstellen grundlegender Funktionalitäten ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.1.4</span></a> bekannten Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">uart_get_string(str_rx, dir)</span> aus und schreibt den empfangenen String in die Variable <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">str_rx</span>(Codelisting <a href="#LST8" title="8 ‣ 5.3.2 Antworten empfangen und speichern ‣ 5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">8</span></a>, Zeile 7). In einer <span class="text" style="background-color:#D9D9FF;">if-Abfrage</span> wird entschieden von welcher Schnittstelle der empfangene Befehl kam. Da <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">D_Stepper</span> übergeben wurde, wird der if-Teil der Abfrage ausgeführt. In dieser wird der empfangene String an die <em class="emph">Auswerte-Funktion</em> für die Schrittmotorkarte (Codelisting <a href="#LST8" title="8 ‣ 5.3.2 Antworten empfangen und speichern ‣ 5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">8</span></a>, Zeile 15-45) übergeben.
Durch diesen Teil des Programms ist es nun möglich Antworten der Schrittmotorkarte zu empfangen, in dem String <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">str_rx</span> zu speichern und an die Auswerte-Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">switch_Stepper(str_rx)</span> zu übergeben.</p></div><div id="LST8" class="listing language_C"><div class="caption"><span class="tag">Listing 8: </span>RS-232 Empfang</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>((UCSR1A<span class="text lstspace"> </span>&amp;<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>RXC1))){<span class="text lstspace">                </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Stepper<span class="text lstspace"> </span>Polling</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>LED_PORT<span class="text lstspace"> </span>&amp;=<span class="text lstspace"> </span>(<span class="text lstspace"> </span>1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>LED3<span class="text lstspace"> </span>);<span class="text lstspace">          </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">LED<span class="text lstspace"> </span>einschalten</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>uart_rx(D_Stepper);<span class="text lstspace">                     </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Register<span class="text lstspace"> </span>auslesen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote">//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">UART<span class="text lstspace"> </span>Empfangsregister<span class="text lstspace"> </span>auslesen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">6</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">void</span><span class="text lstspace">        </span>uart_rx<span class="text lstspace">                                </span>(<span class="text lstkeywords" style="color:#FF0000;">int</span><span class="text lstspace"> </span>dir)<span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">7</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>uart_get_string(str_rx,<span class="text lstspace"> </span>dir);<span class="text lstspace">   </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">String<span class="text lstspace"> </span>aus<span class="text lstspace"> </span>Empfangsregister<span class="text lstspace"> </span>auslesen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">8</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>(dir<span class="text lstspace"> </span>==<span class="text lstspace"> </span>D_Stepper)<span class="text lstspace">         </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Empfangsregister<span class="text lstspace"> </span>Stepper</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">9</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>switch_Stepper(str_rx);<span class="text lstspace">     </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Uebersetzungsfunktion<span class="text lstspace"> </span>fuer<span class="text lstspace"> </span>Stepper<span class="text lstspace"> </span>aufrufen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">10</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">else</span>{<span class="text lstspace">                               </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Empfangsregister<span class="text lstspace"> </span>RapidForm</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">11</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Wird<span class="text lstspace"> </span>spaeter<span class="text lstspace"> </span>erklaert</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">12</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">13</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr></table></div></div><div id="Ch5.S3.SS3" class="subsection"><h4 class="title subsection-title"><span class="tag">5.3.3 </span>Antworten auswerten</h4><div id="Ch5.S3.SS3.p1" class="para"><p class="p">Die Funktion zum Auswerten empfangener Strings spielt eine zentrale Rolle im Projekt. Diese Funktion ermöglicht es, ankommende Strings im Mikrocontroller gegen die bekannten Antworten zu prüfen und eine entsprechende Reaktion auszuführen.<br class="break"/>In der Auswerte-Funktion wird der übergebene String mittels der Funktion<br class="break"/><span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">FindStringInArray(str_rx, pOptions, length)</span>(Codelisting <a href="#LST9" title="9 ‣ 5.3.3 Antworten auswerten ‣ 5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">9</span></a>) gegen ein <span class="text" style="background-color:#D9D9FF;">Array</span> (Codelisting <a href="#LST10" title="10 ‣ 5.3.3 Antworten auswerten ‣ 5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">10</span></a>, Zeile 3) mit bekannten Befehlen geprüft. Ist der String in diesem Array vorhanden, wird die Position des Strings im Array zurückgegeben, ansonsten wird ”99” zurückgegeben. In einer anschließenden <span class="text" style="background-color:#D9D9FF;">switch/case-Struktur</span> wird dann der Position im Array ein bestimmtes Verhalten des Mikrocontrollers zugeordnet. Wird beispielsweise der String <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">#</span> empfangen, wird Position <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">0</span> zurück gegeben und auf dem LC-Display wird <em class="emph">Erfolgreich</em> ausgegeben.<br class="break"/>Durch diese Funktion kann nun auf Strings reagiert werden und eine entsprechende Reaktion seitens des Mikrocontrollers erfolgen.
</p></div><div id="LST9" class="listing language_Java"><div class="caption"><span class="tag">Listing 9: </span>FindStringInArray()</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">int</span><span class="text lstspace">        </span>FindStringInArray<span class="text lstspace">        </span>(<span class="text lstkeywords" style="color:#FF0000;">const</span><span class="text lstspace"> </span><span class="text lstkeywords" style="color:#FF0000;">char</span>*<span class="text lstspace"> </span>pInput,<span class="text lstspace"> </span><span class="text lstkeywords" style="color:#FF0000;">const</span><span class="text lstspace"> </span><span class="text lstkeywords" style="color:#FF0000;">char</span>*<span class="text lstspace"> </span>pOptions[],<span class="text lstspace"> </span><span class="text lstkeywords" style="color:#FF0000;">int</span><span class="text lstspace"> </span>cmp_length)<span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">int</span><span class="text lstspace"> </span>n<span class="text lstspace"> </span>=<span class="text lstspace"> </span>-1;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">while</span><span class="text lstspace"> </span>(pOptions[++n])<span class="text lstspace"> </span>{<span class="text lstspace">       </span>//<span class="text" style="color:#008000;">Array<span class="text lstspace"> </span>durchlaufen<span class="text lstspace"> </span>bis<span class="text lstspace"> </span>0<span class="text lstspace"> </span>terminiert</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>//<span class="text" style="color:#008000;">Wenn<span class="text lstspace"> </span>pInput<span class="text lstspace"> </span>==<span class="text lstspace"> </span>pOptions<span class="text lstspace"> </span>dann<span class="text lstspace"> </span>gib<span class="text lstspace"> </span>Array<span class="text lstspace"> </span>Position<span class="text lstspace"> </span>zurueck</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>(!strncmp(pInput,<span class="text lstspace"> </span>pOptions[n],<span class="text lstspace"> </span>cmp_length))<span class="text lstspace">    </span><span class="text lstkeywords" style="color:#FF0000;">return</span><span class="text lstspace"> </span>n;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">6</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">7</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">return</span><span class="text lstspace"> </span>99;<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Wenn<span class="text lstspace"> </span>keine<span class="text lstspace"> </span>uebereinstimmung,<span class="text lstspace"> </span>gib<span class="text lstspace"> </span>99<span class="text lstspace"> </span>zurueck</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">8</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr></table></div><div id="LST10" class="listing language_Java"><div class="caption"><span class="tag">Listing 10: </span>switchStepper()</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote">//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Uebersetzung<span class="text lstspace"> </span>Schrittmotorkarte</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">void</span><span class="text lstspace">        </span>switch_Stepper<span class="text lstspace">                </span>(<span class="text lstkeywords" style="color:#FF0000;">char</span><span class="text lstspace"> </span>*<span class="text lstspace"> </span>str_rx)<span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">const</span><span class="text lstspace"> </span><span class="text lstkeywords" style="color:#FF0000;">char</span>*<span class="text lstspace"> </span>pOptions[]<span class="text lstspace"> </span>=<span class="text lstspace"> </span>{<span class="text lstspace">       </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Array<span class="text lstspace"> </span>mit<span class="text lstspace"> </span>bekannten<span class="text lstspace"> </span>Befehlen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>”<span class="text" style="color:#000000;">#</span>”,<span class="text lstspace">    </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">0<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Stepper<span class="text lstspace"> </span>Karte<span class="text lstspace"> </span>hat<span class="text lstspace"> </span>Befehl<span class="text lstspace"> </span>erkannt</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>”<span class="text" style="color:#000000;">E</span>”,<span class="text lstspace">    </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">1<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Stepper<span class="text lstspace"> </span>Karte<span class="text lstspace"> </span>meldet<span class="text lstspace"> </span>Error</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">6</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>”<span class="text" style="color:#000000;">!CLS</span>”,<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">2<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Clear<span class="text lstspace"> </span>Screen<span class="text lstspace"> </span>(Debugging)</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">7</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>”<span class="text" style="color:#000000;">Test</span>”,<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">3<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Test<span class="text lstspace"> </span>(Debugging)</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">8</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>0<span class="text lstspace"> </span>};</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">9</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">switch</span><span class="text lstspace"> </span>(FindStringInArray(str_rx,<span class="text lstspace"> </span>pOptions,<span class="text lstspace"> </span>1))<span class="text lstspace"> </span>{<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">String<span class="text lstspace"> </span>gegen<span class="text lstspace"> </span>bekannte<span class="text lstspace"> </span>Antworten<span class="text lstspace"> </span>pruefen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">10</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">case</span><span class="text lstspace"> </span>0:<span class="text lstspace">                     </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">0<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Stepper<span class="text lstspace"> </span>Karte<span class="text lstspace"> </span>hat<span class="text lstspace"> </span>Befehl<span class="text lstspace"> </span>erkannt</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">11</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>lcd_puts(”<span class="text" style="color:#000000;">Erfolgreich\n</span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">12</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">break</span>;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">13</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">case</span><span class="text lstspace"> </span>1:<span class="text lstspace">                     </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">1<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Stepper<span class="text lstspace"> </span>Karte<span class="text lstspace"> </span>meldet<span class="text lstspace"> </span>Error</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">14</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>lcd_puts(”<span class="text" style="color:#000000;">Error\n</span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">15</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>uart_put_string(”<span class="text" style="color:#000000;">1\r\n</span>”,<span class="text lstspace"> </span>D_RapidForm);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">16</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">break</span>;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">17</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">case</span><span class="text lstspace"> </span>2:<span class="text lstspace">                     </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">2<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Clear<span class="text lstspace"> </span>Screen<span class="text lstspace"> </span>(Debugging)</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">18</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>lcd_clrscr();</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">19</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">break</span>;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">20</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">case</span><span class="text lstspace"> </span>3:<span class="text lstspace">                     </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">3<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Test<span class="text lstspace"> </span>(Debugging)</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">21</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>lcd_puts(”<span class="text" style="color:#000000;">Test<span class="text lstspace"> </span>bestanden\n</span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">22</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">break</span>;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">23</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">default</span>:</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">24</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>ms_spin(10);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">25</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">26</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr></table></div></div></div><div id="Ch5.S4" class="section"><h3 class="title section-title"><span class="tag">5.4 </span>Verbesserungen an der vorhandenen Hardware</h3><div id="Ch5.S4.SS1" class="subsection"><h4 class="title subsection-title"><span class="tag">5.4.1 </span>Netzteil</h4><div id="Ch5.S4.SS1.p1" class="para"><p class="p">Ziel dieses Arbeitsschrittes war es, die festen Lötverbindungen zwischen dem PC-Netzteil und den einzelnen Karteneinschüben im 19”-Rack durch Steckverbindungen zu ersetzen und dadurch leicht erweiterbar zu machen.<br class="break"/>Die festen Lötverbindungen am Einschub für die Schrittmotorkarte wurden durch Standard PC-Netzteil Stecker ersetzt. Die <span class="text" style="background-color:#D9D9FF;">Logikbausteine</span> der Schrittmotorkarte werden mit <em class="emph">5V</em> gespeist. Die Schrittmotorkarte wird zusätzlich mit <em class="emph">12V</em> für den Schrittmotor gespeist. Der Stecker lässt sich nun einfach mit einer Buchse des Standard PC-Netzteils verbinden und es ist nicht mehr Notwendig zu löten wenn das Netzteil ausgebaut wird. Mittels eines Y-Kabels(siehe Abbildung <a href="#Ch5.F1" title="Figure 5.1 ‣ 5.4.1 Netzteil ‣ 5.4 Verbesserungen an der vorhandenen Hardware ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.1</span></a>) können nun leicht weitere Buchsen hinzugefügt werden.<br class="break"/>Dadurch kann das Netzteil nun einfach ein- und ausgebaut werden, bzw. das System leicht um neue Einschubkarten erweitert werden.</p></div><div id="Ch5.F1" class="figure"><img src="" id="Ch5.F1.g1" class="graphics centering"/><div class="caption centering"><span class="tag">Figure 5.1: </span>Stromverbinder - Y-Kabel<cite class="cite">()</cite></div></div></div><div id="Ch5.S4.SS2" class="subsection"><h4 class="title subsection-title"><span class="tag">5.4.2 </span>Zweite Schrittmotorkarte</h4><div id="Ch5.S4.SS2.p1" class="para"><p class="p">Zu Anfang war nur eine Schrittmotorkarte für die Rotation des Drehtisches vorbereitet. Mit einem zweiten Schrittmotor konnte der Tisch in der Höhe verstellt werden. Für diesen fehlte jedoch noch eine zweite Schrittmotorkarte. Diese musste noch vorbereitet und mit der Ersten verbunden werden.<br class="break"/>Dazu wurde, wie in Kapitel <a href="#Ch5.S4.SS1" title="5.4.1 Netzteil ‣ 5.4 Verbesserungen an der vorhandenen Hardware ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.4.1</span></a> beschrieben, ein weiterer Einschubplatz für die Schrittmotorkarte vorbereitet. Die Karte wurde mit einer Frontblende versehen und auf dieser eine Buchse für die Motorverkabelung und je eine Buchse und einen Stecker für die seriellen Schnittstellen verbaut. Diese wurden mit den entsprechenden Anschlüssen auf der Schrittmotorkarte verlötet. Die Karte wird in den Einschubplatz geschoben und mit einem seriellen Kabel als <span class="text" style="background-color:#D9D9FF;">Daisy-Chain</span> mit der ersten Schrittmotorkarte verbunden. Dadurch kann die zweite Schrittmotorkarte über die Erste angesteuert werden.<br class="break"/>Somit steht eine baugleiche Schrittmotorkarte zur Verfügung. Diese kann nun den Schrittmotor für die Höhenverstellung ansteuern. Befehle an diese Schrittmotorkarte werden an die erste Karte geschickt, jedoch mit dem Prefix <em class="emph">2</em>. Dieser weist die erste Karte an, den Befehl an die zweite Karte weiter zu senden. So kann das System um weitere Karten erweitert werden.</p></div></div><div id="Ch5.S4.SS3" class="subsection"><h4 class="title subsection-title"><span class="tag">5.4.3 </span>Motor- und Endschalterverkabelung</h4><div id="Ch5.S4.SS3.p1" class="para"><p class="p">Zwischen der zweiten Schrittmotorkarte und dem zugehörigen Schrittmotor, der für die Höhenverstellung zuständig ist, war noch kein Kabel vorhanden. Dieses musste noch gefertigt und um 3 Leitungen für die Endschalter erweitert werden.<br class="break"/>Dafür wurde in der Werkstatt des RheinAhrCampus Remagen ein 7 adriges Kabel (siehe Abbildung <a href="#Ch5.F2" title="Figure 5.2 ‣ 5.4.3 Motor- und Endschalterverkabelung ‣ 5.4 Verbesserungen an der vorhandenen Hardware ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.2</span></a>) besorgt und die passenden Endstecker bestellt. Die Belegung wurde gleich zum Kabel für den ersten Schrittmotor gewählt, jedoch um die 3 Adern für die beiden Endschalter erweitert. Tabelle <a href="#Ch6.T1" title="Table 6.1 ‣ 5.4.3 Motor- und Endschalterverkabelung ‣ 5.4 Verbesserungen an der vorhandenen Hardware ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">6.1</span></a> gibt die Belegung des Kabels wieder.<br class="break"/>Somit stand ein Kabel zur Verfügung mit dem sowohl der Schrittmotor gesteuert, als auch der Status der Endschalter an die Schrittmotorkarte übermittelt werden konnte.</p></div><div id="Ch5.F2" class="figure"><img src="" id="Ch5.F2.g1" class="graphics centering"/><div class="caption centering"><span class="tag">Figure 5.2: </span>Motor- und Endschalterverkabelung</div></div><div id="Ch6.T1" class="table"><div class="caption"><span class="tag">Table 6.1: </span>Fuses</div><table class="tabular"><tr class="tr">
    <td class="td l r t" align="center">1</td>
    <td class="td r t" align="left">Phase A</td></tr><tr class="tr">
    <td class="td l r t" align="center">2</td>
    <td class="td r t" align="left">Phase B</td></tr><tr class="tr">
    <td class="td l r t" align="center">3</td>
    <td class="td r t" align="left">Phase C</td></tr><tr class="tr">
    <td class="td l r t" align="center">4</td>
    <td class="td r t" align="left">Phase D</td></tr><tr class="tr">
    <td class="td l r t" align="center">5</td>
    <td class="td r t" align="left">Endschalter oben</td></tr><tr class="tr">
    <td class="td l r t" align="center">6</td>
    <td class="td r t" align="left">Endschalter unten</td></tr><tr class="tr">
    <td class="td b l r t" align="center">7</td>
    <td class="td b r t" align="left">Endschalter Masse</td></tr></table></div></div><div id="Ch5.S4.SS4" class="subsection"><h4 class="title subsection-title"><span class="tag">5.4.4 </span>Endschalter</h4><div id="Ch5.S4.SS4.p1" class="para"><p class="p">Nun sollen die vorgegeben induktiven Endschalter mit der Schrittmotorkarte und dem Mikrocontroller zu verbinden. Dadurch soll gewährleistet werden, dass der Drehtisch nicht über den Arbeitsbereich hinaus bewegt werden kann. Zusätzlich soll das Erreichen der Endpositionen auf dem LC-Display angezeigt werden.<br class="break"/>Da die Schrittmotorkarte nur mechanische Endschalter unterstützt, ließen sich die induktiven Endschalter nicht ohne weiteres nutzen. Um die induktiven Endschalter nutzen zu können, musste die Spannung über einen Spannungsteiler heruntergesetzt werden und die standardmäßigen Eingänge für die mechanischen Endschalter umgangen werden. Die induktiven Endschalter werden direkt an den Optokoppler angeschlossen, welcher für die mechanischen Endschalter zuständig ist. Dadurch wurden die Signale der Endschalter für die Schrittmotorkarte nutzbar.</p></div><div id="Ch5.F3" class="figure"><img src="" id="Ch5.F3.g1" class="graphics centering"/><div class="caption centering"><span class="tag">Figure 5.3: </span>Endschalterverkabelung</div></div><div id="Ch5.S4.SS4.p2" class="para"><p class="p">Ein weiteres Problem bestand darin, dass, wenn der Tisch sich bereits in der Endposition befand, die Endschalter noch nicht aktiviert wurden. Dies lag daran, dass der Metallstutzen, der die Endschalter auslösen sollte, sich nicht im Schaltbereich der induktiven Schalter befand. Zur Abhilfe wurde ein längerer Metallstutzen von der Werkstatt des RheinAhrCampus angefertigt.<br class="break"/>Wenn der Tisch sich in der Endposition befindet, soll dies auch auf dem LC-Display angezeigt werden. Die Signale der Endschalter liegen auf der Rückseite der Schrittmotorkarte am Verbindungsstecker an. Um die Signale dem Mikrocontroller zugänglich zu machen wurde eine Brücke zwischen den Verbindungssteckern der Schrittmotorkarte und der Mikrocontroller-Platine gelötet. Auf der Mikrocontroller-Platine sind diese beiden Pins mit je einem Pin des Mikrocontrollers verbunden. Diese beiden Pins werden im Mikrocontroller als <span class="text" style="background-color:#D9D9FF;">Interrupts</span> definiert. Die <span class="text" style="background-color:#D9D9FF;">Interrupt-Service-Routine</span> zum Anzeigen der Nachricht auf dem LC-Display wird in Kapitel <a href="#Ch6.S2.SS1" title="6.2.1 Endschalter ‣ 6.2 Interrupts ‣ Chapter 6 Probleme und Lösungen" class="ref"><span class="text reftag">6.2.1</span></a> beschrieben.<br class="break"/>Da die Signale der Endschalter nun an der Schrittmotorkarte anliegen, stoppt diese den Motor wenn eine der Endschalterpositionen erreicht wird. Zusätzlich liegen die Signale am Mikrocontroller an. Dieser gibt dadurch auf dem Display die Meldung <em class="emph">Endschalterposition erreicht!</em> aus.</p></div></div><div id="Ch5.S4.SS5" class="subsection"><h4 class="title subsection-title"><span class="tag">5.4.5 </span>Zweite serielle Schnittstelle</h4><div id="Ch5.S4.SS5.p1" class="para"><p class="p">Das STK500 bietet nur eine serielle Schnittstelle. Um zusätzlich zur Schrittmotorkarte auch mit RapidForm2004 kommunizieren zu können, wird eine zweite RS-232-Schnittstelle benötigt.<br class="break"/>Dafür wurde vorerst auf einem Steckbrett eine zweite serielle Schnittstelle nach dem Schaltplan in Abbildung <a href="#Ch5.F4" title="Figure 5.4 ‣ 5.4.5 Zweite serielle Schnittstelle ‣ 5.4 Verbesserungen an der vorhandenen Hardware ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.4</span></a> aufgebaut. Später wird diese Schnittstelle direkt auf der Mikrocontroller-Platine realisiert.
Dadurch ist es möglich mit dem Mikrocontroller über zwei RS-232-Schnittstellen gleichzeitig zu kommunizieren.</p></div><div id="Ch5.F4" class="figure"><img src="" id="Ch5.F4.g1" class="graphics centering"/><div class="caption centering"><span class="tag">Figure 5.4: </span>Schaltplan für die zweite serielle Schnittstelle
<cite class="cite">()</cite></div></div></div></div><div id="Ch5.S5" class="section"><h3 class="title section-title"><span class="tag">5.5 </span>Kommunikation mit RapidForm2004</h3><div id="Ch5.S5.p1" class="para"><p class="p">RapidForm2004 sendet Befehle die für die Drehtischsteuerung bestimmt sind an den Mikrocontroller. Diese sollen dort empfangen, ausgewertet und in verständlicher Form an die Drehtischsteuerung weiter gegeben werden. RapidForm2004 verwendet dabei verschiedene Befehlssätze für verschiedene Schrittmotorsteuerungen. Für jeden dieser Befehlssätze wird eine eigene Auswerte-Funktion geschrieben. Im folgenden Kapitel wird nun das Empfangen der Befehle beschrieben und eine erste Auswertung, die den empfangenen Befehl dem Befehlssatz einer Schrittmotorsteuerung zuordnet.
Nachdem ein Befehl zugeordnet wurde und in der entsprechenden Auswerte-Funktion erkannt wurde, soll ein entsprechender Befehl an die Drehtischsteuerung gesendet und die Antwort der Drehtischsteuerung vom Mikrocontroller ausgewertet werden. Abschließend soll eine entsprechende Antwort an RapidForm2004 zurück gesendet werden. Abbildung <a href="#Ch5.F5" title="Figure 5.5 ‣ 5.5 Kommunikation mit RapidForm2004 ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.5</span></a> zeigt eine schematische Übersicht dieser Kommunikation.<br class="break"/>Die Kommunikation mit RapidForm2004 ist ähnlich zu der mit der Schrittmotorsteuerung. Diese wurde bereits in Kapitel <a href="#Ch5.S3" title="5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.3</span></a> ausführlich beschrieben. Daher wird die Kommunikation hier etwas oberflächlicher behandelt.</p></div><div id="Ch5.F5" class="figure"><img src="" id="Ch5.F5.g1" class="graphics centering"/><div class="caption centering"><span class="tag">Figure 5.5: </span>Schema der Kommunikation</div></div><div id="Ch5.S5.SS1" class="subsection"><h4 class="title subsection-title"><span class="tag">5.5.1 </span>Befehle empfangen</h4><div id="Ch5.S5.SS1.p1" class="para"><p class="p">Zuerst sollen nun die Befehle von RapidForm2004 an den Mikrocontroller, gespeichert werden. Anschließend wird die automatische Auswahl des Befehlssatzes beschrieben.<br class="break"/>Um anstehende Befehle zu empfangen wird, ähnlich wie in Kapitel <a href="#Ch5.S3.SS2" title="5.3.2 Antworten empfangen und speichern ‣ 5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.3.2</span></a>, eine Funktion die ständig das Eingangsregister der ersten seriellen Schnittstelle abfragt verwendet (siehe Codelisting <a href="#LST11" title="11 ‣ 5.5.1 Befehle empfangen ‣ 5.5 Kommunikation mit RapidForm2004 ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">11</span></a>). Auch hier wird die Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">uart_rx(dir)</span> aufgerufen, jedoch mit dem Parameter <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">D_RapidForm</span>. Der empfangenen String wird auch hier in die Variable <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">str_rx</span> gespeichert. Somit können nun auch Strings von RapidForm2004 empfangen und in der Variablen <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">str_rx</span> gespeichert werden.</p></div><div id="LST11" class="listing language_Java"><div class="caption"><span class="tag">Listing 11: </span>RS-232 Empfang - RapidForm2004</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>((UCSR0A<span class="text lstspace"> </span>&amp;<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>RXC0))){<span class="text lstspace">        </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">RapidForm<span class="text lstspace"> </span>Polling</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>LED_PORT<span class="text lstspace"> </span>&amp;=<span class="text lstspace"> </span>(<span class="text lstspace"> </span>1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>LED2<span class="text lstspace"> </span>);<span class="text lstspace">  </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">LED<span class="text lstspace"> </span>einschalten</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>uart_rx(D_RapidForm);<span class="text lstspace">             </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Register<span class="text lstspace"> </span>auslesen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr></table></div><div id="Ch5.S5.SS1.SSS1" class="subsubsection"><h5 class="title subsubsection-title"><span class="tag">5.5.1.1 </span>Automatische Auswahl eines Befehlssatzes</h5><div id="Ch5.S5.SS1.SSS1.p1" class="para"><p class="p">Nun geht es darum, dass der Mikrocontroller anhand eines ersten Befehls der empfangen wird, festlegt, mit welchem Befehlssatz fortan kommuniziert werden soll. Die Kennung für den Befehlssatz wird in einer globalen Variable gespeichert und alle weiteren Befehle werden an die entsprechende Auswerte-Funktion für diesen Befehlssatz übergeben.<br class="break"/>In der Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">uart_rx(dir)</span>(Codelisting <a href="#LST12" title="12 ‣ 5.5.1.1 Automatische Auswahl eines Befehlssatzes ‣ 5.5.1 Befehle empfangen ‣ 5.5 Kommunikation mit RapidForm2004 ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">12</span></a>) wird nun in der ersten <em class="emph">if-Abfrage</em> entschieden, von welcher Schnittstelle der empfangene Befehl kam. Diese verzweigt nun, da <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">D_RapidForm</span> übergeben wurde, in den else-Teil. In diesem wird mit mehreren <em class="emph">if-Abfragen</em> überprüft, ob bereits der Befehlssatz für einen bestimmten Motor ausgewählt wurde. Ist dies nicht der Fall, wird der empfangende String an die Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">switch_Motor(str_rx)</span>(Codelisting <a href="#LST13" title="13 ‣ 5.5.1.1 Automatische Auswahl eines Befehlssatzes ‣ 5.5.1 Befehle empfangen ‣ 5.5 Kommunikation mit RapidForm2004 ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">13</span></a>) übergeben. Diese prüfte mit der aus Kapitel <a href="#Ch5.S3.SS3" title="5.3.3 Antworten auswerten ‣ 5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.3.3</span></a> bekannten Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">FindStringInArray(str_rx, pOptions, 3)</span>, den angekommenen String gegen die Initialisierungsbefehle der einzelnen Befehlssätze. Die Initialisierungsbefehle sind die ersten Befehle die RapidForm2004 an eine Schrittmotorsteuerung sendet um zu prüfen ob diese vorhanden ist. In diesem ersten Schritt wird der String nur zur Identifizierung des von RapidForm2004 verwendeten Befehlssatzes verwendet. Das Antworten auf einen String wird erst in den nachfolgenden Kapiteln beschrieben. Die Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">switch_Motor(str_rx)</span> gibt einen numerischen Wert zurück. Jede Zahl entspricht dabei dem Befehlssatz für eine Schrittmotorsteuerung. Die Zahlenwerte werden dabei mittels Makro-Definitionen (Codelisting <a href="#LST13" title="13 ‣ 5.5.1.1 Automatische Auswahl eines Befehlssatzes ‣ 5.5.1 Befehle empfangen ‣ 5.5 Kommunikation mit RapidForm2004 ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">13</span></a> Zeile 1-6) durch lesbare Text-Variablen ersetzt. Dies erhöhte die Lesbarkeit und das Verständnis. War dieser Schritt erfolgreich, wird in den folgenden if-Abfragen die richtige Auswerte-Funktion aufgerufen. Konnte die Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">switch_Motor(str_rx)</span> den empfangen Befehl nicht zuordnen, gibt sie <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">M_UNK</span> zurück und es wird auf dem Display <em class="emph">Unbekannter Motor!</em> ausgegeben.<br class="break"/>Somit ist es möglich Befehle von RapidForm2004 zu empfangen und an die richtige Auswerte-Funktionen zu übergeben. Zusätzlich wird die Programmierung dadurch wesentlich robuster, da unbekannte Befehle ignoriert werden.<br class="break"/>Der Nachteil dieses Vorgehens besteht darin, dass für ein wechseln des Befehlssatzes der Mikrocontroller neu gestartet werden muss. Ein Beheben dieses Nachteils wäre nicht ohne weiteres möglich gewesen.</p></div><div id="LST12" class="listing language_C"><div class="caption"><span class="tag">Listing 12: </span>Funktion: uart rx()</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote">//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">UART<span class="text lstspace"> </span>Empfangsregister<span class="text lstspace"> </span>auslesen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">void</span><span class="text lstspace">        </span>uart_rx<span class="text lstspace">                                </span>(<span class="text lstkeywords" style="color:#FF0000;">int</span><span class="text lstspace"> </span>dir)<span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>uart_get_string(str_rx,<span class="text lstspace"> </span>dir);<span class="text lstspace">   </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">String<span class="text lstspace"> </span>aus<span class="text lstspace"> </span>Empfangsregister<span class="text lstspace"> </span>auslesen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>(dir<span class="text lstspace"> </span>==<span class="text lstspace"> </span>D_Stepper)<span class="text lstspace">         </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Empfangsregister<span class="text lstspace"> </span>Stepper</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>switch_Stepper(str_rx);<span class="text lstspace">             </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Uebersung<span class="text lstspace"> </span>Stepper</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">6</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">else</span>{<span class="text lstspace">                               </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Empfangsregsiter<span class="text lstspace"> </span>RapidForm</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">7</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Uebersetzungsfunktion<span class="text lstspace"> </span>auswaehlen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">8</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">if</span>(Initialized<span class="text lstspace"> </span>==<span class="text lstspace"> </span>M_UNK){<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Unbekannter<span class="text lstspace"> </span>Initialisierungsbefehl</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">9</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>lcd_puts(”<span class="text" style="color:#000000;">Unbekannter<span class="text lstspace"> </span>Motor!\n</span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">10</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>Initialized<span class="text lstspace"> </span>=<span class="text lstspace"> </span>M_NOTI;<span class="text lstspace">    </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Variable<span class="text lstspace"> </span>Initialized<span class="text lstspace"> </span>zuruecksetzen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">11</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">12</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">if</span>(Initialized<span class="text lstspace"> </span>==<span class="text lstspace"> </span>M_NOTI){<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Befehlssatz<span class="text lstspace"> </span>bestimmen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">13</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>Initialized<span class="text lstspace"> </span>=<span class="text lstspace"> </span>switch_Motor(str_rx);<span class="text lstspace"> </span>//<span class="text" style="color:#008000;">Automatische<span class="text lstspace"> </span>Befehlssatzwahl</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">14</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">15</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">if</span>(Initialized<span class="text lstspace"> </span>==<span class="text lstspace"> </span>M_ISEL)<span class="text lstspace">  </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Uebersetzung<span class="text lstspace"> </span>ISEL</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">16</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>switch_Isel(str_rx);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">17</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">if</span>(Initialized<span class="text lstspace"> </span>==<span class="text lstspace"> </span>M_CSG)<span class="text lstspace">  </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Uebersetzung<span class="text lstspace"> </span>CSG</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">18</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>switch_csg(str_rx);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">19</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">if</span>(Initialized<span class="text lstspace"> </span>==<span class="text lstspace"> </span>M_ZETA)<span class="text lstspace">  </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Uebersetzung<span class="text lstspace"> </span>Zeta</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">20</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>switch_Zeta(str_rx);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">21</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">if</span>(Initialized<span class="text lstspace"> </span>==<span class="text lstspace"> </span>M_TERMINAL)<span class="text lstspace">  </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Uebersetzung<span class="text lstspace"> </span>Terminal</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">22</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>switch_Terminal(str_rx);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">23</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">24</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr></table></div><div id="LST13" class="listing language_C"><div class="caption"><span class="tag">Listing 13: </span>Funktion: switch Motor()</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>M_UNK<span class="text lstspace">           </span>-2</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>M_NOTI<span class="text lstspace">              </span>-1</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>M_ISEL<span class="text lstspace">           </span>0</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>M_CSG<span class="text lstspace">               </span>1</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>M_ZETA<span class="text lstspace">           </span>2</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">6</span></td>
    <td class="td"><span class="text lstline footnote">define<span class="text lstspace"> </span>M_TERMINAL<span class="text lstspace">       </span>3</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">7</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">int</span><span class="text lstspace">        </span>Initialized<span class="text lstspace"> </span>=<span class="text lstspace"> </span>M_NOTI;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">8</span></td>
    <td class="td"><span class="text lstline footnote">//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Automatische<span class="text lstspace"> </span>Befehlssatzwahl</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">9</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">int</span><span class="text lstspace">        </span>switch_Motor<span class="text lstspace">                </span>(<span class="text lstkeywords" style="color:#FF0000;">char</span><span class="text lstspace"> </span>*<span class="text lstspace"> </span>str_rx)<span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">10</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">const</span><span class="text lstspace"> </span><span class="text lstkeywords" style="color:#FF0000;">char</span>*<span class="text lstspace"> </span>pOptions[]<span class="text lstspace"> </span>=<span class="text lstspace"> </span>{<span class="text lstspace">       </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Array<span class="text lstspace"> </span>mit<span class="text lstspace"> </span>Initialisierungsbefehlen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">11</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>”<span class="text" style="color:#000000;">@01</span>”,<span class="text lstspace">          </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">0<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Isel</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">12</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>”<span class="text" style="color:#000000;">Q:</span>”,<span class="text lstspace">           </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">1<span class="text lstspace"> </span>-<span class="text lstspace"> </span>CSG</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">13</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>”<span class="text" style="color:#000000;">ECHO0</span>”,<span class="text lstspace">        </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">2<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Zeta</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">14</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>”<span class="text" style="color:#000000;">!Terminal</span>”,<span class="text lstspace">    </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">3<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Terminal<span class="text lstspace"> </span>ansteuerung!</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">15</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>0<span class="text lstspace"> </span>};</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">16</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Ankommenden<span class="text lstspace"> </span>String<span class="text lstspace"> </span>gegen<span class="text lstspace"> </span>Array<span class="text lstspace"> </span>pruefen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">17</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">switch</span><span class="text lstspace"> </span>(FindStringInArray(str_rx,<span class="text lstspace"> </span>pOptions,<span class="text lstspace"> </span>3))<span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">18</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">case</span><span class="text lstspace"> </span>0:<span class="text lstspace">             </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">0<span class="text lstspace"> </span>-<span class="text lstspace"> </span>ISEL</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">19</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">return</span><span class="text lstspace"> </span>M_ISEL;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">20</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">break</span>;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">21</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">case</span><span class="text lstspace"> </span>1:<span class="text lstspace">             </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">1<span class="text lstspace"> </span>-<span class="text lstspace"> </span>CSG</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">22</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">return</span><span class="text lstspace"> </span>M_CSG;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">23</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">break</span>;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">24</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">case</span><span class="text lstspace"> </span>2:<span class="text lstspace">                     </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">2<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Zeta</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">25</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">return</span><span class="text lstspace"> </span>M_ZETA;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">26</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">break</span>;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">27</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">case</span><span class="text lstspace"> </span>3:<span class="text lstspace">                     </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">3<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Terminal<span class="text lstspace"> </span>ansteuerung</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">28</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">return</span><span class="text lstspace"> </span>M_TERMINAL;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">29</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">break</span>;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">30</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">default</span>:</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">31</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">return</span><span class="text lstspace"> </span>M_UNK;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">32</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">33</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr></table></div></div></div></div><div id="Ch5.S6" class="section"><h3 class="title section-title"><span class="tag">5.6 </span>Auswerte-Funktionen</h3><div id="Ch5.S6.p1" class="para"><p class="p">Die Auswerte-Funktionen sind das Herzstück des Programms. Es geht darum für jedes Protokoll eine eigene Auswerte-Funktion zu schreiben. Diese sollen die von RapidForm2004 kommenden Strings verstehen können und in einen, für die vorhandene Schrittmotorkarte, verständlichen Befehl übersetzen können. Die Funktionen sollen weiterhin prüfen, ob der Befehl von der Schrittmotorkarte erkannt wurde und den Status der Schrittmotorkarte zurück an RapidForm2004 melden.<br class="break"/>Alle bisherigen Arbeitsschritte hatten zum Ziel, die Kommunikation zwischen RapidForm2004 und der ersten Schrittmotorkarte zu ermöglichen. Nun fehlt nur noch der Teil des Programms der die ankommenden Befehle auswertet und in verständlicher Form an die Schrittmotorkarte weitergibt.
Im folgenden Kapitel wird dieser Ablauf nun exemplarisch für den Befehlssatz eines Isel-Motors erklärt.</p></div><div id="Ch5.S6.SS1" class="subsection"><h4 class="title subsection-title"><span class="tag">5.6.1 </span>Auswerte-Funktion für Isel-Motoren</h4><div id="Ch5.S6.SS1.p1" class="para"><p class="p">Wird der Befehl <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">@01</span> empfangen, übergibt die in Kapitel <a href="#Ch5.S5.SS1.SSS1" title="5.5.1.1 Automatische Auswahl eines Befehlssatzes ‣ 5.5.1 Befehle empfangen ‣ 5.5 Kommunikation mit RapidForm2004 ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.5.1.1</span></a> beschriebene Funktion, den String an die Auswerte-Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">switch_Isel(str_rx)</span>. Der Ablauf dieser Funktion ist ähnlich aufgebaut wie bei der Kommunikation mit der Schrittmotorkarte (Kapitel <a href="#Ch5.S3" title="5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.3</span></a>) und bei der automatischen Auswahl des Befehlssatzes (Kapitel <a href="#Ch5.S5.SS1.SSS1" title="5.5.1.1 Automatische Auswahl eines Befehlssatzes ‣ 5.5.1 Befehle empfangen ‣ 5.5 Kommunikation mit RapidForm2004 ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.5.1.1</span></a>. In der Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">switch_Isel(str_rx)</span> sind in dem Array <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">pOptions</span> alle benötigten Befehle des Isel-Befehlssatzes hinterlegt. Mit der aus Kapitel <a href="#Ch5.S3.SS3" title="5.3.3 Antworten auswerten ‣ 5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.3.3</span></a> bekannten Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">FindStringInArray(str_rx, pOptions)</span> wird  <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">str_rx</span> gegen diese Befehle geprüft. Wird der Befehl im Array gefunden gibt die Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">FindStringInArray()</span> die Position des Strings im Array zurück. Mittels einer <span class="text" style="background-color:#D9D9FF;">switch-case-Struktur</span> lässt sich nun so für jeden Befehl ein entsprechender Ablauf ausführen. Die einzelnen Abläufe werden übersichtlich in den folgenden Kapiteln beschrieben.</p></div><div id="LST14" class="listing language_C"><div class="caption"><span class="tag">Listing 14: </span>Übersetzungs Logik für einen Isel-Motor</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote">//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Uebersetzung<span class="text lstspace"> </span>Isel</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">void</span><span class="text lstspace">        </span>switch_Isel<span class="text lstspace">                        </span>(<span class="text lstkeywords" style="color:#FF0000;">char</span><span class="text lstspace"> </span>*<span class="text lstspace"> </span>str_rx)<span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">const</span><span class="text lstspace"> </span><span class="text lstkeywords" style="color:#FF0000;">char</span>*<span class="text lstspace"> </span>pOptions[]<span class="text lstspace"> </span>=<span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>”<span class="text" style="color:#000000;">XXXXXXX</span>”,<span class="text lstspace">      </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">0<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Reserve</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>”<span class="text" style="color:#000000;">!CLS</span>”,<span class="text lstspace">         </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">1<span class="text lstspace"> </span>-<span class="text lstspace"> </span>LC-Display<span class="text lstspace"> </span>loeschen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">6</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>”<span class="text" style="color:#000000;">Test</span>”,<span class="text lstspace">         </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">2<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Test</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">7</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>”<span class="text" style="color:#000000;">@01</span>”,<span class="text lstspace">          </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">3<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Achse<span class="text lstspace"> </span>auswaehlen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">8</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>”<span class="text" style="color:#000000;">@0R</span>”,<span class="text lstspace">          </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">4<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Status<span class="text lstspace"> </span>abfrage</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">9</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>”<span class="text" style="color:#000000;">@0M</span>”,<span class="text lstspace">          </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">5<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Gehe<span class="text lstspace"> </span>zu<span class="text lstspace"> </span>Position</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">10</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>0<span class="text lstspace"> </span>};</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">11</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">switch</span><span class="text lstspace"> </span>(FindStringInArray(str_rx,<span class="text lstspace"> </span>pOptions,<span class="text lstspace"> </span>3))</span></td></tr></table></div><div id="Ch5.S6.SS1.SSS1" class="subsubsection"><h5 class="title subsubsection-title"><span class="tag">5.6.1.1 </span>Initialisierung</h5><div id="Ch5.S6.SS1.SSS1.p1" class="para"><p class="p">Für den String <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">@01</span> wird <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">case 3</span> ausgeführt. Dieser Codeblock zeigt die Meldung <em class="emph">Init</em> auf dem Display an und sendet den erwarteten Befehl an RapidForm2004.
</p></div><div id="LST15" class="listing language_C"><div class="caption"><span class="tag">Listing 15: </span>case 3: Initialisierung</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">case</span><span class="text lstspace"> </span>3:<span class="text lstspace">                     </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">3<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Achse<span class="text lstspace"> </span>auswaehlen<span class="text lstspace"> </span>(Initialisierung)</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>ms_spin(10);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>lcd_puts(”<span class="text" style="color:#000000;">Init</span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>uart_put_string(”<span class="text" style="color:#000000;">0\r\n</span>”,<span class="text lstspace"> </span>D_RapidForm);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">break</span>;</span></td></tr></table></div></div><div id="Ch5.S6.SS1.SSS2" class="subsubsection"><h5 class="title subsubsection-title"><span class="tag">5.6.1.2 </span>Statusabfrage</h5><div id="Ch5.S6.SS1.SSS2.p1" class="para"><p class="p">Wird der String <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">@0R</span> empfangen, wird der Codeblock <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">case 4</span> ausgeführt. Auf dem LC-Display wird <em class="emph">Satusabfrage:</em> ausgegeben. Danach wird der entsprechende Befehl für eine Statusabfrage an die Schrittmotorkarte gesendet. Nach einer kurzen Pause von 50ms, um die Verarbeitung auf der Schrittmotorkarte zu gewährleisten, wird mit einer if-Anweisung geprüft ob sich Daten im Schrittmotorkarten-Empfangsregister befinden. Sprich, die Schrittmotorkarte reagiert hat. Ist dies der Fall, wird der Ablauf, bekannt aus Kapitel <a href="#Ch5.S3" title="5.3 Kommunikation mit der vorhandenen Schrittmotorsteuerung ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.3</span></a>, durchlaufen. Während diesem Ablauf wird die entsprechende Antwort der Schrittmotorkarte auf dem LC-Display ausgegeben. In einer weiteren if-Anweisung wird überprüft ob der angekommene String erfolgreich war. Wenn ja, wird dies an RapidForm2004 gemeldet. Andernfalls zeigt das Display <em class="emph">Fehlgeschlagen</em> an und sendet eine <em class="emph">1</em> an RapidForm2004.</p></div><div id="LST16" class="listing language_C"><div class="caption"><span class="tag">Listing 16: </span>case 4: Statusabfrage</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">case</span><span class="text lstspace"> </span>4:<span class="text lstspace">                     </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">4<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Status<span class="text lstspace"> </span>abfrage</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>lcd_puts(”<span class="text" style="color:#000000;">Statusabfrage:<span class="text lstspace">     </span>\n</span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>uart_put_string(”<span class="text" style="color:#000000;">A\n</span>”,<span class="text lstspace"> </span>D_Stepper);<span class="text lstspace">      </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Statusabfrage<span class="text lstspace"> </span>an<span class="text lstspace"> </span>Stepper<span class="text lstspace"> </span>senden</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>ms_spin(50);<span class="text lstspace">                                   </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Verarbeitungszeit<span class="text lstspace"> </span>gewaehren</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>((UCSR1A<span class="text lstspace"> </span>&amp;<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>RXC1)))<span class="text lstspace">                 </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Wenn<span class="text lstspace"> </span>ein<span class="text lstspace"> </span>Zeichen<span class="text lstspace"> </span>empfangen<span class="text lstspace"> </span>wurde</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">6</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>uart_rx(D_Stepper);<span class="text lstspace">                     </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Zeichen<span class="text lstspace"> </span>auslesen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">7</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>(!strcmp(str_rx,”<span class="text" style="color:#000000;">0#</span>”))<span class="text lstspace">                     </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Empfangenes<span class="text lstspace"> </span>Zeichen<span class="text lstspace"> </span>ueberpruefen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">8</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>uart_put_string(”<span class="text" style="color:#000000;">0\r\n</span>”,<span class="text lstspace"> </span>D_RapidForm);<span class="text lstspace">    </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Antwort<span class="text lstspace"> </span>Ok<span class="text lstspace"> </span>an<span class="text lstspace"> </span>RF<span class="text lstspace"> </span>melden</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">9</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">else</span><span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">10</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>lcd_puts(”<span class="text" style="color:#000000;">Fehlgeschlagen<span class="text lstspace">     </span>\n</span>”);<span class="text lstspace">         </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Fehler<span class="text lstspace"> </span>auf<span class="text lstspace"> </span>Display<span class="text lstspace"> </span>anzeigen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">11</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>uart_put_string(”<span class="text" style="color:#000000;">1\r\n</span>”,<span class="text lstspace"> </span>D_RapidForm);<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Fehler<span class="text lstspace"> </span>an<span class="text lstspace"> </span>RapidForm<span class="text lstspace"> </span>melden</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">12</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">13</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">break</span>;</span></td></tr></table></div></div><div id="Ch5.S6.SS1.SSS3" class="subsubsection"><h5 class="title subsubsection-title"><span class="tag">5.6.1.3 </span>Rotation</h5><div id="Ch5.S6.SS1.SSS3.p1" class="para"><p class="p">Der Codeblock von <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">case 5</span> ist für die Rotation verantwortlich. Es werden je ein String für die Endposition und für den Winkel mit Stringterminierungszeichen vorbelegt. Diese werden an die Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">String_zerlegen_Isel(str_rx, Position, Winkel)</span> (Codelisting <a href="#LST18" title="18 ‣ 5.6.1.3 Rotation ‣ 5.6.1 Auswerte-Funktion für Isel-Motoren ‣ 5.6 Auswerte-Funktionen ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">18</span></a>) übergeben. Dort wird der String in die Bestandteile <em class="emph">Achse</em>, <em class="emph">Rotationsbefehl</em>, <em class="emph">Position/Anzahl der Schritte</em> und <em class="emph">Geschwindigkeit</em> zerlegt. Von diesen ist nur die Anzahl der Schritte relevant. Da die Anzahl der Schritte für den Schrittmotor angepasst werden muss, wird der String in eine Zahl umgewandelt und mit einem entsprechenden Faktor multipliziert. Zugunsten der Rechenzeit wird nicht exakt gerechnet und die Division im Faktor mit 1024 durchgeführt. Diese wird beim Kompilieren durch eine <span class="text" style="background-color:#D9D9FF;">Bitverschiebung</span> ersetzt. Dies spart mehrere Sekunden Rechenzeit und die Abweichung der Schritte beträgt nur maximal 3 Schritte. Die berechnete Anzahl der Schritte wird anschließend wieder als String gespeichert. Dieser wird dann an den String für den Rotationsbefehl der Schrittmotorkarte angehängt. Der neue String wird auf dem Display ausgegeben und an die Schrittmotorsteuerung gesendet. Die Antwort der Schrittmotorsteuerung wird ausgelesen und anschließend wird in einer <span class="text" style="background-color:#D9D9FF;">while-Schleife</span> so lange der Status des Motors abgefragt bis dieser keine Bewegung mehr meldet. Die Position ist damit erreicht und es wird der erwartete Befehl an RapidForm2004 gesendet.</p></div><div id="LST17" class="listing language_C"><div class="caption"><span class="tag">Listing 17: </span>case 5: Rotation</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">case</span><span class="text lstspace"> </span>5:<span class="text lstspace">                     </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">5<span class="text lstspace"> </span>-<span class="text lstspace"> </span>Gehe<span class="text lstspace"> </span>zu<span class="text lstspace"> </span>Position<span class="text lstspace"> </span>MX<span class="text lstspace"> </span>,<span class="text lstspace"> </span>+600</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>ms_spin(10);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">char</span><span class="text lstspace"> </span>Position[33],<span class="text lstspace"> </span>Winkel[6];</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>memset(Position,<span class="text lstspace"> </span>’<span class="text" style="color:#000000;">\0</span>’,<span class="text lstspace"> </span>33);<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Strign<span class="text lstspace"> </span>0<span class="text lstspace"> </span>Terminiert<span class="text lstspace"> </span>vorbelegen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>memset(Winkel,<span class="text lstspace"> </span>’<span class="text" style="color:#000000;">\0</span>’,<span class="text lstspace"> </span>6);<span class="text lstspace">    </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">String<span class="text lstspace"> </span>0<span class="text lstspace"> </span>Terminiert<span class="text lstspace"> </span>vorbelegen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">6</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>String_zerlegen_Isel(str_rx,<span class="text lstspace"> </span>Position,<span class="text lstspace"> </span>Winkel);<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">String<span class="text lstspace"> </span>auswerten</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">7</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">String<span class="text lstspace"> </span>fuer<span class="text lstspace"> </span>Stepper<span class="text lstspace"> </span>vorbereiten</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">8</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">char</span><span class="text lstspace"> </span>Move_To[40];</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">9</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>memset(Move_To,<span class="text lstspace">  </span>’<span class="text" style="color:#000000;">\0</span>’,<span class="text lstspace"> </span>40);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">10</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>Move_To[0]<span class="text lstspace"> </span>=<span class="text lstspace"> </span>’<span class="text" style="color:#000000;">M</span>’;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">11</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>Move_To[1]<span class="text lstspace"> </span>=<span class="text lstspace"> </span>’<span class="text" style="color:#000000;">A</span>’;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">12</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>Move_To[2]<span class="text lstspace"> </span>=<span class="text lstspace"> </span>’<span class="text lstspace" style="color:#000000;"> </span>’;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">13</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>Move_To[3]<span class="text lstspace"> </span>=<span class="text lstspace"> </span>’<span class="text" style="color:#000000;">\0</span>’;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">14</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>strcat(Move_To,<span class="text lstspace"> </span>Position);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">15</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>strcat(Move_To,<span class="text lstspace"> </span>”<span class="text" style="color:#000000;">\n</span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">16</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>lcd_puts(”<span class="text" style="color:#000000;">Pos:</span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">17</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>lcd_puts(Move_To);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">18</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">String<span class="text lstspace"> </span>an<span class="text lstspace"> </span>Stepper<span class="text lstspace"> </span>senden</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">19</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>uart_put_string(Move_To,<span class="text lstspace"> </span>D_Stepper);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">20</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>ms_spin(50);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">21</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>((UCSR1A<span class="text lstspace"> </span>&amp;<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>RXC1)))</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">22</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>uart_rx(D_Stepper);<span class="text lstspace">     </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Antwort<span class="text lstspace"> </span>des<span class="text lstspace"> </span>Stepper<span class="text lstspace"> </span>auslesen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">23</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">else</span><span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">24</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">break</span>;<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Bei<span class="text lstspace"> </span>Fehler<span class="text lstspace"> </span>abbrechen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">25</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">26</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Status<span class="text lstspace"> </span>des<span class="text lstspace"> </span>Stepper<span class="text lstspace"> </span>Abfragen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">27</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>uart_put_string(”<span class="text" style="color:#000000;">A\n</span>”,<span class="text lstspace"> </span>D_Stepper);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">28</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>ms_spin(50);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">29</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Antwort<span class="text lstspace"> </span>des<span class="text lstspace"> </span>Stepper<span class="text lstspace"> </span>Abfragen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">30</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>((UCSR1A<span class="text lstspace"> </span>&amp;<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>RXC1)))</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">31</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>uart_rx(D_Stepper);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">32</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">else</span><span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">33</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>lcd_puts(”<span class="text" style="color:#000000;">Keine<span class="text lstspace"> </span>Bewegung!\n</span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">34</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">35</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">So<span class="text lstspace"> </span>lange<span class="text lstspace"> </span>der<span class="text lstspace"> </span>Stepper<span class="text lstspace"> </span>Bewegung<span class="text lstspace"> </span>meldet<span class="text lstspace"> </span>erneut<span class="text lstspace"> </span>Statusabfrage</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">36</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">while</span><span class="text lstspace"> </span>(!strcmp(str_rx,”<span class="text" style="color:#000000;">1#</span>”)){</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">37</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Statusabfrage<span class="text lstspace"> </span>an<span class="text lstspace"> </span>Stepper</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">38</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>uart_put_string(”<span class="text" style="color:#000000;">A\n</span>”,<span class="text lstspace"> </span>D_Stepper);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">39</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>ms_spin(50);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">40</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Statusabfrage<span class="text lstspace"> </span>auslesen<span class="text lstspace"> </span>und<span class="text lstspace"> </span>auswerten</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">41</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>((UCSR1A<span class="text lstspace"> </span>&amp;<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>RXC1))){</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">42</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>uart_rx(D_Stepper);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">43</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>lcd_clrscr();</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">44</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>lcd_puts(”<span class="text" style="color:#000000;">Gehe<span class="text lstspace"> </span>zu<span class="text lstspace"> </span>Winkel:<span class="text lstspace"> </span></span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">45</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>lcd_puts(Winkel);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">46</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>lcd_puts(”<span class="text" style="color:#000000;">\n</span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">47</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">48</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">else</span><span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">49</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>lcd_puts(”<span class="text" style="color:#000000;">Keine<span class="text lstspace"> </span>Antwort\n</span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">50</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">51</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>wdt_reset();</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">52</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">53</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>lcd_puts(”<span class="text" style="color:#000000;">Winkel:<span class="text lstspace"> </span></span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">54</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>lcd_puts(Winkel);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">55</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>lcd_puts(”<span class="text lstspace" style="color:#000000;"> </span><span class="text" style="color:#000000;">Erreicht\n</span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">56</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Bewegung<span class="text lstspace"> </span>abgeschlossen<span class="text lstspace"> </span>an<span class="text lstspace"> </span>RapidForm<span class="text lstspace"> </span>melden</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">57</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>uart_put_string(”<span class="text" style="color:#000000;">0\r\n</span>”,<span class="text lstspace"> </span>D_RapidForm);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">58</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">break</span>;</span></td></tr></table></div><div id="LST18" class="listing language_C"><div class="caption"><span class="tag">Listing 18: </span>Funktion: string zerlegen Isel()</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstkeywords" style="color:#FF0000;">void</span><span class="text lstspace">        </span>String_zerlegen_Isel(<span class="text lstkeywords" style="color:#FF0000;">char</span><span class="text lstspace"> </span>*<span class="text lstspace"> </span>str_rx,<span class="text lstspace"> </span><span class="text lstkeywords" style="color:#FF0000;">char</span><span class="text lstspace"> </span>*<span class="text lstspace"> </span>Position,<span class="text lstspace"> </span><span class="text lstkeywords" style="color:#FF0000;">char</span><span class="text lstspace"> </span>*<span class="text lstspace"> </span>Winkel)<span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>//<span class="text" style="color:#008000;">0M5200,<span class="text lstspace"> </span>+600</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>//<span class="text" style="color:#008000;">Achse<span class="text lstspace"> </span>M<span class="text lstspace"> </span>Position,<span class="text lstspace"> </span>+Geschwindigkeit</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">char</span><span class="text lstspace"> </span>*<span class="text lstspace"> </span>Achse=”<span class="text" style="color:#000000;">0</span>”;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>Achse[0]<span class="text lstspace"> </span>=<span class="text lstspace"> </span>str_rx[1];<span class="text lstspace">      </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Achse<span class="text lstspace"> </span>setzen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">6</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>Achse[1]<span class="text lstspace"> </span>=<span class="text lstspace"> </span>’<span class="text" style="color:#000000;">\0</span>’;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">7</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Ausgeben<span class="text lstspace"> </span>welche<span class="text lstspace"> </span>Achse<span class="text lstspace"> </span>gewaehlt<span class="text lstspace"> </span>wurde</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">8</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">if</span>(atoi(Achse)==0){</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">9</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>lcd_puts(”<span class="text" style="color:#000000;">Achse:<span class="text lstspace"> </span></span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">10</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>lcd_puts(Achse);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">11</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>lcd_puts(”<span class="text lstspace" style="color:#000000;"> </span><span class="text" style="color:#000000;">(Rotation)\n</span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">12</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">13</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">if</span>(atoi(Achse)==1){</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">14</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>lcd_puts(”<span class="text" style="color:#000000;">Achse:<span class="text lstspace"> </span></span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">15</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>lcd_puts(Achse);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">16</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>lcd_puts(”<span class="text lstspace" style="color:#000000;"> </span><span class="text" style="color:#000000;">(Hoehe)<span class="text lstspace">   </span>\n</span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">17</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">18</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Anzahl<span class="text lstspace"> </span>der<span class="text lstspace"> </span>Schritte<span class="text lstspace"> </span>aus<span class="text lstspace"> </span>dem<span class="text lstspace"> </span>String<span class="text lstspace"> </span>auslesen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">19</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">char</span><span class="text lstspace"> </span>c;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">20</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">int</span><span class="text lstspace"> </span>i<span class="text lstspace"> </span>=<span class="text lstspace"> </span>0;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">21</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span><span class="text lstkeywords" style="color:#FF0000;">do</span><span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">22</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>c<span class="text lstspace"> </span>=<span class="text lstspace"> </span>str_rx[i<span class="text lstspace"> </span>+<span class="text lstspace"> </span>3];</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">23</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span><span class="text lstkeywords" style="color:#FF0000;">if</span><span class="text lstspace"> </span>(c<span class="text lstspace"> </span>!=<span class="text lstspace"> </span>’<span class="text" style="color:#000000;">,</span>’)<span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">24</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>Position[i]<span class="text lstspace"> </span>=<span class="text lstspace"> </span>c;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">25</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                        </span>i++;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">26</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">                </span>}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">27</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>}<span class="text lstspace"> </span><span class="text lstkeywords" style="color:#FF0000;">while</span><span class="text lstspace"> </span>(i<span class="text lstspace"> </span>&lt;<span class="text lstspace"> </span>20<span class="text lstspace"> </span>&amp;&amp;<span class="text lstspace"> </span>c<span class="text lstspace"> </span>!=<span class="text lstspace"> </span>’<span class="text" style="color:#000000;">\0</span>’<span class="text lstspace"> </span>&amp;&amp;<span class="text lstspace"> </span>c<span class="text lstspace"> </span>!=<span class="text lstspace"> </span>’<span class="text" style="color:#000000;">,</span>’);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">28</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>Position[i]<span class="text lstspace"> </span>=<span class="text lstspace"> </span>’<span class="text" style="color:#000000;">\0</span>’;<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">String<span class="text lstspace"> </span>0<span class="text lstspace"> </span>Terminieren</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">29</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>int32_t<span class="text lstspace"> </span>z;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">30</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>int32_t<span class="text lstspace"> </span>y;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">31</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>z<span class="text lstspace"> </span>=<span class="text lstspace"> </span>atol(Position);<span class="text lstspace">  </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">String<span class="text lstspace"> </span>in<span class="text lstspace"> </span>Zahl(long)<span class="text lstspace"> </span>umwandeln</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">32</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>y<span class="text lstspace"> </span>=<span class="text lstspace"> </span>z<span class="text lstspace"> </span>/<span class="text lstspace"> </span>7200;<span class="text lstspace">             </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Berechnung<span class="text lstspace"> </span>des<span class="text lstspace"> </span>Winkel</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">33</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>z<span class="text lstspace"> </span>=<span class="text lstspace"> </span>(z<span class="text lstspace"> </span>*<span class="text lstspace"> </span>71111)<span class="text lstspace">  </span>/1024;<span class="text lstspace">   </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Berechnung<span class="text lstspace"> </span>der<span class="text lstspace"> </span>Schritte</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">34</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>ltoa(y,<span class="text lstspace"> </span>Winkel,<span class="text lstspace">            </span>10<span class="text lstspace"> </span>);<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Winekl<span class="text lstspace"> </span>in<span class="text lstspace"> </span>String<span class="text lstspace"> </span>umwandeln</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">35</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>ltoa(z,<span class="text lstspace"> </span>Position,<span class="text lstspace">    </span>10<span class="text lstspace"> </span>);<span class="text lstspace"> </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Schritte<span class="text lstspace"> </span>in<span class="text lstspace"> </span>String<span class="text lstspace"> </span>umwandeln</span></span></td></tr></table></div></div></div></div><div id="Ch5.S7" class="section"><h3 class="title section-title"><span class="tag">5.7 </span>Platinenlayout und 19”-Einschub</h3><div id="Ch5.S7.p1" class="para"><p class="p">Der Mikrocontroller und seine Peripherie befanden sich noch auf dem STK500. Es soll ein Platinenlayout entwickelt werden, welches den Mikrocontroller und seine Peripherie enthält.<br class="break"/>Dazu wird ein Platinenlayout in der Open Source Software KiCad entwickelt. Diese bietet fast alles, was benötigt wird um ein Platinenlayout zu entwickeln. Ein Schaltplaneditor, ein Bauteileditor und ein Layouteditor. Da die Schrittmotorkarten als 19”-Einschübe realisiert sind, wird auch das Platinenlayout für den Mikrocontroller als 19”-Einschub entwickelt. Dazu gehören vor allem der Steckverbinder an der Rückseite der Platine und genügend Platz für die Verschraubung der Blende an der Vorderseite, sowie die Größe der Platine. Die Schaltungen wie sie auf dem STK500 vorhanden sind, werden im Schaltplaneditor von KiCad in den eigenen Schaltplan (siehe Abbildung <a href="#Ch5.F6" title="Figure 5.6 ‣ 5.7 Platinenlayout und 19”-Einschub ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.6</span></a>) übernommen.</p></div><div id="Ch5.F6" class="figure"><img src="" id="Ch5.F6.g1" class="graphics centering"/><div class="caption centering"><span class="tag">Figure 5.6: </span>Schaltplan</div></div><div id="Ch5.S7.p2" class="para"><p class="p">Anschließend wird das Layout im Layouteditor entwickelt. Dabei waren mehrere enge Vorgaben einzuhalten. Da in der Werkstatt des RheinAhrCampus keine Platinen mit <span class="text" style="background-color:#D9D9FF;">Durchkontaktierungen</span> hergestellt werden können, sollen <span class="text" style="background-color:#D9D9FF;">Vias</span> vermieden, IC-Sockel, Kondensatoren und Potis nur auf der Unterseite verlötet werden. Abschließend werden die benötigten Verbindungen zwischen den Bauteilen berechnet. Die Aufgabe übernimmt im allgemeinen ein <span class="text" style="background-color:#D9D9FF;">Autorouter</span>. Dies kann nicht in der Software KiCad selbst durchgeführt werden. Diese Funktionalität wird jedoch durch die Java-Web-Anwendung <em class="emph">Freeroute</em>[<span class="ref here">LABEL:sec:V_Software</span>] bereitgestellt. Da der Autorouter die Aufgabe nicht zufriedenstellend lösen konnte, mussten viele Verbindungen nachträglich manuell angelegt werden. Das fertige Layout (siehe Abbildung <a href="#Ch5.F7" title="Figure 5.7 ‣ 5.7 Platinenlayout und 19”-Einschub ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.7</span></a>) wurde von der Werkstatt am RheinAhrCampus gefertigt und anschließend bestückt.</p></div><div id="Ch5.F7" class="figure"><img src="" id="Ch5.F7.g1" class="graphics centering"/><div class="caption centering"><span class="tag">Figure 5.7: </span>Platinenlayout</div></div><div id="Ch5.S7.p3" class="para"><p class="p">Über den rückwärtigen Steckverbinder wird die Platine mit der Spannungsversorgung verbunden. Zusätzlich kommen hier auch die Signale der Endschalter an. An der Vorderseite der Platine wird eine Blende verbaut. Auf dieser Blende befinden sich das LC-Display, fünf Taster, 5 LEDs und 2 serielle Schnittstellen. Alle Bauteile sind mittels Flachbandkabel, steckbar, mit der Platine verbunden.<br class="break"/>Dadurch sind alle im Projekt verwendeten Komponenten auf einem 19”-Einschub (siehe Abbildung <a href="#Ch5.F8" title="Figure 5.8 ‣ 5.7 Platinenlayout und 19”-Einschub ‣ Chapter 5 Zeitlicher Arbeitsablauf" class="ref"><span class="text reftag">5.8</span></a>) vereint.</p></div><div id="Ch5.F8" class="figure"><img src="" id="Ch5.F8.g1" class="graphics centering"/><div class="caption centering"><span class="tag">Figure 5.8: </span>19”-Einschub</div></div></div></div><div id="Ch6" class="chapter"><h2 class="title chapter-title"><span class="tag">Chapter 6 </span>Probleme und Lösungen</h2><div id="Ch6.S1" class="section"><h3 class="title section-title"><span class="tag">6.1 </span>Entwicklungsumgebungen</h3><div id="Ch6.S1.SS1" class="subsection"><h4 class="title subsection-title"><span class="tag">6.1.1 </span>AVR Studio 5</h4><div id="Ch6.S1.SS1.p1" class="para"><p class="p"><em class="emph">AVR Studio 5</em>[<span class="ref here">LABEL:sec:V_Software</span>] ist eine von Atmel bereitgestellte Entwicklungsumgebung. Diese scheint jedoch eine fehlerhafte Bibliothek zu enthalten. Die Kombination aus Mikrocontroller ATmega324A und AVR Studio 5 erzeugte nicht nachvollziehbare Probleme. Bei dem selbem Programm und einem anderem Mikrocontroller oder einer anderen Entwicklungsumgebung tauchten keine Fehler auf.
In der Entwicklungsumgebung <em class="emph">Eclipse</em>[<span class="ref here">LABEL:sec:V_Software</span>] lies sich der Fehler reproduzieren wenn der Pfad der von Atmel bereitgestellten Bibliotheken eingestellt wurde. Eine von <em class="emph">WinAVR</em> bereitgestellte Bibliothek und eine selbst kompilierte <span class="text" style="background-color:#D9D9FF;">Toolchain</span> unter <em class="emph">Linux</em> zeigten diese Probleme nicht.<br class="break"/>Daher wurde zur <span class="text" style="background-color:#D9D9FF;">Open Source</span> Entwicklungsumgebung Eclipse mit freien Bibliotheken von WinAVR gewechselt. Dadurch wurde das Problem umgangen und das Projekt plattformunabhänig. Bis auf RapidForm2004 wurde somit nur noch freie Open Source Software verwendet.<br class="break"/></p></div></div><div id="Ch6.S1.SS2" class="subsection"><h4 class="title subsection-title"><span class="tag">6.1.2 </span>Eclipse</h4><div id="Ch6.S1.SS2.p1" class="para"><p class="p">Eclipse ist eine in Java programmierte freie open source Entwicklungsumgebung für Java. Sie lässt sich durch <span class="text" style="background-color:#D9D9FF;">Plugins</span> leicht für viele Programmiersprachen erweitern.<br class="break"/>Mit dem <em class="emph">CDT-Plugin</em>, dem <em class="emph">AVR-Plugin</em>, der Bibliothek von <em class="emph">WinAVR</em> und der Programmiersoftware <em class="emph">AVRDude</em> ist Eclipse eine vollwertige Entwicklungsumgebung für Mikrocontroller von Atmel.</p></div></div></div><div id="Ch6.S2" class="section"><h3 class="title section-title"><span class="tag">6.2 </span>Interrupts</h3><div id="Ch6.S2.p1" class="para"><p class="p">Viele Mikrocontroller bieten die Möglichkeit <em class="emph">eventbasierte</em> <span class="text" style="background-color:#D9D9FF;">Subroutinen</span> auszuführen. Wenn ein sogenannter <span class="text" style="background-color:#D9D9FF;">Interrupt</span> ausgelöst wird, wird das Hauptprogramm unterbrochen und eine entsprechende <span class="text" style="background-color:#D9D9FF;">Interrupt-Service-Routine</span>, kurz ISR, ausgeführt. Nach Beendigung der ISR wird das Hauptprogramm an der Stelle wieder aufgenommen, an der es unterbrochen wurde. ISR dürfen nur sehr wenige Befehle enthalten und sollten innerhalb weniger <span class="text" style="background-color:#D9D9FF;">Taktzyklen</span> abgeschlossen sein.<br class="break"/>Interrupts können z.B. der Überlauf eines internen Timer, oder ein externens Signal an einem Pin sein. Im Projekt werden Externe-Interrupts für die Endschalter, Timer-Überlauf-Interrupts für das Entprellen der Taster und der Watchdog-Interrupt zum erkennen von Fehlern genutzt.</p></div><div id="Ch6.S2.SS1" class="subsection"><h4 class="title subsection-title"><span class="tag">6.2.1 </span>Endschalter</h4><div id="Ch6.S2.SS1.p1" class="para"><p class="p">Die Endschalter sind über die Schrittmotorkarten und eine Brücke auf der Rückseite der Einschubsteckplätze mit der Mikrocontrollerplatine verbunden. Dort sind sie an 2 Interrupt Pins angeschlossen. Bei einem Flankenwechsel an den Pins wird ein Interrupt ausgelöst. <br class="break"/>Mit den Zeilen 1–2 des Codelistings <a href="#LST19" title="19 ‣ 6.2.1 Endschalter ‣ 6.2 Interrupts ‣ Chapter 6 Probleme und Lösungen" class="ref"><span class="text reftag">19</span></a> werden Pin-Change-Interrupts für bestimmte Pins zugelassen. Die Zeilen 3–7 und 8–12 zeigen die Interrupt-Service-Routinen für die beiden Interrupts.</p></div><div id="LST19" class="listing language_C"><div class="caption"><span class="tag">Listing 19: </span>ISR: Endschalter</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote">PCMSK3<span class="text lstspace">   </span>|=<span class="text lstspace"> </span>(<span class="text lstspace"> </span>1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>PCINT28<span class="text lstspace"> </span>);<span class="text lstspace">  </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Interrupts<span class="text lstspace"> </span>definierenPD4<span class="text lstspace"> </span>als<span class="text lstspace"> </span>Interrupt<span class="text lstspace"> </span>zulassen</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote">PCICR<span class="text lstspace">    </span>|=<span class="text lstspace"> </span>(<span class="text lstspace"> </span>1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>PCIE3<span class="text lstspace">   </span>);<span class="text lstspace">   </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">Pin<span class="text lstspace"> </span>Change<span class="text lstspace"> </span>Interrupt<span class="text lstspace"> </span>ControlR<span class="text lstspace"> </span>PCIE3<span class="text lstspace"> </span>setzen<span class="text lstspace"> </span>fuer<span class="text lstspace"> </span>PCINT30</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote">ISR(PCINT3_vect){<span class="text lstspace">   </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">+<span class="text lstspace"> </span>Endschalter<span class="text lstspace"> </span>Position<span class="text lstspace"> </span>erreicht</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">  </span>lcd_clrscr();</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">  </span>lcd_puts(”<span class="text" style="color:#000000;">Obere\nEndposition\nErreicht!</span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">6</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">  </span>LED_PORT<span class="text lstspace"> </span>^=<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>LED3);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">7</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">8</span></td>
    <td class="td"><span class="text lstline footnote">ISR(PCINT2_vect){<span class="text lstspace">   </span>//<span class="text lstspace" style="color:#008000;"> </span><span class="text" style="color:#008000;">-<span class="text lstspace"> </span>Endschalter<span class="text lstspace"> </span>Position<span class="text lstspace"> </span>erreicht</span></span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">9</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">  </span>lcd_clrscr();</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">10</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">  </span>lcd_puts(”<span class="text" style="color:#000000;">Untere\nEndposition\nErreicht!</span>”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">11</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">  </span>LED_PORT<span class="text lstspace"> </span>^=<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>LED3);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">12</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr></table></div></div><div id="Ch6.S2.SS2" class="subsection"><h4 class="title subsection-title"><span class="tag">6.2.2 </span>Watchdog</h4><div id="Ch6.S2.SS2.p1" class="para"><p class="p">Der <span class="text" style="background-color:#D9D9FF;">Watchdog</span> ist eine Sicherungseinrichtung des Mikrocontroller. In regelmäßigen Abständen wird überprüft ob das Watchdog-Bit gesetzt ist und anschließend zurück gesetzt. Das Bit muss innerhalb der voreingestellten Zeit immer wieder neu gesetzt werden. Dies kann mit der Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">wdt_reset()</span> realisiert werden. Ist das Bit nicht gesetzt, wird der Mikrocontroller zurückgesetzt. Dies geschieht z.B. bei ungewollten Endlosschleifen.<br class="break"/>Mit den Zeilen 3–10 des Codelisting <a href="#LST20" title="20 ‣ 6.2.2 Watchdog ‣ 6.2 Interrupts ‣ Chapter 6 Probleme und Lösungen" class="ref"><span class="text reftag">20</span></a> wird der Watchdog initialisiert und festgelegt in welchen Zeitintervallen das Watchdog-Bit überprüft werden soll. Der Ablauf zum einstellen des Zeitinveralls muss genau wie im Datenblatt des Mikrocontroller beschrieben eingehalten werden. Dies verhindert ein versehentliches Ändern der Einstellung.
Ist das Fusebit <em class="emph">WDTON</em> gesetzt kann der Watchdog nicht abgeschaltet werden (siehe Kapitel <a href="#Ch6.S3" title="6.3 Fuses ‣ Chapter 6 Probleme und Lösungen" class="ref"><span class="text reftag">6.3</span></a>).<br class="break"/>Wahlweise kann kurz vor dem zurücksetzen des Mikrocontroller noch die Watchdog-ISR durchlaufen werden. Im Projekt wird in der ISR die <em class="emph">Fehler-LED</em> eingeschaltet und eine Meldung auf dem LC-Display ausgegeben (siehe Codelisting <a href="#LST20" title="20 ‣ 6.2.2 Watchdog ‣ 6.2 Interrupts ‣ Chapter 6 Probleme und Lösungen" class="ref"><span class="text reftag">20</span></a> Zeilen 12-16).</p></div><div id="LST20" class="listing language_C"><div class="caption"><span class="tag">Listing 20: </span>Watchdog</div><table class="tabular"><tr class="tr">
    <td class="td linenumber"><span class="text tiny">1</span></td>
    <td class="td"><span class="text lstline footnote">include<span class="text lstspace"> </span>&lt;avr/wdt.h&gt;</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">2</span></td>
    <td class="td"><span class="text lstline footnote">//<span class="text lstspace"> </span>Initialisierung<span class="text lstspace"> </span>des<span class="text lstspace"> </span>Watchdog</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">3</span></td>
    <td class="td"><span class="text lstline footnote">void<span class="text lstspace"> </span>init_WDT(void)<span class="text lstspace"> </span>{</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">4</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>cli();</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">5</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>wdt_reset();</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">6</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>WDTCSR<span class="text lstspace"> </span>|=<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>WDCE)<span class="text lstspace"> </span>|<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>WDE);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">7</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>WDTCSR<span class="text lstspace"> </span>=<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>WDE)<span class="text lstspace"> </span>|<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>WDIE)<span class="text lstspace"> </span>|<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>WDP3)<span class="text lstspace"> </span>|<span class="text lstspace"> </span>(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>WDP0);<span class="text lstspace"> </span>//Watchdog<span class="text lstspace"> </span>8s</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">8</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>//WDTCSR<span class="text lstspace"> </span>=<span class="text lstspace"> </span>0x0F;<span class="text lstspace"> </span>//Watchdog<span class="text lstspace"> </span>Off</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">9</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">    </span>sei();</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">10</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">11</span></td>
    <td class="td"><span class="text lstline footnote">//<span class="text lstspace"> </span>Watchdog<span class="text lstspace"> </span>ISR</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">12</span></td>
    <td class="td"><span class="text lstline footnote">ISR(WDT_vect){</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">13</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>LED_PORT<span class="text lstspace"> </span>&amp;=~(1<span class="text lstspace"> </span>&lt;&lt;<span class="text lstspace"> </span>LED4);//<span class="text lstspace"> </span>LED5<span class="text lstspace"> </span>einschalten</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">14</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>lcd_clrscr();</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">15</span></td>
    <td class="td"><span class="text lstline footnote"><span class="text lstspace">        </span>lcd_puts(”Something<span class="text lstspace"> </span>went<span class="text lstspace"> </span>\nterribly<span class="text lstspace"> </span>wrong!\nRebooting!”);</span></td></tr><tr class="tr">
    <td class="td linenumber"><span class="text tiny">16</span></td>
    <td class="td"><span class="text lstline footnote">}</span></td></tr></table></div></div></div><div id="Ch6.S3" class="section"><h3 class="title section-title"><span class="tag">6.3 </span>Fuses</h3><div id="Ch6.S3.p1" class="para"><p class="p">Als <span class="text" style="background-color:#D9D9FF;">Fuses</span> werden Register bezeichnet mit denen sich, auf Hardwareebene, das Verhalten des Mikrocontrollers verändern lässt. Im Projekt wurden folgende Fuses problematisch.</p><ul id="Ch6.I1" class="itemize"><li id="Ch6.I1.i1" class="item"><div id="Ch6.I1.i1.p1" class="para"><p class="p"><span class="text bold">JTAGEN</span> - Ist dieses Bit gesetzt, kann an 4 Pins des <em class="emph">PortB</em> ein <span class="text" style="background-color:#D9D9FF;">JTAG-Debugger</span> angeschlossen werden. Debuggen auf Hardwareebene bietet viele Vorteile. Diese wurden im Projekt jedoch nicht genutzt, da kein JTAG-Debugger zur Verfügung stand und PortB für die LEDs genutzt wurde.
</p></div></li><li id="Ch6.I1.i2" class="item"><div id="Ch6.I1.i2.p1" class="para"><p class="p"><span class="text bold">WDTON</span> - Ist dieses Bit gesetzt, läuft der Watchdog-Timer immer mit. Wird der Watchdog dann nicht regelmäßig mit der Funktion <span class="text typewriter" style="color:#0000FF;background-color:#FFFFE6;">wdt_reset()</span> zurückgesetzt, startet der Mikrocontroller ständig neu.</p></div></li><li id="Ch6.I1.i3" class="item"><div id="Ch6.I1.i3.p1" class="para"><p class="p"><span class="text bold">CKDIV8</span> - Teilt den Systemtakt des Mikrocontroller durch 8. Dies ist Energiesparender. Der geringere Takt muss in F_CPU angepasst werden da sonst zeitkritische Prozesse mit der falschen Geschwindigkeit ablaufen. Das Bit wurde jedoch im Projekt nicht gesetzt.</p></div></li><li id="Ch6.I1.i4" class="item"><div id="Ch6.I1.i4.p1" class="para"><p class="p"><span class="text bold">CKOUT</span> - An einem Pin an <em class="emph">PortB</em> wird der Systemtakt ausgegeben. Dieser kann dann leicht mit einem Frequenz-Messgerät überprüft werden. Der Pin kann dann jedoch nicht anderweitig genutzt werden.</p></div></li><li id="Ch6.I1.i5" class="item"><div id="Ch6.I1.i5.p1" class="para"><p class="p"><span class="text bold">CKSELX</span> - Über diese 4 Bits kann der Systemtakt eingestellt werden.</p></div></li></ul></div><div id="Ch6.T1a" class="table"><div class="caption"><span class="tag">Table 6.1: </span>Fuses</div><table class="tabular"><tr class="tr">
    <td class="td l r t" align="left">OCDEN</td>
    <td class="td r t" align="left">On Chip Debugging</td></tr><tr class="tr">
    <td class="td l r t" align="left">JTAGEN</td>
    <td class="td r t" align="left">Hardware Debugging</td></tr><tr class="tr">
    <td class="td l r t" align="left">SPIEN</td>
    <td class="td r t" align="left">Serial Program and Data Downloading</td></tr><tr class="tr">
    <td class="td l r t" align="left">WDTON</td>
    <td class="td r t" align="left">Watchdog Timer always on</td></tr><tr class="tr">
    <td class="td l r t" align="left">EESAVE</td>
    <td class="td r t" align="left">EEPROM memory is preserved through the Chip Erase</td></tr><tr class="tr">
    <td class="td l r t" align="left">BOOTSZ1</td>
    <td class="td r t" align="left">Select Boot Size</td></tr><tr class="tr">
    <td class="td l r t" align="left">BOOTSZ0</td>
    <td class="td r t" align="left">Select Boot Size</td></tr><tr class="tr">
    <td class="td l r t" align="left">BOOTRST</td>
    <td class="td r t" align="left">Select Reset Vector</td></tr><tr class="tr">
    <td class="td l r t" align="left">CKDIV8</td>
    <td class="td r t" align="left">Divide clock by 8</td></tr><tr class="tr">
    <td class="td l r t" align="left">CKOUT</td>
    <td class="td r t" align="left">Clock output</td></tr><tr class="tr">
    <td class="td l r t" align="left">SUT1</td>
    <td class="td r t" align="left">Select start-up time</td></tr><tr class="tr">
    <td class="td l r t" align="left">SUT0</td>
    <td class="td r t" align="left">Select start-up time</td></tr><tr class="tr">
    <td class="td l r t" align="left">CKSEL3</td>
    <td class="td r t" align="left">Select Clock source</td></tr><tr class="tr">
    <td class="td l r t" align="left">CKSEL2</td>
    <td class="td r t" align="left">Select Clock source</td></tr><tr class="tr">
    <td class="td l r t" align="left">CKSEL1</td>
    <td class="td r t" align="left">Select Clock source</td></tr><tr class="tr">
    <td class="td b l r t" align="left">CKSEL0</td>
    <td class="td b r t" align="left">Select Clock source</td></tr></table></div></div></div><div id="Ch7" class="chapter"><h2 class="title chapter-title"><span class="tag">Chapter 7 </span>Fazit und weitere Möglichkeiten</h2><div id="Ch7.S1" class="section"><h3 class="title section-title"><span class="tag">7.1 </span>Fazit</h3><div id="Ch7.S1.p1" class="para"><p class="p">Das vorgegeben Ziel den Aufbau in Betrieb zu nehmen und mit einem Mikrocontroller so zu erweitern, dass die Erfassungssoftware RapidForm2004 kompatibel mit dem vorhandenen Drehtisch ist, wurde erreicht. Die Software kann vollständig genutzt werden und alle wesentlichen Funktionen der Schrittmotorsteuerungen werden von der Mikrocontroller Programmierung unterstützt. Im Anhang <span class="ref here">LABEL:sec:StepbyStep</span> befindet sich eine Schritt-für-Schritt Anleitung mit der auch Laien das System nutzen können.</p></div></div><div id="Ch7.S2" class="section"><h3 class="title section-title"><span class="tag">7.2 </span>Bekannte Probleme</h3><div id="Ch7.S2.p1" class="para"><p class="p">Bei einem abschließenden Test funktionierte das Anzeigen einer Meldung beim erreichen der Endschalter, auf dem Display nicht. Alle Verbindungen sind vorhanden und die Programmierung des Mikrocontrollers vollständig. Das Problem ist nicht bekannt und das Auffinden würde weitere Zeit in Anspruch nehmen.<br class="break"/>Das Display zeigt während der Rotation <em class="emph">0</em> anstatt dem Winkel an, um den rotiert wird. Für die Anzahl der Schritte funktionierte diese Anzeige. Vermutlich liegt hier ein Fehler in der Berechnung des Winkels vor.</p></div></div><div id="Ch7.S3" class="section"><h3 class="title section-title"><span class="tag">7.3 </span>Weitere Möglichkeiten</h3><div id="Ch7.S3.p1" class="para"><p class="p">Eine elegantere Lösung als die Befehle der Befehlssätze in einem Array zu speichern wäre es diese in verketteten Pointer Structs zu speichern. Diese Idee kam leider erst gegen Ende des Projektes und konnte daher aus Zeitmangel nicht mehr umgesetzt werden.<br class="break"/>Im Menü lassen sich zur Zeit nur voreingestellte Winkel bzw. Schrittzahlen auswählen. Hier könnte noch eine Funktion geschrieben werden die es dem Benutzer erlaubt Winkel frei einzustellen.
    </p></div></div></div><div id="bib" class="bibliography"><h3 class="title bibliography-title">Bibliography</h3></div><div id="idx" class="index"><h3 class="title index-title">Index</h3></div></div>
        </div>
    <div class="footer">June 25, 2012
      </div>
      </div>
    </body>
    </html>
