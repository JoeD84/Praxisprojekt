#define BAUD 9600
#include <util/setbaud.h>

void 	uart_init		() {	// Initialisierung der Schnittstellen
	UBRR0H = UBRRH_VALUE;		// UART 0 - IN (Rapidform Software/Terminal)
	UBRR0L = UBRRL_VALUE;
	UCSR0C = (3 << UCSZ00);
	UCSR0B |= (1 << TXEN0); 	//Transmitter Enabled
	UCSR0B |= (1 << RXEN0); 	// UART RX einschalten

	UBRR1H = UBRRH_VALUE;		// UART 1 - OUT (Stepper Karte/Drehtisch)
	UBRR1L = UBRRL_VALUE;
	UCSR1C = (3 << UCSZ00);
	UCSR1B |= (1 << TXEN1); 	//Transmitter Enabled
	UCSR1B |= (1 << RXEN1); 	// UART RX einschalten
}
void 	uart_put_charater	(unsigned char c, int dir) {	// Versenden von einzelnen Zeichen
	if (dir == D_RapidForm) {	// To Rapidform
		while (!(UCSR0A & (1 << UDRE0))) {}//warten bis Senden moeglich
		UDR0 = c; 		// sende Zeichen
	}
	else {				// To Stepper
		while (!(UCSR1A & (1 << UDRE1))) {}//warten bis Senden moeglich
		UDR1 = c; // sende Zeichen
	}
}
void 	uart_put_string		(char *s, int dir) {	//Versenden von ganzen Strings
	while (*s) // so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)"	{
		uart_put_charater(*s, dir);
		s++;
	}
} 

int 	uart_get_character	(int dir) {	// Empfang einzelner Zeichen
	if (dir == D_RapidForm) {
		while (!(UCSR0A & (1 << RXC0)))
			// warten bis Zeichen verfuegbar
			;
		return UDR0; // Zeichen aus UDR an Aufrufer zurueckgeben
	}
	if (dir == D_Stepper) {
		while (!(UCSR1A & (1 << RXC1)))
			// warten bis Zeichen verfuegbar
			;
		return UDR1; // Zeichen aus UDR an Aufrufer zurueckgeben
	}
	return -1;
}
void 	uart_get_string		(char * string_in, int dir) {	// Empfang von ganzen Strings
	char c;
	int i = 0;
	do {	// Schleife zum zusammenbauen einzelner Zeichen zu einem String
		c = uart_get_character(dir);	// Einzelnes Zeichen holen
		if (c != '\r') {		// Wenn kein Zeilenende Zeichen
			*string_in = c;		// Aktuelles Zeichen im String = Zeichen
			string_in += 1;		// Position im String hochzaehlen
			i++;			// Schleifenzaehler hoch zaehlen.
		}
	} while (i < 100 && c != '\r' && c != '\n'); // Maximal bis 100 Zeichen oder Zeilenende oder Zeilenvorschub
	*string_in = '\0';	// Stringende Null-Terminieren
	if (dir == D_Stepper)			// Dateneingangs LEDs ausschalten
		LED_PORT |= ( 1 << LED3 );	
	else
		LED_PORT |= ( 1 << LED2 );
}